!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACK_MASK	torrent/src/utp_stream.cpp	/^	ACK_MASK = 0xffff,$/;"	e	enum:libtorrent::__anon125	file:
ACLOCAL	torrent/include/libtorrent/Makefile	/^ACLOCAL = ${SHELL} \/home\/ysr\/project\/libtorrent\/build-aux\/missing aclocal-1.15$/;"	m
ACLOCAL_M4	torrent/include/libtorrent/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ADD_ARG	virt-p2v/include/guestfs-utils.h	39;"	d
ADD_ARG	virt-p2v/libguestfs/guestfs-utils.h	39;"	d
ADD_DATA_DISK	include/packet.h	/^	ADD_DATA_DISK,$/;"	e	enum:yzy_cmd
ADD_OUTSTANDING_ASYNC	torrent/include/libtorrent/debug.hpp	167;"	d
ADD_TASK	test/test.c	/^	ADD_TASK,$/;"	e	enum:BT_CMD	file:
AFX_DATASTREAM_H__D90A2534_EA73_4BEA_8B7E_87E59A3D1D26__INCLUDED_	torrent/bak/udp_tracker.cpp	365;"	d	file:
AFX_UDPTRACKERCLIENT_H__69B6ACC8_8193_4680_81D8_925B1550E92C__INCLUDED_	torrent/bak/udp_tracker.cpp	6;"	d	file:
AMTAR	torrent/include/libtorrent/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_DEFAULT_VERBOSITY	torrent/include/libtorrent/Makefile	/^AM_DEFAULT_VERBOSITY = 0$/;"	m
AM_V_GEN	torrent/include/libtorrent/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	torrent/include/libtorrent/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	torrent/include/libtorrent/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
ANNOUNCE_FLAGS_HPP	torrent/include/libtorrent/kademlia/announce_flags.hpp	34;"	d
AOE_MAJOR	src/linux.c	91;"	d	file:
AR	Makefile	/^AR = $(CROSS_COMPILE)ar$/;"	m
AR	qt_pro/Makefile	/^AR            = ar cqs$/;"	m
AR	torrent/Makefile	/^AR = $(CROSS_COMPILE)ar$/;"	m
AR	torrent/include/libtorrent/Makefile	/^AR = ar$/;"	m
AS	Makefile	/^AS = $(CROSS_COMPILE)as$/;"	m
AS	torrent/Makefile	/^AS = $(CROSS_COMPILE)as$/;"	m
ATARAID_MAJOR	src/linux.c	79;"	d	file:
AUTOCONF	torrent/include/libtorrent/Makefile	/^AUTOCONF = ${SHELL} \/home\/ysr\/project\/libtorrent\/build-aux\/missing autoconf$/;"	m
AUTOHEADER	torrent/include/libtorrent/Makefile	/^AUTOHEADER = ${SHELL} \/home\/ysr\/project\/libtorrent\/build-aux\/missing autoheader$/;"	m
AUTOMAKE	torrent/include/libtorrent/Makefile	/^AUTOMAKE = ${SHELL} \/home\/ysr\/project\/libtorrent\/build-aux\/missing automake-1.15$/;"	m
AWK	torrent/include/libtorrent/Makefile	/^AWK = gawk$/;"	m
AddDisk	src/StoreConfig.c	/^int AddDisk(PYZYGUID diskName, uint64_t size_lba)$/;"	f
AddStoreEntry	src/StoreConfig.c	/^static int AddStoreEntry(uint32_t difLevel, PYZYGUID name, PYZYGUID diskName, uint64_t sizeLba, uint64_t realLba, int type, PYZY_QCOW_ENTRY *diskList, uint32_t count) \/\/ï¿½Â½ï¿½Î»ï¿½Ã´ï¿½0ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½Ð¶ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½È?ï¿½ï¿½Î»ï¿½ï¿½Æ«ï¿½ï¿½$/;"	f	file:
AllocStoreSpace	src/StoreConfig.c	/^int AllocStoreSpace(uint32_t difLevel, PYZYGUID name, PYZYGUID diskName, uint64_t sizeLba, uint64_t realLba, int type, PYZY_QCOW_ENTRY *ppQe)$/;"	f
Announcing	torrent/bak/udp_tracker.cpp	/^DWORD CUDPTrackerClient::Announcing(BYTE* pInfoHash,BYTE * pPeerID,$/;"	f	class:CUDPTrackerClient
BASE_INSTALL_KEY	include/config.h	7;"	d
BASE_SECTION	include/config.h	6;"	d
BASIS_LOCALTIME	virt-p2v/include/p2v-config.h	/^  BASIS_LOCALTIME,          \/* RTC is localtime *\/$/;"	e	enum:basis
BASIS_UNKNOWN	virt-p2v/include/p2v-config.h	/^  BASIS_UNKNOWN,            \/* RTC could not be read *\/$/;"	e	enum:basis
BASIS_UTC	virt-p2v/include/p2v-config.h	/^  BASIS_UTC,                \/* RTC is either UTC or an offset from UTC *\/$/;"	e	enum:basis
BITROTATE_INLINE	virt-p2v/include/gnulib/bitrotate.h	31;"	d
BLKEXT_MAJOR	src/linux.c	98;"	d	file:
BLKFLSBUF	src/linux.c	22;"	d	file:
BLKGETLASTSECT	src/linux.c	24;"	d	file:
BLKGETSIZE	src/linux.c	21;"	d	file:
BLKGETSIZE64	src/linux.c	28;"	d	file:
BLKRRPART	src/linux.c	20;"	d	file:
BLKSETLASTSECT	src/linux.c	25;"	d	file:
BLKSSZGET	src/linux.c	23;"	d	file:
BLOCK_CONFIG	include/StoreConfig.h	2;"	d
BLOCK_GPT	include/gpt.h	2;"	d
BOOST_CPPFLAGS	torrent/include/libtorrent/Makefile	/^BOOST_CPPFLAGS = -I\/usr\/include$/;"	m
BOOST_LDFLAGS	torrent/include/libtorrent/Makefile	/^BOOST_LDFLAGS = -L\/usr\/lib\/x86_64-linux-gnu$/;"	m
BOOST_MP_CPP_INT_IMPORT_EXPORT_HPP	torrent/include/libtorrent/aux_/cppint_import_export.hpp	7;"	d
BOOST_PYTHON_LIB	torrent/include/libtorrent/Makefile	/^BOOST_PYTHON_LIB = $/;"	m
BOOST_SYMBOL_EXPORT	torrent/include/libtorrent/aux_/export.hpp	59;"	d
BOOST_SYMBOL_EXPORT	torrent/include/libtorrent/aux_/export.hpp	62;"	d
BOOST_SYMBOL_EXPORT	torrent/include/libtorrent/aux_/export.hpp	65;"	d
BOOST_SYMBOL_IMPORT	torrent/include/libtorrent/aux_/export.hpp	60;"	d
BOOST_SYMBOL_IMPORT	torrent/include/libtorrent/aux_/export.hpp	63;"	d
BOOST_SYMBOL_IMPORT	torrent/include/libtorrent/aux_/export.hpp	66;"	d
BOOST_SYSTEM_LIB	torrent/include/libtorrent/Makefile	/^BOOST_SYSTEM_LIB = -lboost_system$/;"	m
BOOST_SYSTEM_NOEXCEPT	torrent/src/bdecode.cpp	43;"	d	file:
BSWAP_16	include/base.h	66;"	d
BSWAP_32	include/base.h	67;"	d
BSWAP_64	include/base.h	68;"	d
BSWAP_8	include/base.h	65;"	d
BT_CMD	test/test.c	/^typedef enum BT_CMD {$/;"	g	file:
BT_CMD	test/test.c	/^}BT_CMD;$/;"	t	typeref:enum:BT_CMD	file:
BT_DIR	Makefile	/^BT_DIR := $(TOP_DIR)\/torrent$/;"	m
BT_DISK_FULL_ERR	include/error.h	/^    BT_DISK_FULL_ERR,           $/;"	e	enum:ERR_MSG_DESC
BT_DISK_FULL_ERR	qt_pro/global.h	/^    BT_DISK_FULL_ERR,$/;"	e	enum:ERR_MSG_DESC
BT_DISK_FULL_ERR	virt-p2v/src/conversion.c	/^    BT_DISK_FULL_ERR,    $/;"	e	enum:ERR_MSG_DESC	file:
BYTE	src/tools.c	/^typedef char BYTE;$/;"	t	file:
BYTE_TYPE	include/packet.h	72;"	d
BarStyle	qt_pro/QRoundProgressBar.h	/^    enum BarStyle$/;"	g	class:QRoundProgressBar
Bi	torrent/ed25519/precomp_data.h	/^static const ge_precomp Bi[8] = {$/;"	v
Big_str2u16	include/packet.h	12;"	d
Big_str2u32	include/packet.h	13;"	d
Big_u16ToStr	include/packet.h	15;"	d
Big_u32ToStr	include/packet.h	16;"	d
CANCEL_DOWNLOAD_DESKTOP	include/packet.h	/^	CANCEL_DOWNLOAD_DESKTOP,$/;"	e	enum:yzy_cmd
CANCEL_SEND_DESKTOP	include/packet.h	/^	CANCEL_SEND_DESKTOP = 1025,$/;"	e	enum:yzy_cmd
CASE	torrent/src/socket_type.cpp	115;"	d	file:
CASE	torrent/src/socket_type.cpp	187;"	d	file:
CASE	torrent/src/socket_type.cpp	202;"	d	file:
CASE	torrent/src/socket_type.cpp	52;"	d	file:
CASE	torrent/src/socket_type.cpp	62;"	d	file:
CASE	torrent/src/socket_type.cpp	98;"	d	file:
CASE	torrent/src/torrent.cpp	6772;"	d	file:
CASE	torrent/src/torrent.cpp	6784;"	d	file:
CATCH_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	131;"	d
CATCH_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	185;"	d
CATCH_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	214;"	d
CATCH_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	85;"	d
CC	Makefile	/^CC = $(CROSS_COMPILE)gcc$/;"	m
CC	qt_pro/Makefile	/^CC            = gcc$/;"	m
CC	torrent/Makefile	/^CC = $(CROSS_COMPILE)gcc$/;"	m
CC	torrent/include/libtorrent/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	torrent/include/libtorrent/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CDataStream	torrent/bak/udp_tracker.cpp	/^	CDataStream(char * szBuf,int isize)$/;"	f	class:CDataStream
CDataStream	torrent/bak/udp_tracker.cpp	/^class CDataStream  $/;"	c	file:
CFLAGS	Makefile	/^CFLAGS := -I. -I.\/qt_pro -I.\/include\/ -I.\/cJSON -L.\/lib -I.\/torrent\/include$/;"	m
CFLAGS	qt_pro/Makefile	/^CFLAGS        = -pipe -m64 -O2 -Wall -W -D_REENTRANT -fPIC $(DEFINES)$/;"	m
CFLAGS	torrent/Makefile	/^CFLAGS := -I. -I.\/qt_pro -I.\/include\/ -I.\/cJSON\/ -L.\/lib -I.\/libtorrent\/include -L.\/libtorrent\/lib $/;"	m
CFLAGS	torrent/include/libtorrent/Makefile	/^CFLAGS = -pthread -g -O2 -fvisibility=hidden$/;"	m
CFLAGS	virt-p2v/Makefile	/^CFLAGS := -I. -I.\/include\/  -I\/usr\/include\/gtk-2.0\/ -I\/usr\/include\/glib-2.0\/ -I\/usr\/lib\/glib-2.0\/include \\$/;"	m
CHAR16	include/gpt.h	/^typedef unsigned short      CHAR16;$/;"	t
CHAR64LONG16	torrent/src/sha1.cpp	/^	union CHAR64LONG16$/;"	u	namespace:libtorrent::__anon103	file:
CHARN	include/gpt.h	/^typedef char                CHARN;$/;"	t
CHAR_WIDTH	virt-p2v/include/gnulib/limits.h	91;"	d
CHAR_WIDTH	virt-p2v/include/gnulib/limits.in.h	90;"	d
CHECK_PARTIAL_OK	virt-p2v/src/ssh.c	140;"	d	file:
CHK_DIR_EXISTS	qt_pro/Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
CHOMP	virt-p2v/src/utils.c	35;"	d	file:
CLEANUP_FCLOSE	virt-p2v/include/cleanups.h	25;"	d
CLEANUP_FCLOSE	virt-p2v/include/cleanups.h	47;"	d
CLEANUP_FCLOSE	virt-p2v/libguestfs/cleanups.h	25;"	d
CLEANUP_FCLOSE	virt-p2v/libguestfs/cleanups.h	47;"	d
CLEANUP_FREE	virt-p2v/include/cleanups.h	23;"	d
CLEANUP_FREE	virt-p2v/include/cleanups.h	46;"	d
CLEANUP_FREE	virt-p2v/libguestfs/cleanups.h	23;"	d
CLEANUP_FREE	virt-p2v/libguestfs/cleanups.h	46;"	d
CLEANUP_FREE_STRING_LIST	virt-p2v/include/cleanups.h	29;"	d
CLEANUP_FREE_STRING_LIST	virt-p2v/include/cleanups.h	49;"	d
CLEANUP_FREE_STRING_LIST	virt-p2v/libguestfs/cleanups.h	29;"	d
CLEANUP_FREE_STRING_LIST	virt-p2v/libguestfs/cleanups.h	49;"	d
CLEANUP_PCLOSE	virt-p2v/include/cleanups.h	27;"	d
CLEANUP_PCLOSE	virt-p2v/include/cleanups.h	48;"	d
CLEANUP_PCLOSE	virt-p2v/libguestfs/cleanups.h	27;"	d
CLEANUP_PCLOSE	virt-p2v/libguestfs/cleanups.h	48;"	d
CLEANUP_XMLBUFFERFREE	virt-p2v/include/cleanups.h	33;"	d
CLEANUP_XMLBUFFERFREE	virt-p2v/include/cleanups.h	51;"	d
CLEANUP_XMLBUFFERFREE	virt-p2v/libguestfs/cleanups.h	33;"	d
CLEANUP_XMLBUFFERFREE	virt-p2v/libguestfs/cleanups.h	51;"	d
CLEANUP_XMLFREE	virt-p2v/include/cleanups.h	31;"	d
CLEANUP_XMLFREE	virt-p2v/include/cleanups.h	50;"	d
CLEANUP_XMLFREE	virt-p2v/libguestfs/cleanups.h	31;"	d
CLEANUP_XMLFREE	virt-p2v/libguestfs/cleanups.h	50;"	d
CLEANUP_XMLFREEDOC	virt-p2v/include/cleanups.h	35;"	d
CLEANUP_XMLFREEDOC	virt-p2v/include/cleanups.h	52;"	d
CLEANUP_XMLFREEDOC	virt-p2v/libguestfs/cleanups.h	35;"	d
CLEANUP_XMLFREEDOC	virt-p2v/libguestfs/cleanups.h	52;"	d
CLEANUP_XMLFREETEXTWRITER	virt-p2v/include/cleanups.h	39;"	d
CLEANUP_XMLFREETEXTWRITER	virt-p2v/include/cleanups.h	54;"	d
CLEANUP_XMLFREETEXTWRITER	virt-p2v/libguestfs/cleanups.h	39;"	d
CLEANUP_XMLFREETEXTWRITER	virt-p2v/libguestfs/cleanups.h	54;"	d
CLEANUP_XMLFREEURI	virt-p2v/include/cleanups.h	37;"	d
CLEANUP_XMLFREEURI	virt-p2v/include/cleanups.h	53;"	d
CLEANUP_XMLFREEURI	virt-p2v/libguestfs/cleanups.h	37;"	d
CLEANUP_XMLFREEURI	virt-p2v/libguestfs/cleanups.h	53;"	d
CLEANUP_XMLXPATHFREECONTEXT	virt-p2v/include/cleanups.h	41;"	d
CLEANUP_XMLXPATHFREECONTEXT	virt-p2v/include/cleanups.h	55;"	d
CLEANUP_XMLXPATHFREECONTEXT	virt-p2v/libguestfs/cleanups.h	41;"	d
CLEANUP_XMLXPATHFREECONTEXT	virt-p2v/libguestfs/cleanups.h	55;"	d
CLEANUP_XMLXPATHFREEOBJECT	virt-p2v/include/cleanups.h	43;"	d
CLEANUP_XMLXPATHFREEOBJECT	virt-p2v/include/cleanups.h	56;"	d
CLEANUP_XMLXPATHFREEOBJECT	virt-p2v/libguestfs/cleanups.h	43;"	d
CLEANUP_XMLXPATHFREEOBJECT	virt-p2v/libguestfs/cleanups.h	56;"	d
CLEAR_ALL_DESKTOP	include/packet.h	/^    CLEAR_ALL_DESKTOP,$/;"	e	enum:yzy_cmd
CLEAR_ALL_DESKTOP	test/test.c	/^    CLEAR_ALL_DESKTOP,$/;"	e	enum:yzy_cmd	file:
CLIENT_BUF	include/client.h	7;"	d
CLIENT_CONNECT_PIPE	include/socket.h	/^    CLIENT_CONNECT_PIPE = 1,$/;"	e	enum:PIPE_MSG
CLIENT_CONNECT_PIPE	qt_pro/global.h	/^    CLIENT_CONNECT_PIPE = 1,$/;"	e	enum:PIPE_MSG
CLIENT_DISCONNECT_PIPE	include/socket.h	/^    CLIENT_DISCONNECT_PIPE,$/;"	e	enum:PIPE_MSG
CLIENT_DISCONNECT_PIPE	qt_pro/global.h	/^    CLIENT_DISCONNECT_PIPE,$/;"	e	enum:PIPE_MSG
CLIENT_DOWN_PIPE	include/socket.h	/^    CLIENT_DOWN_PIPE,$/;"	e	enum:PIPE_MSG
CLIENT_DOWN_PIPE	qt_pro/global.h	/^    CLIENT_DOWN_PIPE,$/;"	e	enum:PIPE_MSG
CLIENT_ONLINE_PIPE	include/socket.h	/^    CLIENT_ONLINE_PIPE,$/;"	e	enum:PIPE_MSG
CLIENT_ONLINE_PIPE	qt_pro/global.h	/^    CLIENT_ONLINE_PIPE,$/;"	e	enum:PIPE_MSG
CLOSE_FILE_INTERVAL	torrent/src/settings_pack.cpp	/^constexpr int CLOSE_FILE_INTERVAL = 0;$/;"	m	namespace:libtorrent	file:
CLOSE_FILE_INTERVAL	torrent/src/settings_pack.cpp	/^constexpr int CLOSE_FILE_INTERVAL = 120;$/;"	m	namespace:libtorrent	file:
CMDLINE_SOURCE_COMMAND_LINE	virt-p2v/include/p2v.h	73;"	d
CMDLINE_SOURCE_PROC_CMDLINE	virt-p2v/include/p2v.h	74;"	d
CNetworkByteOrder	torrent/bak/udp_tracker.cpp	/^class CNetworkByteOrder$/;"	c	file:
COMPAQ_SMART2_MAJOR	src/linux.c	62;"	d	file:
COMPAQ_SMART2_MAJOR1	src/linux.c	63;"	d	file:
COMPAQ_SMART2_MAJOR2	src/linux.c	64;"	d	file:
COMPAQ_SMART2_MAJOR3	src/linux.c	65;"	d	file:
COMPAQ_SMART2_MAJOR4	src/linux.c	66;"	d	file:
COMPAQ_SMART2_MAJOR5	src/linux.c	67;"	d	file:
COMPAQ_SMART2_MAJOR6	src/linux.c	68;"	d	file:
COMPAQ_SMART2_MAJOR7	src/linux.c	69;"	d	file:
COMPAQ_SMART_MAJOR	src/linux.c	70;"	d	file:
COMPAQ_SMART_MAJOR1	src/linux.c	71;"	d	file:
COMPAQ_SMART_MAJOR2	src/linux.c	72;"	d	file:
COMPAQ_SMART_MAJOR3	src/linux.c	73;"	d	file:
COMPAQ_SMART_MAJOR4	src/linux.c	74;"	d	file:
COMPAQ_SMART_MAJOR5	src/linux.c	75;"	d	file:
COMPAQ_SMART_MAJOR6	src/linux.c	76;"	d	file:
COMPAQ_SMART_MAJOR7	src/linux.c	77;"	d	file:
COMPILE	virt-p2v/src/ssh.c	154;"	d	file:
COMPILETIME_OPTIONS	torrent/include/libtorrent/Makefile	/^COMPILETIME_OPTIONS =  -DTORRENT_USE_OPENSSL -DTORRENT_USE_LIBCRYPTO  -DBOOST_ASIO_HAS_STD_CHRONO=1  -DBOOST_EXCEPTION_DISABLE  -DBOOST_ASIO_ENABLE_CANCELIO  -DTORRENT_LINKING_SHARED $/;"	m
COMPLETE_ASYNC	torrent/include/libtorrent/debug.hpp	168;"	d
COMPRESS	qt_pro/Makefile	/^COMPRESS      = gzip -9f$/;"	m
CONFIGWINDOW_H	qt_pro/configwindow.h	2;"	d
CONFIGWINDOW_PAGE	qt_pro/global.h	/^    CONFIGWINDOW_PAGE,$/;"	e	enum:WINDOW_PAGE
CONFIG_CLEAN_FILES	torrent/include/libtorrent/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	torrent/include/libtorrent/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_COMPILER	Makefile	/^CONFIG_COMPILER = gnu$/;"	m
CONFIG_COMPILER	torrent/Makefile	/^CONFIG_COMPILER = gnu$/;"	m
CONFIG_DEFAULT_NULL	include/config.h	37;"	d
CONFIG_FILE	include/config.h	4;"	d
CONVERT_UTF_H_INCLUDED	torrent/include/libtorrent/ConvertUTF.h	83;"	d
COPY	qt_pro/Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	qt_pro/Makefile	/^COPY_DIR      = $(COPY) -r$/;"	m
COPY_FILE	qt_pro/Makefile	/^COPY_FILE     = $(COPY)$/;"	m
CP	Makefile	/^CP = cp$/;"	m
CP	torrent/Makefile	/^CP = cp$/;"	m
CPP	torrent/include/libtorrent/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	torrent/include/libtorrent/Makefile	/^CPPFLAGS = -I\/usr\/include $/;"	m
CPeerHostInfo	torrent/bak/udp_tracker.cpp	/^class CPeerHostInfo$/;"	c	file:
CROSS_COMPILE	Makefile	/^CROSS_COMPILE = #arm-$/;"	m
CROSS_COMPILE	torrent/Makefile	/^CROSS_COMPILE = #arm-$/;"	m
CTAGS	torrent/include/libtorrent/Makefile	/^CTAGS = ctags$/;"	m
CTRACE_HIST_SIZE	torrent/include/libtorrent/aux_/route.h	332;"	d
CTRACE_STACK_SIZE	torrent/include/libtorrent/aux_/route.h	331;"	d
CUDPTrackerClient	torrent/bak/udp_tracker.cpp	/^CUDPTrackerClient::CUDPTrackerClient()$/;"	f	class:CUDPTrackerClient
CUDPTrackerClient	torrent/bak/udp_tracker.cpp	/^class CUDPTrackerClient  $/;"	c	file:
CXX	Makefile	/^CXX = $(CROSS_COMPILE)g++$/;"	m
CXX	qt_pro/Makefile	/^CXX           = g++$/;"	m
CXX	torrent/Makefile	/^CXX = $(CROSS_COMPILE)g++$/;"	m
CXX	torrent/include/libtorrent/Makefile	/^CXX = g++ -std=c++11$/;"	m
CXXCPP	torrent/include/libtorrent/Makefile	/^CXXCPP = g++ -E -std=c++11$/;"	m
CXXDEPMODE	torrent/include/libtorrent/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = $(CFLAGS)$/;"	m
CXXFLAGS	qt_pro/Makefile	/^CXXFLAGS      = -pipe -m64 -O2 -Wall -W -D_REENTRANT -fPIC $(DEFINES)$/;"	m
CXXFLAGS	torrent/Makefile	/^CXXFLAGS = $(CFLAGS) -std=c++11  -lboost_system $/;"	m
CXXFLAGS	torrent/include/libtorrent/Makefile	/^CXXFLAGS = -g -O2 -ftemplate-depth=512 -Wno-format-zero-length -fvisibility=hidden -fvisibility-inlines-hidden$/;"	m
CYGPATH_W	torrent/include/libtorrent/Makefile	/^CYGPATH_W = echo$/;"	m
C_CTYPE_ASCII	virt-p2v/include/gnulib/c-ctype.h	74;"	d
C_CTYPE_H	virt-p2v/include/gnulib/c-ctype.h	24;"	d
C_CTYPE_INLINE	virt-p2v/include/gnulib/c-ctype.h	33;"	d
CancelSocketOperate	torrent/bak/udp_tracker.cpp	/^void CUDPTrackerClient::CancelSocketOperate()$/;"	f	class:CUDPTrackerClient
Ch	torrent/src/sha512.cpp	98;"	d	file:
ChangeBackFile	test/check.c	/^int ChangeBackFile(PDISK_HANDLE_ITEM path, PYZY_QCOW_ENTRY pCurrent, PYZY_QCOW_ENTRY pBacking)$/;"	f
CheckReponse	torrent/bak/tracker.cpp	/^int btTracker::CheckReponse()$/;"	f	class:btTracker
ConfigWindow	qt_pro/configwindow.cpp	/^ConfigWindow::ConfigWindow(QWidget *parent) :$/;"	f	class:ConfigWindow
ConfigWindow	qt_pro/configwindow.h	/^class ConfigWindow : public QWidget$/;"	c
Connect	torrent/bak/udp_tracker.cpp	/^BOOL CUDPTrackerClient::Connect(const char * szServer,WORD wPort)$/;"	f	class:CUDPTrackerClient
ConversionFlags	torrent/include/libtorrent/ConvertUTF.h	/^} ConversionFlags;$/;"	t	typeref:enum:__anon18
ConversionResult	torrent/include/libtorrent/ConvertUTF.h	/^enum ConversionResult {$/;"	g
ConvertUTF16toUTF32	torrent/src/ConvertUTF.cpp	/^ConversionResult ConvertUTF16toUTF32 ($/;"	f
ConvertUTF16toUTF8	torrent/src/ConvertUTF.cpp	/^ConversionResult ConvertUTF16toUTF8 ($/;"	f
ConvertUTF32toUTF16	torrent/src/ConvertUTF.cpp	/^ConversionResult ConvertUTF32toUTF16 ($/;"	f
ConvertUTF32toUTF8	torrent/src/ConvertUTF.cpp	/^ConversionResult ConvertUTF32toUTF8 ($/;"	f
ConvertUTF8toUTF16	torrent/src/ConvertUTF.cpp	/^ConversionResult ConvertUTF8toUTF16 ($/;"	f
ConvertUTF8toUTF32	torrent/src/ConvertUTF.cpp	/^ConversionResult ConvertUTF8toUTF32 ($/;"	f
DAC960_MAJOR	src/linux.c	78;"	d	file:
DASD_MAJOR	src/linux.c	89;"	d	file:
DATA_ENCRYPT	include/socket.h	11;"	d
DATA_ENCRYPT	qt_pro/pipethread.h	12;"	d
DATA_ENCRYPT_OFFSET	qt_pro/pipethread.h	13;"	d
DATA_LEN_OFFSET	include/socket.h	13;"	d
DATA_LEN_OFFSET	qt_pro/pipethread.h	15;"	d
DATA_ORDER_OFFSET	include/socket.h	12;"	d
DATA_ORDER_OFFSET	qt_pro/pipethread.h	14;"	d
DATA_SIZE	include/socket.h	15;"	d
DATA_SIZE	qt_pro/pipethread.h	6;"	d
DATA_SYN	include/socket.h	9;"	d
DATA_SYN	qt_pro/pipethread.h	10;"	d
DATA_SYN_OFFSET	include/socket.h	10;"	d
DATA_SYN_OFFSET	qt_pro/pipethread.h	11;"	d
DEBUG	Makefile	/^DEBUG = -g #-O2$/;"	m
DEBUG	include/base.h	44;"	d
DEBUG	include/base.h	60;"	d
DEBUG	qt_pro/global.h	16;"	d
DEBUG	qt_pro/global.h	29;"	d
DEBUG	torrent/Makefile	/^DEBUG = -O2 #-g #-O2$/;"	m
DEBUG	torrent/src/file_storage.cpp	791;"	d	file:
DEBUG	torrent/src/storage.cpp	593;"	d	file:
DEBUG	virt-p2v/src/conversion.c	60;"	d	file:
DEBUGFLAGS	torrent/include/libtorrent/Makefile	/^DEBUGFLAGS = -g0 -Os$/;"	m
DEBUG_CACHE	torrent/src/block_cache.cpp	155;"	d	file:
DEBUG_DISK_THREAD	torrent/src/disk_io_thread.cpp	62;"	d	file:
DEBUG_STDERR	virt-p2v/include/p2v.h	29;"	d
DEBUG_STORAGE	torrent/src/disk_job_fence.cpp	38;"	d	file:
DECL_FLAG	torrent/include/libtorrent/add_torrent_params.hpp	104;"	d
DECL_FLAG	torrent/include/libtorrent/add_torrent_params.hpp	127;"	d
DECL_FLAG	torrent/src/add_torrent_params.cpp	44;"	d	file:
DECL_FLAG	torrent/src/add_torrent_params.cpp	67;"	d	file:
DEFAULT_CLUSTER_SIZE	include/qcow2.h	6;"	d
DEFAULT_CLUSTER_SIZE	test/check.c	4;"	d	file:
DEFAULT_HANDLING	virt-p2v/include/gnulib/msvc-inval.h	55;"	d
DEFAULT_IP_VALUE	include/config.h	34;"	d
DEFAULT_PORT_VALUE	include/config.h	35;"	d
DEFINES	Makefile	/^DEFINES := -D QT$/;"	m
DEFINES	qt_pro/Makefile	/^DEFINES       = -DQT_DEPRECATED_WARNINGS -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -DQT_SHARED$/;"	m
DEFS	torrent/include/libtorrent/Makefile	/^DEFS = -DPACKAGE_NAME=\\"libtorrent-rasterbar\\" -DPACKAGE_TARNAME=\\"libtorrent-rasterbar\\" -DPACKAGE_VERSION=\\"1.2.6\\" -DPACKAGE_STRING=\\"libtorrent-rasterbar\\ 1.2.6\\" -DPACKAGE_BUGREPORT=\\"arvid@libtorrent.org\\" -DPACKAGE_URL=\\"http:\/\/www.libtorrent.org\\" -DPACKAGE=\\"libtorrent-rasterbar\\" -DVERSION=\\"1.2.6\\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\\".libs\/\\" -DHAVE_PTHREAD=1 -DHAVE_BOOST=\/\\*\\*\/ -DHAVE_CXX11=1 -DHAVE_BOOST_SYSTEM=\/\\*\\*\/ -DHAVE_CLOCK_GETTIME=1 -DNDEBUG=1 -DTORRENT_USE_INVARIANT_CHECKS=0 -DTORRENT_USE_OPENSSL=1 -DTORRENT_USE_LIBCRYPTO=1 -DBOOST_ASIO_HAS_STD_CHRONO=1 -DBOOST_EXCEPTION_DISABLE=1 -DBOOST_ASIO_ENABLE_CANCELIO=1 -DTORRENT_BUILDING_SHARED=1$/;"	m
DELETE	include/packet.h	/^    DELETE,$/;"	e	enum:yzy_cmd
DELETE	test/test.c	/^    DELETE,$/;"	e	enum:yzy_cmd	file:
DEL_DIR	qt_pro/Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	qt_pro/Makefile	/^DEL_FILE      = rm -f$/;"	m
DEL_TASK	test/test.c	/^	DEL_TASK,$/;"	e	enum:BT_CMD	file:
DEPDIR	torrent/include/libtorrent/Makefile	/^DEPDIR = .deps$/;"	m
DEPRECATED_SET	torrent/src/settings_pack.cpp	101;"	d	file:
DEPRECATED_SET	torrent/src/settings_pack.cpp	358;"	d	file:
DEPRECATED_SET	torrent/src/settings_pack.cpp	98;"	d	file:
DEPRECATED_SET_STR	torrent/src/settings_pack.cpp	102;"	d	file:
DEPRECATED_SET_STR	torrent/src/settings_pack.cpp	99;"	d	file:
DESTDIR	qt_pro/Makefile	/^DESTDIR       = ..\/lib\/$/;"	m
DHT_OBSERVER_HPP	torrent/include/libtorrent/kademlia/dht_observer.hpp	34;"	d
DIALOGWINDOW_H	qt_pro/dialogwindow.h	2;"	d
DIALOGWINDOW_PAGE	qt_pro/global.h	/^    DIALOGWINDOW_PAGE,$/;"	e	enum:WINDOW_PAGE
DIALOG_ERROR	qt_pro/dialogwindow.h	/^    DIALOG_ERROR,$/;"	e	enum:DIALOG_TYPE
DIALOG_INSTALL	qt_pro/dialogwindow.h	/^    DIALOG_INSTALL,$/;"	e	enum:DIALOG_TYPE
DIALOG_NET	qt_pro/dialogwindow.h	/^    DIALOG_NET = 0,$/;"	e	enum:DIALOG_TYPE
DIALOG_TYPE	qt_pro/dialogwindow.h	/^typedef enum DIALOG_TYPE{$/;"	g
DIALOG_TYPE	qt_pro/dialogwindow.h	/^}DIALOG_TYPE;$/;"	t	typeref:enum:DIALOG_TYPE
DIALOG_UNINSTALL	qt_pro/dialogwindow.h	/^    DIALOG_UNINSTALL,$/;"	e	enum:DIALOG_TYPE
DIE	include/base.h	54;"	d
DIE	include/base.h	62;"	d
DIE	qt_pro/global.h	24;"	d
DIE	qt_pro/global.h	31;"	d
DIFF_DOWN_TORRENT	include/packet.h	/^	DIFF_DOWN_TORRENT = 9023,$/;"	e	enum:yzy_cmd
DIRECTORY_SEPARATOR	virt-p2v/include/gnulib/dirname.h	27;"	d
DIRNAME_H_	virt-p2v/include/gnulib/dirname.h	20;"	d
DISKS_COL_CONVERT	virt-p2v/src/gui.c	/^  DISKS_COL_CONVERT = 0,$/;"	e	enum:__anon165	file:
DISKS_COL_DEVICE	virt-p2v/src/gui.c	/^  DISKS_COL_DEVICE,$/;"	e	enum:__anon165	file:
DISK_NO_FOUND_ERR	include/error.h	/^	DISK_NO_FOUND_ERR,$/;"	e	enum:ERR_MSG_DESC
DISK_NO_FOUND_ERR	qt_pro/global.h	/^    DISK_NO_FOUND_ERR,$/;"	e	enum:ERR_MSG_DESC
DISK_NO_FOUND_ERR	virt-p2v/src/conversion.c	/^    DISK_NO_FOUND_ERR,$/;"	e	enum:ERR_MSG_DESC	file:
DISK_TYPE_HD	include/device.h	/^	DISK_TYPE_HD,$/;"	e	enum:disk_type
DISK_TYPE_USB	include/device.h	/^	DISK_TYPE_USB,$/;"	e	enum:disk_type
DISPLAY	Makefile	/^DISPLAY := QT$/;"	m
DIST	qt_pro/Makefile	/^DIST          = \/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/mkspecs\/common\/g++.conf \\$/;"	m
DISTFILES	torrent/include/libtorrent/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_COMMON	torrent/include/libtorrent/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(nobase_include_HEADERS) \\$/;"	m
DIST_SOURCES	torrent/include/libtorrent/Makefile	/^DIST_SOURCES =$/;"	m
DLLTOOL	torrent/include/libtorrent/Makefile	/^DLLTOOL = false$/;"	m
DLOG	torrent/src/block_cache.cpp	158;"	d	file:
DLOG	torrent/src/block_cache.cpp	160;"	d	file:
DLOG	torrent/src/disk_io_thread.cpp	73;"	d	file:
DLOG	torrent/src/disk_job_fence.cpp	41;"	d	file:
DLOG	torrent/src/disk_job_fence.cpp	43;"	d	file:
DONE_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	135;"	d
DONE_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	195;"	d
DONE_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	216;"	d
DONE_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	87;"	d
DOUBLE_SLASH_IS_DISTINCT_ROOT	virt-p2v/include/gnulib/dirname.h	31;"	d
DOWNLOADWINDOW_H	qt_pro/downloadwindow.h	2;"	d
DOWNLOAD_DESKTOP	include/packet.h	/^	DOWNLOAD_DESKTOP,$/;"	e	enum:yzy_cmd
DSYMUTIL	torrent/include/libtorrent/Makefile	/^DSYMUTIL = $/;"	m
DUMPBIN	torrent/include/libtorrent/Makefile	/^DUMPBIN = $/;"	m
Data1	include/StoreConfig.h	/^    uint32_t Data1;$/;"	m	struct:_yzyGUID
Data2	include/StoreConfig.h	/^    uint16_t Data2;$/;"	m	struct:_yzyGUID
Data3	include/StoreConfig.h	/^    uint16_t Data3;$/;"	m	struct:_yzyGUID
Data4	include/StoreConfig.h	/^    uint64_t Data4;$/;"	m	struct:_yzyGUID
DeleteStoreEntry	src/StoreConfig.c	/^static int DeleteStoreEntry(uint32_t difLevel, PYZYGUID name)$/;"	f	file:
DialogWindow	qt_pro/dialogwindow.cpp	/^DialogWindow::DialogWindow(QWidget *parent) :$/;"	f	class:DialogWindow
DialogWindow	qt_pro/dialogwindow.h	/^class DialogWindow : public QWidget$/;"	c
Disconnect	torrent/bak/udp_tracker.cpp	/^BOOL CUDPTrackerClient::Disconnect()$/;"	f	class:CUDPTrackerClient
DiskDriver	include/gpt.h	/^}DiskDriver;$/;"	t	typeref:struct:_DiskDriver
DownloadWindow	qt_pro/downloadwindow.h	/^class DownloadWindow : public QWidget$/;"	c
DownloadWindow	qt_pro/ui_downloadwindow.h	/^    class DownloadWindow: public Ui_DownloadWindow {};$/;"	c	namespace:Ui
EADDRINUSE	virt-p2v/include/gnulib/errno.in.h	108;"	d
EADDRNOTAVAIL	virt-p2v/include/gnulib/errno.in.h	109;"	d
EAFNOSUPPORT	virt-p2v/include/gnulib/errno.in.h	107;"	d
EALREADY	virt-p2v/include/gnulib/errno.in.h	99;"	d
EBADMSG	virt-p2v/include/gnulib/errno.in.h	203;"	d
EBADMSG	virt-p2v/include/gnulib/errno.in.h	58;"	d
ECANCELED	virt-p2v/include/gnulib/errno.in.h	238;"	d
ECANCELED	virt-p2v/include/gnulib/errno.in.h	83;"	d
ECHO_C	torrent/include/libtorrent/Makefile	/^ECHO_C = $/;"	m
ECHO_N	torrent/include/libtorrent/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	torrent/include/libtorrent/Makefile	/^ECHO_T = $/;"	m
ECONNABORTED	virt-p2v/include/gnulib/errno.in.h	223;"	d
ECONNABORTED	virt-p2v/include/gnulib/errno.in.h	78;"	d
ECONNREFUSED	virt-p2v/include/gnulib/errno.in.h	117;"	d
ECONNRESET	virt-p2v/include/gnulib/errno.in.h	112;"	d
ED25519_HPP	torrent/include/libtorrent/ed25519.hpp	2;"	d
EDESTADDRREQ	virt-p2v/include/gnulib/errno.in.h	101;"	d
EDQUOT	virt-p2v/include/gnulib/errno.in.h	143;"	d
EDQUOT	virt-p2v/include/gnulib/errno.in.h	233;"	d
EGREP	torrent/include/libtorrent/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EHOSTDOWN	virt-p2v/include/gnulib/errno.in.h	140;"	d
EHOSTUNREACH	virt-p2v/include/gnulib/errno.in.h	119;"	d
EIDRM	virt-p2v/include/gnulib/errno.in.h	183;"	d
EIDRM	virt-p2v/include/gnulib/errno.in.h	43;"	d
EILSEQ	virt-p2v/include/gnulib/errno.in.h	274;"	d
EINPROGRESS	virt-p2v/include/gnulib/errno.in.h	98;"	d
EISCONN	virt-p2v/include/gnulib/errno.in.h	114;"	d
ELOOP	virt-p2v/include/gnulib/errno.in.h	118;"	d
EMSGSIZE	virt-p2v/include/gnulib/errno.in.h	102;"	d
EMULTIHOP	virt-p2v/include/gnulib/errno.in.h	154;"	d
EMULTIHOP	virt-p2v/include/gnulib/errno.in.h	198;"	d
ENETDOWN	virt-p2v/include/gnulib/errno.in.h	110;"	d
ENETRESET	virt-p2v/include/gnulib/errno.in.h	218;"	d
ENETRESET	virt-p2v/include/gnulib/errno.in.h	73;"	d
ENETUNREACH	virt-p2v/include/gnulib/errno.in.h	111;"	d
ENOBUFS	virt-p2v/include/gnulib/errno.in.h	113;"	d
ENODATA	virt-p2v/include/gnulib/errno.in.h	126;"	d
ENOLINK	virt-p2v/include/gnulib/errno.in.h	158;"	d
ENOLINK	virt-p2v/include/gnulib/errno.in.h	188;"	d
ENOLINK	virt-p2v/include/gnulib/errno.in.h	48;"	d
ENOMSG	virt-p2v/include/gnulib/errno.in.h	178;"	d
ENOMSG	virt-p2v/include/gnulib/errno.in.h	38;"	d
ENOPROTOOPT	virt-p2v/include/gnulib/errno.in.h	104;"	d
ENOSR	virt-p2v/include/gnulib/errno.in.h	127;"	d
ENOSTR	virt-p2v/include/gnulib/errno.in.h	128;"	d
ENOTCONN	virt-p2v/include/gnulib/errno.in.h	115;"	d
ENOTRECOVERABLE	virt-p2v/include/gnulib/errno.in.h	250;"	d
ENOTRECOVERABLE	virt-p2v/include/gnulib/errno.in.h	93;"	d
ENOTSOCK	virt-p2v/include/gnulib/errno.in.h	100;"	d
ENOTSUP	virt-p2v/include/gnulib/errno.in.h	213;"	d
ENOTSUP	virt-p2v/include/gnulib/errno.in.h	68;"	d
ENT	test/test.c	/^    ENT,$/;"	e	enum:yzy_cmd	file:
ENTER_MAINTENANCE_MODE	include/packet.h	/^    ENTER_MAINTENANCE_MODE,$/;"	e	enum:yzy_cmd
EOPNOTSUPP	virt-p2v/include/gnulib/errno.in.h	106;"	d
EOTHER	virt-p2v/include/gnulib/errno.in.h	130;"	d
EOVERFLOW	virt-p2v/include/gnulib/errno.in.h	162;"	d
EOVERFLOW	virt-p2v/include/gnulib/errno.in.h	208;"	d
EOVERFLOW	virt-p2v/include/gnulib/errno.in.h	63;"	d
EOWNERDEAD	virt-p2v/include/gnulib/errno.in.h	249;"	d
EOWNERDEAD	virt-p2v/include/gnulib/errno.in.h	88;"	d
EPFNOSUPPORT	virt-p2v/include/gnulib/errno.in.h	137;"	d
EPROCLIM	virt-p2v/include/gnulib/errno.in.h	141;"	d
EPROTO	virt-p2v/include/gnulib/errno.in.h	193;"	d
EPROTO	virt-p2v/include/gnulib/errno.in.h	53;"	d
EPROTONOSUPPORT	virt-p2v/include/gnulib/errno.in.h	105;"	d
EPROTOTYPE	virt-p2v/include/gnulib/errno.in.h	103;"	d
EREMOTE	virt-p2v/include/gnulib/errno.in.h	145;"	d
ERROR	include/base.h	71;"	d
ERROR_MSG_PIPE	include/socket.h	/^    ERROR_MSG_PIPE,$/;"	e	enum:PIPE_MSG
ERROR_MSG_PIPE	qt_pro/global.h	/^    ERROR_MSG_PIPE,$/;"	e	enum:PIPE_MSG
ERR_MSG_DESC	include/error.h	/^typedef enum ERR_MSG_DESC {$/;"	g
ERR_MSG_DESC	include/error.h	/^}ERR_MSG_DESC;$/;"	t	typeref:enum:ERR_MSG_DESC
ERR_MSG_DESC	qt_pro/global.h	/^typedef enum ERR_MSG_DESC {$/;"	g
ERR_MSG_DESC	qt_pro/global.h	/^}ERR_MSG_DESC;$/;"	t	typeref:enum:ERR_MSG_DESC
ERR_MSG_DESC	virt-p2v/src/conversion.c	/^typedef enum ERR_MSG_DESC {$/;"	g	file:
ERR_MSG_DESC	virt-p2v/src/conversion.c	/^}ERR_MSG_DESC;$/;"	t	typeref:enum:ERR_MSG_DESC	file:
ESHUTDOWN	virt-p2v/include/gnulib/errno.in.h	138;"	d
ESOCKTNOSUPPORT	virt-p2v/include/gnulib/errno.in.h	136;"	d
ESTALE	virt-p2v/include/gnulib/errno.in.h	144;"	d
ESTALE	virt-p2v/include/gnulib/errno.in.h	228;"	d
ETAGS	torrent/include/libtorrent/Makefile	/^ETAGS = etags$/;"	m
ETIME	virt-p2v/include/gnulib/errno.in.h	129;"	d
ETIMEDOUT	virt-p2v/include/gnulib/errno.in.h	116;"	d
ETOOMANYREFS	virt-p2v/include/gnulib/errno.in.h	139;"	d
ETXTBSY	virt-p2v/include/gnulib/errno.in.h	125;"	d
EUSERS	virt-p2v/include/gnulib/errno.in.h	142;"	d
EWOULDBLOCK	virt-p2v/include/gnulib/errno.in.h	120;"	d
EXEEXT	torrent/include/libtorrent/Makefile	/^EXEEXT = $/;"	m
EXIT_FAILURE	virt-p2v/include/gnulib/stdlib.h	640;"	d
EXIT_FAILURE	virt-p2v/include/gnulib/stdlib.h	642;"	d
EXIT_FAILURE	virt-p2v/include/gnulib/stdlib.h	643;"	d
EXIT_PROGRESS_PIPE	include/socket.h	/^    EXIT_PROGRESS_PIPE,$/;"	e	enum:PIPE_MSG
EXIT_PROGRESS_PIPE	qt_pro/global.h	/^    EXIT_PROGRESS_PIPE,$/;"	e	enum:PIPE_MSG
EXIT_SUCCESS	virt-p2v/include/gnulib/stdlib.h	635;"	d
EXPR_SIGNED	virt-p2v/include/gnulib/intprops.h	45;"	d
E_SC_KEEP_ONLINE	include/packet.h	/^    E_SC_KEEP_ONLINE = 0,$/;"	e	enum:vYzySrvCode
E_YZY_PROTOCOL_INSUFFICIENT_SPACE	include/packet.h	/^    E_YZY_PROTOCOL_INSUFFICIENT_SPACE,  \/\/åå­ç©ºé´ä¸è¶³$/;"	e	enum:vYzyProtocolStatus
E_YZY_PROTOCOL_PARAMETER_ERR	include/packet.h	/^    E_YZY_PROTOCOL_PARAMETER_ERR,       \/\/åæ°éè¯¯$/;"	e	enum:vYzyProtocolStatus
E_YZY_PROTOCOL_PROTOCOL_ERR	include/packet.h	/^    E_YZY_PROTOCOL_PROTOCOL_ERR,        \/\/åè®®éè¯¯$/;"	e	enum:vYzyProtocolStatus
E_YZY_PROTOCOL_SUCCESS	include/packet.h	/^    E_YZY_PROTOCOL_SUCCESS   = 0,       \/\/æä½æå$/;"	e	enum:vYzyProtocolStatus
ErroDialog	qt_pro/ui_errodialog.h	/^    class ErroDialog: public Ui_ErroDialog {};$/;"	c	namespace:Ui
F	torrent/ed25519/fe.cpp	488;"	d	file:
F	torrent/ed25519/fe.cpp	520;"	d	file:
F	torrent/ed25519/verify.cpp	16;"	d	file:
F	torrent/ed25519/verify.cpp	48;"	d	file:
FAIL	include/base.h	49;"	d
FAIL	include/base.h	61;"	d
FAIL	qt_pro/global.h	20;"	d
FAIL	qt_pro/global.h	30;"	d
FALSE	include/gpt.h	7;"	d
FCOMMENT	torrent/src/gzip.cpp	/^		FCOMMENT = 0x10,$/;"	e	enum:__anon95::__anon96	file:
FEXTRA	torrent/src/gzip.cpp	/^		FEXTRA = 0x04,$/;"	e	enum:__anon95::__anon96	file:
FE_H	torrent/ed25519/fe.h	2;"	d
FGREP	torrent/include/libtorrent/Makefile	/^FGREP = \/bin\/grep -F$/;"	m
FHCRC	torrent/src/gzip.cpp	/^		FHCRC = 0x02,$/;"	e	enum:__anon95::__anon96	file:
FILESECBYTES	include/StoreConfig.h	16;"	d
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE	virt-p2v/include/gnulib/dosname.h	32;"	d
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE	virt-p2v/include/gnulib/dosname.h	41;"	d
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE	virt-p2v/include/gnulib/filename.h	71;"	d
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE	virt-p2v/include/gnulib/filename.h	75;"	d
FILE_SYSTEM_DRIVE_PREFIX_CAN_BE_RELATIVE	virt-p2v/include/gnulib/filename.h	94;"	d
FILE_SYSTEM_PREFIX_LEN	virt-p2v/include/gnulib/dosname.h	29;"	d
FILE_SYSTEM_PREFIX_LEN	virt-p2v/include/gnulib/dosname.h	36;"	d
FILE_SYSTEM_PREFIX_LEN	virt-p2v/include/gnulib/filename.h	69;"	d
FILE_SYSTEM_PREFIX_LEN	virt-p2v/include/gnulib/filename.h	93;"	d
FIND_DATA_050323_HPP	torrent/include/libtorrent/kademlia/find_data.hpp	34;"	d
FIRST_SOCKET_ACTIVATION_FD	virt-p2v/src/nbd.c	338;"	d	file:
FIXEDINT_H_INCLUDED	torrent/ed25519/fixedint.h	2;"	d
FIXLCODES	torrent/src/puff.cpp	99;"	d	file:
FNAME	torrent/src/gzip.cpp	/^		FNAME = 0x08,$/;"	e	enum:__anon95::__anon96	file:
FRESERVED	torrent/src/gzip.cpp	/^		FRESERVED = 0xe0,$/;"	e	enum:__anon95::__anon96	file:
FSCTL_QUERY_ALLOCATED_RANGES	torrent/src/file.cpp	686;"	d	file:
FTEXT	torrent/src/gzip.cpp	/^		FTEXT = 0x01,$/;"	e	enum:__anon95::__anon96	file:
F_OK	virt-p2v/include/gnulib/unistd.h	720;"	d
FormatDisk	qt_pro/global.cpp	/^void Global::FormatDisk()$/;"	f	class:Global
GETTIMEOFDAY_TIMEZONE	virt-p2v/include/config.h	41;"	d
GET_CONFIG_INFO	include/packet.h	/^    GET_CONFIG_INFO,$/;"	e	enum:yzy_cmd
GET_CONFIG_INFO	test/test.c	/^    GET_CONFIG_INFO,$/;"	e	enum:yzy_cmd	file:
GET_CONFIG_VERSION	include/packet.h	/^    GET_CONFIG_VERSION,$/;"	e	enum:yzy_cmd
GET_CONFIG_VERSION	test/test.c	/^    GET_CONFIG_VERSION,$/;"	e	enum:yzy_cmd	file:
GET_DATA_TIME	include/packet.h	/^    GET_DATA_TIME,$/;"	e	enum:yzy_cmd
GET_DATA_TIME	test/test.c	/^    GET_DATA_TIME,$/;"	e	enum:yzy_cmd	file:
GET_DESKTOP_GROUP_LIST	include/packet.h	/^	GET_DESKTOP_GROUP_LIST,$/;"	e	enum:yzy_cmd
GET_TASK_STATE	test/test.c	/^	GET_TASK_STATE,$/;"	e	enum:BT_CMD	file:
GE_H	torrent/ed25519/ge.h	2;"	d
GLOBALAPPLICATION_H	qt_pro/globalapplication.h	2;"	d
GLOBAL_H	qt_pro/global.h	2;"	d
GLWTHREAD_DESTRUCTOR_ITERATIONS	virt-p2v/include/gnulib/windows-tls.h	36;"	d
GLWTHREAD_INITGUARD_INIT	virt-p2v/include/gnulib/windows-initguard.h	33;"	d
GLWTHREAD_MUTEX_INIT	virt-p2v/include/gnulib/windows-mutex.h	35;"	d
GLWTHREAD_ONCE_INIT	virt-p2v/include/gnulib/windows-once.h	34;"	d
GLWTHREAD_RECMUTEX_INIT	virt-p2v/include/gnulib/windows-recmutex.h	41;"	d
GLWTHREAD_RWLOCK_INIT	virt-p2v/include/gnulib/windows-rwlock.h	50;"	d
GL_INT64_T	virt-p2v/include/gnulib/stdint.h	178;"	d
GL_INT64_T	virt-p2v/include/gnulib/stdint.h	186;"	d
GL_INT64_T	virt-p2v/include/gnulib/stdint.h	191;"	d
GL_INT64_T	virt-p2v/include/gnulib/stdint.h	196;"	d
GL_UINT64_T	virt-p2v/include/gnulib/stdint.h	201;"	d
GL_UINT64_T	virt-p2v/include/gnulib/stdint.h	207;"	d
GL_UINT64_T	virt-p2v/include/gnulib/stdint.h	212;"	d
GL_UINT64_T	virt-p2v/include/gnulib/stdint.h	217;"	d
GNULIB_FSCANF	virt-p2v/include/config.h	45;"	d
GNULIB_LOCK	virt-p2v/include/config.h	49;"	d
GNULIB_MSVC_NOTHROW	virt-p2v/include/config.h	53;"	d
GNULIB_PORTCHECK	virt-p2v/include/config.h	56;"	d
GNULIB_SCANF	virt-p2v/include/config.h	64;"	d
GNULIB_STRERROR	virt-p2v/include/config.h	68;"	d
GNULIB_STRERROR_R_POSIX	virt-p2v/include/config.h	72;"	d
GNULIB_TEST_ACCEPT	virt-p2v/include/config.h	75;"	d
GNULIB_TEST_BIND	virt-p2v/include/config.h	78;"	d
GNULIB_TEST_CLOEXEC	virt-p2v/include/config.h	81;"	d
GNULIB_TEST_CLOSE	virt-p2v/include/config.h	84;"	d
GNULIB_TEST_CONNECT	virt-p2v/include/config.h	87;"	d
GNULIB_TEST_DUP2	virt-p2v/include/config.h	90;"	d
GNULIB_TEST_ENVIRON	virt-p2v/include/config.h	93;"	d
GNULIB_TEST_FCNTL	virt-p2v/include/config.h	96;"	d
GNULIB_TEST_FDOPEN	virt-p2v/include/config.h	99;"	d
GNULIB_TEST_FSTAT	virt-p2v/include/config.h	102;"	d
GNULIB_TEST_FTRUNCATE	virt-p2v/include/config.h	105;"	d
GNULIB_TEST_GETCWD	virt-p2v/include/config.h	108;"	d
GNULIB_TEST_GETDTABLESIZE	virt-p2v/include/config.h	111;"	d
GNULIB_TEST_GETTIMEOFDAY	virt-p2v/include/config.h	114;"	d
GNULIB_TEST_IOCTL	virt-p2v/include/config.h	117;"	d
GNULIB_TEST_ISATTY	virt-p2v/include/config.h	120;"	d
GNULIB_TEST_LISTEN	virt-p2v/include/config.h	123;"	d
GNULIB_TEST_LSTAT	virt-p2v/include/config.h	126;"	d
GNULIB_TEST_MALLOC_POSIX	virt-p2v/include/config.h	129;"	d
GNULIB_TEST_NANOSLEEP	virt-p2v/include/config.h	132;"	d
GNULIB_TEST_OPEN	virt-p2v/include/config.h	135;"	d
GNULIB_TEST_PERROR	virt-p2v/include/config.h	138;"	d
GNULIB_TEST_PIPE	virt-p2v/include/config.h	141;"	d
GNULIB_TEST_PTHREAD_SIGMASK	virt-p2v/include/config.h	144;"	d
GNULIB_TEST_PTHREAD_THREAD	virt-p2v/include/config.h	147;"	d
GNULIB_TEST_PTSNAME_R	virt-p2v/include/config.h	150;"	d
GNULIB_TEST_PUTENV	virt-p2v/include/config.h	153;"	d
GNULIB_TEST_RAISE	virt-p2v/include/config.h	156;"	d
GNULIB_TEST_SELECT	virt-p2v/include/config.h	159;"	d
GNULIB_TEST_SETENV	virt-p2v/include/config.h	162;"	d
GNULIB_TEST_SETSOCKOPT	virt-p2v/include/config.h	165;"	d
GNULIB_TEST_SIGACTION	virt-p2v/include/config.h	168;"	d
GNULIB_TEST_SIGPROCMASK	virt-p2v/include/config.h	171;"	d
GNULIB_TEST_SLEEP	virt-p2v/include/config.h	174;"	d
GNULIB_TEST_SOCKET	virt-p2v/include/config.h	177;"	d
GNULIB_TEST_STAT	virt-p2v/include/config.h	180;"	d
GNULIB_TEST_STRERROR	virt-p2v/include/config.h	183;"	d
GNULIB_TEST_STRERROR_R	virt-p2v/include/config.h	186;"	d
GNULIB_TEST_STRTOLL	virt-p2v/include/config.h	189;"	d
GNULIB_TEST_STRTOULL	virt-p2v/include/config.h	192;"	d
GNULIB_TEST_SYMLINK	virt-p2v/include/config.h	195;"	d
GNULIB_TEST_TTYNAME_R	virt-p2v/include/config.h	198;"	d
GNULIB_TEST_UNSETENV	virt-p2v/include/config.h	201;"	d
GNULIB_TEST_USLEEP	virt-p2v/include/config.h	204;"	d
GNULIB_defined_EBADMSG	virt-p2v/include/gnulib/errno.in.h	204;"	d
GNULIB_defined_EBADMSG	virt-p2v/include/gnulib/errno.in.h	59;"	d
GNULIB_defined_ECANCELED	virt-p2v/include/gnulib/errno.in.h	239;"	d
GNULIB_defined_ECANCELED	virt-p2v/include/gnulib/errno.in.h	84;"	d
GNULIB_defined_ECONNABORTED	virt-p2v/include/gnulib/errno.in.h	224;"	d
GNULIB_defined_ECONNABORTED	virt-p2v/include/gnulib/errno.in.h	79;"	d
GNULIB_defined_EDQUOT	virt-p2v/include/gnulib/errno.in.h	234;"	d
GNULIB_defined_EIDRM	virt-p2v/include/gnulib/errno.in.h	184;"	d
GNULIB_defined_EIDRM	virt-p2v/include/gnulib/errno.in.h	44;"	d
GNULIB_defined_EILSEQ	virt-p2v/include/gnulib/errno.in.h	275;"	d
GNULIB_defined_EMULTIHOP	virt-p2v/include/gnulib/errno.in.h	155;"	d
GNULIB_defined_EMULTIHOP	virt-p2v/include/gnulib/errno.in.h	199;"	d
GNULIB_defined_ENETRESET	virt-p2v/include/gnulib/errno.in.h	219;"	d
GNULIB_defined_ENETRESET	virt-p2v/include/gnulib/errno.in.h	74;"	d
GNULIB_defined_ENOLINK	virt-p2v/include/gnulib/errno.in.h	159;"	d
GNULIB_defined_ENOLINK	virt-p2v/include/gnulib/errno.in.h	189;"	d
GNULIB_defined_ENOLINK	virt-p2v/include/gnulib/errno.in.h	49;"	d
GNULIB_defined_ENOMSG	virt-p2v/include/gnulib/errno.in.h	179;"	d
GNULIB_defined_ENOMSG	virt-p2v/include/gnulib/errno.in.h	39;"	d
GNULIB_defined_ENOTRECOVERABLE	virt-p2v/include/gnulib/errno.in.h	270;"	d
GNULIB_defined_ENOTRECOVERABLE	virt-p2v/include/gnulib/errno.in.h	94;"	d
GNULIB_defined_ENOTSUP	virt-p2v/include/gnulib/errno.in.h	214;"	d
GNULIB_defined_ENOTSUP	virt-p2v/include/gnulib/errno.in.h	69;"	d
GNULIB_defined_EOVERFLOW	virt-p2v/include/gnulib/errno.in.h	163;"	d
GNULIB_defined_EOVERFLOW	virt-p2v/include/gnulib/errno.in.h	209;"	d
GNULIB_defined_EOVERFLOW	virt-p2v/include/gnulib/errno.in.h	64;"	d
GNULIB_defined_EOWNERDEAD	virt-p2v/include/gnulib/errno.in.h	269;"	d
GNULIB_defined_EOWNERDEAD	virt-p2v/include/gnulib/errno.in.h	89;"	d
GNULIB_defined_EPROTO	virt-p2v/include/gnulib/errno.in.h	194;"	d
GNULIB_defined_EPROTO	virt-p2v/include/gnulib/errno.in.h	54;"	d
GNULIB_defined_ESOCK	virt-p2v/include/gnulib/errno.in.h	121;"	d
GNULIB_defined_ESTALE	virt-p2v/include/gnulib/errno.in.h	229;"	d
GNULIB_defined_ESTREAMS	virt-p2v/include/gnulib/errno.in.h	131;"	d
GNULIB_defined_EWINSOCK	virt-p2v/include/gnulib/errno.in.h	146;"	d
GNULIB_defined_imaxdiv_t	virt-p2v/include/gnulib/inttypes.in.h	1073;"	d
GNULIB_defined_stdint_types	virt-p2v/include/gnulib/stdint.h	368;"	d
GNULIB_defined_struct__gl_verify_type	virt-p2v/include/gnulib/verify.h	190;"	d
GPT_ENTRY	include/gpt.h	/^} GPT_ENTRY;$/;"	t	typeref:struct:__anon7
GPT_HEADER	include/gpt.h	/^} GPT_HEADER;$/;"	t	typeref:struct:__anon6
GPT_KIND_BASIC_DATA	include/gpt.h	25;"	d
GPT_KIND_DATA	include/gpt.h	24;"	d
GPT_KIND_FATAL	include/gpt.h	26;"	d
GPT_KIND_SYSTEM	include/gpt.h	23;"	d
GPT_PARTTYPE	include/gpt.h	/^} GPT_PARTTYPE;$/;"	t	typeref:struct:__anon8
GREP	torrent/include/libtorrent/Makefile	/^GREP = \/bin\/grep$/;"	m
GTK_COMBO_BOX_TEXT	virt-p2v/include/gui-gtk2-compat.h	20;"	d
GTK_EXPAND	virt-p2v/include/gui-gtk3-compat.h	/^  GTK_EXPAND = 1 << 0,$/;"	e	enum:__anon156
GTK_FILL	virt-p2v/include/gui-gtk3-compat.h	/^  GTK_FILL   = 1 << 2$/;"	e	enum:__anon156
GTK_SHRINK	virt-p2v/include/gui-gtk3-compat.h	/^  GTK_SHRINK = 1 << 1,$/;"	e	enum:__anon156
GTK_STOCK_DIALOG_WARNING	virt-p2v/include/gui-gtk3-compat.h	102;"	d
GTK_STOCK_DIALOG_WARNING	virt-p2v/include/gui-gtk3-compat.h	103;"	d
GUESTFS_CLEANUPS_H_	virt-p2v/include/cleanups.h	20;"	d
GUESTFS_CLEANUPS_H_	virt-p2v/libguestfs/cleanups.h	20;"	d
GUESTFS_LIBXML2_WRITER_MACROS_H_	virt-p2v/include/libxml2-writer-macros.h	45;"	d
GUESTFS_LIBXML2_WRITER_MACROS_H_	virt-p2v/libguestfs/libxml2-writer-macros.h	45;"	d
GUESTFS_P2V_CONFIG_H	virt-p2v/include/p2v-config.h	8;"	d
GUESTFS_UTILS_H_	virt-p2v/include/guestfs-utils.h	20;"	d
GUESTFS_UTILS_H_	virt-p2v/libguestfs/guestfs-utils.h	20;"	d
GZIP_MAGIC0	torrent/src/gzip.cpp	/^		GZIP_MAGIC0 = 0x1f,$/;"	e	enum:__anon95::__anon96	file:
GZIP_MAGIC1	torrent/src/gzip.cpp	/^		GZIP_MAGIC1 = 0x8b$/;"	e	enum:__anon95::__anon96	file:
Gamma0	torrent/src/sha512.cpp	104;"	d	file:
Gamma1	torrent/src/sha512.cpp	105;"	d	file:
GetBackLba	src/StoreConfig.c	/^uint64_t GetBackLba()$/;"	f
GetCurrentDir_	torrent/src/path.cpp	723;"	d	file:
GetCurrentDir_	torrent/src/path.cpp	732;"	d	file:
GetDiskList	src/StoreConfig.c	/^static uint32_t GetDiskList(PYZYGUID diskName, PYZY_QCOW_ENTRY *diskList)$/;"	f	file:
GetDiskSizeLba	src/StoreConfig.c	/^uint64_t GetDiskSizeLba(PYZYGUID diskName)$/;"	f
GetQcowLba	src/StoreConfig.c	/^uint64_t GetQcowLba(PYZY_QCOW_ENTRY pQe)$/;"	f
Global	qt_pro/global.cpp	/^Global::Global()$/;"	f	class:Global
Global	qt_pro/global.h	/^class Global : public QObject$/;"	c
GlobalApplication	qt_pro/globalapplication.cpp	/^GlobalApplication::GlobalApplication(int &argc, char **argv):QApplication (argc, argv)$/;"	f	class:GlobalApplication
GlobalApplication	qt_pro/globalapplication.h	/^class GlobalApplication :QApplication$/;"	c
GtkAttachOptions	virt-p2v/include/gui-gtk3-compat.h	/^} GtkAttachOptions;$/;"	t	typeref:enum:__anon156
HAIRY_LIBRARY_HANDLING	virt-p2v/include/gnulib/msvc-inval.h	56;"	d
HASH_H_	virt-p2v/include/gnulib/hash.h	25;"	d
HAS_DEVICE	virt-p2v/include/gnulib/filename.h	67;"	d
HAS_DEVICE	virt-p2v/include/gnulib/filename.h	92;"	d
HAVE_ALLOCA	virt-p2v/include/config.h	208;"	d
HAVE_ALLOCA_H	virt-p2v/include/config.h	212;"	d
HAVE_ARPA_INET_H	virt-p2v/include/config.h	215;"	d
HAVE_ATTRIBUTE_CLEANUP	virt-p2v/include/config.h	218;"	d
HAVE_BUG_BIG_NANOSLEEP	virt-p2v/include/config.h	221;"	d
HAVE_CATGETS	virt-p2v/include/config.h	224;"	d
HAVE_CXX11	torrent/include/libtorrent/Makefile	/^HAVE_CXX11 = 1$/;"	m
HAVE_DECL_ALARM	virt-p2v/include/config.h	237;"	d
HAVE_DECL_GETDTABLESIZE	virt-p2v/include/config.h	241;"	d
HAVE_DECL_INET_PTON	virt-p2v/include/config.h	245;"	d
HAVE_DECL_PROGRAM_INVOCATION_NAME	virt-p2v/include/config.h	249;"	d
HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME	virt-p2v/include/config.h	253;"	d
HAVE_DECL_SETENV	virt-p2v/include/config.h	257;"	d
HAVE_DECL_SLEEP	virt-p2v/include/config.h	261;"	d
HAVE_DECL_STRERROR_R	virt-p2v/include/config.h	265;"	d
HAVE_DECL_TTYNAME_R	virt-p2v/include/config.h	269;"	d
HAVE_DECL_UNSETENV	virt-p2v/include/config.h	273;"	d
HAVE_DECL___ARGV	virt-p2v/include/config.h	281;"	d
HAVE_DUP2	virt-p2v/include/config.h	284;"	d
HAVE_ENVIRON_DECL	virt-p2v/include/config.h	287;"	d
HAVE_ESSENTIALLY_WORKING_PTSNAME_R	virt-p2v/include/config.h	290;"	d
HAVE_FCNTL	virt-p2v/include/config.h	293;"	d
HAVE_FEATURES_H	virt-p2v/include/config.h	296;"	d
HAVE_FTRUNCATE	virt-p2v/include/config.h	299;"	d
HAVE_GETDTABLESIZE	virt-p2v/include/config.h	302;"	d
HAVE_GETOPT_H	virt-p2v/include/config.h	308;"	d
HAVE_GETOPT_LONG_ONLY	virt-p2v/include/config.h	311;"	d
HAVE_GETTIMEOFDAY	virt-p2v/include/config.h	317;"	d
HAVE_INTTYPES_H	virt-p2v/include/config.h	323;"	d
HAVE_IOCTL	virt-p2v/include/config.h	326;"	d
HAVE_IPV4	virt-p2v/include/config.h	329;"	d
HAVE_IPV6	virt-p2v/include/config.h	332;"	d
HAVE_ISBLANK	virt-p2v/include/config.h	335;"	d
HAVE_LIMITS_H	virt-p2v/include/config.h	338;"	d
HAVE_LINUX_RTC_H	virt-p2v/include/config.h	341;"	d
HAVE_LONG_LONG_INT	virt-p2v/include/config.h	344;"	d
HAVE_LSTAT	virt-p2v/include/config.h	347;"	d
HAVE_MALLOC_POSIX	virt-p2v/include/config.h	350;"	d
HAVE_MEMORY_H	virt-p2v/include/config.h	353;"	d
HAVE_NETDB_H	virt-p2v/include/config.h	360;"	d
HAVE_NETINET_IN_H	virt-p2v/include/config.h	363;"	d
HAVE_PIPE	virt-p2v/include/config.h	366;"	d
HAVE_POSIXDECL_TTYNAME_R	virt-p2v/include/config.h	369;"	d
HAVE_PTHREAD_ATFORK	virt-p2v/include/config.h	372;"	d
HAVE_PTHREAD_H	virt-p2v/include/config.h	375;"	d
HAVE_PTHREAD_MUTEX_RECURSIVE	virt-p2v/include/config.h	378;"	d
HAVE_PTHREAD_RWLOCK	virt-p2v/include/config.h	381;"	d
HAVE_PTHREAD_SPINLOCK_T	virt-p2v/include/config.h	391;"	d
HAVE_PTHREAD_T	virt-p2v/include/config.h	394;"	d
HAVE_PTSNAME_R	virt-p2v/include/config.h	397;"	d
HAVE_RAISE	virt-p2v/include/config.h	400;"	d
HAVE_SA_FAMILY_T	virt-p2v/include/config.h	403;"	d
HAVE_SCHED_H	virt-p2v/include/config.h	406;"	d
HAVE_SEARCH_H	virt-p2v/include/config.h	409;"	d
HAVE_SEMAPHORE_H	virt-p2v/include/config.h	412;"	d
HAVE_SETENV	virt-p2v/include/config.h	418;"	d
HAVE_SHUTDOWN	virt-p2v/include/config.h	421;"	d
HAVE_SIGACTION	virt-p2v/include/config.h	424;"	d
HAVE_SIGALTSTACK	virt-p2v/include/config.h	427;"	d
HAVE_SIGINTERRUPT	virt-p2v/include/config.h	433;"	d
HAVE_SIGSET_T	virt-p2v/include/config.h	445;"	d
HAVE_SLEEP	virt-p2v/include/config.h	448;"	d
HAVE_SNPRINTF	virt-p2v/include/config.h	451;"	d
HAVE_STDINT_H	virt-p2v/include/config.h	454;"	d
HAVE_STDLIB_H	virt-p2v/include/config.h	457;"	d
HAVE_STRERROR_R	virt-p2v/include/config.h	460;"	d
HAVE_STRINGS_H	virt-p2v/include/config.h	463;"	d
HAVE_STRING_H	virt-p2v/include/config.h	466;"	d
HAVE_STRTOLL	virt-p2v/include/config.h	469;"	d
HAVE_STRTOULL	virt-p2v/include/config.h	472;"	d
HAVE_STRUCT_SIGACTION_SA_SIGACTION	virt-p2v/include/config.h	475;"	d
HAVE_STRUCT_SOCKADDR_STORAGE	virt-p2v/include/config.h	478;"	d
HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY	virt-p2v/include/config.h	481;"	d
HAVE_STRUCT_STAT_ST_ATIM_TV_NSEC	virt-p2v/include/config.h	493;"	d
HAVE_SYMLINK	virt-p2v/include/config.h	505;"	d
HAVE_SYS_CDEFS_H	virt-p2v/include/config.h	511;"	d
HAVE_SYS_IOCTL_H	virt-p2v/include/config.h	517;"	d
HAVE_SYS_PARAM_H	virt-p2v/include/config.h	520;"	d
HAVE_SYS_SELECT_H	virt-p2v/include/config.h	523;"	d
HAVE_SYS_SOCKET_H	virt-p2v/include/config.h	526;"	d
HAVE_SYS_STAT_H	virt-p2v/include/config.h	529;"	d
HAVE_SYS_TIME_H	virt-p2v/include/config.h	532;"	d
HAVE_SYS_TYPES_H	virt-p2v/include/config.h	535;"	d
HAVE_SYS_UIO_H	virt-p2v/include/config.h	538;"	d
HAVE_SYS_WAIT_H	virt-p2v/include/config.h	541;"	d
HAVE_TSEARCH	virt-p2v/include/config.h	547;"	d
HAVE_TTYNAME_R	virt-p2v/include/config.h	553;"	d
HAVE_UNISTD_H	virt-p2v/include/config.h	556;"	d
HAVE_UNSETENV	virt-p2v/include/config.h	559;"	d
HAVE_UNSIGNED_LONG_LONG_INT	virt-p2v/include/config.h	562;"	d
HAVE_USLEEP	virt-p2v/include/config.h	565;"	d
HAVE_WCHAR_H	virt-p2v/include/config.h	571;"	d
HAVE_WCHAR_T	virt-p2v/include/config.h	574;"	d
HAVE_WINT_T	virt-p2v/include/config.h	580;"	d
HAVE_WORKING_O_NOATIME	virt-p2v/include/config.h	583;"	d
HAVE_WORKING_O_NOFOLLOW	virt-p2v/include/config.h	586;"	d
HAVE__BOOL	virt-p2v/include/config.h	592;"	d
HAVE___XPG_STRERROR_R	virt-p2v/include/config.h	598;"	d
HDIO_GETGEO	src/linux.c	111;"	d	file:
HDIO_GET_IDENTITY	src/linux.c	112;"	d	file:
HEADERS	torrent/include/libtorrent/Makefile	/^HEADERS = $(nobase_include_HEADERS)$/;"	m
HEAD_LEN	include/socket.h	16;"	d
HEAD_LEN	qt_pro/pipethread.h	7;"	d
HEAD_LEN	virt-p2v/src/conversion.c	57;"	d	file:
HEARTBEAT	include/packet.h	/^    HEARTBEAT = 9000,$/;"	e	enum:yzy_cmd
HEARTBEAT	test/test.c	/^    HEARTBEAT = 9000,$/;"	e	enum:yzy_cmd	file:
HELP_OPTION	virt-p2v/src/p2v.c	/^enum { HELP_OPTION = CHAR_MAX + 1 };$/;"	e	enum:__anon169	file:
HELP_OPTION	virt-p2v/src/p2v_transform.c	/^enum { HELP_OPTION = CHAR_MAX + 1 };$/;"	e	enum:__anon168	file:
Hash_comparator	virt-p2v/include/gnulib/hash.h	/^typedef bool (*Hash_comparator) (const void *, const void *);$/;"	t
Hash_data_freer	virt-p2v/include/gnulib/hash.h	/^typedef void (*Hash_data_freer) (void *);$/;"	t
Hash_hasher	virt-p2v/include/gnulib/hash.h	/^typedef size_t (*Hash_hasher) (const void *, size_t);$/;"	t
Hash_processor	virt-p2v/include/gnulib/hash.h	/^typedef bool (*Hash_processor) (void *, void *);$/;"	t
Hash_table	virt-p2v/include/gnulib/hash.h	/^typedef struct hash_table Hash_table;$/;"	t	typeref:struct:hash_table
Hash_tuning	virt-p2v/include/gnulib/hash.h	/^typedef struct hash_tuning Hash_tuning;$/;"	t	typeref:struct:hash_tuning
I2O_MAJOR1	src/linux.c	80;"	d	file:
I2O_MAJOR2	src/linux.c	81;"	d	file:
I2O_MAJOR3	src/linux.c	82;"	d	file:
I2O_MAJOR4	src/linux.c	83;"	d	file:
I2O_MAJOR5	src/linux.c	84;"	d	file:
I2O_MAJOR6	src/linux.c	85;"	d	file:
I2O_MAJOR7	src/linux.c	86;"	d	file:
I2O_MAJOR8	src/linux.c	87;"	d	file:
ICONV_LIBS	torrent/include/libtorrent/Makefile	/^ICONV_LIBS = $/;"	m
IDE0_MAJOR	src/linux.c	39;"	d	file:
IDE1_MAJOR	src/linux.c	40;"	d	file:
IDE2_MAJOR	src/linux.c	41;"	d	file:
IDE3_MAJOR	src/linux.c	42;"	d	file:
IDE4_MAJOR	src/linux.c	43;"	d	file:
IDE5_MAJOR	src/linux.c	44;"	d	file:
IFA_F_DADFAILED	torrent/src/enum_net.cpp	96;"	d	file:
IFF_LOWER_UP	src/event.c	15;"	d	file:
IFF_LOWER_UP	src/tools.c	198;"	d	file:
IFSCOPE_NONE	torrent/include/libtorrent/aux_/route.h	324;"	d
IF_NAMESIZE	torrent/src/enum_net.cpp	113;"	d	file:
INCPATH	qt_pro/Makefile	/^INCPATH       = -I\/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/mkspecs\/qws\/linux-x86_64-g++ -I. -I\/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/include\/QtCore -I\/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/include\/QtNetwork -I\/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/include\/QtGui -I\/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/include -I. -I.$/;"	m
INIT_PIPE	include/socket.h	/^	INIT_PIPE,$/;"	e	enum:PIPE_MSG
INIT_PIPE	qt_pro/global.h	/^	INIT_PIPE,$/;"	e	enum:PIPE_MSG
INSTALL	torrent/include/libtorrent/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	torrent/include/libtorrent/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DIR	qt_pro/Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_ERR	include/error.h	/^    INSTALL_ERR = 0,$/;"	e	enum:ERR_MSG_DESC
INSTALL_ERR	qt_pro/global.h	/^    INSTALL_ERR = 0,$/;"	e	enum:ERR_MSG_DESC
INSTALL_ERR	virt-p2v/src/conversion.c	/^    INSTALL_ERR = 0,$/;"	e	enum:ERR_MSG_DESC	file:
INSTALL_FILE	qt_pro/Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_HEADER	torrent/include/libtorrent/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PIPE	include/socket.h	/^    INSTALL_PIPE,$/;"	e	enum:PIPE_MSG
INSTALL_PIPE	qt_pro/global.h	/^    INSTALL_PIPE,$/;"	e	enum:PIPE_MSG
INSTALL_PROGRAM	qt_pro/Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
INSTALL_PROGRAM	torrent/include/libtorrent/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	torrent/include/libtorrent/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	torrent/include/libtorrent/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INT16_C	virt-p2v/include/gnulib/stdint.h	635;"	d
INT16_C	virt-p2v/include/gnulib/stdint.h	637;"	d
INT16_MAX	virt-p2v/include/gnulib/stdint.h	386;"	d
INT16_MAX	virt-p2v/include/gnulib/stdint.h	389;"	d
INT16_MIN	virt-p2v/include/gnulib/stdint.h	385;"	d
INT16_MIN	virt-p2v/include/gnulib/stdint.h	388;"	d
INT16_WIDTH	virt-p2v/include/gnulib/stdint.h	697;"	d
INT32_C	virt-p2v/include/gnulib/stdint.h	640;"	d
INT32_C	virt-p2v/include/gnulib/stdint.h	642;"	d
INT32_MAX	virt-p2v/include/gnulib/stdint.h	393;"	d
INT32_MAX	virt-p2v/include/gnulib/stdint.h	396;"	d
INT32_MIN	virt-p2v/include/gnulib/stdint.h	392;"	d
INT32_MIN	virt-p2v/include/gnulib/stdint.h	395;"	d
INT32_WIDTH	virt-p2v/include/gnulib/stdint.h	703;"	d
INT64_C	virt-p2v/include/gnulib/stdint.h	645;"	d
INT64_C	virt-p2v/include/gnulib/stdint.h	648;"	d
INT64_C	virt-p2v/include/gnulib/stdint.h	650;"	d
INT64_C	virt-p2v/include/gnulib/stdint.h	652;"	d
INT64_MAX	virt-p2v/include/gnulib/stdint.h	403;"	d
INT64_MIN	virt-p2v/include/gnulib/stdint.h	402;"	d
INT64_WIDTH	virt-p2v/include/gnulib/stdint.h	709;"	d
INT8_C	virt-p2v/include/gnulib/stdint.h	630;"	d
INT8_C	virt-p2v/include/gnulib/stdint.h	632;"	d
INT8_MAX	virt-p2v/include/gnulib/stdint.h	379;"	d
INT8_MAX	virt-p2v/include/gnulib/stdint.h	382;"	d
INT8_MIN	virt-p2v/include/gnulib/stdint.h	378;"	d
INT8_MIN	virt-p2v/include/gnulib/stdint.h	381;"	d
INT8_WIDTH	virt-p2v/include/gnulib/stdint.h	691;"	d
INTERFACES_COL_CONVERT	virt-p2v/src/gui.c	/^  INTERFACES_COL_CONVERT = 0,$/;"	e	enum:__anon167	file:
INTERFACES_COL_DEVICE	virt-p2v/src/gui.c	/^  INTERFACES_COL_DEVICE,$/;"	e	enum:__anon167	file:
INTERFACES_COL_NETWORK	virt-p2v/src/gui.c	/^  INTERFACES_COL_NETWORK,$/;"	e	enum:__anon167	file:
INTERFACE_VERSION_INFO	torrent/include/libtorrent/Makefile	/^INTERFACE_VERSION_INFO = 10:0:0$/;"	m
INTMAX_C	virt-p2v/include/gnulib/stdint.h	335;"	d
INTMAX_C	virt-p2v/include/gnulib/stdint.h	666;"	d
INTMAX_C	virt-p2v/include/gnulib/stdint.h	668;"	d
INTMAX_C	virt-p2v/include/gnulib/stdint.h	670;"	d
INTMAX_MAX	virt-p2v/include/gnulib/stdint.h	515;"	d
INTMAX_MAX	virt-p2v/include/gnulib/stdint.h	518;"	d
INTMAX_MIN	virt-p2v/include/gnulib/stdint.h	512;"	d
INTMAX_MIN	virt-p2v/include/gnulib/stdint.h	514;"	d
INTMAX_MIN	virt-p2v/include/gnulib/stdint.h	517;"	d
INTMAX_WIDTH	virt-p2v/include/gnulib/stdint.h	732;"	d
INTPTR_MAX	virt-p2v/include/gnulib/stdint.h	497;"	d
INTPTR_MAX	virt-p2v/include/gnulib/stdint.h	501;"	d
INTPTR_MAX	virt-p2v/include/gnulib/stdint.h	505;"	d
INTPTR_MIN	virt-p2v/include/gnulib/stdint.h	496;"	d
INTPTR_MIN	virt-p2v/include/gnulib/stdint.h	500;"	d
INTPTR_MIN	virt-p2v/include/gnulib/stdint.h	504;"	d
INTPTR_WIDTH	virt-p2v/include/gnulib/stdint.h	730;"	d
INTTYPES_H	virt-p2v/include/gnulib/inttypes.h	46;"	d
INTTYPES_H	virt-p2v/include/gnulib/inttypes.in.h	45;"	d
INT_ADD_OVERFLOW	virt-p2v/include/gnulib/intprops.h	335;"	d
INT_ADD_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	162;"	d
INT_ADD_WRAPV	virt-p2v/include/gnulib/intprops.h	367;"	d
INT_ADD_WRAPV	virt-p2v/include/gnulib/intprops.h	370;"	d
INT_BITS_STRLEN_BOUND	virt-p2v/include/gnulib/intprops.h	108;"	d
INT_BUFSIZE_BOUND	virt-p2v/include/gnulib/intprops.h	123;"	d
INT_DIVIDE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	347;"	d
INT_DIVIDE_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	200;"	d
INT_FAST16_MAX	virt-p2v/include/gnulib/stdint.h	463;"	d
INT_FAST16_MAX	virt-p2v/include/gnulib/stdint.h	466;"	d
INT_FAST16_MIN	virt-p2v/include/gnulib/stdint.h	462;"	d
INT_FAST16_MIN	virt-p2v/include/gnulib/stdint.h	465;"	d
INT_FAST16_WIDTH	virt-p2v/include/gnulib/stdint.h	724;"	d
INT_FAST32_MAX	virt-p2v/include/gnulib/stdint.h	470;"	d
INT_FAST32_MAX	virt-p2v/include/gnulib/stdint.h	474;"	d
INT_FAST32_MAX	virt-p2v/include/gnulib/stdint.h	478;"	d
INT_FAST32_MIN	virt-p2v/include/gnulib/stdint.h	469;"	d
INT_FAST32_MIN	virt-p2v/include/gnulib/stdint.h	473;"	d
INT_FAST32_MIN	virt-p2v/include/gnulib/stdint.h	477;"	d
INT_FAST32_WIDTH	virt-p2v/include/gnulib/stdint.h	726;"	d
INT_FAST64_MAX	virt-p2v/include/gnulib/stdint.h	483;"	d
INT_FAST64_MAX	virt-p2v/include/gnulib/stdint.h	486;"	d
INT_FAST64_MIN	virt-p2v/include/gnulib/stdint.h	482;"	d
INT_FAST64_MIN	virt-p2v/include/gnulib/stdint.h	485;"	d
INT_FAST64_WIDTH	virt-p2v/include/gnulib/stdint.h	728;"	d
INT_FAST8_MAX	virt-p2v/include/gnulib/stdint.h	456;"	d
INT_FAST8_MAX	virt-p2v/include/gnulib/stdint.h	459;"	d
INT_FAST8_MIN	virt-p2v/include/gnulib/stdint.h	455;"	d
INT_FAST8_MIN	virt-p2v/include/gnulib/stdint.h	458;"	d
INT_FAST8_WIDTH	virt-p2v/include/gnulib/stdint.h	722;"	d
INT_LEAST16_MAX	virt-p2v/include/gnulib/stdint.h	424;"	d
INT_LEAST16_MAX	virt-p2v/include/gnulib/stdint.h	427;"	d
INT_LEAST16_MIN	virt-p2v/include/gnulib/stdint.h	423;"	d
INT_LEAST16_MIN	virt-p2v/include/gnulib/stdint.h	426;"	d
INT_LEAST16_WIDTH	virt-p2v/include/gnulib/stdint.h	716;"	d
INT_LEAST32_MAX	virt-p2v/include/gnulib/stdint.h	431;"	d
INT_LEAST32_MAX	virt-p2v/include/gnulib/stdint.h	434;"	d
INT_LEAST32_MIN	virt-p2v/include/gnulib/stdint.h	430;"	d
INT_LEAST32_MIN	virt-p2v/include/gnulib/stdint.h	433;"	d
INT_LEAST32_WIDTH	virt-p2v/include/gnulib/stdint.h	718;"	d
INT_LEAST64_MAX	virt-p2v/include/gnulib/stdint.h	438;"	d
INT_LEAST64_MAX	virt-p2v/include/gnulib/stdint.h	441;"	d
INT_LEAST64_MIN	virt-p2v/include/gnulib/stdint.h	437;"	d
INT_LEAST64_MIN	virt-p2v/include/gnulib/stdint.h	440;"	d
INT_LEAST64_WIDTH	virt-p2v/include/gnulib/stdint.h	720;"	d
INT_LEAST8_MAX	virt-p2v/include/gnulib/stdint.h	417;"	d
INT_LEAST8_MAX	virt-p2v/include/gnulib/stdint.h	420;"	d
INT_LEAST8_MIN	virt-p2v/include/gnulib/stdint.h	416;"	d
INT_LEAST8_MIN	virt-p2v/include/gnulib/stdint.h	419;"	d
INT_LEAST8_WIDTH	virt-p2v/include/gnulib/stdint.h	714;"	d
INT_LEFT_SHIFT_OVERFLOW	virt-p2v/include/gnulib/intprops.h	351;"	d
INT_LEFT_SHIFT_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	218;"	d
INT_MULTIPLY_OVERFLOW	virt-p2v/include/gnulib/intprops.h	345;"	d
INT_MULTIPLY_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	185;"	d
INT_MULTIPLY_WRAPV	virt-p2v/include/gnulib/intprops.h	378;"	d
INT_MULTIPLY_WRAPV	virt-p2v/include/gnulib/intprops.h	381;"	d
INT_MULTIPLY_WRAPV	virt-p2v/include/gnulib/intprops.h	388;"	d
INT_NEGATE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	340;"	d
INT_NEGATE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	342;"	d
INT_NEGATE_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	176;"	d
INT_REMAINDER_OVERFLOW	virt-p2v/include/gnulib/intprops.h	349;"	d
INT_REMAINDER_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	208;"	d
INT_STRLEN_BOUND	virt-p2v/include/gnulib/intprops.h	117;"	d
INT_SUBTRACT_OVERFLOW	virt-p2v/include/gnulib/intprops.h	337;"	d
INT_SUBTRACT_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	169;"	d
INT_SUBTRACT_WRAPV	virt-p2v/include/gnulib/intprops.h	368;"	d
INT_SUBTRACT_WRAPV	virt-p2v/include/gnulib/intprops.h	372;"	d
INT_WIDTH	virt-p2v/include/gnulib/limits.h	96;"	d
INT_WIDTH	virt-p2v/include/gnulib/limits.in.h	95;"	d
INVALID_HANDLE_VALUE	torrent/src/file.cpp	423;"	d	file:
INVARIANT_CHECK	torrent/include/libtorrent/invariant_check.hpp	80;"	d
IP	torrent/bak/udp_tracker.cpp	/^	DWORD		IP;\/\/èç¹IP$/;"	m	class:CPeerHostInfo	file:
IPADDR_LEN	include/client.h	8;"	d
IPV6_PROTECTION_LEVEL	torrent/include/libtorrent/socket.hpp	111;"	d
ISSLASH	virt-p2v/include/gnulib/dosname.h	34;"	d
ISSLASH	virt-p2v/include/gnulib/dosname.h	37;"	d
ISSLASH	virt-p2v/include/gnulib/filename.h	59;"	d
ISSLASH	virt-p2v/include/gnulib/filename.h	91;"	d
IS_ABSOLUTE_FILE_NAME	virt-p2v/include/gnulib/dosname.h	45;"	d
IS_ABSOLUTE_FILE_NAME	virt-p2v/include/gnulib/dosname.h	47;"	d
IS_ABSOLUTE_FILE_NAME	virt-p2v/include/gnulib/filename.h	78;"	d
IS_ABSOLUTE_FILE_NAME	virt-p2v/include/gnulib/filename.h	81;"	d
IS_ABSOLUTE_FILE_NAME	virt-p2v/include/gnulib/filename.h	95;"	d
IS_ABSOLUTE_PATH	virt-p2v/include/gnulib/filename.h	102;"	d
IS_FILE_NAME_WITH_DIR	virt-p2v/include/gnulib/filename.h	86;"	d
IS_FILE_NAME_WITH_DIR	virt-p2v/include/gnulib/filename.h	97;"	d
IS_PATH_WITH_DIR	virt-p2v/include/gnulib/filename.h	103;"	d
IS_RELATIVE_FILE_NAME	virt-p2v/include/gnulib/dosname.h	50;"	d
IS_RELATIVE_FILE_NAME	virt-p2v/include/gnulib/filename.h	84;"	d
IS_RELATIVE_FILE_NAME	virt-p2v/include/gnulib/filename.h	96;"	d
InitStoreConfig	src/StoreConfig.c	/^static int InitStoreConfig()$/;"	f	file:
Initial	torrent/bak/tracker.cpp	/^int btTracker::Initial()$/;"	f	class:btTracker
JSON_TYPE	include/packet.h	73;"	d
K	torrent/src/sha512.cpp	/^static const u64 K[80] = {$/;"	m	namespace:libtorrent	file:
KADEMLIA_IO_HPP	torrent/include/libtorrent/kademlia/io.hpp	34;"	d
KADEMLIA_NODE_ENTRY_HPP	torrent/include/libtorrent/kademlia/node_entry.hpp	34;"	d
KERNEL_VERSION	src/linux.c	107;"	d	file:
LD	Makefile	/^LD = $(CROSS_COMPILE)ld$/;"	m
LD	torrent/Makefile	/^LD = $(CROSS_COMPILE)ld$/;"	m
LD	torrent/include/libtorrent/Makefile	/^LD = \/usr\/bin\/ld -m elf_x86_64$/;"	m
LDFLAGS	torrent/include/libtorrent/Makefile	/^LDFLAGS = -L\/usr\/lib\/x86_64-linux-gnu  -fvisibility=hidden -fvisibility-inlines-hidden$/;"	m
LEFT_BRACE	src/inirw.c	8;"	d	file:
LFLAGS	qt_pro/Makefile	/^LFLAGS        = -Wl,-O1 -Wl,-rpath,\/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/lib -shared -Wl,-soname,libqt.so.1$/;"	m
LIBICONV	torrent/include/libtorrent/Makefile	/^LIBICONV = -liconv$/;"	m
LIBOBJS	torrent/include/libtorrent/Makefile	/^LIBOBJS = $/;"	m
LIBS	qt_pro/Makefile	/^LIBS          = $(SUBLIBS)  -L\/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/lib -lQtGui -L\/usr\/local\/Trolltech\/QtEmbedded-4.5.2\/lib -lQtNetwork -lQtCore -lrt -lz -lm -ldl -lpthread$/;"	m
LIBS	torrent/include/libtorrent/Makefile	/^LIBS = -lboost_system -lpthread  $/;"	m
LIBTOOL	torrent/include/libtorrent/Makefile	/^LIBTOOL = $(SHELL) $(top_builddir)\/libtool$/;"	m
LIBTORRENT_AUX_PORTMAP_HPP_INCLUDED	torrent/include/libtorrent/aux_/portmap.hpp	34;"	d
LIBTORRENT_DHT_STATE_HPP	torrent/include/libtorrent/kademlia/dht_state.hpp	34;"	d
LIBTORRENT_ED25519_HPP	torrent/include/libtorrent/kademlia/ed25519.hpp	34;"	d
LIBTORRENT_GET_ITEM_HPP	torrent/include/libtorrent/kademlia/get_item.hpp	34;"	d
LIBTORRENT_GET_PEERS_HPP	torrent/include/libtorrent/kademlia/get_peers.hpp	34;"	d
LIBTORRENT_ITEM_HPP	torrent/include/libtorrent/kademlia/item.hpp	34;"	d
LIBTORRENT_LSD_HPP	torrent/include/libtorrent/aux_/lsd.hpp	34;"	d
LIBTORRENT_REVISION	torrent/include/libtorrent/version.hpp	47;"	d
LIBTORRENT_TYPES_HPP	torrent/include/libtorrent/kademlia/types.hpp	34;"	d
LIBTORRENT_VERSION	torrent/include/libtorrent/version.hpp	46;"	d
LIBTORRENT_VERSION_MAJOR	torrent/include/libtorrent/version.hpp	38;"	d
LIBTORRENT_VERSION_MINOR	torrent/include/libtorrent/version.hpp	39;"	d
LIBTORRENT_VERSION_NUM	torrent/include/libtorrent/version.hpp	44;"	d
LIBTORRENT_VERSION_TINY	torrent/include/libtorrent/version.hpp	40;"	d
LINK	qt_pro/Makefile	/^LINK          = g++$/;"	m
LINUX_TYPE	include/packet.h	54;"	d
LIPO	torrent/include/libtorrent/Makefile	/^LIPO = $/;"	m
LLONG_MAX	virt-p2v/include/gnulib/intprops.h	77;"	d
LLONG_MAX	virt-p2v/include/gnulib/limits.h	43;"	d
LLONG_MAX	virt-p2v/include/gnulib/limits.h	45;"	d
LLONG_MAX	virt-p2v/include/gnulib/limits.h	47;"	d
LLONG_MAX	virt-p2v/include/gnulib/limits.in.h	42;"	d
LLONG_MIN	virt-p2v/include/gnulib/intprops.h	78;"	d
LLONG_MIN	virt-p2v/include/gnulib/limits.h	34;"	d
LLONG_MIN	virt-p2v/include/gnulib/limits.h	36;"	d
LLONG_MIN	virt-p2v/include/gnulib/limits.h	38;"	d
LLONG_MIN	virt-p2v/include/gnulib/limits.in.h	33;"	d
LLONG_WIDTH	virt-p2v/include/gnulib/limits.h	100;"	d
LLONG_WIDTH	virt-p2v/include/gnulib/limits.in.h	99;"	d
LN_S	torrent/include/libtorrent/Makefile	/^LN_S = ln -s$/;"	m
LOAD64H	torrent/src/sha512.cpp	91;"	d	file:
LOG_DIR	include/config.h	39;"	d
LOG_DIR	src/log.c	11;"	d	file:
LOG_ERR_FILE	include/config.h	40;"	d
LOG_ERR_FILE	src/log.c	12;"	d	file:
LONGINT_INVALID	include/xstrtol.h	/^    LONGINT_INVALID = 4$/;"	e	enum:strtol_error
LONGINT_INVALID	virt-p2v/include/gnulib/xstrtol.h	/^    LONGINT_INVALID = 4$/;"	e	enum:strtol_error
LONGINT_INVALID_SUFFIX_CHAR	include/xstrtol.h	/^    LONGINT_INVALID_SUFFIX_CHAR = 2,$/;"	e	enum:strtol_error
LONGINT_INVALID_SUFFIX_CHAR	virt-p2v/include/gnulib/xstrtol.h	/^    LONGINT_INVALID_SUFFIX_CHAR = 2,$/;"	e	enum:strtol_error
LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW	include/xstrtol.h	/^    LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW = (LONGINT_INVALID_SUFFIX_CHAR$/;"	e	enum:strtol_error
LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW	virt-p2v/include/gnulib/xstrtol.h	/^    LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW = (LONGINT_INVALID_SUFFIX_CHAR$/;"	e	enum:strtol_error
LONGINT_OK	include/xstrtol.h	/^    LONGINT_OK = 0,$/;"	e	enum:strtol_error
LONGINT_OK	virt-p2v/include/gnulib/xstrtol.h	/^    LONGINT_OK = 0,$/;"	e	enum:strtol_error
LONGINT_OVERFLOW	include/xstrtol.h	/^    LONGINT_OVERFLOW = 1,$/;"	e	enum:strtol_error
LONGINT_OVERFLOW	virt-p2v/include/gnulib/xstrtol.h	/^    LONGINT_OVERFLOW = 1,$/;"	e	enum:strtol_error
LONG_BIT	virt-p2v/include/gnulib/limits.h	81;"	d
LONG_BIT	virt-p2v/include/gnulib/limits.h	83;"	d
LONG_BIT	virt-p2v/include/gnulib/limits.in.h	80;"	d
LONG_WIDTH	virt-p2v/include/gnulib/limits.h	98;"	d
LONG_WIDTH	virt-p2v/include/gnulib/limits.in.h	97;"	d
LOOP_MAJOR	src/linux.c	96;"	d	file:
LSTAT_FOLLOWS_SLASHED_SYMLINK	virt-p2v/include/config.h	605;"	d
LTLIBICONV	torrent/include/libtorrent/Makefile	/^LTLIBICONV = -liconv$/;"	m
LTLIBOBJS	torrent/include/libtorrent/Makefile	/^LTLIBOBJS = $/;"	m
LT_SYS_LIBRARY_PATH	torrent/include/libtorrent/Makefile	/^LT_SYS_LIBRARY_PATH = $/;"	m
Little_str2u16	include/packet.h	19;"	d
Little_str2u32	include/packet.h	20;"	d
Little_u16ToStr	include/packet.h	22;"	d
Little_u32ToStr	include/packet.h	23;"	d
LoadFormOffset	src/StoreConfig.c	/^int LoadFormOffset(yzy_file_t hd, uint64_t offset)$/;"	f
LoadStoreConfig	src/StoreConfig.c	/^int LoadStoreConfig(yzy_file_t hd)$/;"	f
MAINT	torrent/include/libtorrent/Makefile	/^MAINT = $/;"	m
MAINWINDOW_H	qt_pro/mainwindow.h	2;"	d
MAINWINDOW_PAGE	qt_pro/global.h	/^    MAINWINDOW_PAGE = 0,$/;"	e	enum:WINDOW_PAGE
MAJOR_IN_SYSMACROS	virt-p2v/include/config.h	613;"	d
MAJOR_VER	include/packet.h	8;"	d
MAKE	torrent/Makefile	/^MAKE = make$/;"	m
MAKEINFO	torrent/include/libtorrent/Makefile	/^MAKEINFO = ${SHELL} \/home\/ysr\/project\/libtorrent\/build-aux\/missing makeinfo$/;"	m
MAKE_TORRETN	test/test.c	/^	MAKE_TORRETN,$/;"	e	enum:BT_CMD	file:
MALLOC_0_IS_NONNULL	virt-p2v/include/config.h	616;"	d
MANIFEST_TOOL	torrent/include/libtorrent/Makefile	/^MANIFEST_TOOL = :$/;"	m
MAX	src/StoreConfig.c	17;"	d	file:
MAXBITS	torrent/src/puff.cpp	95;"	d	file:
MAXCODES	torrent/src/puff.cpp	98;"	d	file:
MAXDCODES	torrent/src/puff.cpp	97;"	d	file:
MAXINT64	include/StoreConfig.h	14;"	d
MAXLCODES	torrent/src/puff.cpp	96;"	d	file:
MAX_BUFLEN	include/base.h	77;"	d
MAX_CONFIGLEN	include/base.h	79;"	d
MAX_FILENAMELEN	include/base.h	78;"	d
MAX_FILENAMELEN	src/log.c	10;"	d	file:
MAX_FILE_SIZE	src/inirw.c	7;"	d	file:
MAX_LEN_SIZ	torrent/bak/tracker.cpp	53;"	d	file:
MAX_MBR_LBA	include/gpt.h	28;"	d
MAX_QUEUESIZE	include/queue.h	6;"	d
MAX_SUPPORTED_MEMORY_MB	virt-p2v/src/gui.c	97;"	d	file:
MAX_SUPPORTED_VCPUS	virt-p2v/src/gui.c	96;"	d	file:
MAX_VIDSBUFSIZE	include/task.h	4;"	d
MAYBE_ASIO_DEBUGGING	torrent/src/socket_type.cpp	180;"	d	file:
MBR_PARTTYPE	include/gpt.h	/^} MBR_PARTTYPE;$/;"	t	typeref:struct:__anon5
MBR_PART_INFO	include/gpt.h	/^} MBR_PART_INFO;$/;"	t	typeref:struct:__anon4
MD_MAJOR	src/linux.c	97;"	d	file:
METRIC	torrent/src/session_stats.cpp	55;"	d	file:
METRIC	torrent/src/session_stats.cpp	568;"	d	file:
MEXP_EOF	virt-p2v/include/miniexpect.h	/^  MEXP_EOF        = 0,$/;"	e	enum:mexp_status
MEXP_EOF	virt-p2v/miniexpect/miniexpect.h	/^  MEXP_EOF        = 0,$/;"	e	enum:mexp_status
MEXP_ERROR	virt-p2v/include/miniexpect.h	/^  MEXP_ERROR      = -1,$/;"	e	enum:mexp_status
MEXP_ERROR	virt-p2v/miniexpect/miniexpect.h	/^  MEXP_ERROR      = -1,$/;"	e	enum:mexp_status
MEXP_PCRE_ERROR	virt-p2v/include/miniexpect.h	/^  MEXP_PCRE_ERROR = -2,$/;"	e	enum:mexp_status
MEXP_PCRE_ERROR	virt-p2v/miniexpect/miniexpect.h	/^  MEXP_PCRE_ERROR = -2,$/;"	e	enum:mexp_status
MEXP_SPAWN_COOKED_MODE	virt-p2v/include/miniexpect.h	78;"	d
MEXP_SPAWN_COOKED_MODE	virt-p2v/miniexpect/miniexpect.h	78;"	d
MEXP_SPAWN_KEEP_FDS	virt-p2v/include/miniexpect.h	77;"	d
MEXP_SPAWN_KEEP_FDS	virt-p2v/miniexpect/miniexpect.h	77;"	d
MEXP_SPAWN_KEEP_SIGNALS	virt-p2v/include/miniexpect.h	76;"	d
MEXP_SPAWN_KEEP_SIGNALS	virt-p2v/miniexpect/miniexpect.h	76;"	d
MEXP_SPAWN_RAW_MODE	virt-p2v/include/miniexpect.h	79;"	d
MEXP_SPAWN_RAW_MODE	virt-p2v/miniexpect/miniexpect.h	79;"	d
MEXP_TIMEOUT	virt-p2v/include/miniexpect.h	/^  MEXP_TIMEOUT    = -3,$/;"	e	enum:mexp_status
MEXP_TIMEOUT	virt-p2v/miniexpect/miniexpect.h	/^  MEXP_TIMEOUT    = -3,$/;"	e	enum:mexp_status
MIN	src/StoreConfig.c	18;"	d	file:
MIN	torrent/src/sha512.cpp	107;"	d	file:
MINIEXPECT_H_	virt-p2v/include/miniexpect.h	30;"	d
MINIEXPECT_H_	virt-p2v/miniexpect/miniexpect.h	30;"	d
MINOR_VER	include/packet.h	9;"	d
MKDIR	qt_pro/Makefile	/^MKDIR         = mkdir -p$/;"	m
MKDIR_P	torrent/include/libtorrent/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MOVE	qt_pro/Makefile	/^MOVE          = mv -f$/;"	m
MainWindow	qt_pro/mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent) :$/;"	f	class:MainWindow
MainWindow	qt_pro/mainwindow.h	/^class MainWindow : public QWidget$/;"	c
Maj	torrent/src/sha512.cpp	99;"	d	file:
NBDKIT	virt-p2v/src/nbd.c	/^  NBDKIT = 3,$/;"	e	enum:nbd_server	file:
NBDKIT_NO_SA	virt-p2v/src/nbd.c	/^  NBDKIT_NO_SA = 4,$/;"	e	enum:nbd_server	file:
NETLINK_NO_ENOBUFS	torrent/include/libtorrent/socket.hpp	74;"	d
NETWORK_ONLINE_COMMAND	virt-p2v/src/utils.c	238;"	d	file:
NET_DHCP_KEY	include/config.h	10;"	d
NET_DNS1_KEY	include/config.h	14;"	d
NET_DNS2_KEY	include/config.h	15;"	d
NET_DOWN	qt_pro/global.h	/^    NET_DOWN,$/;"	e	enum:NET_STATE
NET_EXCEPTION	qt_pro/global.h	/^    NET_EXCEPTION,$/;"	e	enum:NET_STATE
NET_GATEWAY_KEY	include/config.h	12;"	d
NET_IP_KEY	include/config.h	11;"	d
NET_MAC_KEY	include/config.h	16;"	d
NET_NETMASK_KEY	include/config.h	13;"	d
NET_OFFLINE	qt_pro/global.h	/^    NET_OFFLINE,$/;"	e	enum:NET_STATE
NET_ONLINE	qt_pro/global.h	/^    NET_ONLINE,$/;"	e	enum:NET_STATE
NET_SECTION	include/config.h	9;"	d
NET_STATE	qt_pro/global.h	/^typedef enum NET_STATE{$/;"	g
NET_STATE	qt_pro/global.h	/^}NET_STATE;$/;"	t	typeref:enum:NET_STATE
NET_UP	qt_pro/global.h	/^    NET_UP = 0,$/;"	e	enum:NET_STATE
NL_BUFSIZE	torrent/src/enum_net.cpp	/^	constexpr int NL_BUFSIZE = 8192;$/;"	m	namespace:libtorrent::__anon102	file:
NM	torrent/include/libtorrent/Makefile	/^NM = \/usr\/bin\/nm -B$/;"	m
NMEDIT	torrent/include/libtorrent/Makefile	/^NMEDIT = $/;"	m
NODE_HPP	torrent/include/libtorrent/kademlia/node.hpp	34;"	d
NODE_ID_HPP	torrent/include/libtorrent/kademlia/node_id.hpp	33;"	d
NOMINMAX	torrent/include/libtorrent/config.hpp	238;"	d
NORMAL_INSTALL	torrent/include/libtorrent/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	torrent/include/libtorrent/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOTIFY_LOG_DIR	virt-p2v/include/p2v.h	93;"	d
NOTIFY_REMOTE_MESSAGE	virt-p2v/include/p2v.h	94;"	d
NOTIFY_STATUS	virt-p2v/include/p2v.h	95;"	d
NUM_DISKS_COLS	virt-p2v/src/gui.c	/^  NUM_DISKS_COLS,$/;"	e	enum:__anon165	file:
NUM_INTERFACES_COLS	virt-p2v/src/gui.c	/^  NUM_INTERFACES_COLS,$/;"	e	enum:__anon167	file:
NUM_REMOVABLE_COLS	virt-p2v/src/gui.c	/^  NUM_REMOVABLE_COLS,$/;"	e	enum:__anon166	file:
NUM_TYPES	torrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
OBJCOPY	Makefile	/^OBJCOPY = $(CROSS_COMPILE)objcopy$/;"	m
OBJCOPY	torrent/Makefile	/^OBJCOPY = $(CROSS_COMPILE)objcopy$/;"	m
OBJDUMP	torrent/include/libtorrent/Makefile	/^OBJDUMP = objdump$/;"	m
OBJECTS	qt_pro/Makefile	/^OBJECTS       = main.o \\$/;"	m
OBJECTS_DIR	qt_pro/Makefile	/^OBJECTS_DIR   = .\/$/;"	m
OBJEXT	torrent/include/libtorrent/Makefile	/^OBJEXT = o$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR := $(TOP_DIR)\/obj$/;"	m
OBJ_DIR	torrent/Makefile	/^OBJ_DIR := $(TOP_DIR)\/obj$/;"	m
OBSERVER_HPP	torrent/include/libtorrent/kademlia/observer.hpp	34;"	d
OPENSSL_INCLUDES	torrent/include/libtorrent/Makefile	/^OPENSSL_INCLUDES = $/;"	m
OPENSSL_LDFLAGS	torrent/include/libtorrent/Makefile	/^OPENSSL_LDFLAGS = $/;"	m
OPENSSL_LIBS	torrent/include/libtorrent/Makefile	/^OPENSSL_LIBS = -lssl -lcrypto$/;"	m
OPERATETIMEOUTTIMER_H	qt_pro/operatetimeouttimer.h	2;"	d
ORDER	include/packet.h	/^	ORDER,$/;"	e	enum:yzy_cmd
OSWINDOW_H	qt_pro/oswindow.h	2;"	d
OSWINDOW_PAGE	qt_pro/global.h	/^    OSWINDOW_PAGE,$/;"	e	enum:WINDOW_PAGE
OSWindow	qt_pro/oswindow.cpp	/^OSWindow::OSWindow(QWidget *parent) :$/;"	f	class:OSWindow
OSWindow	qt_pro/oswindow.h	/^class OSWindow : public QWidget$/;"	c
OTOOL	torrent/include/libtorrent/Makefile	/^OTOOL = $/;"	m
OTOOL64	torrent/include/libtorrent/Makefile	/^OTOOL64 = $/;"	m
OUTPUT_ALLOCATION_NONE	virt-p2v/include/p2v-config.h	/^  OUTPUT_ALLOCATION_NONE,   \/* output allocation not set *\/$/;"	e	enum:output_allocation
OUTPUT_ALLOCATION_PREALLOCATED	virt-p2v/include/p2v-config.h	/^  OUTPUT_ALLOCATION_PREALLOCATED, \/* preallocated *\/$/;"	e	enum:output_allocation
OUTPUT_ALLOCATION_SPARSE	virt-p2v/include/p2v-config.h	/^  OUTPUT_ALLOCATION_SPARSE, \/* sparse *\/$/;"	e	enum:output_allocation
OperateTimeOutTimer	qt_pro/operatetimeouttimer.cpp	/^OperateTimeOutTimer::OperateTimeOutTimer()$/;"	f	class:OperateTimeOutTimer
OperateTimeOutTimer	qt_pro/operatetimeouttimer.h	/^class OperateTimeOutTimer : public QObject$/;"	c
P2V_DIR	Makefile	/^P2V_DIR := $(TOP_DIR)\/virt-p2v$/;"	m
P2V_DISK_FAST_ERR	include/error.h	/^    P2V_DISK_FAST_ERR,$/;"	e	enum:ERR_MSG_DESC
P2V_DISK_FAST_ERR	qt_pro/global.h	/^    P2V_DISK_FAST_ERR,$/;"	e	enum:ERR_MSG_DESC
P2V_DISK_FAST_ERR	virt-p2v/src/conversion.c	/^    P2V_DISK_FAST_ERR,$/;"	e	enum:ERR_MSG_DESC	file:
P2V_DISK_NO_FOUND_ERR	include/error.h	/^	P2V_DISK_NO_FOUND_ERR,$/;"	e	enum:ERR_MSG_DESC
P2V_DISK_NO_FOUND_ERR	qt_pro/global.h	/^    P2V_DISK_NO_FOUND_ERR,$/;"	e	enum:ERR_MSG_DESC
P2V_DISK_NO_FOUND_ERR	virt-p2v/src/conversion.c	/^    P2V_DISK_NO_FOUND_ERR,$/;"	e	enum:ERR_MSG_DESC	file:
P2V_ERR	include/error.h	/^	P2V_ERR,$/;"	e	enum:ERR_MSG_DESC
P2V_ERR	qt_pro/global.h	/^    P2V_ERR,$/;"	e	enum:ERR_MSG_DESC
P2V_ERR	virt-p2v/src/conversion.c	/^    P2V_ERR,$/;"	e	enum:ERR_MSG_DESC	file:
P2V_GCC_VERSION	virt-p2v/include/p2v.h	37;"	d
P2V_GCC_VERSION	virt-p2v/include/p2v.h	40;"	d
P2V_H	virt-p2v/include/p2v.h	19;"	d
P2V_OBJ	virt-p2v/Makefile	/^P2V_OBJ := p2v_transform.o p2v_config.o conversion.o cpuid.o inhibit.o kernel-cmdline.o kernel-config.o kernel.o \\$/;"	m
P2V_OS_PIPE	include/socket.h	/^    P2V_OS_PIPE,$/;"	e	enum:PIPE_MSG
P2V_OS_PIPE	qt_pro/global.h	/^    P2V_OS_PIPE,$/;"	e	enum:PIPE_MSG
P2V_OS_PROGRESS_PIPE	virt-p2v/src/conversion.c	58;"	d	file:
P2V_OS_TRANSFORM	include/packet.h	/^	P2V_OS_TRANSFORM = 9020,$/;"	e	enum:yzy_cmd
P2V_OS_TRANSFORM	test/test.c	/^    P2V_OS_TRANSFORM = 9020,$/;"	e	enum:yzy_cmd	file:
P2V_PROGRESS	include/packet.h	/^	P2V_PROGRESS = 9021,$/;"	e	enum:yzy_cmd
P2V_PROGRESS	test/test.c	/^    P2V_PROGRESS = 9021,$/;"	e	enum:yzy_cmd	file:
PACKAGE	torrent/include/libtorrent/Makefile	/^PACKAGE = libtorrent-rasterbar$/;"	m
PACKAGE	virt-p2v/include/config.h	631;"	d
PACKAGE_BUGREPORT	torrent/include/libtorrent/Makefile	/^PACKAGE_BUGREPORT = arvid@libtorrent.org$/;"	m
PACKAGE_BUGREPORT	virt-p2v/include/config.h	634;"	d
PACKAGE_NAME	torrent/include/libtorrent/Makefile	/^PACKAGE_NAME = libtorrent-rasterbar$/;"	m
PACKAGE_NAME	virt-p2v/include/config.h	637;"	d
PACKAGE_STRING	torrent/include/libtorrent/Makefile	/^PACKAGE_STRING = libtorrent-rasterbar 1.2.6$/;"	m
PACKAGE_STRING	virt-p2v/include/config.h	640;"	d
PACKAGE_TARNAME	torrent/include/libtorrent/Makefile	/^PACKAGE_TARNAME = libtorrent-rasterbar$/;"	m
PACKAGE_TARNAME	virt-p2v/include/config.h	643;"	d
PACKAGE_URL	torrent/include/libtorrent/Makefile	/^PACKAGE_URL = http:\/\/www.libtorrent.org$/;"	m
PACKAGE_URL	virt-p2v/include/config.h	646;"	d
PACKAGE_VERSION	torrent/include/libtorrent/Makefile	/^PACKAGE_VERSION = 1.2.6$/;"	m
PACKAGE_VERSION	virt-p2v/include/config.h	649;"	d
PACKAGE_VERSION_EXTRA	virt-p2v/include/config.h	652;"	d
PACKAGE_VERSION_FULL	virt-p2v/include/config.h	655;"	d
PACKAGE_VERSION_MAJOR	virt-p2v/include/config.h	658;"	d
PACKAGE_VERSION_MINOR	virt-p2v/include/config.h	661;"	d
PACKAGE_VERSION_RELEASE	virt-p2v/include/config.h	664;"	d
PACKET_LEN	include/socket.h	17;"	d
PACKET_LEN_OFFSET	include/socket.h	4;"	d
PACKET_ORDER_OFFSET	include/socket.h	5;"	d
PACKET_SUPPLEMENTARY_OFFSET	include/socket.h	7;"	d
PACKET_TOKEN_OFFSET	include/socket.h	6;"	d
PARTITION_INFO	include/gpt.h	/^} PARTITION_INFO;$/;"	t	typeref:struct:__anon9
PATH_SEPARATOR	torrent/include/libtorrent/Makefile	/^PATH_SEPARATOR = :$/;"	m
PCRE_PARTIAL_SOFT	virt-p2v/miniexpect/miniexpect.c	44;"	d	file:
PED_DEVICE_AOE	include/device.h	/^        PED_DEVICE_AOE          = 16, $/;"	e	enum:__anon3
PED_DEVICE_ATARAID	include/device.h	/^        PED_DEVICE_ATARAID      = 6,$/;"	e	enum:__anon3
PED_DEVICE_CPQARRAY	include/device.h	/^        PED_DEVICE_CPQARRAY     = 4,$/;"	e	enum:__anon3
PED_DEVICE_DAC960	include/device.h	/^        PED_DEVICE_DAC960       = 3,$/;"	e	enum:__anon3
PED_DEVICE_DASD	include/device.h	/^        PED_DEVICE_DASD         = 9,$/;"	e	enum:__anon3
PED_DEVICE_DM	include/device.h	/^        PED_DEVICE_DM           = 12, $/;"	e	enum:__anon3
PED_DEVICE_FILE	include/device.h	/^        PED_DEVICE_FILE         = 5,$/;"	e	enum:__anon3
PED_DEVICE_I2O	include/device.h	/^        PED_DEVICE_I2O          = 7,$/;"	e	enum:__anon3
PED_DEVICE_IDE	include/device.h	/^        PED_DEVICE_IDE          = 2,$/;"	e	enum:__anon3
PED_DEVICE_LOOP	include/device.h	/^        PED_DEVICE_LOOP         = 18, $/;"	e	enum:__anon3
PED_DEVICE_MD	include/device.h	/^        PED_DEVICE_MD           = 17, $/;"	e	enum:__anon3
PED_DEVICE_NVME	include/device.h	/^        PED_DEVICE_NVME         = 19, $/;"	e	enum:__anon3
PED_DEVICE_PMEM	include/device.h	/^        PED_DEVICE_PMEM         = 21$/;"	e	enum:__anon3
PED_DEVICE_RAM	include/device.h	/^        PED_DEVICE_RAM          = 20, $/;"	e	enum:__anon3
PED_DEVICE_SCSI	include/device.h	/^        PED_DEVICE_SCSI         = 1,$/;"	e	enum:__anon3
PED_DEVICE_SDMMC	include/device.h	/^        PED_DEVICE_SDMMC        = 14, $/;"	e	enum:__anon3
PED_DEVICE_SX8	include/device.h	/^        PED_DEVICE_SX8          = 11, $/;"	e	enum:__anon3
PED_DEVICE_UBD	include/device.h	/^        PED_DEVICE_UBD          = 8,$/;"	e	enum:__anon3
PED_DEVICE_UNKNOWN	include/device.h	/^        PED_DEVICE_UNKNOWN      = 0,$/;"	e	enum:__anon3
PED_DEVICE_VIODASD	include/device.h	/^        PED_DEVICE_VIODASD      = 10, $/;"	e	enum:__anon3
PED_DEVICE_VIRTBLK	include/device.h	/^        PED_DEVICE_VIRTBLK      = 15, $/;"	e	enum:__anon3
PED_DEVICE_XVD	include/device.h	/^        PED_DEVICE_XVD          = 13, $/;"	e	enum:__anon3
PED_SECTOR_SIZE_DEFAULT	src/linux.c	8;"	d	file:
PIPETHREAD_H	qt_pro/pipethread.h	2;"	d
PIPE_EVENT	include/socket.h	/^    PIPE_EVENT,$/;"	e	enum:PIPE_TYPE
PIPE_MSG	include/socket.h	/^typedef enum PIPE_MSG{$/;"	g
PIPE_MSG	include/socket.h	/^}PIPE_MSG;$/;"	t	typeref:enum:PIPE_MSG
PIPE_MSG	qt_pro/global.h	/^typedef enum PIPE_MSG{$/;"	g
PIPE_MSG	qt_pro/global.h	/^}PIPE_MSG;$/;"	t	typeref:enum:PIPE_MSG
PIPE_QT	include/socket.h	/^    PIPE_QT,$/;"	e	enum:PIPE_TYPE
PIPE_TCP	include/socket.h	/^    PIPE_TCP = 0,$/;"	e	enum:PIPE_TYPE
PIPE_TYPE	include/socket.h	/^typedef enum PIPE_TYPE {$/;"	g
PIPE_TYPE	include/socket.h	/^}PIPE_TYPE;$/;"	t	typeref:enum:PIPE_TYPE
PIPE_UDP	include/socket.h	/^    PIPE_UDP,$/;"	e	enum:PIPE_TYPE
PKG_CONFIG	torrent/include/libtorrent/Makefile	/^PKG_CONFIG = \/usr\/bin\/pkg-config$/;"	m
POLYNOMIAL	src/StoreConfig.c	/^uint32_t POLYNOMIAL = 0xEDB88320;$/;"	v
POST_INSTALL	torrent/include/libtorrent/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	torrent/include/libtorrent/Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	torrent/include/libtorrent/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	torrent/include/libtorrent/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRINT_HPP_	torrent/bak/print.hpp	2;"	d
PRIX16	virt-p2v/include/gnulib/inttypes.h	620;"	d
PRIX16	virt-p2v/include/gnulib/inttypes.h	622;"	d
PRIX16	virt-p2v/include/gnulib/inttypes.in.h	146;"	d
PRIX16	virt-p2v/include/gnulib/inttypes.in.h	148;"	d
PRIX32	virt-p2v/include/gnulib/inttypes.h	656;"	d
PRIX32	virt-p2v/include/gnulib/inttypes.h	658;"	d
PRIX32	virt-p2v/include/gnulib/inttypes.in.h	182;"	d
PRIX32	virt-p2v/include/gnulib/inttypes.in.h	184;"	d
PRIX64	virt-p2v/include/gnulib/inttypes.h	699;"	d
PRIX64	virt-p2v/include/gnulib/inttypes.h	700;"	d
PRIX64	virt-p2v/include/gnulib/inttypes.in.h	225;"	d
PRIX64	virt-p2v/include/gnulib/inttypes.in.h	226;"	d
PRIX8	virt-p2v/include/gnulib/inttypes.h	584;"	d
PRIX8	virt-p2v/include/gnulib/inttypes.h	586;"	d
PRIX8	virt-p2v/include/gnulib/inttypes.in.h	110;"	d
PRIX8	virt-p2v/include/gnulib/inttypes.in.h	112;"	d
PRIXFAST16	virt-p2v/include/gnulib/inttypes.h	894;"	d
PRIXFAST16	virt-p2v/include/gnulib/inttypes.h	896;"	d
PRIXFAST16	virt-p2v/include/gnulib/inttypes.h	898;"	d
PRIXFAST16	virt-p2v/include/gnulib/inttypes.in.h	420;"	d
PRIXFAST16	virt-p2v/include/gnulib/inttypes.in.h	422;"	d
PRIXFAST32	virt-p2v/include/gnulib/inttypes.h	942;"	d
PRIXFAST32	virt-p2v/include/gnulib/inttypes.h	944;"	d
PRIXFAST32	virt-p2v/include/gnulib/inttypes.h	946;"	d
PRIXFAST32	virt-p2v/include/gnulib/inttypes.in.h	468;"	d
PRIXFAST32	virt-p2v/include/gnulib/inttypes.in.h	470;"	d
PRIXFAST64	virt-p2v/include/gnulib/inttypes.h	973;"	d
PRIXFAST64	virt-p2v/include/gnulib/inttypes.h	974;"	d
PRIXFAST64	virt-p2v/include/gnulib/inttypes.in.h	499;"	d
PRIXFAST64	virt-p2v/include/gnulib/inttypes.in.h	500;"	d
PRIXFAST8	virt-p2v/include/gnulib/inttypes.h	846;"	d
PRIXFAST8	virt-p2v/include/gnulib/inttypes.h	848;"	d
PRIXFAST8	virt-p2v/include/gnulib/inttypes.h	850;"	d
PRIXFAST8	virt-p2v/include/gnulib/inttypes.in.h	372;"	d
PRIXFAST8	virt-p2v/include/gnulib/inttypes.in.h	374;"	d
PRIXLEAST16	virt-p2v/include/gnulib/inttypes.h	749;"	d
PRIXLEAST16	virt-p2v/include/gnulib/inttypes.h	750;"	d
PRIXLEAST16	virt-p2v/include/gnulib/inttypes.in.h	275;"	d
PRIXLEAST16	virt-p2v/include/gnulib/inttypes.in.h	276;"	d
PRIXLEAST32	virt-p2v/include/gnulib/inttypes.h	773;"	d
PRIXLEAST32	virt-p2v/include/gnulib/inttypes.h	774;"	d
PRIXLEAST32	virt-p2v/include/gnulib/inttypes.in.h	299;"	d
PRIXLEAST32	virt-p2v/include/gnulib/inttypes.in.h	300;"	d
PRIXLEAST64	virt-p2v/include/gnulib/inttypes.h	800;"	d
PRIXLEAST64	virt-p2v/include/gnulib/inttypes.h	801;"	d
PRIXLEAST64	virt-p2v/include/gnulib/inttypes.in.h	326;"	d
PRIXLEAST64	virt-p2v/include/gnulib/inttypes.in.h	327;"	d
PRIXLEAST8	virt-p2v/include/gnulib/inttypes.h	725;"	d
PRIXLEAST8	virt-p2v/include/gnulib/inttypes.h	726;"	d
PRIXLEAST8	virt-p2v/include/gnulib/inttypes.in.h	251;"	d
PRIXLEAST8	virt-p2v/include/gnulib/inttypes.in.h	252;"	d
PRIXMAX	virt-p2v/include/gnulib/inttypes.h	1019;"	d
PRIXMAX	virt-p2v/include/gnulib/inttypes.h	1021;"	d
PRIXMAX	virt-p2v/include/gnulib/inttypes.h	1023;"	d
PRIXMAX	virt-p2v/include/gnulib/inttypes.in.h	545;"	d
PRIXMAX	virt-p2v/include/gnulib/inttypes.in.h	547;"	d
PRIXPTR	virt-p2v/include/gnulib/inttypes.h	1058;"	d
PRIXPTR	virt-p2v/include/gnulib/inttypes.h	1060;"	d
PRIXPTR	virt-p2v/include/gnulib/inttypes.in.h	584;"	d
PRIXPTR	virt-p2v/include/gnulib/inttypes.in.h	586;"	d
PRId16	virt-p2v/include/gnulib/inttypes.h	590;"	d
PRId16	virt-p2v/include/gnulib/inttypes.h	592;"	d
PRId16	virt-p2v/include/gnulib/inttypes.in.h	116;"	d
PRId16	virt-p2v/include/gnulib/inttypes.in.h	118;"	d
PRId32	virt-p2v/include/gnulib/inttypes.h	626;"	d
PRId32	virt-p2v/include/gnulib/inttypes.h	628;"	d
PRId32	virt-p2v/include/gnulib/inttypes.in.h	152;"	d
PRId32	virt-p2v/include/gnulib/inttypes.in.h	154;"	d
PRId64	virt-p2v/include/gnulib/inttypes.h	670;"	d
PRId64	virt-p2v/include/gnulib/inttypes.h	671;"	d
PRId64	virt-p2v/include/gnulib/inttypes.in.h	196;"	d
PRId64	virt-p2v/include/gnulib/inttypes.in.h	197;"	d
PRId8	virt-p2v/include/gnulib/inttypes.h	554;"	d
PRId8	virt-p2v/include/gnulib/inttypes.h	556;"	d
PRId8	virt-p2v/include/gnulib/inttypes.in.h	80;"	d
PRId8	virt-p2v/include/gnulib/inttypes.in.h	82;"	d
PRIdFAST16	virt-p2v/include/gnulib/inttypes.h	854;"	d
PRIdFAST16	virt-p2v/include/gnulib/inttypes.h	856;"	d
PRIdFAST16	virt-p2v/include/gnulib/inttypes.h	858;"	d
PRIdFAST16	virt-p2v/include/gnulib/inttypes.in.h	380;"	d
PRIdFAST16	virt-p2v/include/gnulib/inttypes.in.h	382;"	d
PRIdFAST32	virt-p2v/include/gnulib/inttypes.h	902;"	d
PRIdFAST32	virt-p2v/include/gnulib/inttypes.h	904;"	d
PRIdFAST32	virt-p2v/include/gnulib/inttypes.h	906;"	d
PRIdFAST32	virt-p2v/include/gnulib/inttypes.in.h	428;"	d
PRIdFAST32	virt-p2v/include/gnulib/inttypes.in.h	430;"	d
PRIdFAST64	virt-p2v/include/gnulib/inttypes.h	951;"	d
PRIdFAST64	virt-p2v/include/gnulib/inttypes.h	952;"	d
PRIdFAST64	virt-p2v/include/gnulib/inttypes.in.h	477;"	d
PRIdFAST64	virt-p2v/include/gnulib/inttypes.in.h	478;"	d
PRIdFAST8	virt-p2v/include/gnulib/inttypes.h	806;"	d
PRIdFAST8	virt-p2v/include/gnulib/inttypes.h	808;"	d
PRIdFAST8	virt-p2v/include/gnulib/inttypes.h	810;"	d
PRIdFAST8	virt-p2v/include/gnulib/inttypes.in.h	332;"	d
PRIdFAST8	virt-p2v/include/gnulib/inttypes.in.h	334;"	d
PRIdLEAST16	virt-p2v/include/gnulib/inttypes.h	729;"	d
PRIdLEAST16	virt-p2v/include/gnulib/inttypes.h	730;"	d
PRIdLEAST16	virt-p2v/include/gnulib/inttypes.in.h	255;"	d
PRIdLEAST16	virt-p2v/include/gnulib/inttypes.in.h	256;"	d
PRIdLEAST32	virt-p2v/include/gnulib/inttypes.h	753;"	d
PRIdLEAST32	virt-p2v/include/gnulib/inttypes.h	754;"	d
PRIdLEAST32	virt-p2v/include/gnulib/inttypes.in.h	279;"	d
PRIdLEAST32	virt-p2v/include/gnulib/inttypes.in.h	280;"	d
PRIdLEAST64	virt-p2v/include/gnulib/inttypes.h	778;"	d
PRIdLEAST64	virt-p2v/include/gnulib/inttypes.h	779;"	d
PRIdLEAST64	virt-p2v/include/gnulib/inttypes.in.h	304;"	d
PRIdLEAST64	virt-p2v/include/gnulib/inttypes.in.h	305;"	d
PRIdLEAST8	virt-p2v/include/gnulib/inttypes.h	705;"	d
PRIdLEAST8	virt-p2v/include/gnulib/inttypes.h	706;"	d
PRIdLEAST8	virt-p2v/include/gnulib/inttypes.in.h	231;"	d
PRIdLEAST8	virt-p2v/include/gnulib/inttypes.in.h	232;"	d
PRIdMAX	virt-p2v/include/gnulib/inttypes.h	979;"	d
PRIdMAX	virt-p2v/include/gnulib/inttypes.h	981;"	d
PRIdMAX	virt-p2v/include/gnulib/inttypes.h	983;"	d
PRIdMAX	virt-p2v/include/gnulib/inttypes.in.h	505;"	d
PRIdMAX	virt-p2v/include/gnulib/inttypes.in.h	507;"	d
PRIdPTR	virt-p2v/include/gnulib/inttypes.h	1028;"	d
PRIdPTR	virt-p2v/include/gnulib/inttypes.h	1030;"	d
PRIdPTR	virt-p2v/include/gnulib/inttypes.in.h	554;"	d
PRIdPTR	virt-p2v/include/gnulib/inttypes.in.h	556;"	d
PRIi16	virt-p2v/include/gnulib/inttypes.h	596;"	d
PRIi16	virt-p2v/include/gnulib/inttypes.h	598;"	d
PRIi16	virt-p2v/include/gnulib/inttypes.in.h	122;"	d
PRIi16	virt-p2v/include/gnulib/inttypes.in.h	124;"	d
PRIi32	virt-p2v/include/gnulib/inttypes.h	632;"	d
PRIi32	virt-p2v/include/gnulib/inttypes.h	634;"	d
PRIi32	virt-p2v/include/gnulib/inttypes.in.h	158;"	d
PRIi32	virt-p2v/include/gnulib/inttypes.in.h	160;"	d
PRIi64	virt-p2v/include/gnulib/inttypes.h	674;"	d
PRIi64	virt-p2v/include/gnulib/inttypes.h	675;"	d
PRIi64	virt-p2v/include/gnulib/inttypes.in.h	200;"	d
PRIi64	virt-p2v/include/gnulib/inttypes.in.h	201;"	d
PRIi8	virt-p2v/include/gnulib/inttypes.h	560;"	d
PRIi8	virt-p2v/include/gnulib/inttypes.h	562;"	d
PRIi8	virt-p2v/include/gnulib/inttypes.in.h	86;"	d
PRIi8	virt-p2v/include/gnulib/inttypes.in.h	88;"	d
PRIiFAST16	virt-p2v/include/gnulib/inttypes.h	862;"	d
PRIiFAST16	virt-p2v/include/gnulib/inttypes.h	864;"	d
PRIiFAST16	virt-p2v/include/gnulib/inttypes.h	866;"	d
PRIiFAST16	virt-p2v/include/gnulib/inttypes.in.h	388;"	d
PRIiFAST16	virt-p2v/include/gnulib/inttypes.in.h	390;"	d
PRIiFAST32	virt-p2v/include/gnulib/inttypes.h	910;"	d
PRIiFAST32	virt-p2v/include/gnulib/inttypes.h	912;"	d
PRIiFAST32	virt-p2v/include/gnulib/inttypes.h	914;"	d
PRIiFAST32	virt-p2v/include/gnulib/inttypes.in.h	436;"	d
PRIiFAST32	virt-p2v/include/gnulib/inttypes.in.h	438;"	d
PRIiFAST64	virt-p2v/include/gnulib/inttypes.h	955;"	d
PRIiFAST64	virt-p2v/include/gnulib/inttypes.h	956;"	d
PRIiFAST64	virt-p2v/include/gnulib/inttypes.in.h	481;"	d
PRIiFAST64	virt-p2v/include/gnulib/inttypes.in.h	482;"	d
PRIiFAST8	virt-p2v/include/gnulib/inttypes.h	814;"	d
PRIiFAST8	virt-p2v/include/gnulib/inttypes.h	816;"	d
PRIiFAST8	virt-p2v/include/gnulib/inttypes.h	818;"	d
PRIiFAST8	virt-p2v/include/gnulib/inttypes.in.h	340;"	d
PRIiFAST8	virt-p2v/include/gnulib/inttypes.in.h	342;"	d
PRIiLEAST16	virt-p2v/include/gnulib/inttypes.h	733;"	d
PRIiLEAST16	virt-p2v/include/gnulib/inttypes.h	734;"	d
PRIiLEAST16	virt-p2v/include/gnulib/inttypes.in.h	259;"	d
PRIiLEAST16	virt-p2v/include/gnulib/inttypes.in.h	260;"	d
PRIiLEAST32	virt-p2v/include/gnulib/inttypes.h	757;"	d
PRIiLEAST32	virt-p2v/include/gnulib/inttypes.h	758;"	d
PRIiLEAST32	virt-p2v/include/gnulib/inttypes.in.h	283;"	d
PRIiLEAST32	virt-p2v/include/gnulib/inttypes.in.h	284;"	d
PRIiLEAST64	virt-p2v/include/gnulib/inttypes.h	782;"	d
PRIiLEAST64	virt-p2v/include/gnulib/inttypes.h	783;"	d
PRIiLEAST64	virt-p2v/include/gnulib/inttypes.in.h	308;"	d
PRIiLEAST64	virt-p2v/include/gnulib/inttypes.in.h	309;"	d
PRIiLEAST8	virt-p2v/include/gnulib/inttypes.h	709;"	d
PRIiLEAST8	virt-p2v/include/gnulib/inttypes.h	710;"	d
PRIiLEAST8	virt-p2v/include/gnulib/inttypes.in.h	235;"	d
PRIiLEAST8	virt-p2v/include/gnulib/inttypes.in.h	236;"	d
PRIiMAX	virt-p2v/include/gnulib/inttypes.h	987;"	d
PRIiMAX	virt-p2v/include/gnulib/inttypes.h	989;"	d
PRIiMAX	virt-p2v/include/gnulib/inttypes.h	991;"	d
PRIiMAX	virt-p2v/include/gnulib/inttypes.in.h	513;"	d
PRIiMAX	virt-p2v/include/gnulib/inttypes.in.h	515;"	d
PRIiPTR	virt-p2v/include/gnulib/inttypes.h	1034;"	d
PRIiPTR	virt-p2v/include/gnulib/inttypes.h	1036;"	d
PRIiPTR	virt-p2v/include/gnulib/inttypes.in.h	560;"	d
PRIiPTR	virt-p2v/include/gnulib/inttypes.in.h	562;"	d
PRIo16	virt-p2v/include/gnulib/inttypes.h	602;"	d
PRIo16	virt-p2v/include/gnulib/inttypes.h	604;"	d
PRIo16	virt-p2v/include/gnulib/inttypes.in.h	128;"	d
PRIo16	virt-p2v/include/gnulib/inttypes.in.h	130;"	d
PRIo32	virt-p2v/include/gnulib/inttypes.h	638;"	d
PRIo32	virt-p2v/include/gnulib/inttypes.h	640;"	d
PRIo32	virt-p2v/include/gnulib/inttypes.in.h	164;"	d
PRIo32	virt-p2v/include/gnulib/inttypes.in.h	166;"	d
PRIo64	virt-p2v/include/gnulib/inttypes.h	687;"	d
PRIo64	virt-p2v/include/gnulib/inttypes.h	688;"	d
PRIo64	virt-p2v/include/gnulib/inttypes.in.h	213;"	d
PRIo64	virt-p2v/include/gnulib/inttypes.in.h	214;"	d
PRIo8	virt-p2v/include/gnulib/inttypes.h	566;"	d
PRIo8	virt-p2v/include/gnulib/inttypes.h	568;"	d
PRIo8	virt-p2v/include/gnulib/inttypes.in.h	92;"	d
PRIo8	virt-p2v/include/gnulib/inttypes.in.h	94;"	d
PRIoFAST16	virt-p2v/include/gnulib/inttypes.h	870;"	d
PRIoFAST16	virt-p2v/include/gnulib/inttypes.h	872;"	d
PRIoFAST16	virt-p2v/include/gnulib/inttypes.h	874;"	d
PRIoFAST16	virt-p2v/include/gnulib/inttypes.in.h	396;"	d
PRIoFAST16	virt-p2v/include/gnulib/inttypes.in.h	398;"	d
PRIoFAST32	virt-p2v/include/gnulib/inttypes.h	918;"	d
PRIoFAST32	virt-p2v/include/gnulib/inttypes.h	920;"	d
PRIoFAST32	virt-p2v/include/gnulib/inttypes.h	922;"	d
PRIoFAST32	virt-p2v/include/gnulib/inttypes.in.h	444;"	d
PRIoFAST32	virt-p2v/include/gnulib/inttypes.in.h	446;"	d
PRIoFAST64	virt-p2v/include/gnulib/inttypes.h	961;"	d
PRIoFAST64	virt-p2v/include/gnulib/inttypes.h	962;"	d
PRIoFAST64	virt-p2v/include/gnulib/inttypes.in.h	487;"	d
PRIoFAST64	virt-p2v/include/gnulib/inttypes.in.h	488;"	d
PRIoFAST8	virt-p2v/include/gnulib/inttypes.h	822;"	d
PRIoFAST8	virt-p2v/include/gnulib/inttypes.h	824;"	d
PRIoFAST8	virt-p2v/include/gnulib/inttypes.h	826;"	d
PRIoFAST8	virt-p2v/include/gnulib/inttypes.in.h	348;"	d
PRIoFAST8	virt-p2v/include/gnulib/inttypes.in.h	350;"	d
PRIoLEAST16	virt-p2v/include/gnulib/inttypes.h	737;"	d
PRIoLEAST16	virt-p2v/include/gnulib/inttypes.h	738;"	d
PRIoLEAST16	virt-p2v/include/gnulib/inttypes.in.h	263;"	d
PRIoLEAST16	virt-p2v/include/gnulib/inttypes.in.h	264;"	d
PRIoLEAST32	virt-p2v/include/gnulib/inttypes.h	761;"	d
PRIoLEAST32	virt-p2v/include/gnulib/inttypes.h	762;"	d
PRIoLEAST32	virt-p2v/include/gnulib/inttypes.in.h	287;"	d
PRIoLEAST32	virt-p2v/include/gnulib/inttypes.in.h	288;"	d
PRIoLEAST64	virt-p2v/include/gnulib/inttypes.h	788;"	d
PRIoLEAST64	virt-p2v/include/gnulib/inttypes.h	789;"	d
PRIoLEAST64	virt-p2v/include/gnulib/inttypes.in.h	314;"	d
PRIoLEAST64	virt-p2v/include/gnulib/inttypes.in.h	315;"	d
PRIoLEAST8	virt-p2v/include/gnulib/inttypes.h	713;"	d
PRIoLEAST8	virt-p2v/include/gnulib/inttypes.h	714;"	d
PRIoLEAST8	virt-p2v/include/gnulib/inttypes.in.h	239;"	d
PRIoLEAST8	virt-p2v/include/gnulib/inttypes.in.h	240;"	d
PRIoMAX	virt-p2v/include/gnulib/inttypes.h	995;"	d
PRIoMAX	virt-p2v/include/gnulib/inttypes.h	997;"	d
PRIoMAX	virt-p2v/include/gnulib/inttypes.h	999;"	d
PRIoMAX	virt-p2v/include/gnulib/inttypes.in.h	521;"	d
PRIoMAX	virt-p2v/include/gnulib/inttypes.in.h	523;"	d
PRIoPTR	virt-p2v/include/gnulib/inttypes.h	1040;"	d
PRIoPTR	virt-p2v/include/gnulib/inttypes.h	1042;"	d
PRIoPTR	virt-p2v/include/gnulib/inttypes.in.h	566;"	d
PRIoPTR	virt-p2v/include/gnulib/inttypes.in.h	568;"	d
PRIu16	virt-p2v/include/gnulib/inttypes.h	608;"	d
PRIu16	virt-p2v/include/gnulib/inttypes.h	610;"	d
PRIu16	virt-p2v/include/gnulib/inttypes.in.h	134;"	d
PRIu16	virt-p2v/include/gnulib/inttypes.in.h	136;"	d
PRIu32	virt-p2v/include/gnulib/inttypes.h	644;"	d
PRIu32	virt-p2v/include/gnulib/inttypes.h	646;"	d
PRIu32	virt-p2v/include/gnulib/inttypes.in.h	170;"	d
PRIu32	virt-p2v/include/gnulib/inttypes.in.h	172;"	d
PRIu64	virt-p2v/include/gnulib/inttypes.h	691;"	d
PRIu64	virt-p2v/include/gnulib/inttypes.h	692;"	d
PRIu64	virt-p2v/include/gnulib/inttypes.in.h	217;"	d
PRIu64	virt-p2v/include/gnulib/inttypes.in.h	218;"	d
PRIu8	virt-p2v/include/gnulib/inttypes.h	572;"	d
PRIu8	virt-p2v/include/gnulib/inttypes.h	574;"	d
PRIu8	virt-p2v/include/gnulib/inttypes.in.h	100;"	d
PRIu8	virt-p2v/include/gnulib/inttypes.in.h	98;"	d
PRIuFAST16	virt-p2v/include/gnulib/inttypes.h	878;"	d
PRIuFAST16	virt-p2v/include/gnulib/inttypes.h	880;"	d
PRIuFAST16	virt-p2v/include/gnulib/inttypes.h	882;"	d
PRIuFAST16	virt-p2v/include/gnulib/inttypes.in.h	404;"	d
PRIuFAST16	virt-p2v/include/gnulib/inttypes.in.h	406;"	d
PRIuFAST32	virt-p2v/include/gnulib/inttypes.h	926;"	d
PRIuFAST32	virt-p2v/include/gnulib/inttypes.h	928;"	d
PRIuFAST32	virt-p2v/include/gnulib/inttypes.h	930;"	d
PRIuFAST32	virt-p2v/include/gnulib/inttypes.in.h	452;"	d
PRIuFAST32	virt-p2v/include/gnulib/inttypes.in.h	454;"	d
PRIuFAST64	virt-p2v/include/gnulib/inttypes.h	965;"	d
PRIuFAST64	virt-p2v/include/gnulib/inttypes.h	966;"	d
PRIuFAST64	virt-p2v/include/gnulib/inttypes.in.h	491;"	d
PRIuFAST64	virt-p2v/include/gnulib/inttypes.in.h	492;"	d
PRIuFAST8	virt-p2v/include/gnulib/inttypes.h	830;"	d
PRIuFAST8	virt-p2v/include/gnulib/inttypes.h	832;"	d
PRIuFAST8	virt-p2v/include/gnulib/inttypes.h	834;"	d
PRIuFAST8	virt-p2v/include/gnulib/inttypes.in.h	356;"	d
PRIuFAST8	virt-p2v/include/gnulib/inttypes.in.h	358;"	d
PRIuLEAST16	virt-p2v/include/gnulib/inttypes.h	741;"	d
PRIuLEAST16	virt-p2v/include/gnulib/inttypes.h	742;"	d
PRIuLEAST16	virt-p2v/include/gnulib/inttypes.in.h	267;"	d
PRIuLEAST16	virt-p2v/include/gnulib/inttypes.in.h	268;"	d
PRIuLEAST32	virt-p2v/include/gnulib/inttypes.h	765;"	d
PRIuLEAST32	virt-p2v/include/gnulib/inttypes.h	766;"	d
PRIuLEAST32	virt-p2v/include/gnulib/inttypes.in.h	291;"	d
PRIuLEAST32	virt-p2v/include/gnulib/inttypes.in.h	292;"	d
PRIuLEAST64	virt-p2v/include/gnulib/inttypes.h	792;"	d
PRIuLEAST64	virt-p2v/include/gnulib/inttypes.h	793;"	d
PRIuLEAST64	virt-p2v/include/gnulib/inttypes.in.h	318;"	d
PRIuLEAST64	virt-p2v/include/gnulib/inttypes.in.h	319;"	d
PRIuLEAST8	virt-p2v/include/gnulib/inttypes.h	717;"	d
PRIuLEAST8	virt-p2v/include/gnulib/inttypes.h	718;"	d
PRIuLEAST8	virt-p2v/include/gnulib/inttypes.in.h	243;"	d
PRIuLEAST8	virt-p2v/include/gnulib/inttypes.in.h	244;"	d
PRIuMAX	virt-p2v/include/gnulib/inttypes.h	1003;"	d
PRIuMAX	virt-p2v/include/gnulib/inttypes.h	1005;"	d
PRIuMAX	virt-p2v/include/gnulib/inttypes.h	1007;"	d
PRIuMAX	virt-p2v/include/gnulib/inttypes.in.h	529;"	d
PRIuMAX	virt-p2v/include/gnulib/inttypes.in.h	531;"	d
PRIuPTR	virt-p2v/include/gnulib/inttypes.h	1046;"	d
PRIuPTR	virt-p2v/include/gnulib/inttypes.h	1048;"	d
PRIuPTR	virt-p2v/include/gnulib/inttypes.in.h	572;"	d
PRIuPTR	virt-p2v/include/gnulib/inttypes.in.h	574;"	d
PRIx16	virt-p2v/include/gnulib/inttypes.h	614;"	d
PRIx16	virt-p2v/include/gnulib/inttypes.h	616;"	d
PRIx16	virt-p2v/include/gnulib/inttypes.in.h	140;"	d
PRIx16	virt-p2v/include/gnulib/inttypes.in.h	142;"	d
PRIx32	virt-p2v/include/gnulib/inttypes.h	650;"	d
PRIx32	virt-p2v/include/gnulib/inttypes.h	652;"	d
PRIx32	virt-p2v/include/gnulib/inttypes.in.h	176;"	d
PRIx32	virt-p2v/include/gnulib/inttypes.in.h	178;"	d
PRIx64	virt-p2v/include/gnulib/inttypes.h	695;"	d
PRIx64	virt-p2v/include/gnulib/inttypes.h	696;"	d
PRIx64	virt-p2v/include/gnulib/inttypes.in.h	221;"	d
PRIx64	virt-p2v/include/gnulib/inttypes.in.h	222;"	d
PRIx8	virt-p2v/include/gnulib/inttypes.h	578;"	d
PRIx8	virt-p2v/include/gnulib/inttypes.h	580;"	d
PRIx8	virt-p2v/include/gnulib/inttypes.in.h	104;"	d
PRIx8	virt-p2v/include/gnulib/inttypes.in.h	106;"	d
PRIxFAST16	virt-p2v/include/gnulib/inttypes.h	886;"	d
PRIxFAST16	virt-p2v/include/gnulib/inttypes.h	888;"	d
PRIxFAST16	virt-p2v/include/gnulib/inttypes.h	890;"	d
PRIxFAST16	virt-p2v/include/gnulib/inttypes.in.h	412;"	d
PRIxFAST16	virt-p2v/include/gnulib/inttypes.in.h	414;"	d
PRIxFAST32	virt-p2v/include/gnulib/inttypes.h	934;"	d
PRIxFAST32	virt-p2v/include/gnulib/inttypes.h	936;"	d
PRIxFAST32	virt-p2v/include/gnulib/inttypes.h	938;"	d
PRIxFAST32	virt-p2v/include/gnulib/inttypes.in.h	460;"	d
PRIxFAST32	virt-p2v/include/gnulib/inttypes.in.h	462;"	d
PRIxFAST64	virt-p2v/include/gnulib/inttypes.h	969;"	d
PRIxFAST64	virt-p2v/include/gnulib/inttypes.h	970;"	d
PRIxFAST64	virt-p2v/include/gnulib/inttypes.in.h	495;"	d
PRIxFAST64	virt-p2v/include/gnulib/inttypes.in.h	496;"	d
PRIxFAST8	virt-p2v/include/gnulib/inttypes.h	838;"	d
PRIxFAST8	virt-p2v/include/gnulib/inttypes.h	840;"	d
PRIxFAST8	virt-p2v/include/gnulib/inttypes.h	842;"	d
PRIxFAST8	virt-p2v/include/gnulib/inttypes.in.h	364;"	d
PRIxFAST8	virt-p2v/include/gnulib/inttypes.in.h	366;"	d
PRIxLEAST16	virt-p2v/include/gnulib/inttypes.h	745;"	d
PRIxLEAST16	virt-p2v/include/gnulib/inttypes.h	746;"	d
PRIxLEAST16	virt-p2v/include/gnulib/inttypes.in.h	271;"	d
PRIxLEAST16	virt-p2v/include/gnulib/inttypes.in.h	272;"	d
PRIxLEAST32	virt-p2v/include/gnulib/inttypes.h	769;"	d
PRIxLEAST32	virt-p2v/include/gnulib/inttypes.h	770;"	d
PRIxLEAST32	virt-p2v/include/gnulib/inttypes.in.h	295;"	d
PRIxLEAST32	virt-p2v/include/gnulib/inttypes.in.h	296;"	d
PRIxLEAST64	virt-p2v/include/gnulib/inttypes.h	796;"	d
PRIxLEAST64	virt-p2v/include/gnulib/inttypes.h	797;"	d
PRIxLEAST64	virt-p2v/include/gnulib/inttypes.in.h	322;"	d
PRIxLEAST64	virt-p2v/include/gnulib/inttypes.in.h	323;"	d
PRIxLEAST8	virt-p2v/include/gnulib/inttypes.h	721;"	d
PRIxLEAST8	virt-p2v/include/gnulib/inttypes.h	722;"	d
PRIxLEAST8	virt-p2v/include/gnulib/inttypes.in.h	247;"	d
PRIxLEAST8	virt-p2v/include/gnulib/inttypes.in.h	248;"	d
PRIxMAX	virt-p2v/include/gnulib/inttypes.h	1011;"	d
PRIxMAX	virt-p2v/include/gnulib/inttypes.h	1013;"	d
PRIxMAX	virt-p2v/include/gnulib/inttypes.h	1015;"	d
PRIxMAX	virt-p2v/include/gnulib/inttypes.in.h	537;"	d
PRIxMAX	virt-p2v/include/gnulib/inttypes.in.h	539;"	d
PRIxPTR	virt-p2v/include/gnulib/inttypes.h	1052;"	d
PRIxPTR	virt-p2v/include/gnulib/inttypes.h	1054;"	d
PRIxPTR	virt-p2v/include/gnulib/inttypes.in.h	578;"	d
PRIxPTR	virt-p2v/include/gnulib/inttypes.in.h	580;"	d
PROGRESS_ERROR_PIPE	include/socket.h	/^    PROGRESS_ERROR_PIPE,$/;"	e	enum:PIPE_MSG
PROGRESS_ERROR_PIPE	qt_pro/global.h	/^    PROGRESS_ERROR_PIPE,$/;"	e	enum:PIPE_MSG
PROGRESS_NOTIFICATION	torrent/include/libtorrent/alert_types.hpp	67;"	d
PROGRESS_NOTIFICATION	torrent/include/libtorrent/alert_types.hpp	69;"	d
PROGRESS_PIPE	include/socket.h	/^    PROGRESS_PIPE,$/;"	e	enum:PIPE_MSG
PROGRESS_PIPE	qt_pro/global.h	/^    PROGRESS_PIPE,$/;"	e	enum:PIPE_MSG
PROMOTED_MODE_T	virt-p2v/include/config.h	671;"	d
PROTECTION_LEVEL_UNRESTRICTED	torrent/include/libtorrent/socket.hpp	107;"	d
PROTOBUF_TYPE	include/packet.h	74;"	d
PROTOTYPES	virt-p2v/include/config.h	674;"	d
PTHREAD_CC	torrent/include/libtorrent/Makefile	/^PTHREAD_CC = gcc$/;"	m
PTHREAD_CFLAGS	torrent/include/libtorrent/Makefile	/^PTHREAD_CFLAGS = -pthread$/;"	m
PTHREAD_LIBS	torrent/include/libtorrent/Makefile	/^PTHREAD_LIBS = -lpthread $/;"	m
PTRDIFF_MAX	virt-p2v/include/gnulib/stdint.h	534;"	d
PTRDIFF_MAX	virt-p2v/include/gnulib/stdint.h	546;"	d
PTRDIFF_MIN	virt-p2v/include/gnulib/stdint.h	533;"	d
PTRDIFF_MIN	virt-p2v/include/gnulib/stdint.h	544;"	d
PTRDIFF_WIDTH	virt-p2v/include/gnulib/stdint.h	734;"	d
PUFF_HPP_INCLUDED	torrent/include/libtorrent/puff.hpp	25;"	d
PXE_START	include/packet.h	/^	PXE_START,$/;"	e	enum:yzy_cmd
PYTHON	torrent/include/libtorrent/Makefile	/^PYTHON = $/;"	m
PYTHON_CPPFLAGS	torrent/include/libtorrent/Makefile	/^PYTHON_CPPFLAGS = $/;"	m
PYTHON_CXXFLAGS	torrent/include/libtorrent/Makefile	/^PYTHON_CXXFLAGS =  -Wno-deprecated-declarations$/;"	m
PYTHON_EXEC_PREFIX	torrent/include/libtorrent/Makefile	/^PYTHON_EXEC_PREFIX = $/;"	m
PYTHON_EXTRA_LDFLAGS	torrent/include/libtorrent/Makefile	/^PYTHON_EXTRA_LDFLAGS = $/;"	m
PYTHON_EXTRA_LIBS	torrent/include/libtorrent/Makefile	/^PYTHON_EXTRA_LIBS = $/;"	m
PYTHON_INSTALL_PARAMS	torrent/include/libtorrent/Makefile	/^PYTHON_INSTALL_PARAMS = --prefix=$(DESTDIR)$(prefix)$/;"	m
PYTHON_LIBS	torrent/include/libtorrent/Makefile	/^PYTHON_LIBS = $/;"	m
PYTHON_PLATFORM	torrent/include/libtorrent/Makefile	/^PYTHON_PLATFORM = $/;"	m
PYTHON_PREFIX	torrent/include/libtorrent/Makefile	/^PYTHON_PREFIX = $/;"	m
PYTHON_SITE_PKG	torrent/include/libtorrent/Makefile	/^PYTHON_SITE_PKG = $/;"	m
PYTHON_VERSION	torrent/include/libtorrent/Makefile	/^PYTHON_VERSION = $/;"	m
PYZYGUID	include/StoreConfig.h	/^} YZYGUID, *PYZYGUID;$/;"	t	typeref:struct:_yzyGUID
PYZY_DISK_BACK_FILE	include/qcow2.h	/^} YZY_DISK_BACK_FILE, * PYZY_DISK_BACK_FILE;$/;"	t	typeref:struct:_YZY_DISK_BACK_FILE
PYZY_DISK_BACK_FILE	test/check.c	/^} YZY_DISK_BACK_FILE, * PYZY_DISK_BACK_FILE;$/;"	t	typeref:struct:_YZY_DISK_BACK_FILE	file:
PYZY_QCOW_ENTRY	include/StoreConfig.h	/^} YZY_QCOW_ENTRY, *PYZY_QCOW_ENTRY;$/;"	t	typeref:struct:_YZY_QCOW_ENTRY
PYZY_STORE_CONFIG	include/StoreConfig.h	/^}YZY_STORE_CONFIG,*PYZY_STORE_CONFIG;$/;"	t	typeref:struct:_YZY_STORE_CONFIG
PedCHSGeometry	include/device.h	/^typedef struct _PedCHSGeometry PedCHSGeometry;$/;"	t	typeref:struct:_PedCHSGeometry
PedDevice	include/device.h	/^typedef struct _PedDevice PedDevice;$/;"	t	typeref:struct:_PedDevice
PedDeviceType	include/device.h	/^} PedDeviceType;$/;"	t	typeref:enum:__anon3
PedSector	include/device.h	/^typedef long long PedSector;$/;"	t
PipeThread	qt_pro/pipethread.cpp	/^PipeThread::PipeThread(int pipe_fd[2])$/;"	f	class:PipeThread
PipeThread	qt_pro/pipethread.h	/^class PipeThread : public QThread$/;"	c
Port	torrent/bak/udp_tracker.cpp	/^	WORD		Port;\/\/èç¹ç«¯å£$/;"	m	class:CPeerHostInfo	file:
PositionBottom	qt_pro/QRoundProgressBar.h	/^    static const int PositionBottom = -90;$/;"	m	class:QRoundProgressBar
PositionLeft	qt_pro/QRoundProgressBar.h	/^    static const int PositionLeft = 180;$/;"	m	class:QRoundProgressBar
PositionRight	qt_pro/QRoundProgressBar.h	/^    static const int PositionRight = 0;$/;"	m	class:QRoundProgressBar
PositionTop	qt_pro/QRoundProgressBar.h	/^    static const int PositionTop = 90;$/;"	m	class:QRoundProgressBar
Protocol	torrent/include/libtorrent/socket.hpp	45;"	d
Protocol	torrent/include/libtorrent/socket.hpp	59;"	d
PtrToPtr64	torrent/src/file.cpp	103;"	d	file:
QCOW_MAGIC	include/qcow2.h	4;"	d
QCOW_MAGIC	test/check.c	2;"	d	file:
QCOW_VERSION	include/qcow2.h	5;"	d
QCOW_VERSION	test/check.c	3;"	d	file:
QCowHeader	include/qcow2.h	/^} QCowHeader;$/;"	t	typeref:struct:_QCowHeader
QCowHeader	test/check.c	/^} QCowHeader;$/;"	t	typeref:struct:_QCowHeader	file:
QEMU_NBD	virt-p2v/src/nbd.c	/^  QEMU_NBD = 1,$/;"	e	enum:nbd_server	file:
QEMU_NBD_NO_SA	virt-p2v/src/nbd.c	/^  QEMU_NBD_NO_SA = 2,$/;"	e	enum:nbd_server	file:
QMAKE	Makefile	/^QMAKE= qmake$/;"	m
QMAKE	qt_pro/Makefile	/^QMAKE         = \/usr\/bin\/qmake$/;"	m
QMAKE	torrent/Makefile	/^QMAKE= qmake$/;"	m
QMAKE_TARGET	qt_pro/Makefile	/^QMAKE_TARGET  = qt$/;"	m
QROUNDPROGRESSBAR_H	qt_pro/QRoundProgressBar.h	20;"	d
QRoundProgressBar	qt_pro/QRoundProgressBar.cpp	/^QRoundProgressBar::QRoundProgressBar(QWidget *parent) :$/;"	f	class:QRoundProgressBar
QRoundProgressBar	qt_pro/QRoundProgressBar.h	/^class QRoundProgressBar : public QWidget$/;"	c
QT_DIR	Makefile	/^QT_DIR := $(TOP_DIR)\/qt_pro$/;"	m
QUEUE	include/queue.h	/^}QUEUE;$/;"	t	typeref:struct:__anon2
QUEUE_INDEX	include/queue.h	/^}QUEUE_INDEX;$/;"	t	typeref:struct:__anon1
R	torrent/src/sha512.cpp	101;"	d	file:
R0	torrent/src/sha1.cpp	74;"	d	file:
R1	include/StoreConfig.h	/^	uint8_t		R1;$/;"	m	struct:_YZY_QCOW_ENTRY
R1	torrent/src/sha1.cpp	75;"	d	file:
R2	include/StoreConfig.h	/^	uint16_t	R2;$/;"	m	struct:_YZY_QCOW_ENTRY
R2	torrent/src/sha1.cpp	76;"	d	file:
R3	include/StoreConfig.h	/^	uint32_t	R3;$/;"	m	struct:_YZY_QCOW_ENTRY
R3	torrent/src/sha1.cpp	77;"	d	file:
R4	include/StoreConfig.h	/^    uint64_t    R4;          \/\/ä¿ç$/;"	m	struct:_YZY_QCOW_ENTRY
R4	torrent/src/sha1.cpp	78;"	d	file:
RAM_MAJOR	src/linux.c	99;"	d	file:
RANLIB	qt_pro/Makefile	/^RANLIB        = $/;"	m
RANLIB	torrent/include/libtorrent/Makefile	/^RANLIB = ranlib$/;"	m
RD_MODE	src/linux.c	115;"	d	file:
REBOOT_PIPE	include/socket.h	/^    REBOOT_PIPE,$/;"	e	enum:PIPE_MSG
REBOOT_PIPE	qt_pro/global.h	/^    REBOOT_PIPE,$/;"	e	enum:PIPE_MSG
RECVBUFSIZE	torrent/bak/udp_tracker.cpp	81;"	d	file:
REFRESH_050324_HPP	torrent/include/libtorrent/kademlia/refresh.hpp	34;"	d
REMOVABLE_COL_CONVERT	virt-p2v/src/gui.c	/^  REMOVABLE_COL_CONVERT = 0,$/;"	e	enum:__anon166	file:
REMOVABLE_COL_DEVICE	virt-p2v/src/gui.c	/^  REMOVABLE_COL_DEVICE,$/;"	e	enum:__anon166	file:
RESTART	include/packet.h	/^    RESTART,$/;"	e	enum:yzy_cmd
RESTART	test/test.c	/^    RESTART,$/;"	e	enum:yzy_cmd	file:
RIGHT_BRACE	src/inirw.c	9;"	d	file:
RND	torrent/src/sha512.cpp	132;"	d	file:
RND	torrent/src/sha512.cpp	149;"	d	file:
ROF_SRCIF_SELECTED	torrent/include/libtorrent/aux_/route.h	96;"	d
ROR64c	torrent/src/sha512.cpp	81;"	d	file:
ROUNDUP	torrent/src/enum_net.cpp	381;"	d	file:
ROUNDUP	torrent/src/enum_net.cpp	386;"	d	file:
ROUTING_TABLE_HPP	torrent/include/libtorrent/kademlia/routing_table.hpp	34;"	d
RPC_MANAGER_HPP	torrent/include/libtorrent/kademlia/rpc_manager.hpp	34;"	d
RTAX_AUTHOR	torrent/include/libtorrent/aux_/route.h	302;"	d
RTAX_BRD	torrent/include/libtorrent/aux_/route.h	303;"	d
RTAX_DST	torrent/include/libtorrent/aux_/route.h	296;"	d
RTAX_GATEWAY	torrent/include/libtorrent/aux_/route.h	297;"	d
RTAX_GENMASK	torrent/include/libtorrent/aux_/route.h	299;"	d
RTAX_IFA	torrent/include/libtorrent/aux_/route.h	301;"	d
RTAX_IFP	torrent/include/libtorrent/aux_/route.h	300;"	d
RTAX_MAX	torrent/include/libtorrent/aux_/route.h	304;"	d
RTAX_NETMASK	torrent/include/libtorrent/aux_/route.h	298;"	d
RTA_AUTHOR	torrent/include/libtorrent/aux_/route.h	290;"	d
RTA_BRD	torrent/include/libtorrent/aux_/route.h	291;"	d
RTA_DST	torrent/include/libtorrent/aux_/route.h	284;"	d
RTA_GATEWAY	torrent/include/libtorrent/aux_/route.h	285;"	d
RTA_GENMASK	torrent/include/libtorrent/aux_/route.h	287;"	d
RTA_IFA	torrent/include/libtorrent/aux_/route.h	289;"	d
RTA_IFP	torrent/include/libtorrent/aux_/route.h	288;"	d
RTA_NETMASK	torrent/include/libtorrent/aux_/route.h	286;"	d
RTFREE	torrent/include/libtorrent/aux_/route.h	413;"	d
RTFREE_LOCKED	torrent/include/libtorrent/aux_/route.h	414;"	d
RTF_BLACKHOLE	torrent/include/libtorrent/aux_/route.h	180;"	d
RTF_BROADCAST	torrent/include/libtorrent/aux_/route.h	190;"	d
RTF_CLONING	torrent/include/libtorrent/aux_/route.h	176;"	d
RTF_CONDEMNED	torrent/include/libtorrent/aux_/route.h	193;"	d
RTF_DELCLONE	torrent/include/libtorrent/aux_/route.h	175;"	d
RTF_DONE	torrent/include/libtorrent/aux_/route.h	174;"	d
RTF_DYNAMIC	torrent/include/libtorrent/aux_/route.h	172;"	d
RTF_GATEWAY	torrent/include/libtorrent/aux_/route.h	169;"	d
RTF_HOST	torrent/include/libtorrent/aux_/route.h	170;"	d
RTF_IFSCOPE	torrent/include/libtorrent/aux_/route.h	192;"	d
RTF_LLINFO	torrent/include/libtorrent/aux_/route.h	178;"	d
RTF_LOCAL	torrent/include/libtorrent/aux_/route.h	189;"	d
RTF_MODIFIED	torrent/include/libtorrent/aux_/route.h	173;"	d
RTF_MULTICAST	torrent/include/libtorrent/aux_/route.h	191;"	d
RTF_PINNED	torrent/include/libtorrent/aux_/route.h	188;"	d
RTF_PRCLONING	torrent/include/libtorrent/aux_/route.h	184;"	d
RTF_PROTO1	torrent/include/libtorrent/aux_/route.h	182;"	d
RTF_PROTO2	torrent/include/libtorrent/aux_/route.h	181;"	d
RTF_PROTO3	torrent/include/libtorrent/aux_/route.h	186;"	d
RTF_REJECT	torrent/include/libtorrent/aux_/route.h	171;"	d
RTF_STATIC	torrent/include/libtorrent/aux_/route.h	179;"	d
RTF_UP	torrent/include/libtorrent/aux_/route.h	168;"	d
RTF_WASCLONED	torrent/include/libtorrent/aux_/route.h	185;"	d
RTF_XRESOLVE	torrent/include/libtorrent/aux_/route.h	177;"	d
RTM_ADD	torrent/include/libtorrent/aux_/route.h	246;"	d
RTM_CHANGE	torrent/include/libtorrent/aux_/route.h	248;"	d
RTM_DELADDR	torrent/include/libtorrent/aux_/route.h	258;"	d
RTM_DELETE	torrent/include/libtorrent/aux_/route.h	247;"	d
RTM_DELMADDR	torrent/include/libtorrent/aux_/route.h	261;"	d
RTM_GET	torrent/include/libtorrent/aux_/route.h	249;"	d
RTM_GET2	torrent/include/libtorrent/aux_/route.h	267;"	d
RTM_GET_SILENT	torrent/include/libtorrent/aux_/route.h	263;"	d
RTM_IFINFO	torrent/include/libtorrent/aux_/route.h	259;"	d
RTM_IFINFO2	torrent/include/libtorrent/aux_/route.h	265;"	d
RTM_LOCK	torrent/include/libtorrent/aux_/route.h	253;"	d
RTM_LOSING	torrent/include/libtorrent/aux_/route.h	250;"	d
RTM_MISS	torrent/include/libtorrent/aux_/route.h	252;"	d
RTM_NEWADDR	torrent/include/libtorrent/aux_/route.h	257;"	d
RTM_NEWMADDR	torrent/include/libtorrent/aux_/route.h	260;"	d
RTM_NEWMADDR2	torrent/include/libtorrent/aux_/route.h	266;"	d
RTM_OLDADD	torrent/include/libtorrent/aux_/route.h	254;"	d
RTM_OLDDEL	torrent/include/libtorrent/aux_/route.h	255;"	d
RTM_REDIRECT	torrent/include/libtorrent/aux_/route.h	251;"	d
RTM_RESOLVE	torrent/include/libtorrent/aux_/route.h	256;"	d
RTM_RTTUNIT	torrent/include/libtorrent/aux_/route.h	123;"	d
RTM_VERSION	torrent/include/libtorrent/aux_/route.h	241;"	d
RTV_EXPIRE	torrent/include/libtorrent/aux_/route.h	274;"	d
RTV_HOPCOUNT	torrent/include/libtorrent/aux_/route.h	273;"	d
RTV_MTU	torrent/include/libtorrent/aux_/route.h	272;"	d
RTV_RPIPE	torrent/include/libtorrent/aux_/route.h	275;"	d
RTV_RTT	torrent/include/libtorrent/aux_/route.h	278;"	d
RTV_RTTVAR	torrent/include/libtorrent/aux_/route.h	279;"	d
RTV_SPIPE	torrent/include/libtorrent/aux_/route.h	276;"	d
RTV_SSTHRESH	torrent/include/libtorrent/aux_/route.h	277;"	d
RT_ADDREF	torrent/include/libtorrent/aux_/route.h	386;"	d
RT_ADDREF_LOCKED	torrent/include/libtorrent/aux_/route.h	372;"	d
RT_CONVERT_LOCK	torrent/include/libtorrent/aux_/route.h	360;"	d
RT_LOCK	torrent/include/libtorrent/aux_/route.h	346;"	d
RT_LOCK_ASSERT_HELD	torrent/include/libtorrent/aux_/route.h	340;"	d
RT_LOCK_ASSERT_NOTHELD	torrent/include/libtorrent/aux_/route.h	343;"	d
RT_LOCK_SPIN	torrent/include/libtorrent/aux_/route.h	353;"	d
RT_REMREF	torrent/include/libtorrent/aux_/route.h	407;"	d
RT_REMREF_LOCKED	torrent/include/libtorrent/aux_/route.h	392;"	d
RT_UNLOCK	torrent/include/libtorrent/aux_/route.h	365;"	d
RW_MODE	src/linux.c	117;"	d	file:
R_OK	virt-p2v/include/gnulib/unistd.h	723;"	d
RebuildStoreConfig	src/StoreConfig.c	/^void RebuildStoreConfig() \/\/ÌÞ³ýÒÑÉ¾³ýµÄÏîÄ¿,Î»ÖÃÅÅÐò£¬ÒÔ±ã¿ÕÏ¶²éÕÒ$/;"	f
RenameFunction_	torrent/src/path.cpp	262;"	d	file:
RenameFunction_	torrent/src/path.cpp	271;"	d	file:
Reset	torrent/bak/tracker.cpp	/^void btTracker::Reset(time_t new_interval)$/;"	f	class:btTracker
ResponseData	virt-p2v/include/gui-gtk2-compat.h	/^typedef struct _ResponseData ResponseData;$/;"	t	typeref:struct:_ResponseData
S	torrent/src/sha512.cpp	100;"	d	file:
SANE_LIBRARY_HANDLING	virt-p2v/include/gnulib/msvc-inval.h	57;"	d
SCHAR_WIDTH	virt-p2v/include/gnulib/limits.h	92;"	d
SCHAR_WIDTH	virt-p2v/include/gnulib/limits.in.h	91;"	d
SCHED_PRIORITY_CLIENT	include/base.h	74;"	d
SCHED_PRIORITY_EVENT	include/base.h	73;"	d
SCHED_PRIORITY_SERVER	test/test.c	457;"	d	file:
SCHED_PRIORITY_SERVER	test/test.c	63;"	d	file:
SCHED_PRIORITY_TASKT	include/base.h	75;"	d
SCNd16	virt-p2v/include/gnulib/inttypes.h	1095;"	d
SCNd16	virt-p2v/include/gnulib/inttypes.h	1097;"	d
SCNd16	virt-p2v/include/gnulib/inttypes.in.h	621;"	d
SCNd16	virt-p2v/include/gnulib/inttypes.in.h	623;"	d
SCNd32	virt-p2v/include/gnulib/inttypes.h	1125;"	d
SCNd32	virt-p2v/include/gnulib/inttypes.h	1127;"	d
SCNd32	virt-p2v/include/gnulib/inttypes.in.h	651;"	d
SCNd32	virt-p2v/include/gnulib/inttypes.in.h	653;"	d
SCNd64	virt-p2v/include/gnulib/inttypes.h	1163;"	d
SCNd64	virt-p2v/include/gnulib/inttypes.h	1164;"	d
SCNd64	virt-p2v/include/gnulib/inttypes.in.h	689;"	d
SCNd64	virt-p2v/include/gnulib/inttypes.in.h	690;"	d
SCNd8	virt-p2v/include/gnulib/inttypes.h	1065;"	d
SCNd8	virt-p2v/include/gnulib/inttypes.h	1067;"	d
SCNd8	virt-p2v/include/gnulib/inttypes.in.h	591;"	d
SCNd8	virt-p2v/include/gnulib/inttypes.in.h	593;"	d
SCNdFAST16	virt-p2v/include/gnulib/inttypes.h	1339;"	d
SCNdFAST16	virt-p2v/include/gnulib/inttypes.h	1341;"	d
SCNdFAST16	virt-p2v/include/gnulib/inttypes.h	1343;"	d
SCNdFAST16	virt-p2v/include/gnulib/inttypes.h	1345;"	d
SCNdFAST16	virt-p2v/include/gnulib/inttypes.in.h	865;"	d
SCNdFAST16	virt-p2v/include/gnulib/inttypes.in.h	867;"	d
SCNdFAST32	virt-p2v/include/gnulib/inttypes.h	1389;"	d
SCNdFAST32	virt-p2v/include/gnulib/inttypes.h	1391;"	d
SCNdFAST32	virt-p2v/include/gnulib/inttypes.h	1393;"	d
SCNdFAST32	virt-p2v/include/gnulib/inttypes.in.h	915;"	d
SCNdFAST32	virt-p2v/include/gnulib/inttypes.in.h	917;"	d
SCNdFAST64	virt-p2v/include/gnulib/inttypes.h	1430;"	d
SCNdFAST64	virt-p2v/include/gnulib/inttypes.h	1431;"	d
SCNdFAST64	virt-p2v/include/gnulib/inttypes.in.h	956;"	d
SCNdFAST64	virt-p2v/include/gnulib/inttypes.in.h	957;"	d
SCNdFAST8	virt-p2v/include/gnulib/inttypes.h	1279;"	d
SCNdFAST8	virt-p2v/include/gnulib/inttypes.h	1281;"	d
SCNdFAST8	virt-p2v/include/gnulib/inttypes.h	1283;"	d
SCNdFAST8	virt-p2v/include/gnulib/inttypes.h	1285;"	d
SCNdFAST8	virt-p2v/include/gnulib/inttypes.h	1287;"	d
SCNdFAST8	virt-p2v/include/gnulib/inttypes.in.h	805;"	d
SCNdFAST8	virt-p2v/include/gnulib/inttypes.in.h	807;"	d
SCNdLEAST16	virt-p2v/include/gnulib/inttypes.h	1214;"	d
SCNdLEAST16	virt-p2v/include/gnulib/inttypes.h	1215;"	d
SCNdLEAST16	virt-p2v/include/gnulib/inttypes.in.h	740;"	d
SCNdLEAST16	virt-p2v/include/gnulib/inttypes.in.h	741;"	d
SCNdLEAST32	virt-p2v/include/gnulib/inttypes.h	1234;"	d
SCNdLEAST32	virt-p2v/include/gnulib/inttypes.h	1235;"	d
SCNdLEAST32	virt-p2v/include/gnulib/inttypes.in.h	760;"	d
SCNdLEAST32	virt-p2v/include/gnulib/inttypes.in.h	761;"	d
SCNdLEAST64	virt-p2v/include/gnulib/inttypes.h	1255;"	d
SCNdLEAST64	virt-p2v/include/gnulib/inttypes.h	1256;"	d
SCNdLEAST64	virt-p2v/include/gnulib/inttypes.in.h	781;"	d
SCNdLEAST64	virt-p2v/include/gnulib/inttypes.in.h	782;"	d
SCNdLEAST8	virt-p2v/include/gnulib/inttypes.h	1194;"	d
SCNdLEAST8	virt-p2v/include/gnulib/inttypes.h	1195;"	d
SCNdLEAST8	virt-p2v/include/gnulib/inttypes.in.h	720;"	d
SCNdLEAST8	virt-p2v/include/gnulib/inttypes.in.h	721;"	d
SCNdMAX	virt-p2v/include/gnulib/inttypes.h	1454;"	d
SCNdMAX	virt-p2v/include/gnulib/inttypes.h	1456;"	d
SCNdMAX	virt-p2v/include/gnulib/inttypes.h	1458;"	d
SCNdMAX	virt-p2v/include/gnulib/inttypes.in.h	980;"	d
SCNdMAX	virt-p2v/include/gnulib/inttypes.in.h	982;"	d
SCNdPTR	virt-p2v/include/gnulib/inttypes.h	1495;"	d
SCNdPTR	virt-p2v/include/gnulib/inttypes.h	1497;"	d
SCNdPTR	virt-p2v/include/gnulib/inttypes.in.h	1021;"	d
SCNdPTR	virt-p2v/include/gnulib/inttypes.in.h	1023;"	d
SCNi16	virt-p2v/include/gnulib/inttypes.h	1101;"	d
SCNi16	virt-p2v/include/gnulib/inttypes.h	1103;"	d
SCNi16	virt-p2v/include/gnulib/inttypes.in.h	627;"	d
SCNi16	virt-p2v/include/gnulib/inttypes.in.h	629;"	d
SCNi32	virt-p2v/include/gnulib/inttypes.h	1131;"	d
SCNi32	virt-p2v/include/gnulib/inttypes.h	1133;"	d
SCNi32	virt-p2v/include/gnulib/inttypes.in.h	657;"	d
SCNi32	virt-p2v/include/gnulib/inttypes.in.h	659;"	d
SCNi64	virt-p2v/include/gnulib/inttypes.h	1167;"	d
SCNi64	virt-p2v/include/gnulib/inttypes.h	1168;"	d
SCNi64	virt-p2v/include/gnulib/inttypes.in.h	693;"	d
SCNi64	virt-p2v/include/gnulib/inttypes.in.h	694;"	d
SCNi8	virt-p2v/include/gnulib/inttypes.h	1071;"	d
SCNi8	virt-p2v/include/gnulib/inttypes.h	1073;"	d
SCNi8	virt-p2v/include/gnulib/inttypes.in.h	597;"	d
SCNi8	virt-p2v/include/gnulib/inttypes.in.h	599;"	d
SCNiFAST16	virt-p2v/include/gnulib/inttypes.h	1349;"	d
SCNiFAST16	virt-p2v/include/gnulib/inttypes.h	1351;"	d
SCNiFAST16	virt-p2v/include/gnulib/inttypes.h	1353;"	d
SCNiFAST16	virt-p2v/include/gnulib/inttypes.h	1355;"	d
SCNiFAST16	virt-p2v/include/gnulib/inttypes.in.h	875;"	d
SCNiFAST16	virt-p2v/include/gnulib/inttypes.in.h	877;"	d
SCNiFAST32	virt-p2v/include/gnulib/inttypes.h	1397;"	d
SCNiFAST32	virt-p2v/include/gnulib/inttypes.h	1399;"	d
SCNiFAST32	virt-p2v/include/gnulib/inttypes.h	1401;"	d
SCNiFAST32	virt-p2v/include/gnulib/inttypes.in.h	923;"	d
SCNiFAST32	virt-p2v/include/gnulib/inttypes.in.h	925;"	d
SCNiFAST64	virt-p2v/include/gnulib/inttypes.h	1434;"	d
SCNiFAST64	virt-p2v/include/gnulib/inttypes.h	1435;"	d
SCNiFAST64	virt-p2v/include/gnulib/inttypes.in.h	960;"	d
SCNiFAST64	virt-p2v/include/gnulib/inttypes.in.h	961;"	d
SCNiFAST8	virt-p2v/include/gnulib/inttypes.h	1291;"	d
SCNiFAST8	virt-p2v/include/gnulib/inttypes.h	1293;"	d
SCNiFAST8	virt-p2v/include/gnulib/inttypes.h	1295;"	d
SCNiFAST8	virt-p2v/include/gnulib/inttypes.h	1297;"	d
SCNiFAST8	virt-p2v/include/gnulib/inttypes.h	1299;"	d
SCNiFAST8	virt-p2v/include/gnulib/inttypes.in.h	817;"	d
SCNiFAST8	virt-p2v/include/gnulib/inttypes.in.h	819;"	d
SCNiLEAST16	virt-p2v/include/gnulib/inttypes.h	1218;"	d
SCNiLEAST16	virt-p2v/include/gnulib/inttypes.h	1219;"	d
SCNiLEAST16	virt-p2v/include/gnulib/inttypes.in.h	744;"	d
SCNiLEAST16	virt-p2v/include/gnulib/inttypes.in.h	745;"	d
SCNiLEAST32	virt-p2v/include/gnulib/inttypes.h	1238;"	d
SCNiLEAST32	virt-p2v/include/gnulib/inttypes.h	1239;"	d
SCNiLEAST32	virt-p2v/include/gnulib/inttypes.in.h	764;"	d
SCNiLEAST32	virt-p2v/include/gnulib/inttypes.in.h	765;"	d
SCNiLEAST64	virt-p2v/include/gnulib/inttypes.h	1259;"	d
SCNiLEAST64	virt-p2v/include/gnulib/inttypes.h	1260;"	d
SCNiLEAST64	virt-p2v/include/gnulib/inttypes.in.h	785;"	d
SCNiLEAST64	virt-p2v/include/gnulib/inttypes.in.h	786;"	d
SCNiLEAST8	virt-p2v/include/gnulib/inttypes.h	1198;"	d
SCNiLEAST8	virt-p2v/include/gnulib/inttypes.h	1199;"	d
SCNiLEAST8	virt-p2v/include/gnulib/inttypes.in.h	724;"	d
SCNiLEAST8	virt-p2v/include/gnulib/inttypes.in.h	725;"	d
SCNiMAX	virt-p2v/include/gnulib/inttypes.h	1462;"	d
SCNiMAX	virt-p2v/include/gnulib/inttypes.h	1464;"	d
SCNiMAX	virt-p2v/include/gnulib/inttypes.h	1466;"	d
SCNiMAX	virt-p2v/include/gnulib/inttypes.in.h	988;"	d
SCNiMAX	virt-p2v/include/gnulib/inttypes.in.h	990;"	d
SCNiPTR	virt-p2v/include/gnulib/inttypes.h	1501;"	d
SCNiPTR	virt-p2v/include/gnulib/inttypes.h	1503;"	d
SCNiPTR	virt-p2v/include/gnulib/inttypes.in.h	1027;"	d
SCNiPTR	virt-p2v/include/gnulib/inttypes.in.h	1029;"	d
SCNo16	virt-p2v/include/gnulib/inttypes.h	1107;"	d
SCNo16	virt-p2v/include/gnulib/inttypes.h	1109;"	d
SCNo16	virt-p2v/include/gnulib/inttypes.in.h	633;"	d
SCNo16	virt-p2v/include/gnulib/inttypes.in.h	635;"	d
SCNo32	virt-p2v/include/gnulib/inttypes.h	1137;"	d
SCNo32	virt-p2v/include/gnulib/inttypes.h	1139;"	d
SCNo32	virt-p2v/include/gnulib/inttypes.in.h	663;"	d
SCNo32	virt-p2v/include/gnulib/inttypes.in.h	665;"	d
SCNo64	virt-p2v/include/gnulib/inttypes.h	1180;"	d
SCNo64	virt-p2v/include/gnulib/inttypes.h	1181;"	d
SCNo64	virt-p2v/include/gnulib/inttypes.in.h	706;"	d
SCNo64	virt-p2v/include/gnulib/inttypes.in.h	707;"	d
SCNo8	virt-p2v/include/gnulib/inttypes.h	1077;"	d
SCNo8	virt-p2v/include/gnulib/inttypes.h	1079;"	d
SCNo8	virt-p2v/include/gnulib/inttypes.in.h	603;"	d
SCNo8	virt-p2v/include/gnulib/inttypes.in.h	605;"	d
SCNoFAST16	virt-p2v/include/gnulib/inttypes.h	1359;"	d
SCNoFAST16	virt-p2v/include/gnulib/inttypes.h	1361;"	d
SCNoFAST16	virt-p2v/include/gnulib/inttypes.h	1363;"	d
SCNoFAST16	virt-p2v/include/gnulib/inttypes.h	1365;"	d
SCNoFAST16	virt-p2v/include/gnulib/inttypes.in.h	885;"	d
SCNoFAST16	virt-p2v/include/gnulib/inttypes.in.h	887;"	d
SCNoFAST32	virt-p2v/include/gnulib/inttypes.h	1405;"	d
SCNoFAST32	virt-p2v/include/gnulib/inttypes.h	1407;"	d
SCNoFAST32	virt-p2v/include/gnulib/inttypes.h	1409;"	d
SCNoFAST32	virt-p2v/include/gnulib/inttypes.in.h	931;"	d
SCNoFAST32	virt-p2v/include/gnulib/inttypes.in.h	933;"	d
SCNoFAST64	virt-p2v/include/gnulib/inttypes.h	1440;"	d
SCNoFAST64	virt-p2v/include/gnulib/inttypes.h	1441;"	d
SCNoFAST64	virt-p2v/include/gnulib/inttypes.in.h	966;"	d
SCNoFAST64	virt-p2v/include/gnulib/inttypes.in.h	967;"	d
SCNoFAST8	virt-p2v/include/gnulib/inttypes.h	1303;"	d
SCNoFAST8	virt-p2v/include/gnulib/inttypes.h	1305;"	d
SCNoFAST8	virt-p2v/include/gnulib/inttypes.h	1307;"	d
SCNoFAST8	virt-p2v/include/gnulib/inttypes.h	1309;"	d
SCNoFAST8	virt-p2v/include/gnulib/inttypes.h	1311;"	d
SCNoFAST8	virt-p2v/include/gnulib/inttypes.in.h	829;"	d
SCNoFAST8	virt-p2v/include/gnulib/inttypes.in.h	831;"	d
SCNoLEAST16	virt-p2v/include/gnulib/inttypes.h	1222;"	d
SCNoLEAST16	virt-p2v/include/gnulib/inttypes.h	1223;"	d
SCNoLEAST16	virt-p2v/include/gnulib/inttypes.in.h	748;"	d
SCNoLEAST16	virt-p2v/include/gnulib/inttypes.in.h	749;"	d
SCNoLEAST32	virt-p2v/include/gnulib/inttypes.h	1242;"	d
SCNoLEAST32	virt-p2v/include/gnulib/inttypes.h	1243;"	d
SCNoLEAST32	virt-p2v/include/gnulib/inttypes.in.h	768;"	d
SCNoLEAST32	virt-p2v/include/gnulib/inttypes.in.h	769;"	d
SCNoLEAST64	virt-p2v/include/gnulib/inttypes.h	1265;"	d
SCNoLEAST64	virt-p2v/include/gnulib/inttypes.h	1266;"	d
SCNoLEAST64	virt-p2v/include/gnulib/inttypes.in.h	791;"	d
SCNoLEAST64	virt-p2v/include/gnulib/inttypes.in.h	792;"	d
SCNoLEAST8	virt-p2v/include/gnulib/inttypes.h	1202;"	d
SCNoLEAST8	virt-p2v/include/gnulib/inttypes.h	1203;"	d
SCNoLEAST8	virt-p2v/include/gnulib/inttypes.in.h	728;"	d
SCNoLEAST8	virt-p2v/include/gnulib/inttypes.in.h	729;"	d
SCNoMAX	virt-p2v/include/gnulib/inttypes.h	1470;"	d
SCNoMAX	virt-p2v/include/gnulib/inttypes.h	1472;"	d
SCNoMAX	virt-p2v/include/gnulib/inttypes.h	1474;"	d
SCNoMAX	virt-p2v/include/gnulib/inttypes.in.h	996;"	d
SCNoMAX	virt-p2v/include/gnulib/inttypes.in.h	998;"	d
SCNoPTR	virt-p2v/include/gnulib/inttypes.h	1507;"	d
SCNoPTR	virt-p2v/include/gnulib/inttypes.h	1509;"	d
SCNoPTR	virt-p2v/include/gnulib/inttypes.in.h	1033;"	d
SCNoPTR	virt-p2v/include/gnulib/inttypes.in.h	1035;"	d
SCNu16	virt-p2v/include/gnulib/inttypes.h	1113;"	d
SCNu16	virt-p2v/include/gnulib/inttypes.h	1115;"	d
SCNu16	virt-p2v/include/gnulib/inttypes.in.h	639;"	d
SCNu16	virt-p2v/include/gnulib/inttypes.in.h	641;"	d
SCNu32	virt-p2v/include/gnulib/inttypes.h	1143;"	d
SCNu32	virt-p2v/include/gnulib/inttypes.h	1145;"	d
SCNu32	virt-p2v/include/gnulib/inttypes.in.h	669;"	d
SCNu32	virt-p2v/include/gnulib/inttypes.in.h	671;"	d
SCNu64	virt-p2v/include/gnulib/inttypes.h	1184;"	d
SCNu64	virt-p2v/include/gnulib/inttypes.h	1185;"	d
SCNu64	virt-p2v/include/gnulib/inttypes.in.h	710;"	d
SCNu64	virt-p2v/include/gnulib/inttypes.in.h	711;"	d
SCNu8	virt-p2v/include/gnulib/inttypes.h	1083;"	d
SCNu8	virt-p2v/include/gnulib/inttypes.h	1085;"	d
SCNu8	virt-p2v/include/gnulib/inttypes.in.h	609;"	d
SCNu8	virt-p2v/include/gnulib/inttypes.in.h	611;"	d
SCNuFAST16	virt-p2v/include/gnulib/inttypes.h	1369;"	d
SCNuFAST16	virt-p2v/include/gnulib/inttypes.h	1371;"	d
SCNuFAST16	virt-p2v/include/gnulib/inttypes.h	1373;"	d
SCNuFAST16	virt-p2v/include/gnulib/inttypes.h	1375;"	d
SCNuFAST16	virt-p2v/include/gnulib/inttypes.in.h	895;"	d
SCNuFAST16	virt-p2v/include/gnulib/inttypes.in.h	897;"	d
SCNuFAST32	virt-p2v/include/gnulib/inttypes.h	1413;"	d
SCNuFAST32	virt-p2v/include/gnulib/inttypes.h	1415;"	d
SCNuFAST32	virt-p2v/include/gnulib/inttypes.h	1417;"	d
SCNuFAST32	virt-p2v/include/gnulib/inttypes.in.h	939;"	d
SCNuFAST32	virt-p2v/include/gnulib/inttypes.in.h	941;"	d
SCNuFAST64	virt-p2v/include/gnulib/inttypes.h	1444;"	d
SCNuFAST64	virt-p2v/include/gnulib/inttypes.h	1445;"	d
SCNuFAST64	virt-p2v/include/gnulib/inttypes.in.h	970;"	d
SCNuFAST64	virt-p2v/include/gnulib/inttypes.in.h	971;"	d
SCNuFAST8	virt-p2v/include/gnulib/inttypes.h	1315;"	d
SCNuFAST8	virt-p2v/include/gnulib/inttypes.h	1317;"	d
SCNuFAST8	virt-p2v/include/gnulib/inttypes.h	1319;"	d
SCNuFAST8	virt-p2v/include/gnulib/inttypes.h	1321;"	d
SCNuFAST8	virt-p2v/include/gnulib/inttypes.h	1323;"	d
SCNuFAST8	virt-p2v/include/gnulib/inttypes.in.h	841;"	d
SCNuFAST8	virt-p2v/include/gnulib/inttypes.in.h	843;"	d
SCNuLEAST16	virt-p2v/include/gnulib/inttypes.h	1226;"	d
SCNuLEAST16	virt-p2v/include/gnulib/inttypes.h	1227;"	d
SCNuLEAST16	virt-p2v/include/gnulib/inttypes.in.h	752;"	d
SCNuLEAST16	virt-p2v/include/gnulib/inttypes.in.h	753;"	d
SCNuLEAST32	virt-p2v/include/gnulib/inttypes.h	1246;"	d
SCNuLEAST32	virt-p2v/include/gnulib/inttypes.h	1247;"	d
SCNuLEAST32	virt-p2v/include/gnulib/inttypes.in.h	772;"	d
SCNuLEAST32	virt-p2v/include/gnulib/inttypes.in.h	773;"	d
SCNuLEAST64	virt-p2v/include/gnulib/inttypes.h	1269;"	d
SCNuLEAST64	virt-p2v/include/gnulib/inttypes.h	1270;"	d
SCNuLEAST64	virt-p2v/include/gnulib/inttypes.in.h	795;"	d
SCNuLEAST64	virt-p2v/include/gnulib/inttypes.in.h	796;"	d
SCNuLEAST8	virt-p2v/include/gnulib/inttypes.h	1206;"	d
SCNuLEAST8	virt-p2v/include/gnulib/inttypes.h	1207;"	d
SCNuLEAST8	virt-p2v/include/gnulib/inttypes.in.h	732;"	d
SCNuLEAST8	virt-p2v/include/gnulib/inttypes.in.h	733;"	d
SCNuMAX	virt-p2v/include/gnulib/inttypes.h	1478;"	d
SCNuMAX	virt-p2v/include/gnulib/inttypes.h	1480;"	d
SCNuMAX	virt-p2v/include/gnulib/inttypes.h	1482;"	d
SCNuMAX	virt-p2v/include/gnulib/inttypes.in.h	1004;"	d
SCNuMAX	virt-p2v/include/gnulib/inttypes.in.h	1006;"	d
SCNuPTR	virt-p2v/include/gnulib/inttypes.h	1513;"	d
SCNuPTR	virt-p2v/include/gnulib/inttypes.h	1515;"	d
SCNuPTR	virt-p2v/include/gnulib/inttypes.in.h	1039;"	d
SCNuPTR	virt-p2v/include/gnulib/inttypes.in.h	1041;"	d
SCNx16	virt-p2v/include/gnulib/inttypes.h	1119;"	d
SCNx16	virt-p2v/include/gnulib/inttypes.h	1121;"	d
SCNx16	virt-p2v/include/gnulib/inttypes.in.h	645;"	d
SCNx16	virt-p2v/include/gnulib/inttypes.in.h	647;"	d
SCNx32	virt-p2v/include/gnulib/inttypes.h	1149;"	d
SCNx32	virt-p2v/include/gnulib/inttypes.h	1151;"	d
SCNx32	virt-p2v/include/gnulib/inttypes.in.h	675;"	d
SCNx32	virt-p2v/include/gnulib/inttypes.in.h	677;"	d
SCNx64	virt-p2v/include/gnulib/inttypes.h	1188;"	d
SCNx64	virt-p2v/include/gnulib/inttypes.h	1189;"	d
SCNx64	virt-p2v/include/gnulib/inttypes.in.h	714;"	d
SCNx64	virt-p2v/include/gnulib/inttypes.in.h	715;"	d
SCNx8	virt-p2v/include/gnulib/inttypes.h	1089;"	d
SCNx8	virt-p2v/include/gnulib/inttypes.h	1091;"	d
SCNx8	virt-p2v/include/gnulib/inttypes.in.h	615;"	d
SCNx8	virt-p2v/include/gnulib/inttypes.in.h	617;"	d
SCNxFAST16	virt-p2v/include/gnulib/inttypes.h	1379;"	d
SCNxFAST16	virt-p2v/include/gnulib/inttypes.h	1381;"	d
SCNxFAST16	virt-p2v/include/gnulib/inttypes.h	1383;"	d
SCNxFAST16	virt-p2v/include/gnulib/inttypes.h	1385;"	d
SCNxFAST16	virt-p2v/include/gnulib/inttypes.in.h	905;"	d
SCNxFAST16	virt-p2v/include/gnulib/inttypes.in.h	907;"	d
SCNxFAST32	virt-p2v/include/gnulib/inttypes.h	1421;"	d
SCNxFAST32	virt-p2v/include/gnulib/inttypes.h	1423;"	d
SCNxFAST32	virt-p2v/include/gnulib/inttypes.h	1425;"	d
SCNxFAST32	virt-p2v/include/gnulib/inttypes.in.h	947;"	d
SCNxFAST32	virt-p2v/include/gnulib/inttypes.in.h	949;"	d
SCNxFAST64	virt-p2v/include/gnulib/inttypes.h	1448;"	d
SCNxFAST64	virt-p2v/include/gnulib/inttypes.h	1449;"	d
SCNxFAST64	virt-p2v/include/gnulib/inttypes.in.h	974;"	d
SCNxFAST64	virt-p2v/include/gnulib/inttypes.in.h	975;"	d
SCNxFAST8	virt-p2v/include/gnulib/inttypes.h	1327;"	d
SCNxFAST8	virt-p2v/include/gnulib/inttypes.h	1329;"	d
SCNxFAST8	virt-p2v/include/gnulib/inttypes.h	1331;"	d
SCNxFAST8	virt-p2v/include/gnulib/inttypes.h	1333;"	d
SCNxFAST8	virt-p2v/include/gnulib/inttypes.h	1335;"	d
SCNxFAST8	virt-p2v/include/gnulib/inttypes.in.h	853;"	d
SCNxFAST8	virt-p2v/include/gnulib/inttypes.in.h	855;"	d
SCNxLEAST16	virt-p2v/include/gnulib/inttypes.h	1230;"	d
SCNxLEAST16	virt-p2v/include/gnulib/inttypes.h	1231;"	d
SCNxLEAST16	virt-p2v/include/gnulib/inttypes.in.h	756;"	d
SCNxLEAST16	virt-p2v/include/gnulib/inttypes.in.h	757;"	d
SCNxLEAST32	virt-p2v/include/gnulib/inttypes.h	1250;"	d
SCNxLEAST32	virt-p2v/include/gnulib/inttypes.h	1251;"	d
SCNxLEAST32	virt-p2v/include/gnulib/inttypes.in.h	776;"	d
SCNxLEAST32	virt-p2v/include/gnulib/inttypes.in.h	777;"	d
SCNxLEAST64	virt-p2v/include/gnulib/inttypes.h	1273;"	d
SCNxLEAST64	virt-p2v/include/gnulib/inttypes.h	1274;"	d
SCNxLEAST64	virt-p2v/include/gnulib/inttypes.in.h	799;"	d
SCNxLEAST64	virt-p2v/include/gnulib/inttypes.in.h	800;"	d
SCNxLEAST8	virt-p2v/include/gnulib/inttypes.h	1210;"	d
SCNxLEAST8	virt-p2v/include/gnulib/inttypes.h	1211;"	d
SCNxLEAST8	virt-p2v/include/gnulib/inttypes.in.h	736;"	d
SCNxLEAST8	virt-p2v/include/gnulib/inttypes.in.h	737;"	d
SCNxMAX	virt-p2v/include/gnulib/inttypes.h	1486;"	d
SCNxMAX	virt-p2v/include/gnulib/inttypes.h	1488;"	d
SCNxMAX	virt-p2v/include/gnulib/inttypes.h	1490;"	d
SCNxMAX	virt-p2v/include/gnulib/inttypes.in.h	1012;"	d
SCNxMAX	virt-p2v/include/gnulib/inttypes.in.h	1014;"	d
SCNxPTR	virt-p2v/include/gnulib/inttypes.h	1519;"	d
SCNxPTR	virt-p2v/include/gnulib/inttypes.h	1521;"	d
SCNxPTR	virt-p2v/include/gnulib/inttypes.in.h	1045;"	d
SCNxPTR	virt-p2v/include/gnulib/inttypes.in.h	1047;"	d
SCSI_BLK_MAJOR	src/linux.c	101;"	d	file:
SCSI_CDROM_MAJOR	src/linux.c	45;"	d	file:
SCSI_DISK0_MAJOR	src/linux.c	46;"	d	file:
SCSI_DISK10_MAJOR	src/linux.c	56;"	d	file:
SCSI_DISK11_MAJOR	src/linux.c	57;"	d	file:
SCSI_DISK12_MAJOR	src/linux.c	58;"	d	file:
SCSI_DISK13_MAJOR	src/linux.c	59;"	d	file:
SCSI_DISK14_MAJOR	src/linux.c	60;"	d	file:
SCSI_DISK15_MAJOR	src/linux.c	61;"	d	file:
SCSI_DISK1_MAJOR	src/linux.c	47;"	d	file:
SCSI_DISK2_MAJOR	src/linux.c	48;"	d	file:
SCSI_DISK3_MAJOR	src/linux.c	49;"	d	file:
SCSI_DISK4_MAJOR	src/linux.c	50;"	d	file:
SCSI_DISK5_MAJOR	src/linux.c	51;"	d	file:
SCSI_DISK6_MAJOR	src/linux.c	52;"	d	file:
SCSI_DISK7_MAJOR	src/linux.c	53;"	d	file:
SCSI_DISK8_MAJOR	src/linux.c	54;"	d	file:
SCSI_DISK9_MAJOR	src/linux.c	55;"	d	file:
SC_H	torrent/ed25519/sc.h	2;"	d
SDMMC_MAJOR	src/linux.c	95;"	d	file:
SED	qt_pro/Makefile	/^SED           = sed$/;"	m
SED	torrent/include/libtorrent/Makefile	/^SED = \/bin\/sed$/;"	m
SEND_DESKTOP	include/packet.h	/^	SEND_DESKTOP,$/;"	e	enum:yzy_cmd
SEND_DESKTOP	test/test.c	/^    SEND_DESKTOP = 1017,$/;"	e	enum:yzy_cmd	file:
SEND_DOWN_TORRENT	include/packet.h	/^    SEND_DOWN_TORRENT = 1015,$/;"	e	enum:yzy_cmd
SEND_DOWN_TORRENT	test/test.c	/^    SEND_DOWN_TORRENT = 1015,$/;"	e	enum:yzy_cmd	file:
SERVER_IP_KEY	include/config.h	19;"	d
SERVER_PORT_KEY	include/config.h	20;"	d
SERVER_SECTION	include/config.h	18;"	d
SESSION_VIEW_HPP_	torrent/bak/session_view.hpp	34;"	d
SET	torrent/src/settings_pack.cpp	357;"	d	file:
SET	torrent/src/settings_pack.cpp	95;"	d	file:
SET_MAKE	torrent/include/libtorrent/Makefile	/^SET_MAKE = $/;"	m
SET_TRACKER	test/test.c	/^	SET_TRACKER,$/;"	e	enum:BT_CMD	file:
SHA1_final	torrent/src/sha1.cpp	/^void SHA1_final(u8* digest, sha1_ctx* context)$/;"	f	namespace:libtorrent
SHA1_init	torrent/src/sha1.cpp	/^void SHA1_init(sha1_ctx* context)$/;"	f	namespace:libtorrent
SHA1_update	torrent/src/sha1.cpp	/^void SHA1_update(sha1_ctx* context, u8 const* data, size_t len)$/;"	f	namespace:libtorrent
SHA1transform	torrent/src/sha1.cpp	/^	void SHA1transform(u32 state[5], u8 const buffer[64])$/;"	f	namespace:libtorrent::__anon103
SHA512_final	torrent/src/sha512.cpp	/^int SHA512_final(std::uint8_t* out, sha512_ctx* md)$/;"	f	namespace:libtorrent
SHA512_init	torrent/src/sha512.cpp	/^int SHA512_init(sha512_ctx* md) {$/;"	f	namespace:libtorrent
SHA512_update	torrent/src/sha512.cpp	/^int SHA512_update(sha512_ctx* md, std::uint8_t const* in, std::size_t inlen)$/;"	f	namespace:libtorrent
SHAPrintContext	torrent/src/sha1.cpp	/^	void SHAPrintContext(sha1_ctx *context, char *msg)$/;"	f	namespace:libtorrent::__anon103
SHELL	torrent/include/libtorrent/Makefile	/^SHELL = \/bin\/bash$/;"	m
SHRT_WIDTH	virt-p2v/include/gnulib/limits.h	94;"	d
SHRT_WIDTH	virt-p2v/include/gnulib/limits.in.h	93;"	d
SHUTDONW	include/packet.h	/^    SHUTDONW,   $/;"	e	enum:yzy_cmd
SHUTDONW	test/test.c	/^    SHUTDONW,   $/;"	e	enum:yzy_cmd	file:
SHUTDOWN_PIPE	include/socket.h	/^    SHUTDOWN_PIPE,$/;"	e	enum:PIPE_MSG
SHUTDOWN_PIPE	qt_pro/global.h	/^    SHUTDOWN_PIPE,$/;"	e	enum:PIPE_MSG
SIG_ATOMIC_MAX	virt-p2v/include/gnulib/stdint.h	552;"	d
SIG_ATOMIC_MAX	virt-p2v/include/gnulib/stdint.h	560;"	d
SIG_ATOMIC_MIN	virt-p2v/include/gnulib/stdint.h	551;"	d
SIG_ATOMIC_MIN	virt-p2v/include/gnulib/stdint.h	554;"	d
SIG_ATOMIC_MIN	virt-p2v/include/gnulib/stdint.h	557;"	d
SIG_ATOMIC_WIDTH	virt-p2v/include/gnulib/stdint.h	741;"	d
SIZEOF_LONG	virt-p2v/include/config.h	708;"	d
SIZE_MAX	virt-p2v/include/gnulib/stdint.h	566;"	d
SIZE_MAX	virt-p2v/include/gnulib/stdint.h	574;"	d
SIZE_WIDTH	virt-p2v/include/gnulib/stdint.h	735;"	d
SOL_NETLINK	torrent/include/libtorrent/socket.hpp	69;"	d
SOURCES	qt_pro/Makefile	/^SOURCES       = main.cpp \\$/;"	m
SOURCES	torrent/include/libtorrent/Makefile	/^SOURCES =$/;"	m
SSH_TIMEOUT	virt-p2v/src/ssh.c	61;"	d	file:
SSL	torrent/src/torrent.cpp	6956;"	d	file:
SSL	torrent/src/torrent.cpp	6970;"	d	file:
STACKBUF_LEN	virt-p2v/include/gnulib/strerror-override.h	27;"	d
START_BT	test/test.c	/^	START_BT= 2000,$/;"	e	enum:BT_CMD	file:
STATUS_GNULIB_INVALID_PARAMETER	virt-p2v/include/gnulib/msvc-inval.h	104;"	d
STDC_HEADERS	virt-p2v/include/config.h	726;"	d
STDERR_FILENO	virt-p2v/include/gnulib/unistd.h	715;"	d
STDIN_FILENO	virt-p2v/include/gnulib/unistd.h	709;"	d
STDOUT_FILENO	virt-p2v/include/gnulib/unistd.h	712;"	d
STOP_BT	test/test.c	/^	STOP_BT,$/;"	e	enum:BT_CMD	file:
STORE64H	torrent/src/sha512.cpp	85;"	d	file:
STR	include/gpt.h	17;"	d
STRCASEEQ	virt-p2v/include/guestfs-utils.h	29;"	d
STRCASEEQ	virt-p2v/libguestfs/guestfs-utils.h	29;"	d
STREQ	virt-p2v/include/guestfs-utils.h	28;"	d
STREQ	virt-p2v/libguestfs/guestfs-utils.h	28;"	d
STRERROR_R_CHAR_P	virt-p2v/include/config.h	729;"	d
STRICT	torrent/include/libtorrent/aux_/windows.hpp	43;"	d
STRIP	Makefile	/^STRIP = $(CROSS_COMPILE)strip$/;"	m
STRIP	torrent/Makefile	/^STRIP = $(CROSS_COMPILE)strip$/;"	m
STRIP	torrent/include/libtorrent/Makefile	/^STRIP = strip$/;"	m
STRNEQ	virt-p2v/include/guestfs-utils.h	30;"	d
STRNEQ	virt-p2v/libguestfs/guestfs-utils.h	30;"	d
STRPREFIX	qt_pro/uploadwindow.cpp	9;"	d	file:
STRPREFIX	src/device.c	6;"	d	file:
STRPREFIX	virt-p2v/include/guestfs-utils.h	31;"	d
STRPREFIX	virt-p2v/libguestfs/guestfs-utils.h	31;"	d
STRTOL_T_MAXIMUM	virt-p2v/src/xstrtoull.c	5;"	d	file:
STRTOL_T_MINIMUM	virt-p2v/src/xstrtoull.c	4;"	d	file:
STR_TO_U16	include/packet.h	33;"	d
STR_TO_U32	include/packet.h	34;"	d
ST_DATA	torrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
ST_FIN	torrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
ST_RESET	torrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
ST_STATE	torrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
ST_SYN	torrent/include/libtorrent/utp_stream.hpp	/^{ ST_DATA, ST_FIN, ST_STATE, ST_RESET, ST_SYN, NUM_TYPES };$/;"	e	enum:libtorrent::utp_socket_state_t
SUCCESS	include/base.h	70;"	d
SX8_MAJOR1	src/linux.c	92;"	d	file:
SX8_MAJOR2	src/linux.c	93;"	d	file:
SYMLINK	qt_pro/Makefile	/^SYMLINK       = ln -sf$/;"	m
S_IFMT	src/linux.c	11;"	d	file:
S_ISBLK	src/linux.c	16;"	d	file:
SaveStoreConfig	src/StoreConfig.c	/^int SaveStoreConfig(yzy_file_t hd)$/;"	f
ScanSpaceFormInterval	src/StoreConfig.c	/^static void ScanSpaceFormInterval(uint64_t sizeLba, PYZYGUID diskName, int64_t *startLba, int64_t *endLba, PYZY_QCOW_ENTRY *diskList, uint32_t count)$/;"	f	file:
ScanStoreEntry	src/StoreConfig.c	/^static PYZY_QCOW_ENTRY ScanStoreEntry(uint32_t difLevel, PYZYGUID name)$/;"	f	file:
SetBoot	src/StoreConfig.c	/^void SetBoot(int idx, PYZY_QCOW_ENTRY pQe)$/;"	f
SetCrc	src/StoreConfig.c	/^static void SetCrc()$/;"	f	file:
SetDiskSizeLba	src/StoreConfig.c	/^int SetDiskSizeLba(PYZYGUID diskName, uint64_t size_lba)$/;"	f
SetStoreLba	src/StoreConfig.c	/^void SetStoreLba(uint64_t lba)$/;"	f
Sigma0	torrent/src/sha512.cpp	102;"	d	file:
Sigma1	torrent/src/sha512.cpp	103;"	d	file:
StoreDriver	include/StoreConfig.h	/^} StoreDriver;$/;"	t	typeref:struct:_StoreDriver
StyleDonut	qt_pro/QRoundProgressBar.h	/^        StyleDonut,$/;"	e	enum:QRoundProgressBar::BarStyle
StyleLine	qt_pro/QRoundProgressBar.h	/^        StyleLine$/;"	e	enum:QRoundProgressBar::BarStyle
StylePie	qt_pro/QRoundProgressBar.h	/^        StylePie,$/;"	e	enum:QRoundProgressBar::BarStyle
T	torrent/ed25519/ge.h	/^  fe T;$/;"	m	struct:__anon138
T	torrent/ed25519/ge.h	/^  fe T;$/;"	m	struct:__anon139
T2d	torrent/ed25519/ge.h	/^  fe T2d;$/;"	m	struct:__anon141
TAR	qt_pro/Makefile	/^TAR           = tar -cf$/;"	m
TARGET	qt_pro/Makefile	/^TARGET        = libqt.so.1.0.0$/;"	m
TARGET0	qt_pro/Makefile	/^TARGET0       = libqt.so$/;"	m
TARGET1	qt_pro/Makefile	/^TARGET1       = libqt.so.1$/;"	m
TARGET2	qt_pro/Makefile	/^TARGET2       = libqt.so.1.0$/;"	m
TARGETA	qt_pro/Makefile	/^TARGETA       = ..\/lib\/libqt.a$/;"	m
TARGETD	qt_pro/Makefile	/^TARGETD       = libqt.so.1.0.0$/;"	m
TARGET_ARCH	Makefile	/^TARGET_ARCH = x64$/;"	m
TARGET_ARCH	torrent/Makefile	/^TARGET_ARCH = x64$/;"	m
TASK_END	test/test.c	/^	TASK_END = 8000,$/;"	e	enum:BT_CMD	file:
TERMINAL_LOGIN	include/packet.h	/^    TERMINAL_LOGIN,$/;"	e	enum:yzy_cmd
TERMINAL_LOGIN	test/test.c	/^    TERMINAL_LOGIN,$/;"	e	enum:yzy_cmd	file:
TERMINAL_LOGOUT	include/packet.h	/^    TERMINAL_LOGOUT,$/;"	e	enum:yzy_cmd
TERMINAL_LOGOUT	test/test.c	/^    TERMINAL_LOGOUT,$/;"	e	enum:yzy_cmd	file:
TERMINAL_SECTION	include/config.h	22;"	d
THIS_FILE	torrent/bak/udp_tracker.cpp	/^static char THIS_FILE[]=__FILE__;$/;"	v	file:
THIS_FILE	torrent/bak/udp_tracker.cpp	73;"	d	file:
TIMESTAMP_HISTORY_HPP	torrent/include/libtorrent/timestamp_history.hpp	34;"	d
TIMEZONE_OFFSET	src/tools.c	30;"	d	file:
TIME_MASK	torrent/src/timestamp_history.cpp	/^constexpr std::uint32_t TIME_MASK = 0xffffffff;$/;"	m	namespace:libtorrent	file:
TIME_OUT	include/base.h	81;"	d
TM_AUTO_DESKTOP_KEY	include/config.h	27;"	d
TM_CONFIG_VER_KEY	include/config.h	25;"	d
TM_DESKTOP_TYPE_KEY	include/config.h	26;"	d
TM_ID_KEY	include/config.h	23;"	d
TM_NAME_KEY	include/config.h	24;"	d
TM_PLATFORM_KEY	include/config.h	28;"	d
TOP_DIR	Makefile	/^TOP_DIR := $(shell pwd)$/;"	m
TOP_DIR	torrent/Makefile	/^TOP_DIR := $(shell pwd)$/;"	m
TORRENT_ABI_VERSION	torrent/include/libtorrent/aux_/export.hpp	42;"	d
TORRENT_ABI_VERSION	torrent/include/libtorrent/aux_/export.hpp	44;"	d
TORRENT_ADDRESS_HPP_INCLUDED	torrent/include/libtorrent/address.hpp	34;"	d
TORRENT_ADD_TORRENT_PARAMS_HPP_INCLUDED	torrent/include/libtorrent/add_torrent_params.hpp	34;"	d
TORRENT_ALERT_HPP_INCLUDED	torrent/include/libtorrent/alert.hpp	34;"	d
TORRENT_ALERT_MANAGER_HPP_INCLUDED	torrent/include/libtorrent/alert_manager.hpp	34;"	d
TORRENT_ALERT_TYPES_HPP_INCLUDED	torrent/include/libtorrent/alert_types.hpp	34;"	d
TORRENT_ALIGNED_STORAGE_HPP_INCLUDE	torrent/include/libtorrent/aux_/aligned_storage.hpp	34;"	d
TORRENT_ALIGNED_UNION_HPP_INCLUDE	torrent/include/libtorrent/aux_/aligned_union.hpp	34;"	d
TORRENT_ALLOCA	torrent/include/libtorrent/aux_/alloca.hpp	80;"	d
TORRENT_ALLOCATING_HANDLER_HPP_INCLUDED	torrent/include/libtorrent/aux_/allocating_handler.hpp	34;"	d
TORRENT_ALLOCA_HPP_INCLUDED	torrent/include/libtorrent/aux_/alloca.hpp	34;"	d
TORRENT_AMIGA	torrent/include/libtorrent/config.hpp	96;"	d
TORRENT_ANDROID	torrent/include/libtorrent/config.hpp	174;"	d
TORRENT_ANNOUNCE_ENTRY_HPP_INCLUDED	torrent/include/libtorrent/announce_entry.hpp	34;"	d
TORRENT_ARRAY_HPP	torrent/include/libtorrent/aux_/array.hpp	34;"	d
TORRENT_ASSERT	torrent/include/libtorrent/assert.hpp	114;"	d
TORRENT_ASSERT	torrent/include/libtorrent/assert.hpp	91;"	d
TORRENT_ASSERT_FAIL	torrent/include/libtorrent/assert.hpp	108;"	d
TORRENT_ASSERT_FAIL	torrent/include/libtorrent/assert.hpp	117;"	d
TORRENT_ASSERT_FAIL_VAL	torrent/include/libtorrent/assert.hpp	105;"	d
TORRENT_ASSERT_FAIL_VAL	torrent/include/libtorrent/assert.hpp	116;"	d
TORRENT_ASSERT_FAIL_VAL	torrent/include/libtorrent/assert.hpp	99;"	d
TORRENT_ASSERT_HPP_INCLUDED	torrent/include/libtorrent/assert.hpp	34;"	d
TORRENT_ASSERT_PRECOND	torrent/include/libtorrent/assert.hpp	113;"	d
TORRENT_ASSERT_PRECOND	torrent/include/libtorrent/assert.hpp	88;"	d
TORRENT_ASSERT_VAL	torrent/include/libtorrent/assert.hpp	104;"	d
TORRENT_ASSERT_VAL	torrent/include/libtorrent/assert.hpp	115;"	d
TORRENT_ASSERT_VAL	torrent/include/libtorrent/assert.hpp	95;"	d
TORRENT_AUTO_RETURN_TYPES	torrent/include/libtorrent/config.hpp	452;"	d
TORRENT_AUTO_RETURN_TYPES	torrent/include/libtorrent/config.hpp	85;"	d
TORRENT_AUX_IO_HPP_INCLUDED	torrent/include/libtorrent/aux_/io.hpp	34;"	d
TORRENT_AUX_SESSION_SETTINGS_HPP_INCLUDED	torrent/include/libtorrent/aux_/session_settings.hpp	34;"	d
TORRENT_AUX_TIME_HPP	torrent/include/libtorrent/aux_/time.hpp	34;"	d
TORRENT_BANDWIDTH_CHANNEL_HPP_INCLUDED	torrent/include/libtorrent/bandwidth_limit.hpp	34;"	d
TORRENT_BANDWIDTH_MANAGER_HPP_INCLUDED	torrent/include/libtorrent/bandwidth_manager.hpp	34;"	d
TORRENT_BANDWIDTH_QUEUE_ENTRY_HPP_INCLUDED	torrent/include/libtorrent/bandwidth_queue_entry.hpp	34;"	d
TORRENT_BANDWIDTH_SOCKET_HPP_INCLUDED	torrent/include/libtorrent/bandwidth_socket.hpp	34;"	d
TORRENT_BDECODE_HPP	torrent/include/libtorrent/bdecode.hpp	34;"	d
TORRENT_BENCODE_HPP_INCLUDED	torrent/include/libtorrent/bencode.hpp	34;"	d
TORRENT_BEOS	torrent/include/libtorrent/config.hpp	290;"	d
TORRENT_BIND_TO_DEVICE_HPP_INCLUDED	torrent/include/libtorrent/aux_/bind_to_device.hpp	34;"	d
TORRENT_BITFIELD_HPP_INCLUDED	torrent/include/libtorrent/bitfield.hpp	34;"	d
TORRENT_BLOCK_CACHE	torrent/include/libtorrent/block_cache.hpp	34;"	d
TORRENT_BLOCK_CACHE_REFERENCE_HPP	torrent/include/libtorrent/aux_/block_cache_reference.hpp	34;"	d
TORRENT_BLOOM_FILTER_HPP_INCLUDED	torrent/include/libtorrent/bloom_filter.hpp	34;"	d
TORRENT_BROADCAST_SOCKET_HPP_INCLUDED	torrent/include/libtorrent/broadcast_socket.hpp	34;"	d
TORRENT_BROKEN_RANDOM_DEVICE	torrent/include/libtorrent/config.hpp	212;"	d
TORRENT_BROKEN_RANDOM_DEVICE	torrent/include/libtorrent/config.hpp	333;"	d
TORRENT_BSD	torrent/include/libtorrent/config.hpp	110;"	d
TORRENT_BSD	torrent/include/libtorrent/config.hpp	321;"	d
TORRENT_BT_PEER_CONNECTION_HPP_INCLUDED	torrent/include/libtorrent/bt_peer_connection.hpp	35;"	d
TORRENT_BUFFER_HPP_INCLUDED	torrent/include/libtorrent/buffer.hpp	33;"	d
TORRENT_BYTESWAP_HPP_INCLUDED	torrent/include/libtorrent/aux_/byteswap.hpp	34;"	d
TORRENT_CATCH	torrent/include/libtorrent/config.hpp	499;"	d
TORRENT_CATCH	torrent/include/libtorrent/config.hpp	504;"	d
TORRENT_CATCH_ALL	torrent/include/libtorrent/config.hpp	500;"	d
TORRENT_CATCH_ALL	torrent/include/libtorrent/config.hpp	505;"	d
TORRENT_CHAINED_BUFFER_HPP_INCLUDED	torrent/include/libtorrent/chained_buffer.hpp	34;"	d
TORRENT_CHOKER_HPP_INCLUDED	torrent/include/libtorrent/choker.hpp	34;"	d
TORRENT_CLOSE_REASON_HPP	torrent/include/libtorrent/close_reason.hpp	34;"	d
TORRENT_COMPLETE_TYPES_REQUIRED	torrent/include/libtorrent/config.hpp	406;"	d
TORRENT_COMPLETE_TYPES_REQUIRED	torrent/include/libtorrent/config.hpp	65;"	d
TORRENT_COMPLETE_TYPES_REQUIRED	torrent/include/libtorrent/config.hpp	72;"	d
TORRENT_CONDITIONAL_EXPORT	torrent/include/libtorrent/hex.hpp	50;"	d
TORRENT_CONDITIONAL_EXPORT	torrent/include/libtorrent/hex.hpp	52;"	d
TORRENT_CONDITIONAL_EXPORT	torrent/include/libtorrent/hex.hpp	72;"	d
TORRENT_CONFIG_HPP_INCLUDED	torrent/include/libtorrent/config.hpp	34;"	d
TORRENT_CONTAINER_WRAPPER_HPP	torrent/include/libtorrent/aux_/container_wrapper.hpp	34;"	d
TORRENT_COPY_PTR	torrent/include/libtorrent/copy_ptr.hpp	34;"	d
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	/^		counters& operator=(counters const&) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	/^		counters() TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	/^		counters(counters const&) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	/^		std::int64_t inc_stats_counter(int c, std::int64_t value = 1) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	/^		std::int64_t operator[](int i) const TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	/^		void blend_stats_counter(int c, std::int64_t value, int ratio) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	/^		void set_value(int c, std::int64_t value) TORRENT_COUNTER_NOEXCEPT;$/;"	m	struct:libtorrent::counters
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	474;"	d
TORRENT_COUNTER_NOEXCEPT	torrent/include/libtorrent/performance_counters.hpp	476;"	d
TORRENT_CPP98_DEQUE	torrent/include/libtorrent/chained_buffer.hpp	52;"	d
TORRENT_CPP98_DEQUE	torrent/include/libtorrent/chained_buffer.hpp	54;"	d
TORRENT_CPUID_HPP_INCLUDED	torrent/include/libtorrent/aux_/cpuid.hpp	34;"	d
TORRENT_CRC32C_HPP_INCLUDE	torrent/include/libtorrent/crc32c.hpp	34;"	d
TORRENT_CREATE_TORRENT_HPP_INCLUDED	torrent/include/libtorrent/create_torrent.hpp	34;"	d
TORRENT_DEADLINE_TIMER_HPP_INCLUDED	torrent/include/libtorrent/deadline_timer.hpp	34;"	d
TORRENT_DEBUG_HPP_INCLUDED	torrent/include/libtorrent/debug.hpp	34;"	d
TORRENT_DEBUG_STREAMING	torrent/include/libtorrent/torrent.hpp	98;"	d
TORRENT_DECLARE_DUMMY	torrent/include/libtorrent/config.hpp	501;"	d
TORRENT_DECLARE_DUMMY	torrent/include/libtorrent/config.hpp	506;"	d
TORRENT_DEFERRED_HANDLER_HPP	torrent/include/libtorrent/aux_/deferred_handler.hpp	34;"	d
TORRENT_DEFINE_ALERT	torrent/include/libtorrent/alert_types.hpp	206;"	d
TORRENT_DEFINE_ALERT_IMPL	torrent/include/libtorrent/alert_types.hpp	198;"	d
TORRENT_DEFINE_ALERT_PRIO	torrent/include/libtorrent/alert_types.hpp	209;"	d
TORRENT_DEPRECATED	torrent/include/libtorrent/aux_/deprecated.hpp	42;"	d
TORRENT_DEPRECATED	torrent/include/libtorrent/aux_/deprecated.hpp	55;"	d
TORRENT_DEPRECATED	torrent/include/libtorrent/aux_/deprecated.hpp	71;"	d
TORRENT_DEPRECATED	torrent/include/libtorrent/aux_/deprecated.hpp	77;"	d
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			accept TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			bind TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			bind_to_device TORRENT_DEPRECATED_ENUM$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			bittyrant_with_no_uplimit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::final::performance_warning_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			enum_if TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			get_socket_name TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			i2p TORRENT_DEPRECATED_ENUM,$/;"	m	struct:final	typeref:enum:final::i2p
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			i2p TORRENT_DEPRECATED_ENUM,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::i2p
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			listen TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			open TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			parse_addr TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			socks5 TORRENT_DEPRECATED_ENUM,$/;"	m	struct:final	typeref:enum:final::socks5
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			socks5 TORRENT_DEPRECATED_ENUM,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::socks5
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			tcp_ssl TORRENT_DEPRECATED_ENUM,$/;"	m	struct:final	typeref:enum:final::tcp_ssl
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			tcp_ssl TORRENT_DEPRECATED_ENUM,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::tcp_ssl
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			udp TORRENT_DEPRECATED_ENUM,$/;"	m	struct:final	typeref:enum:final::udp
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/alert_types.hpp	/^			udp TORRENT_DEPRECATED_ENUM,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::udp
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/aux_/deprecated.hpp	43;"	d
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/aux_/deprecated.hpp	59;"	d
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/aux_/deprecated.hpp	81;"	d
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/error_code.hpp	/^			natpmp_not_authorized TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/error_code.hpp	/^			network_failure TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/error_code.hpp	/^			no_resources TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/error_code.hpp	/^			unsupported_opcode TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/error_code.hpp	/^			unsupported_protocol_version TORRENT_DEPRECATED_ENUM = 120,$/;"	e	enum:libtorrent::errors::error_code_enum
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/session_handle.hpp	/^			listen_no_system_port TORRENT_DEPRECATED_ENUM = 0x02$/;"	e	enum:libtorrent::session_handle::listen_on_flags_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/session_handle.hpp	/^			listen_reuse_address TORRENT_DEPRECATED_ENUM = 0x01,$/;"	e	enum:libtorrent::session_handle::listen_on_flags_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			active_loaded_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			aio_max TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			announce_double_nat TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			bittyrant_choker TORRENT_DEPRECATED_ENUM = 3$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::bittyrant_choker
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			broadcast_lsd TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			cache_buffer_chunk_size TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			contiguous_recv_buffer TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			decrease_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			default_cache_min_age TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			default_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			dont_flush_write_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			file_checks_delay_per_block TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			force_proxy TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			guided_read_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			half_open_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			hashing_threads TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			ignore_limits_on_local_network TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			ignore_resume_timestamps TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			increase_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			lazy_bitfields TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			local_download_rate_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			local_upload_rate_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			lock_disk_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			lock_files TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			low_prio_disk TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			mmap_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::string_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			network_threads TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			rate_limit_utp TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			ssl_listen TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			strict_super_seeding TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			use_disk_cache_pool TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			use_disk_read_ahead TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			use_write_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/settings_pack.hpp	/^			utp_delayed_ack TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/storage_defs.hpp	/^		always_replace_files TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::deprecated_move_flags_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/storage_defs.hpp	/^		dont_replace TORRENT_DEPRECATED_ENUM$/;"	e	enum:libtorrent::deprecated_move_flags_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/storage_defs.hpp	/^		fail_if_exist TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::deprecated_move_flags_t
TORRENT_DEPRECATED_ENUM	torrent/include/libtorrent/torrent_status.hpp	/^			queued_for_checking TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::torrent_status::state_t
TORRENT_DEPRECATED_ENUM	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_as_map TORRENT_DEPRECATED_ENUM;$/;"	m	namespace:libtorrent	file:
TORRENT_DEPRECATED_ENUM	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_dht_proxy TORRENT_DEPRECATED_ENUM;$/;"	m	namespace:libtorrent	file:
TORRENT_DEPRECATED_ENUM	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_i2p_proxy TORRENT_DEPRECATED_ENUM;$/;"	m	namespace:libtorrent	file:
TORRENT_DEPRECATED_ENUM	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_peer_proxy TORRENT_DEPRECATED_ENUM;$/;"	m	namespace:libtorrent	file:
TORRENT_DEPRECATED_ENUM	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_proxy TORRENT_DEPRECATED_ENUM;$/;"	m	namespace:libtorrent	file:
TORRENT_DEPRECATED_ENUM	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_tracker_proxy TORRENT_DEPRECATED_ENUM;$/;"	m	namespace:libtorrent	file:
TORRENT_DEPRECATED_ENUM	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_web_proxy TORRENT_DEPRECATED_ENUM;$/;"	m	namespace:libtorrent	file:
TORRENT_DEPRECATED_EXPORT	torrent/include/libtorrent/aux_/export.hpp	96;"	d
TORRENT_DEPRECATED_EXPORT	torrent/include/libtorrent/aux_/export.hpp	98;"	d
TORRENT_DEPRECATED_HPP_INCLUDED	torrent/include/libtorrent/aux_/deprecated.hpp	34;"	d
TORRENT_DEPRECATED_MEMBER	torrent/include/libtorrent/aux_/deprecated.hpp	44;"	d
TORRENT_DEPRECATED_MEMBER	torrent/include/libtorrent/aux_/deprecated.hpp	60;"	d
TORRENT_DEPRECATED_MEMBER	torrent/include/libtorrent/aux_/deprecated.hpp	85;"	d
TORRENT_DEQUE_HPP	torrent/include/libtorrent/aux_/deque.hpp	34;"	d
TORRENT_DEV_RANDOM_HPP_INCLUDED	torrent/include/libtorrent/aux_/dev_random.hpp	34;"	d
TORRENT_DHT_DOS_BLOCKER	torrent/include/libtorrent/kademlia/dos_blocker.hpp	34;"	d
TORRENT_DHT_SETTINGS_HPP_INCLUDED	torrent/include/libtorrent/kademlia/dht_settings.hpp	34;"	d
TORRENT_DHT_STORAGE_HPP	torrent/include/libtorrent/kademlia/dht_storage.hpp	34;"	d
TORRENT_DHT_TRACKER	torrent/include/libtorrent/kademlia/dht_tracker.hpp	34;"	d
TORRENT_DIRECT_REQUEST_HPP	torrent/include/libtorrent/kademlia/direct_request.hpp	34;"	d
TORRENT_DISK_BUFFER_HOLDER_HPP_INCLUDED	torrent/include/libtorrent/disk_buffer_holder.hpp	34;"	d
TORRENT_DISK_BUFFER_POOL_HPP	torrent/include/libtorrent/disk_buffer_pool.hpp	34;"	d
TORRENT_DISK_INTERFACE_HPP	torrent/include/libtorrent/disk_interface.hpp	34;"	d
TORRENT_DISK_IO_JOB_HPP	torrent/include/libtorrent/disk_io_job.hpp	34;"	d
TORRENT_DISK_IO_THREAD	torrent/include/libtorrent/disk_io_thread.hpp	34;"	d
TORRENT_DISK_IO_THREAD_POOL	torrent/include/libtorrent/disk_io_thread_pool.hpp	34;"	d
TORRENT_DISK_JOB_FENCE_HPP_INCLUDE	torrent/include/libtorrent/aux_/disk_job_fence.hpp	34;"	d
TORRENT_DISK_JOB_POOL	torrent/include/libtorrent/disk_job_pool.hpp	34;"	d
TORRENT_DISK_OBSERVER_HPP	torrent/include/libtorrent/disk_observer.hpp	34;"	d
TORRENT_DOWNLOAD_PRIORITY_HPP_INCLUDED	torrent/include/libtorrent/download_priority.hpp	34;"	d
TORRENT_ENTRY_HPP_INCLUDED	torrent/include/libtorrent/entry.hpp	34;"	d
TORRENT_ENUM_NET_HPP_INCLUDED	torrent/include/libtorrent/enum_net.hpp	34;"	d
TORRENT_ERROR_CODE_HPP_INCLUDED	torrent/include/libtorrent/error_code.hpp	34;"	d
TORRENT_ERROR_HPP_INCLUDED	torrent/include/libtorrent/error.hpp	34;"	d
TORRENT_ESCAPE_STRING_HPP_INCLUDED	torrent/include/libtorrent/aux_/escape_string.hpp	34;"	d
TORRENT_ETHERNET_MTU	torrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_ETHERNET_MTU = 1500;$/;"	m	namespace:libtorrent
TORRENT_EXPORT	torrent/include/libtorrent/aux_/export.hpp	71;"	d
TORRENT_EXPORT	torrent/include/libtorrent/aux_/export.hpp	73;"	d
TORRENT_EXPORT	torrent/include/libtorrent/aux_/export.hpp	87;"	d
TORRENT_EXPORT_HPP_INCLUDED	torrent/include/libtorrent/aux_/export.hpp	34;"	d
TORRENT_EXTENSIONS_HPP_INCLUDED	torrent/include/libtorrent/extensions.hpp	34;"	d
TORRENT_EXTRA_EXPORT	torrent/include/libtorrent/aux_/export.hpp	80;"	d
TORRENT_EXTRA_EXPORT	torrent/include/libtorrent/aux_/export.hpp	82;"	d
TORRENT_EXTRA_EXPORT	torrent/include/libtorrent/aux_/export.hpp	91;"	d
TORRENT_FAIL_BDECODE	torrent/src/bdecode.cpp	746;"	d	file:
TORRENT_FAIL_BDECODE	torrent/src/lazy_bdecode.cpp	75;"	d	file:
TORRENT_FFS_HPP_INCLUDE	torrent/include/libtorrent/aux_/ffs.hpp	34;"	d
TORRENT_FILE_HPP_INCLUDED	torrent/include/libtorrent/file.hpp	34;"	d
TORRENT_FILE_POOL_HPP	torrent/include/libtorrent/file_pool.hpp	34;"	d
TORRENT_FILE_PROGRESS_HPP_INCLUDE	torrent/include/libtorrent/aux_/file_progress.hpp	34;"	d
TORRENT_FILE_STORAGE_HPP_INCLUDED	torrent/include/libtorrent/file_storage.hpp	34;"	d
TORRENT_FINGERPRINT_HPP_INCLUDED	torrent/include/libtorrent/fingerprint.hpp	34;"	d
TORRENT_FLAGS_HPP_INCLUDED	torrent/include/libtorrent/flags.hpp	34;"	d
TORRENT_FORMAT	torrent/include/libtorrent/config.hpp	327;"	d
TORRENT_FORMAT	torrent/include/libtorrent/config.hpp	329;"	d
TORRENT_FWD_HPP	torrent/include/libtorrent/fwd.hpp	34;"	d
TORRENT_GENERATE_PEER_ID_HPP_INCLUDED	torrent/include/libtorrent/aux_/generate_peer_id.hpp	34;"	d
TORRENT_GZIP_HPP_INCLUDED	torrent/include/libtorrent/gzip.hpp	34;"	d
TORRENT_HASHER512_HPP_INCLUDED	torrent/include/libtorrent/hasher512.hpp	34;"	d
TORRENT_HASHER_HPP_INCLUDED	torrent/include/libtorrent/hasher.hpp	34;"	d
TORRENT_HAS_ARM	torrent/include/libtorrent/config.hpp	528;"	d
TORRENT_HAS_ARM	torrent/include/libtorrent/config.hpp	530;"	d
TORRENT_HAS_ARM_CRC32	torrent/include/libtorrent/config.hpp	564;"	d
TORRENT_HAS_ARM_CRC32	torrent/include/libtorrent/config.hpp	567;"	d
TORRENT_HAS_ARM_CRC32	torrent/include/libtorrent/config.hpp	569;"	d
TORRENT_HAS_ARM_NEON	torrent/include/libtorrent/config.hpp	558;"	d
TORRENT_HAS_ARM_NEON	torrent/include/libtorrent/config.hpp	560;"	d
TORRENT_HAS_AUXV	torrent/src/cpuid.cpp	50;"	d	file:
TORRENT_HAS_AUXV	torrent/src/cpuid.cpp	52;"	d	file:
TORRENT_HAS_AUXV	torrent/src/cpuid.cpp	54;"	d	file:
TORRENT_HAS_BINDTODEVICE	torrent/include/libtorrent/aux_/bind_to_device.hpp	70;"	d
TORRENT_HAS_BLOCK_HPP_INCLUDED	torrent/include/libtorrent/aux_/has_block.hpp	34;"	d
TORRENT_HAS_BUILTIN_CLZ	torrent/include/libtorrent/config.hpp	538;"	d
TORRENT_HAS_BUILTIN_CLZ	torrent/include/libtorrent/config.hpp	540;"	d
TORRENT_HAS_BUILTIN_CLZ	torrent/include/libtorrent/config.hpp	542;"	d
TORRENT_HAS_BUILTIN_CLZ	torrent/include/libtorrent/config.hpp	544;"	d
TORRENT_HAS_BUILTIN_CTZ	torrent/include/libtorrent/config.hpp	548;"	d
TORRENT_HAS_BUILTIN_CTZ	torrent/include/libtorrent/config.hpp	550;"	d
TORRENT_HAS_BUILTIN_CTZ	torrent/include/libtorrent/config.hpp	552;"	d
TORRENT_HAS_BUILTIN_CTZ	torrent/include/libtorrent/config.hpp	554;"	d
TORRENT_HAS_DONT_FRAGMENT	torrent/include/libtorrent/socket.hpp	179;"	d
TORRENT_HAS_FALLOCATE	torrent/include/libtorrent/config.hpp	145;"	d
TORRENT_HAS_FALLOCATE	torrent/include/libtorrent/config.hpp	175;"	d
TORRENT_HAS_FALLOCATE	torrent/include/libtorrent/config.hpp	181;"	d
TORRENT_HAS_FALLOCATE	torrent/include/libtorrent/config.hpp	183;"	d
TORRENT_HAS_FALLOCATE	torrent/include/libtorrent/config.hpp	266;"	d
TORRENT_HAS_FALLOCATE	torrent/include/libtorrent/config.hpp	292;"	d
TORRENT_HAS_FALLOCATE	torrent/include/libtorrent/config.hpp	307;"	d
TORRENT_HAS_FALLOCATE	torrent/include/libtorrent/config.hpp	374;"	d
TORRENT_HAS_KEEPALIVE_IDLE	torrent/include/libtorrent/aux_/keepalive.hpp	46;"	d
TORRENT_HAS_KEEPALIVE_INTERVAL	torrent/include/libtorrent/aux_/keepalive.hpp	80;"	d
TORRENT_HAS_SALEN	torrent/include/libtorrent/config.hpp	169;"	d
TORRENT_HAS_SALEN	torrent/include/libtorrent/config.hpp	204;"	d
TORRENT_HAS_SALEN	torrent/include/libtorrent/config.hpp	259;"	d
TORRENT_HAS_SALEN	torrent/include/libtorrent/config.hpp	284;"	d
TORRENT_HAS_SALEN	torrent/include/libtorrent/config.hpp	342;"	d
TORRENT_HAS_SSE	torrent/include/libtorrent/config.hpp	520;"	d
TORRENT_HAS_SSE	torrent/include/libtorrent/config.hpp	522;"	d
TORRENT_HAS_SYMLINK	torrent/include/libtorrent/config.hpp	141;"	d
TORRENT_HAS_SYMLINK	torrent/include/libtorrent/config.hpp	164;"	d
TORRENT_HAS_SYMLINK	torrent/include/libtorrent/config.hpp	286;"	d
TORRENT_HAS_SYMLINK	torrent/include/libtorrent/config.hpp	302;"	d
TORRENT_HAS_SYMLINK	torrent/include/libtorrent/config.hpp	478;"	d
TORRENT_HAVE_MMAP	torrent/include/libtorrent/config.hpp	143;"	d
TORRENT_HAVE_MMAP	torrent/include/libtorrent/config.hpp	165;"	d
TORRENT_HAVE_MMAP	torrent/include/libtorrent/config.hpp	285;"	d
TORRENT_HAVE_MMAP	torrent/include/libtorrent/config.hpp	402;"	d
TORRENT_HETEROGENEOUS_QUEUE_HPP_INCLUDED	torrent/include/libtorrent/heterogeneous_queue.hpp	34;"	d
TORRENT_HEX_HPP_INCLUDED	torrent/include/libtorrent/hex.hpp	34;"	d
TORRENT_HTTP_CONNECTION	torrent/include/libtorrent/http_connection.hpp	34;"	d
TORRENT_HTTP_PARSER_HPP_INCLUDED	torrent/include/libtorrent/http_parser.hpp	34;"	d
TORRENT_HTTP_SEED_CONNECTION_HPP_INCLUDED	torrent/include/libtorrent/http_seed_connection.hpp	34;"	d
TORRENT_HTTP_STREAM_HPP_INCLUDED	torrent/include/libtorrent/http_stream.hpp	34;"	d
TORRENT_HTTP_TRACKER_CONNECTION_HPP_INCLUDED	torrent/include/libtorrent/http_tracker_connection.hpp	34;"	d
TORRENT_HURD	torrent/include/libtorrent/config.hpp	299;"	d
TORRENT_I2P_STREAM_HPP_INCLUDED	torrent/include/libtorrent/i2p_stream.hpp	34;"	d
TORRENT_IDENTIFY_CLIENT_HPP_INCLUDED	torrent/include/libtorrent/identify_client.hpp	34;"	d
TORRENT_INCREMENT	torrent/include/libtorrent/debug.hpp	223;"	d
TORRENT_INCREMENT	torrent/include/libtorrent/debug.hpp	225;"	d
TORRENT_INDEX_RANGE_HPP	torrent/include/libtorrent/index_range.hpp	34;"	d
TORRENT_INET_MIN_MTU	torrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_INET_MIN_MTU = 576;$/;"	m	namespace:libtorrent
TORRENT_INSTANTIATE_CONNECTION	torrent/include/libtorrent/aux_/instantiate_connection.hpp	34;"	d
TORRENT_INVARIANT_ACCESS_HPP_INCLUDED	torrent/include/libtorrent/invariant_check.hpp	6;"	d
TORRENT_IO_HPP_INCLUDED	torrent/include/libtorrent/io.hpp	34;"	d
TORRENT_IO_SERVICE_FWD_HPP_INCLUDED	torrent/include/libtorrent/io_service_fwd.hpp	34;"	d
TORRENT_IO_SERVICE_HPP_INCLUDED	torrent/include/libtorrent/io_service.hpp	34;"	d
TORRENT_IPV4_HEADER	torrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_IPV4_HEADER = 20;$/;"	m	namespace:libtorrent
TORRENT_IPV6_HEADER	torrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_IPV6_HEADER = 40;$/;"	m	namespace:libtorrent
TORRENT_IP_FILTER_HPP	torrent/include/libtorrent/ip_filter.hpp	34;"	d
TORRENT_IP_NOTIFIER_HPP_INCLUDED	torrent/include/libtorrent/aux_/ip_notifier.hpp	34;"	d
TORRENT_IP_VOTER_HPP_INCLUDED	torrent/include/libtorrent/ip_voter.hpp	34;"	d
TORRENT_KADEMLIA_MSG_HPP	torrent/include/libtorrent/kademlia/msg.hpp	34;"	d
TORRENT_KEEP_ALIVE_HPP_INCLUDED	torrent/include/libtorrent/aux_/keepalive.hpp	34;"	d
TORRENT_LAZY_ENTRY_HPP_INCLUDED	torrent/include/libtorrent/lazy_entry.hpp	34;"	d
TORRENT_LINKED_LIST_HPP	torrent/include/libtorrent/linked_list.hpp	34;"	d
TORRENT_LINK_HPP_INCLUDED	torrent/include/libtorrent/link.hpp	34;"	d
TORRENT_LINUX	torrent/include/libtorrent/config.hpp	154;"	d
TORRENT_LISTEN_SOCKET_HANDLE_HPP_INCLUDED	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	34;"	d
TORRENT_LIST_NAME	torrent/src/torrent.cpp	7346;"	d	file:
TORRENT_LIST_NAME	torrent/src/torrent.cpp	7359;"	d	file:
TORRENT_LSD_HPP	torrent/include/libtorrent/lsd.hpp	34;"	d
TORRENT_MACOS_DEPRECATED_LIBCRYPTO	torrent/include/libtorrent/aux_/openssl.hpp	47;"	d
TORRENT_MAGNET_URI_HPP_INCLUDED	torrent/include/libtorrent/magnet_uri.hpp	34;"	d
TORRENT_MAP	torrent/src/close_reason.cpp	43;"	d	file:
TORRENT_MERKLE_HPP_INCLUDED	torrent/include/libtorrent/aux_/merkle.hpp	34;"	d
TORRENT_MINGW	torrent/include/libtorrent/config.hpp	195;"	d
TORRENT_NATPMP_HPP	torrent/include/libtorrent/natpmp.hpp	34;"	d
TORRENT_NETLINK_HPP	torrent/include/libtorrent/netlink.hpp	34;"	d
TORRENT_NOEXCEPT_MOVABLE_HPP_INCLUDED	torrent/include/libtorrent/aux_/noexcept_movable.hpp	33;"	d
TORRENT_NO_FPU	torrent/include/libtorrent/config.hpp	100;"	d
TORRENT_NO_FPU	torrent/include/libtorrent/config.hpp	436;"	d
TORRENT_NUMERIC_CAST_HPP	torrent/include/libtorrent/aux_/numeric_cast.hpp	34;"	d
TORRENT_OPENSSL_HPP_INCLUDED	torrent/include/libtorrent/aux_/openssl.hpp	34;"	d
TORRENT_OPERATIONS_HPP_INCLUDED	torrent/include/libtorrent/operations.hpp	34;"	d
TORRENT_OPTIONAL_HPP_INCLUDED	torrent/include/libtorrent/optional.hpp	35;"	d
TORRENT_OS2	torrent/include/libtorrent/config.hpp	306;"	d
TORRENT_PACKET_BUFFER_HPP_INCLUDED	torrent/include/libtorrent/packet_buffer.hpp	34;"	d
TORRENT_PACKET_POOL_HPP	torrent/include/libtorrent/packet_pool.hpp	34;"	d
TORRENT_PARSE_URL_HPP_INCLUDED	torrent/include/libtorrent/parse_url.hpp	34;"	d
TORRENT_PART_FILE_HPP_INCLUDE	torrent/include/libtorrent/part_file.hpp	34;"	d
TORRENT_PATH_HPP_INCLUDED	torrent/include/libtorrent/aux_/path.hpp	34;"	d
TORRENT_PEER_ALLOCATOR_HPP_INCLUDED	torrent/include/libtorrent/torrent_peer_allocator.hpp	34;"	d
TORRENT_PEER_CLASS_HPP_INCLUDED	torrent/include/libtorrent/peer_class.hpp	34;"	d
TORRENT_PEER_CLASS_SET_HPP_INCLUDED	torrent/include/libtorrent/peer_class_set.hpp	34;"	d
TORRENT_PEER_CLASS_TYPE_FILTER_HPP_INCLUDED	torrent/include/libtorrent/peer_class_type_filter.hpp	34;"	d
TORRENT_PEER_CONNECTION_HANDLE_HPP_INCLUDED	torrent/include/libtorrent/peer_connection_handle.hpp	34;"	d
TORRENT_PEER_CONNECTION_HPP_INCLUDED	torrent/include/libtorrent/peer_connection.hpp	34;"	d
TORRENT_PEER_CONNECTION_INTERFACE_HPP	torrent/include/libtorrent/peer_connection_interface.hpp	34;"	d
TORRENT_PEER_HPP_INCLUDED	torrent/include/libtorrent/peer.hpp	34;"	d
TORRENT_PEER_ID_HPP_INCLUDED	torrent/include/libtorrent/peer_id.hpp	34;"	d
TORRENT_PEER_INFO_HPP_INCLUDED	torrent/include/libtorrent/peer_info.hpp	34;"	d
TORRENT_PEER_REQUEST_HPP_INCLUDED	torrent/include/libtorrent/peer_request.hpp	34;"	d
TORRENT_PERFORMANCE_COUNTERS_HPP_INCLUDED	torrent/include/libtorrent/performance_counters.hpp	34;"	d
TORRENT_PEX_FLAGS_HPP_INCLUDE	torrent/include/libtorrent/pex_flags.hpp	34;"	d
TORRENT_PE_CRYPTO_HPP_INCLUDED	torrent/include/libtorrent/pe_crypto.hpp	34;"	d
TORRENT_PIECE_ASSERT	torrent/src/block_cache.cpp	287;"	d	file:
TORRENT_PIECE_ASSERT	torrent/src/block_cache.cpp	291;"	d	file:
TORRENT_PIECE_ASSERT	torrent/src/disk_io_thread.cpp	82;"	d	file:
TORRENT_PIECE_ASSERT_FAIL	torrent/src/disk_io_thread.cpp	85;"	d	file:
TORRENT_PIECE_BLOCK_HPP_INCLUDED	torrent/include/libtorrent/piece_block.hpp	34;"	d
TORRENT_PIECE_BLOCK_PROGRESS_HPP_INCLUDED	torrent/include/libtorrent/piece_block_progress.hpp	34;"	d
TORRENT_PIECE_PICKER_HPP_INCLUDED	torrent/include/libtorrent/piece_picker.hpp	33;"	d
TORRENT_PLATFORM_UTIL_HPP	torrent/include/libtorrent/platform_util.hpp	2;"	d
TORRENT_POLICY_HPP_INCLUDED	torrent/include/libtorrent/peer_list.hpp	34;"	d
TORRENT_PORTMAP_HPP_INCLUDED	torrent/include/libtorrent/portmap.hpp	34;"	d
TORRENT_PROXY_BASE_HPP_INCLUDED	torrent/include/libtorrent/proxy_base.hpp	34;"	d
TORRENT_PROXY_SETTINGS_HPP_INCLUDED	torrent/include/libtorrent/aux_/proxy_settings.hpp	34;"	d
TORRENT_PUT_DATA_HPP	torrent/include/libtorrent/kademlia/put_data.hpp	34;"	d
TORRENT_RANDOM_HPP_INCLUDED	torrent/include/libtorrent/random.hpp	34;"	d
TORRENT_RANGE_HPP	torrent/include/libtorrent/aux_/range.hpp	34;"	d
TORRENT_READ_HANDLER_MAX_SIZE	torrent/include/libtorrent/config.hpp	/^constexpr std::size_t TORRENT_READ_HANDLER_MAX_SIZE = 342;$/;"	v
TORRENT_READ_HANDLER_MAX_SIZE	torrent/include/libtorrent/config.hpp	/^constexpr std::size_t TORRENT_READ_HANDLER_MAX_SIZE = 432;$/;"	v
TORRENT_READ_RESUME_DATA_HPP_INCLUDE	torrent/include/libtorrent/read_resume_data.hpp	34;"	d
TORRENT_RECEIVE_BUFFER_HPP_INCLUDED	torrent/include/libtorrent/receive_buffer.hpp	34;"	d
TORRENT_REQUEST_BLOCKS_HPP_INCLUDED	torrent/include/libtorrent/request_blocks.hpp	34;"	d
TORRENT_RESOLVER_HPP_INCLUDE	torrent/include/libtorrent/resolver.hpp	34;"	d
TORRENT_RESOLVER_INTERFACE_HPP_INCLUDE	torrent/include/libtorrent/resolver_interface.hpp	34;"	d
TORRENT_RESOLVE_LINKS_HPP	torrent/include/libtorrent/resolve_links.hpp	34;"	d
TORRENT_SAMPLE_INFOHASHES_HPP	torrent/include/libtorrent/kademlia/sample_infohashes.hpp	34;"	d
TORRENT_SCOPE_END_HPP_INCLUDED	torrent/include/libtorrent/aux_/scope_end.hpp	34;"	d
TORRENT_SEPARATOR	torrent/bak/client_test.cpp	258;"	d	file:
TORRENT_SEPARATOR	torrent/src/file_storage.cpp	51;"	d	file:
TORRENT_SEPARATOR	torrent/src/file_storage.cpp	53;"	d	file:
TORRENT_SEPARATOR	torrent/src/path.cpp	662;"	d	file:
TORRENT_SEPARATOR	torrent/src/torrent_info.cpp	189;"	d	file:
TORRENT_SEPARATOR_CHAR	torrent/src/path.cpp	643;"	d	file:
TORRENT_SESSION_CALL_HPP_INCLUDED	torrent/include/libtorrent/aux_/session_call.hpp	34;"	d
TORRENT_SESSION_HANDLE_HPP_INCLUDED	torrent/include/libtorrent/session_handle.hpp	34;"	d
TORRENT_SESSION_HPP_INCLUDED	torrent/include/libtorrent/session.hpp	34;"	d
TORRENT_SESSION_IMPL_HPP_INCLUDED	torrent/include/libtorrent/aux_/session_impl.hpp	34;"	d
TORRENT_SESSION_INTERFACE_HPP_INCLUDED	torrent/include/libtorrent/aux_/session_interface.hpp	34;"	d
TORRENT_SESSION_SETTINGS_HPP_INCLUDED	torrent/include/libtorrent/session_settings.hpp	34;"	d
TORRENT_SESSION_STATS_HPP_INCLUDED	torrent/include/libtorrent/session_stats.hpp	34;"	d
TORRENT_SESSION_STATUS_HPP_INCLUDED	torrent/include/libtorrent/session_status.hpp	34;"	d
TORRENT_SESSION_TYPES_HPP_INCLUDED	torrent/include/libtorrent/session_types.hpp	34;"	d
TORRENT_SESSION_UDP_SOCKETS_HPP_INCLUDED	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	34;"	d
TORRENT_SETTINGS_PACK_HPP_INCLUDED	torrent/include/libtorrent/settings_pack.hpp	34;"	d
TORRENT_SET_SOCKET_BUFFER_HPP	torrent/include/libtorrent/aux_/set_socket_buffer.hpp	34;"	d
TORRENT_SHA1_HASH_HPP_INCLUDED	torrent/include/libtorrent/sha1_hash.hpp	34;"	d
TORRENT_SHA1_HPP_INCLUDED	torrent/include/libtorrent/sha1.hpp	14;"	d
TORRENT_SHA512_HPP_INCLUDED	torrent/include/libtorrent/sha512.hpp	2;"	d
TORRENT_SLIDING_AVERAGE_HPP_INCLUDED	torrent/include/libtorrent/sliding_average.hpp	34;"	d
TORRENT_SMART_BAN_HPP_INCLUDED	torrent/include/libtorrent/extensions/smart_ban.hpp	34;"	d
TORRENT_SOCKET_HPP_INCLUDED	torrent/include/libtorrent/socket.hpp	34;"	d
TORRENT_SOCKET_IO_HPP_INCLUDED	torrent/include/libtorrent/socket_io.hpp	34;"	d
TORRENT_SOCKET_TYPE	torrent/include/libtorrent/aux_/socket_type.hpp	34;"	d
TORRENT_SOCKS5_HEADER	torrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_SOCKS5_HEADER = 6; \/\/ plus the size of the destination address$/;"	m	namespace:libtorrent
TORRENT_SOCKS5_STREAM_HPP_INCLUDED	torrent/include/libtorrent/socks5_stream.hpp	34;"	d
TORRENT_SOCKTYPE_FORWARD	torrent/include/libtorrent/aux_/socket_type.hpp	102;"	d
TORRENT_SOCKTYPE_FORWARD_RET	torrent/include/libtorrent/aux_/socket_type.hpp	117;"	d
TORRENT_SOCKTYPE_I2P_FORWARD	torrent/include/libtorrent/aux_/socket_type.hpp	58;"	d
TORRENT_SOCKTYPE_I2P_FORWARD	torrent/include/libtorrent/aux_/socket_type.hpp	68;"	d
TORRENT_SOCKTYPE_I2P_FORWARD_RET	torrent/include/libtorrent/aux_/socket_type.hpp	62;"	d
TORRENT_SOCKTYPE_I2P_FORWARD_RET	torrent/include/libtorrent/aux_/socket_type.hpp	69;"	d
TORRENT_SOCKTYPE_SSL_FORWARD	torrent/include/libtorrent/aux_/socket_type.hpp	75;"	d
TORRENT_SOCKTYPE_SSL_FORWARD	torrent/include/libtorrent/aux_/socket_type.hpp	97;"	d
TORRENT_SOCKTYPE_SSL_FORWARD_RET	torrent/include/libtorrent/aux_/socket_type.hpp	85;"	d
TORRENT_SOCKTYPE_SSL_FORWARD_RET	torrent/include/libtorrent/aux_/socket_type.hpp	98;"	d
TORRENT_SOLARIS	torrent/include/libtorrent/config.hpp	282;"	d
TORRENT_SPAN_HPP_INCLUDED	torrent/include/libtorrent/span.hpp	34;"	d
TORRENT_SSL_STREAM_HPP_INCLUDED	torrent/include/libtorrent/ssl_stream.hpp	34;"	d
TORRENT_STACK_ALLOCATOR	torrent/include/libtorrent/stack_allocator.hpp	34;"	d
TORRENT_STAT_CACHE_HPP	torrent/include/libtorrent/stat_cache.hpp	34;"	d
TORRENT_STAT_HPP_INCLUDED	torrent/include/libtorrent/stat.hpp	34;"	d
TORRENT_STORAGE_DEFS_HPP_INCLUDE	torrent/include/libtorrent/storage_defs.hpp	34;"	d
TORRENT_STORAGE_HPP_INCLUDE	torrent/include/libtorrent/storage.hpp	34;"	d
TORRENT_STORAGE_PIECE_SET_HPP_INCLUDE	torrent/include/libtorrent/aux_/storage_piece_set.hpp	34;"	d
TORRENT_STORAGE_UTILS_HPP_INCLUDE	torrent/include/libtorrent/aux_/storage_utils.hpp	34;"	d
TORRENT_STRING_PTR_HPP_INCLUDED	torrent/include/libtorrent/aux_/string_ptr.hpp	34;"	d
TORRENT_STRING_UTIL_HPP_INCLUDED	torrent/include/libtorrent/string_util.hpp	34;"	d
TORRENT_STRING_VIEW_HPP_INCLUDED	torrent/include/libtorrent/string_view.hpp	34;"	d
TORRENT_SUGGEST_PIECE_HPP_INCLUDE	torrent/include/libtorrent/aux_/suggest_piece.hpp	34;"	d
TORRENT_TAILQUEUE_HPP	torrent/include/libtorrent/tailqueue.hpp	34;"	d
TORRENT_TEREDO_MTU	torrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_TEREDO_MTU = 1280;$/;"	m	namespace:libtorrent
TORRENT_THROW_HPP_INCLUDED	torrent/include/libtorrent/aux_/throw.hpp	34;"	d
TORRENT_TIME_HPP_INCLUDED	torrent/include/libtorrent/time.hpp	34;"	d
TORRENT_TORRENT_FLAGS_HPP	torrent/include/libtorrent/torrent_flags.hpp	34;"	d
TORRENT_TORRENT_HANDLE_HPP_INCLUDED	torrent/include/libtorrent/torrent_handle.hpp	34;"	d
TORRENT_TORRENT_HPP_INCLUDE	torrent/include/libtorrent/torrent.hpp	34;"	d
TORRENT_TORRENT_IMPL_HPP_INCLUDED	torrent/include/libtorrent/aux_/torrent_impl.hpp	34;"	d
TORRENT_TORRENT_INFO_HPP_INCLUDED	torrent/include/libtorrent/torrent_info.hpp	34;"	d
TORRENT_TORRENT_PEER_HPP_INCLUDED	torrent/include/libtorrent/torrent_peer.hpp	34;"	d
TORRENT_TORRENT_STATUS_HPP_INCLUDED	torrent/include/libtorrent/torrent_status.hpp	34;"	d
TORRENT_TRACKER_MANAGER_HPP_INCLUDED	torrent/include/libtorrent/tracker_manager.hpp	34;"	d
TORRENT_TRY	torrent/include/libtorrent/config.hpp	498;"	d
TORRENT_TRY	torrent/include/libtorrent/config.hpp	503;"	d
TORRENT_UDP_HEADER	torrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_UDP_HEADER = 8;$/;"	m	namespace:libtorrent
TORRENT_UDP_SOCKET_HPP_INCLUDED	torrent/include/libtorrent/udp_socket.hpp	34;"	d
TORRENT_UDP_TRACKER_CONNECTION_HPP_INCLUDED	torrent/include/libtorrent/udp_tracker_connection.hpp	34;"	d
TORRENT_UNION_ENDPOINT_HPP_INCLUDED	torrent/include/libtorrent/union_endpoint.hpp	34;"	d
TORRENT_UNIQUE_PTR_HPP	torrent/include/libtorrent/aux_/unique_ptr.hpp	34;"	d
TORRENT_UNITS_HPP	torrent/include/libtorrent/units.hpp	34;"	d
TORRENT_UNUSED	torrent/include/libtorrent/config.hpp	324;"	d
TORRENT_UPNP_HPP	torrent/include/libtorrent/upnp.hpp	34;"	d
TORRENT_USE_ASSERTS	torrent/include/libtorrent/config.hpp	485;"	d
TORRENT_USE_COMMONCRYPTO	torrent/include/libtorrent/config.hpp	125;"	d
TORRENT_USE_COMMONCRYPTO	torrent/include/libtorrent/config.hpp	378;"	d
TORRENT_USE_CRYPTOAPI	torrent/include/libtorrent/config.hpp	217;"	d
TORRENT_USE_CRYPTOAPI	torrent/include/libtorrent/config.hpp	244;"	d
TORRENT_USE_CRYPTOAPI	torrent/include/libtorrent/config.hpp	390;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	torrent/include/libtorrent/config.hpp	221;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	torrent/include/libtorrent/config.hpp	225;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	torrent/include/libtorrent/config.hpp	248;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	torrent/include/libtorrent/config.hpp	252;"	d
TORRENT_USE_CRYPTOAPI_SHA_512	torrent/include/libtorrent/config.hpp	394;"	d
TORRENT_USE_DEV_RANDOM	torrent/include/libtorrent/config.hpp	142;"	d
TORRENT_USE_DEV_RANDOM	torrent/include/libtorrent/config.hpp	398;"	d
TORRENT_USE_EXECINFO	torrent/include/libtorrent/config.hpp	131;"	d
TORRENT_USE_EXECINFO	torrent/include/libtorrent/config.hpp	190;"	d
TORRENT_USE_EXECINFO	torrent/include/libtorrent/config.hpp	354;"	d
TORRENT_USE_FDATASYNC	torrent/include/libtorrent/config.hpp	170;"	d
TORRENT_USE_FDATASYNC	torrent/include/libtorrent/config.hpp	410;"	d
TORRENT_USE_GETADAPTERSADDRESSES	torrent/include/libtorrent/config.hpp	203;"	d
TORRENT_USE_GETADAPTERSADDRESSES	torrent/include/libtorrent/config.hpp	258;"	d
TORRENT_USE_GETADAPTERSADDRESSES	torrent/include/libtorrent/config.hpp	346;"	d
TORRENT_USE_GETIPFORWARDTABLE	torrent/include/libtorrent/config.hpp	205;"	d
TORRENT_USE_GETIPFORWARDTABLE	torrent/include/libtorrent/config.hpp	234;"	d
TORRENT_USE_GETIPFORWARDTABLE	torrent/include/libtorrent/config.hpp	362;"	d
TORRENT_USE_I2P	torrent/include/libtorrent/config.hpp	101;"	d
TORRENT_USE_I2P	torrent/include/libtorrent/config.hpp	448;"	d
TORRENT_USE_ICONV	torrent/include/libtorrent/config.hpp	103;"	d
TORRENT_USE_ICONV	torrent/include/libtorrent/config.hpp	116;"	d
TORRENT_USE_ICONV	torrent/include/libtorrent/config.hpp	176;"	d
TORRENT_USE_ICONV	torrent/include/libtorrent/config.hpp	198;"	d
TORRENT_USE_ICONV	torrent/include/libtorrent/config.hpp	262;"	d
TORRENT_USE_ICONV	torrent/include/libtorrent/config.hpp	294;"	d
TORRENT_USE_ICONV	torrent/include/libtorrent/config.hpp	338;"	d
TORRENT_USE_IFADDRS	torrent/include/libtorrent/config.hpp	147;"	d
TORRENT_USE_IFADDRS	torrent/include/libtorrent/config.hpp	167;"	d
TORRENT_USE_IFADDRS	torrent/include/libtorrent/config.hpp	300;"	d
TORRENT_USE_IFADDRS	torrent/include/libtorrent/config.hpp	422;"	d
TORRENT_USE_IFCONF	torrent/include/libtorrent/config.hpp	149;"	d
TORRENT_USE_IFCONF	torrent/include/libtorrent/config.hpp	168;"	d
TORRENT_USE_IFCONF	torrent/include/libtorrent/config.hpp	283;"	d
TORRENT_USE_IFCONF	torrent/include/libtorrent/config.hpp	301;"	d
TORRENT_USE_IFCONF	torrent/include/libtorrent/config.hpp	308;"	d
TORRENT_USE_INVARIANT_CHECKS	torrent/include/libtorrent/config.hpp	489;"	d
TORRENT_USE_IOSTREAM	torrent/include/libtorrent/config.hpp	441;"	d
TORRENT_USE_IOSTREAM	torrent/include/libtorrent/config.hpp	443;"	d
TORRENT_USE_IOSTREAM	torrent/include/libtorrent/config.hpp	97;"	d
TORRENT_USE_LOCALE	torrent/include/libtorrent/config.hpp	117;"	d
TORRENT_USE_LOCALE	torrent/include/libtorrent/config.hpp	199;"	d
TORRENT_USE_LOCALE	torrent/include/libtorrent/config.hpp	263;"	d
TORRENT_USE_LOCALE	torrent/include/libtorrent/config.hpp	366;"	d
TORRENT_USE_NETLINK	torrent/include/libtorrent/config.hpp	166;"	d
TORRENT_USE_NETLINK	torrent/include/libtorrent/config.hpp	202;"	d
TORRENT_USE_NETLINK	torrent/include/libtorrent/config.hpp	350;"	d
TORRENT_USE_PREAD	torrent/include/libtorrent/config.hpp	158;"	d
TORRENT_USE_PREAD	torrent/include/libtorrent/config.hpp	161;"	d
TORRENT_USE_PREAD	torrent/include/libtorrent/config.hpp	432;"	d
TORRENT_USE_PREADV	torrent/include/libtorrent/config.hpp	157;"	d
TORRENT_USE_PREADV	torrent/include/libtorrent/config.hpp	160;"	d
TORRENT_USE_PREADV	torrent/include/libtorrent/config.hpp	208;"	d
TORRENT_USE_PREADV	torrent/include/libtorrent/config.hpp	269;"	d
TORRENT_USE_PREADV	torrent/include/libtorrent/config.hpp	427;"	d
TORRENT_USE_PWRITEV	torrent/include/libtorrent/config.hpp	209;"	d
TORRENT_USE_PWRITEV	torrent/include/libtorrent/config.hpp	270;"	d
TORRENT_USE_READV	torrent/include/libtorrent/config.hpp	311;"	d
TORRENT_USE_RLIMIT	torrent/include/libtorrent/config.hpp	201;"	d
TORRENT_USE_RLIMIT	torrent/include/libtorrent/config.hpp	265;"	d
TORRENT_USE_RLIMIT	torrent/include/libtorrent/config.hpp	418;"	d
TORRENT_USE_SC_NETWORK_REACHABILITY	torrent/include/libtorrent/config.hpp	137;"	d
TORRENT_USE_SC_NETWORK_REACHABILITY	torrent/include/libtorrent/config.hpp	386;"	d
TORRENT_USE_SYSCTL	torrent/include/libtorrent/config.hpp	148;"	d
TORRENT_USE_SYSCTL	torrent/include/libtorrent/config.hpp	309;"	d
TORRENT_USE_SYSCTL	torrent/include/libtorrent/config.hpp	358;"	d
TORRENT_USE_SYSTEMCONFIGURATION	torrent/include/libtorrent/config.hpp	134;"	d
TORRENT_USE_SYSTEMCONFIGURATION	torrent/include/libtorrent/config.hpp	382;"	d
TORRENT_USE_UNC_PATHS	torrent/include/libtorrent/config.hpp	206;"	d
TORRENT_USE_UNC_PATHS	torrent/include/libtorrent/config.hpp	267;"	d
TORRENT_USE_UNC_PATHS	torrent/include/libtorrent/config.hpp	414;"	d
TORRENT_USE_WRITEV	torrent/include/libtorrent/config.hpp	310;"	d
TORRENT_UTF8_HPP_INCLUDED	torrent/include/libtorrent/utf8.hpp	34;"	d
TORRENT_UTP_HEADER	torrent/include/libtorrent/packet_pool.hpp	/^	constexpr int TORRENT_UTP_HEADER = 20;$/;"	m	namespace:libtorrent
TORRENT_UTP_LOG	torrent/include/libtorrent/utp_stream.hpp	55;"	d
TORRENT_UTP_SOCKET_MANAGER_HPP_INCLUDED	torrent/include/libtorrent/utp_socket_manager.hpp	34;"	d
TORRENT_UTP_STREAM_HPP_INCLUDED	torrent/include/libtorrent/utp_stream.hpp	34;"	d
TORRENT_UT_METADATA_HPP_INCLUDED	torrent/include/libtorrent/extensions/ut_metadata.hpp	34;"	d
TORRENT_UT_PEX_EXTENSION_HPP_INCLUDED	torrent/include/libtorrent/extensions/ut_pex.hpp	34;"	d
TORRENT_VECTOR_HPP	torrent/include/libtorrent/aux_/vector.hpp	34;"	d
TORRENT_VECTOR_UTILS_HPP_INCLUDE	torrent/include/libtorrent/vector_utils.hpp	34;"	d
TORRENT_VERBOSE_UTP_LOG	torrent/include/libtorrent/utp_stream.hpp	56;"	d
TORRENT_VERSION_HPP_INCLUDED	torrent/include/libtorrent/version.hpp	34;"	d
TORRENT_VERSION_NAMESPACE_2	torrent/include/libtorrent/aux_/export.hpp	49;"	d
TORRENT_VERSION_NAMESPACE_2	torrent/include/libtorrent/aux_/export.hpp	52;"	d
TORRENT_VERSION_NAMESPACE_2_END	torrent/include/libtorrent/aux_/export.hpp	50;"	d
TORRENT_VERSION_NAMESPACE_2_END	torrent/include/libtorrent/aux_/export.hpp	53;"	d
TORRENT_VIEW_HPP_	torrent/bak/torrent_view.hpp	34;"	d
TORRENT_WEB_PEER_CONNECTION_HPP_INCLUDED	torrent/include/libtorrent/web_peer_connection.hpp	34;"	d
TORRENT_WHILE_0	torrent/include/libtorrent/assert.hpp	54;"	d
TORRENT_WINDOWS	torrent/include/libtorrent/config.hpp	196;"	d
TORRENT_WINDOWS	torrent/include/libtorrent/config.hpp	232;"	d
TORRENT_WINDOWS_HPP_INCLUDED	torrent/include/libtorrent/aux_/windows.hpp	34;"	d
TORRENT_WINRT	torrent/include/libtorrent/config.hpp	276;"	d
TORRENT_WIN_CRYPTO_PROVIDER_HPP	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	34;"	d
TORRENT_WIN_UTIL_HPP	torrent/include/libtorrent/aux_/win_util.hpp	34;"	d
TORRENT_WRITE_HANDLER_MAX_SIZE	torrent/include/libtorrent/config.hpp	/^constexpr std::size_t TORRENT_WRITE_HANDLER_MAX_SIZE = 342;$/;"	v
TORRENT_WRITE_HANDLER_MAX_SIZE	torrent/include/libtorrent/config.hpp	/^constexpr std::size_t TORRENT_WRITE_HANDLER_MAX_SIZE = 432;$/;"	v
TORRENT_WRITE_RESUME_DATA_HPP_INCLUDE	torrent/include/libtorrent/write_resume_data.hpp	34;"	d
TORRENT_XML_PARSE_HPP	torrent/include/libtorrent/xml_parse.hpp	34;"	d
TRAVERSAL_ALGORITHM_050324_HPP	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	34;"	d
TRUE	include/gpt.h	10;"	d
TRY_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	126;"	d
TRY_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	174;"	d
TRY_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	210;"	d
TRY_MSVC_INVAL	virt-p2v/include/gnulib/msvc-inval.h	80;"	d
TYPEOF_STRUCT_STAT_ST_ATIM_IS_STRUCT_TIMESPEC	virt-p2v/include/config.h	733;"	d
TYPE_IS_INTEGER	virt-p2v/include/gnulib/intprops.h	38;"	d
TYPE_MAXIMUM	virt-p2v/include/gnulib/intprops.h	57;"	d
TYPE_MINIMUM	virt-p2v/include/gnulib/intprops.h	56;"	d
TYPE_SIGNED	virt-p2v/include/gnulib/intprops.h	41;"	d
TYPE_WIDTH	virt-p2v/include/gnulib/intprops.h	53;"	d
Tracker	torrent/bak/tracker.cpp	/^btTracker Tracker;$/;"	v
U16_TO_STR	include/packet.h	35;"	d
U32_TO_STR	include/packet.h	36;"	d
UBD_MAJOR	src/linux.c	88;"	d	file:
UCHAR_WIDTH	virt-p2v/include/gnulib/limits.h	93;"	d
UCHAR_WIDTH	virt-p2v/include/gnulib/limits.in.h	92;"	d
UF_MAX	qt_pro/QRoundProgressBar.h	/^    static const int UF_MAX = 4;$/;"	m	class:QRoundProgressBar
UF_PERCENT	qt_pro/QRoundProgressBar.h	/^    static const int UF_PERCENT = 2;$/;"	m	class:QRoundProgressBar
UF_VALUE	qt_pro/QRoundProgressBar.h	/^    static const int UF_VALUE = 1;$/;"	m	class:QRoundProgressBar
UINT16_C	virt-p2v/include/gnulib/stdint.h	636;"	d
UINT16_C	virt-p2v/include/gnulib/stdint.h	638;"	d
UINT16_MAX	virt-p2v/include/gnulib/stdint.h	387;"	d
UINT16_MAX	virt-p2v/include/gnulib/stdint.h	390;"	d
UINT16_WIDTH	virt-p2v/include/gnulib/stdint.h	700;"	d
UINT32_C	virt-p2v/include/gnulib/stdint.h	641;"	d
UINT32_C	virt-p2v/include/gnulib/stdint.h	643;"	d
UINT32_MAX	virt-p2v/include/gnulib/stdint.h	394;"	d
UINT32_MAX	virt-p2v/include/gnulib/stdint.h	397;"	d
UINT32_WIDTH	virt-p2v/include/gnulib/stdint.h	706;"	d
UINT64_C	torrent/src/sha512.cpp	30;"	d	file:
UINT64_C	virt-p2v/include/gnulib/stdint.h	646;"	d
UINT64_C	virt-p2v/include/gnulib/stdint.h	655;"	d
UINT64_C	virt-p2v/include/gnulib/stdint.h	657;"	d
UINT64_C	virt-p2v/include/gnulib/stdint.h	659;"	d
UINT64_MAX	virt-p2v/include/gnulib/stdint.h	407;"	d
UINT64_WIDTH	virt-p2v/include/gnulib/stdint.h	712;"	d
UINT8_C	virt-p2v/include/gnulib/stdint.h	631;"	d
UINT8_C	virt-p2v/include/gnulib/stdint.h	633;"	d
UINT8_MAX	virt-p2v/include/gnulib/stdint.h	380;"	d
UINT8_MAX	virt-p2v/include/gnulib/stdint.h	383;"	d
UINT8_WIDTH	virt-p2v/include/gnulib/stdint.h	694;"	d
UINTMAX_C	virt-p2v/include/gnulib/stdint.h	349;"	d
UINTMAX_C	virt-p2v/include/gnulib/stdint.h	676;"	d
UINTMAX_C	virt-p2v/include/gnulib/stdint.h	678;"	d
UINTMAX_C	virt-p2v/include/gnulib/stdint.h	680;"	d
UINTMAX_MAX	virt-p2v/include/gnulib/stdint.h	524;"	d
UINTMAX_MAX	virt-p2v/include/gnulib/stdint.h	526;"	d
UINTMAX_WIDTH	virt-p2v/include/gnulib/stdint.h	733;"	d
UINTPTR_MAX	virt-p2v/include/gnulib/stdint.h	498;"	d
UINTPTR_MAX	virt-p2v/include/gnulib/stdint.h	502;"	d
UINTPTR_MAX	virt-p2v/include/gnulib/stdint.h	506;"	d
UINTPTR_WIDTH	virt-p2v/include/gnulib/stdint.h	731;"	d
UINT_FAST16_MAX	virt-p2v/include/gnulib/stdint.h	464;"	d
UINT_FAST16_MAX	virt-p2v/include/gnulib/stdint.h	467;"	d
UINT_FAST16_WIDTH	virt-p2v/include/gnulib/stdint.h	725;"	d
UINT_FAST32_MAX	virt-p2v/include/gnulib/stdint.h	471;"	d
UINT_FAST32_MAX	virt-p2v/include/gnulib/stdint.h	475;"	d
UINT_FAST32_MAX	virt-p2v/include/gnulib/stdint.h	479;"	d
UINT_FAST32_WIDTH	virt-p2v/include/gnulib/stdint.h	727;"	d
UINT_FAST64_MAX	virt-p2v/include/gnulib/stdint.h	489;"	d
UINT_FAST64_MAX	virt-p2v/include/gnulib/stdint.h	491;"	d
UINT_FAST64_WIDTH	virt-p2v/include/gnulib/stdint.h	729;"	d
UINT_FAST8_MAX	virt-p2v/include/gnulib/stdint.h	457;"	d
UINT_FAST8_MAX	virt-p2v/include/gnulib/stdint.h	460;"	d
UINT_FAST8_WIDTH	virt-p2v/include/gnulib/stdint.h	723;"	d
UINT_LEAST16_MAX	virt-p2v/include/gnulib/stdint.h	425;"	d
UINT_LEAST16_MAX	virt-p2v/include/gnulib/stdint.h	428;"	d
UINT_LEAST16_WIDTH	virt-p2v/include/gnulib/stdint.h	717;"	d
UINT_LEAST32_MAX	virt-p2v/include/gnulib/stdint.h	432;"	d
UINT_LEAST32_MAX	virt-p2v/include/gnulib/stdint.h	435;"	d
UINT_LEAST32_WIDTH	virt-p2v/include/gnulib/stdint.h	719;"	d
UINT_LEAST64_MAX	virt-p2v/include/gnulib/stdint.h	444;"	d
UINT_LEAST64_MAX	virt-p2v/include/gnulib/stdint.h	446;"	d
UINT_LEAST64_WIDTH	virt-p2v/include/gnulib/stdint.h	721;"	d
UINT_LEAST8_MAX	virt-p2v/include/gnulib/stdint.h	418;"	d
UINT_LEAST8_MAX	virt-p2v/include/gnulib/stdint.h	421;"	d
UINT_LEAST8_WIDTH	virt-p2v/include/gnulib/stdint.h	715;"	d
UINT_WIDTH	virt-p2v/include/gnulib/limits.h	97;"	d
UINT_WIDTH	virt-p2v/include/gnulib/limits.in.h	96;"	d
UI_DOWNLOADWINDOW_H	qt_pro/ui_downloadwindow.h	11;"	d
UI_ERRODIALOG_H	qt_pro/ui_errodialog.h	11;"	d
ULLONG_MAX	virt-p2v/include/gnulib/limits.h	52;"	d
ULLONG_MAX	virt-p2v/include/gnulib/limits.h	54;"	d
ULLONG_MAX	virt-p2v/include/gnulib/limits.h	56;"	d
ULLONG_MAX	virt-p2v/include/gnulib/limits.in.h	51;"	d
ULLONG_WIDTH	virt-p2v/include/gnulib/limits.h	101;"	d
ULLONG_WIDTH	virt-p2v/include/gnulib/limits.in.h	100;"	d
ULONG_WIDTH	virt-p2v/include/gnulib/limits.h	99;"	d
ULONG_WIDTH	virt-p2v/include/gnulib/limits.in.h	98;"	d
UNI_MAX_BMP	torrent/include/libtorrent/ConvertUTF.h	96;"	d
UNI_MAX_LEGAL_UTF32	torrent/include/libtorrent/ConvertUTF.h	99;"	d
UNI_MAX_UTF16	torrent/include/libtorrent/ConvertUTF.h	97;"	d
UNI_MAX_UTF32	torrent/include/libtorrent/ConvertUTF.h	98;"	d
UNI_REPLACEMENT_CHAR	torrent/include/libtorrent/ConvertUTF.h	95;"	d
UNI_SUR_HIGH_END	torrent/src/ConvertUTF.cpp	55;"	d	file:
UNI_SUR_HIGH_START	torrent/src/ConvertUTF.cpp	54;"	d	file:
UNI_SUR_LOW_END	torrent/src/ConvertUTF.cpp	57;"	d	file:
UNI_SUR_LOW_START	torrent/src/ConvertUTF.cpp	56;"	d	file:
UPDATE_CONFIG	include/packet.h	/^    UPDATE_CONFIG,$/;"	e	enum:yzy_cmd
UPDATE_CONFIG	test/test.c	/^    UPDATE_CONFIG,$/;"	e	enum:yzy_cmd	file:
UPDATE_CONFIG_INTO	include/packet.h	/^    UPDATE_CONFIG_INTO,$/;"	e	enum:yzy_cmd
UPDATE_CONFIG_INTO	test/test.c	/^    UPDATE_CONFIG_INTO,$/;"	e	enum:yzy_cmd	file:
UPDATE_CONFIG_PIPE	include/socket.h	/^    UPDATE_CONFIG_PIPE,$/;"	e	enum:PIPE_MSG
UPDATE_CONFIG_PIPE	qt_pro/global.h	/^    UPDATE_CONFIG_PIPE,$/;"	e	enum:PIPE_MSG
UPDATE_DIFF_DISK	include/packet.h	/^	UPDATE_DIFF_DISK,$/;"	e	enum:yzy_cmd
UPDATE_IP	include/packet.h	/^	UPDATE_IP,$/;"	e	enum:yzy_cmd
UPDATE_NAME	include/packet.h	/^    UPDATE_NAME,$/;"	e	enum:yzy_cmd
UPDATE_NAME	test/test.c	/^    UPDATE_NAME,$/;"	e	enum:yzy_cmd	file:
UPGRAD	include/packet.h	/^	UPGRAD = 1030,$/;"	e	enum:yzy_cmd
UPLOADWINDOW_H	qt_pro/uploadwindow.h	2;"	d
UPLOADWINDOW_PAGE	qt_pro/global.h	/^    UPLOADWINDOW_PAGE,$/;"	e	enum:WINDOW_PAGE
UPLOAD_DESKTOP	include/packet.h	/^	UPLOAD_DESKTOP,$/;"	e	enum:yzy_cmd
USE_POPOVERS	virt-p2v/src/gui.c	100;"	d	file:
USE_POSIX_THREADS	virt-p2v/include/config.h	743;"	d
USE_POSIX_THREADS_WEAK	virt-p2v/include/config.h	747;"	d
USHRT_WIDTH	virt-p2v/include/gnulib/limits.h	95;"	d
USHRT_WIDTH	virt-p2v/include/gnulib/limits.in.h	94;"	d
UTP_LOG	torrent/src/utp_stream.cpp	113;"	d	file:
UTP_LOGV	torrent/src/utp_stream.cpp	115;"	d	file:
UTP_LOGV	torrent/src/utp_stream.cpp	117;"	d	file:
UTP_STATE_CONNECTED	torrent/src/utp_stream.cpp	/^		UTP_STATE_CONNECTED,$/;"	e	enum:libtorrent::utp_socket_impl::state_t	file:
UTP_STATE_DELETE	torrent/src/utp_stream.cpp	/^		UTP_STATE_DELETE$/;"	e	enum:libtorrent::utp_socket_impl::state_t	file:
UTP_STATE_ERROR_WAIT	torrent/src/utp_stream.cpp	/^		UTP_STATE_ERROR_WAIT,$/;"	e	enum:libtorrent::utp_socket_impl::state_t	file:
UTP_STATE_FIN_SENT	torrent/src/utp_stream.cpp	/^		UTP_STATE_FIN_SENT,$/;"	e	enum:libtorrent::utp_socket_impl::state_t	file:
UTP_STATE_NONE	torrent/src/utp_stream.cpp	/^		UTP_STATE_NONE,$/;"	e	enum:libtorrent::utp_socket_impl::state_t	file:
UTP_STATE_SYN_SENT	torrent/src/utp_stream.cpp	/^		UTP_STATE_SYN_SENT,$/;"	e	enum:libtorrent::utp_socket_impl::state_t	file:
U_DISK_NO_FOUD_ERR	include/error.h	/^	U_DISK_NO_FOUD_ERR,$/;"	e	enum:ERR_MSG_DESC
U_DISK_NO_FOUD_ERR	qt_pro/global.h	/^    U_DISK_NO_FOUD_ERR,$/;"	e	enum:ERR_MSG_DESC
U_DISK_NO_FOUD_ERR	virt-p2v/src/conversion.c	/^    U_DISK_NO_FOUD_ERR,$/;"	e	enum:ERR_MSG_DESC	file:
Ui	qt_pro/configwindow.h	/^namespace Ui {$/;"	n
Ui	qt_pro/dialogwindow.h	/^namespace Ui {$/;"	n
Ui	qt_pro/downloadwindow.h	/^namespace Ui {$/;"	n
Ui	qt_pro/mainwindow.h	/^namespace Ui {$/;"	n
Ui	qt_pro/oswindow.h	/^namespace Ui {$/;"	n
Ui	qt_pro/ui_downloadwindow.h	/^namespace Ui {$/;"	n
Ui	qt_pro/ui_errodialog.h	/^namespace Ui {$/;"	n
Ui	qt_pro/uploadwindow.h	/^namespace Ui {$/;"	n
Ui_DownloadWindow	qt_pro/ui_downloadwindow.h	/^class Ui_DownloadWindow$/;"	c
Ui_ErroDialog	qt_pro/ui_errodialog.h	/^class Ui_ErroDialog$/;"	c
UpdateStoreEntry	src/StoreConfig.c	/^static int UpdateStoreEntry(PYZY_QCOW_ENTRY qe, uint32_t difLevel, PYZYGUID name, PYZYGUID diskName, uint64_t startLba, uint64_t endLba, uint64_t realLba, uint8_t type)$/;"	f	file:
Uploadwindow	qt_pro/uploadwindow.cpp	/^Uploadwindow::Uploadwindow(QWidget *parent) :$/;"	f	class:Uploadwindow
Uploadwindow	qt_pro/uploadwindow.h	/^class Uploadwindow : public QWidget$/;"	c
VC_EXTRALEAN	torrent/include/libtorrent/aux_/windows.hpp	40;"	d
VERSION	Makefile	/^VERSION = 1.1$/;"	m
VERSION	torrent/Makefile	/^VERSION = 1.0$/;"	m
VERSION	torrent/include/libtorrent/Makefile	/^VERSION = 1.2.6$/;"	m
VERSION	virt-p2v/include/config.h	826;"	d
VERSION_SECTION	include/config.h	30;"	d
VER_MAJOR_KEY	include/config.h	31;"	d
VER_MINOR_KEY	include/config.h	32;"	d
VIODASD_MAJOR	src/linux.c	90;"	d	file:
VPATH	Makefile	/^VPATH = .:.\/include:.\/lib:.\/src:.\/libguestfs:.\/miniexpect:.\/cJSON:$/;"	m
VPATH	torrent/Makefile	/^VPATH = .:.\/include:.\/lib:.\/src:.\/libtorrent:.\/kademlia:.\/ed25519:.\/bak$/;"	m
VPATH	virt-p2v/Makefile	/^VPATH = .:.\/include:.\/lib:.\/src:.\/libguestfs:.\/miniexpect:$/;"	m
VerifyCrc	src/StoreConfig.c	/^static int VerifyCrc()$/;"	f	file:
WAIT_NBD_TIMEOUT	virt-p2v/src/nbd.c	43;"	d	file:
WAKEUP	include/packet.h	/^    WAKEUP = 1000,$/;"	e	enum:yzy_cmd
WAKEUP	test/test.c	/^    WAKEUP = 1000,$/;"	e	enum:yzy_cmd	file:
WCHAR_MAX	virt-p2v/include/gnulib/stdint.h	594;"	d
WCHAR_MAX	virt-p2v/include/gnulib/stdint.h	602;"	d
WCHAR_MIN	virt-p2v/include/gnulib/stdint.h	593;"	d
WCHAR_MIN	virt-p2v/include/gnulib/stdint.h	596;"	d
WCHAR_MIN	virt-p2v/include/gnulib/stdint.h	599;"	d
WCHAR_WIDTH	virt-p2v/include/gnulib/stdint.h	736;"	d
WEB_CONNECTION_BASE_HPP_INCLUDED	torrent/include/libtorrent/web_connection_base.hpp	34;"	d
WIN32_LEAN_AND_MEAN	torrent/include/libtorrent/aux_/windows.hpp	37;"	d
WIN32_LEAN_AND_MEAN	torrent/src/file.cpp	110;"	d	file:
WIN32_LEAN_AND_MEAN	virt-p2v/include/gnulib/windows-initguard.h	23;"	d
WIN32_LEAN_AND_MEAN	virt-p2v/include/gnulib/windows-mutex.h	23;"	d
WIN32_LEAN_AND_MEAN	virt-p2v/include/gnulib/windows-once.h	23;"	d
WIN32_LEAN_AND_MEAN	virt-p2v/include/gnulib/windows-recmutex.h	23;"	d
WIN32_LEAN_AND_MEAN	virt-p2v/include/gnulib/windows-rwlock.h	23;"	d
WIN32_LEAN_AND_MEAN	virt-p2v/include/gnulib/windows-tls.h	22;"	d
WINDOW_PAGE	qt_pro/global.h	/^typedef enum WINDOW_PAGE{$/;"	g
WINDOW_PAGE	qt_pro/global.h	/^}WINDOW_PAGE;$/;"	t	typeref:enum:WINDOW_PAGE
WINT_MAX	virt-p2v/include/gnulib/stdint.h	610;"	d
WINT_MAX	virt-p2v/include/gnulib/stdint.h	618;"	d
WINT_MIN	virt-p2v/include/gnulib/stdint.h	609;"	d
WINT_MIN	virt-p2v/include/gnulib/stdint.h	612;"	d
WINT_MIN	virt-p2v/include/gnulib/stdint.h	615;"	d
WINT_WIDTH	virt-p2v/include/gnulib/stdint.h	738;"	d
WORDS_BIGENDIAN	virt-p2v/include/config.h	846;"	d
WORD_BIT	virt-p2v/include/gnulib/limits.h	76;"	d
WORD_BIT	virt-p2v/include/gnulib/limits.in.h	75;"	d
WR_MODE	src/linux.c	116;"	d	file:
W_OK	virt-p2v/include/gnulib/unistd.h	722;"	d
X	torrent/ed25519/ge.h	/^  fe X;$/;"	m	struct:__anon137
X	torrent/ed25519/ge.h	/^  fe X;$/;"	m	struct:__anon138
X	torrent/ed25519/ge.h	/^  fe X;$/;"	m	struct:__anon139
XALLOC_OVERSIZED_H_	virt-p2v/include/gnulib/xalloc-oversized.h	19;"	d
XSTRTOL_H_	virt-p2v/include/gnulib/xstrtol.h	20;"	d
XVD_MAJOR	src/linux.c	94;"	d	file:
X_OK	virt-p2v/include/gnulib/unistd.h	721;"	d
Y	torrent/ed25519/ge.h	/^  fe Y;$/;"	m	struct:__anon137
Y	torrent/ed25519/ge.h	/^  fe Y;$/;"	m	struct:__anon138
Y	torrent/ed25519/ge.h	/^  fe Y;$/;"	m	struct:__anon139
YZYGUID	include/StoreConfig.h	/^} YZYGUID, *PYZYGUID;$/;"	t	typeref:struct:_yzyGUID
YZY_DISK_BACK_FILE	include/qcow2.h	/^} YZY_DISK_BACK_FILE, * PYZY_DISK_BACK_FILE;$/;"	t	typeref:struct:_YZY_DISK_BACK_FILE
YZY_DISK_BACK_FILE	test/check.c	/^} YZY_DISK_BACK_FILE, * PYZY_DISK_BACK_FILE;$/;"	t	typeref:struct:_YZY_DISK_BACK_FILE	file:
YZY_DISK_ITEM	include/StoreConfig.h	/^} YZY_DISK_ITEM;$/;"	t	typeref:struct:_YZY_DISK_ITEM
YZY_DISK_TAG	include/qcow2.h	8;"	d
YZY_DISK_TAG	test/check.c	28;"	d	file:
YZY_DRV_TAG	src/gpt.c	16;"	d	file:
YZY_MAX_DISK_COUNT	include/StoreConfig.h	10;"	d
YZY_MAX_PATH	include/qcow2.h	12;"	d
YZY_MAX_STORE_BUFF_LEN	include/StoreConfig.h	8;"	d
YZY_MAX_STORE_NAME_LEN	include/StoreConfig.h	9;"	d
YZY_MAX_STORE_QCOW_ENTRY	include/StoreConfig.h	7;"	d
YZY_QCOW_ENTRY	include/StoreConfig.h	/^} YZY_QCOW_ENTRY, *PYZY_QCOW_ENTRY;$/;"	t	typeref:struct:_YZY_QCOW_ENTRY
YZY_STORE_CONFIG	include/StoreConfig.h	/^}YZY_STORE_CONFIG,*PYZY_STORE_CONFIG;$/;"	t	typeref:struct:_YZY_STORE_CONFIG
YZY_STORE_TAG	include/StoreConfig.h	6;"	d
YminusX	torrent/ed25519/ge.h	/^  fe YminusX;$/;"	m	struct:__anon141
YplusX	torrent/ed25519/ge.h	/^  fe YplusX;$/;"	m	struct:__anon141
Z	torrent/ed25519/ge.h	/^  fe Z;$/;"	m	struct:__anon137
Z	torrent/ed25519/ge.h	/^  fe Z;$/;"	m	struct:__anon138
Z	torrent/ed25519/ge.h	/^  fe Z;$/;"	m	struct:__anon139
Z	torrent/ed25519/ge.h	/^  fe Z;$/;"	m	struct:__anon141
ZeroGuid	src/StoreConfig.c	/^static void ZeroGuid(PYZYGUID guid)$/;"	f	file:
_	virt-p2v/include/gnulib/errno.in.h	29;"	d
_	virt-p2v/include/gnulib/limits.in.h	29;"	d
_	virt-p2v/include/guestfs-utils.h	26;"	d
_	virt-p2v/libguestfs/guestfs-utils.h	26;"	d
_ALL_SOURCE	virt-p2v/include/config.h	751;"	d
_Bool	virt-p2v/include/gnulib/stdbool.in.h	/^typedef bool _Bool;$/;"	t
_Bool	virt-p2v/include/gnulib/stdbool.in.h	/^typedef enum { _Bool_must_promote_to_int = -1, false = 0, true = 1 } _Bool;$/;"	t	typeref:enum:__anon162
_Bool	virt-p2v/include/gnulib/stdbool.in.h	101;"	d
_Bool	virt-p2v/include/gnulib/stdbool.in.h	70;"	d
_Bool_must_promote_to_int	virt-p2v/include/gnulib/stdbool.in.h	/^typedef enum { _Bool_must_promote_to_int = -1, false = 0, true = 1 } _Bool;$/;"	e	enum:__anon162
_C_CTYPE_A_THRU_F	virt-p2v/include/gnulib/c-ctype.h	131;"	d
_C_CTYPE_CNTRL	virt-p2v/include/gnulib/c-ctype.h	87;"	d
_C_CTYPE_DIGIT	virt-p2v/include/gnulib/c-ctype.h	134;"	d
_C_CTYPE_LOWER	virt-p2v/include/gnulib/c-ctype.h	138;"	d
_C_CTYPE_LOWER_A_THRU_F_N	virt-p2v/include/gnulib/c-ctype.h	118;"	d
_C_CTYPE_LOWER_N	virt-p2v/include/gnulib/c-ctype.h	121;"	d
_C_CTYPE_OTHER_CNTRL	virt-p2v/include/gnulib/c-ctype.h	95;"	d
_C_CTYPE_PUNCT	virt-p2v/include/gnulib/c-ctype.h	139;"	d
_C_CTYPE_UPPER	virt-p2v/include/gnulib/c-ctype.h	148;"	d
_DARWIN_C_SOURCE	virt-p2v/include/config.h	755;"	d
_DARWIN_USE_64_BIT_INODE	virt-p2v/include/config.h	855;"	d
_DECLARE_XSTRTOL	virt-p2v/include/gnulib/xstrtol.h	41;"	d
_DISABLEWARNING4786_4355	torrent/bak/udp_tracker.cpp	16;"	d	file:
_DOSNAME_H	virt-p2v/include/gnulib/dosname.h	21;"	d
_DiskDriver	include/gpt.h	/^typedef struct _DiskDriver {$/;"	s
_ENABLEUSESTL	torrent/bak/udp_tracker.cpp	21;"	d	file:
_ERROR_H	virt-p2v/include/gnulib/error.h	20;"	d
_Exit	virt-p2v/include/gnulib/stdlib.h	656;"	d
_FILENAME_H	virt-p2v/include/gnulib/filename.h	20;"	d
_FILE_OFFSET_BITS	torrent/include/libtorrent/aux_/path.hpp	56;"	d
_FILE_OFFSET_BITS	torrent/include/libtorrent/aux_/path.hpp	72;"	d
_FILE_OFFSET_BITS	torrent/include/libtorrent/config.hpp	40;"	d
_FILE_OFFSET_BITS	torrent/include/libtorrent/file.hpp	57;"	d
_FILE_OFFSET_BITS	torrent/include/libtorrent/file.hpp	73;"	d
_FILE_OFFSET_BITS	torrent/src/file.cpp	52;"	d	file:
_FILE_OFFSET_BITS	torrent/src/path.cpp	49;"	d	file:
_GL_ADD_OVERFLOW	virt-p2v/include/gnulib/intprops.h	250;"	d
_GL_ADD_OVERFLOW	virt-p2v/include/gnulib/intprops.h	257;"	d
_GL_ALREADY_INCLUDING_STDIO_H	virt-p2v/include/gnulib/stdio.h	40;"	d
_GL_ALREADY_INCLUDING_STDIO_H	virt-p2v/include/gnulib/stdio.h	45;"	d
_GL_ALREADY_INCLUDING_STRING_H	virt-p2v/include/gnulib/string.h	38;"	d
_GL_ALREADY_INCLUDING_STRING_H	virt-p2v/include/gnulib/string.h	43;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/arg-nonnull.h	22;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/arg-nonnull.h	24;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/inttypes.h	404;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/inttypes.h	406;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/stdio.h	490;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/stdio.h	492;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/stdlib.h	493;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/stdlib.h	495;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/string.h	411;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/string.h	413;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/unistd.h	477;"	d
_GL_ARG_NONNULL	virt-p2v/include/gnulib/unistd.h	479;"	d
_GL_ASSURE_H	virt-p2v/include/gnulib/assure.h	21;"	d
_GL_ASYNC_SAFE	virt-p2v/include/config.h	947;"	d
_GL_ATTRIBUTE_CONST	virt-p2v/include/config.h	1145;"	d
_GL_ATTRIBUTE_CONST	virt-p2v/include/config.h	1147;"	d
_GL_ATTRIBUTE_DEPRECATED	virt-p2v/include/gnulib/hash.h	42;"	d
_GL_ATTRIBUTE_DEPRECATED	virt-p2v/include/gnulib/hash.h	44;"	d
_GL_ATTRIBUTE_FORMAT	virt-p2v/include/gnulib/error.h	29;"	d
_GL_ATTRIBUTE_FORMAT	virt-p2v/include/gnulib/error.h	31;"	d
_GL_ATTRIBUTE_FORMAT	virt-p2v/include/gnulib/stdio.h	67;"	d
_GL_ATTRIBUTE_FORMAT	virt-p2v/include/gnulib/stdio.h	69;"	d
_GL_ATTRIBUTE_FORMAT_PRINTF	virt-p2v/include/gnulib/stdio.h	77;"	d
_GL_ATTRIBUTE_FORMAT_PRINTF	virt-p2v/include/gnulib/stdio.h	80;"	d
_GL_ATTRIBUTE_FORMAT_PRINTF_SYSTEM	virt-p2v/include/gnulib/stdio.h	89;"	d
_GL_ATTRIBUTE_FORMAT_PRINTF_SYSTEM	virt-p2v/include/gnulib/stdio.h	92;"	d
_GL_ATTRIBUTE_FORMAT_SCANF	virt-p2v/include/gnulib/stdio.h	101;"	d
_GL_ATTRIBUTE_FORMAT_SCANF	virt-p2v/include/gnulib/stdio.h	104;"	d
_GL_ATTRIBUTE_FORMAT_SCANF_SYSTEM	virt-p2v/include/gnulib/stdio.h	112;"	d
_GL_ATTRIBUTE_MALLOC	virt-p2v/include/config.h	1152;"	d
_GL_ATTRIBUTE_MALLOC	virt-p2v/include/config.h	1154;"	d
_GL_ATTRIBUTE_PURE	virt-p2v/include/config.h	1138;"	d
_GL_ATTRIBUTE_PURE	virt-p2v/include/config.h	1140;"	d
_GL_ATTRIBUTE_PURE	virt-p2v/include/gnulib/stdlib.h	106;"	d
_GL_ATTRIBUTE_PURE	virt-p2v/include/gnulib/stdlib.h	108;"	d
_GL_ATTRIBUTE_PURE	virt-p2v/include/gnulib/string.h	59;"	d
_GL_ATTRIBUTE_PURE	virt-p2v/include/gnulib/string.h	61;"	d
_GL_ATTRIBUTE_SPEC_PRINTF	virt-p2v/include/gnulib/error.h	38;"	d
_GL_ATTRIBUTE_SPEC_PRINTF	virt-p2v/include/gnulib/error.h	40;"	d
_GL_ATTRIBUTE_WUR	virt-p2v/include/gnulib/hash.h	33;"	d
_GL_ATTRIBUTE_WUR	virt-p2v/include/gnulib/hash.h	35;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/c++defs.h	22;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/c++defs.h	25;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/inttypes.h	86;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/inttypes.h	89;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/stdio.h	172;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/stdio.h	175;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/stdlib.h	175;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/stdlib.h	178;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/string.h	93;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/string.h	96;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/unistd.h	159;"	d
_GL_BEGIN_NAMESPACE	virt-p2v/include/gnulib/unistd.h	162;"	d
_GL_BINARY_OP_OVERFLOW	virt-p2v/include/gnulib/intprops.h	359;"	d
_GL_BITROTATE_H	virt-p2v/include/gnulib/bitrotate.h	20;"	d
_GL_COB128	virt-p2v/include/gnulib/limits.h	67;"	d
_GL_COB128	virt-p2v/include/gnulib/limits.in.h	66;"	d
_GL_COB16	virt-p2v/include/gnulib/limits.h	70;"	d
_GL_COB16	virt-p2v/include/gnulib/limits.in.h	69;"	d
_GL_COB32	virt-p2v/include/gnulib/limits.h	69;"	d
_GL_COB32	virt-p2v/include/gnulib/limits.in.h	68;"	d
_GL_COB4	virt-p2v/include/gnulib/limits.h	72;"	d
_GL_COB4	virt-p2v/include/gnulib/limits.in.h	71;"	d
_GL_COB64	virt-p2v/include/gnulib/limits.h	68;"	d
_GL_COB64	virt-p2v/include/gnulib/limits.in.h	67;"	d
_GL_COB8	virt-p2v/include/gnulib/limits.h	71;"	d
_GL_COB8	virt-p2v/include/gnulib/limits.in.h	70;"	d
_GL_CONCAT	virt-p2v/include/gnulib/verify.h	160;"	d
_GL_CONCAT0	virt-p2v/include/gnulib/verify.h	161;"	d
_GL_COUNTER	virt-p2v/include/gnulib/verify.h	168;"	d
_GL_COUNTER	virt-p2v/include/gnulib/verify.h	170;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/c++defs.h	265;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/c++defs.h	284;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/inttypes.h	329;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/inttypes.h	348;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/stdio.h	415;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/stdio.h	434;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/stdlib.h	418;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/stdlib.h	437;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/string.h	336;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/string.h	355;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/unistd.h	402;"	d
_GL_CXXALIASWARN	virt-p2v/include/gnulib/unistd.h	421;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/c++defs.h	292;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/c++defs.h	312;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/inttypes.h	356;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/inttypes.h	376;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/stdio.h	442;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/stdio.h	462;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/stdlib.h	445;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/stdlib.h	465;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/string.h	363;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/string.h	383;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/unistd.h	429;"	d
_GL_CXXALIASWARN1	virt-p2v/include/gnulib/unistd.h	449;"	d
_GL_CXXALIASWARN1_1	virt-p2v/include/gnulib/c++defs.h	295;"	d
_GL_CXXALIASWARN1_1	virt-p2v/include/gnulib/inttypes.h	359;"	d
_GL_CXXALIASWARN1_1	virt-p2v/include/gnulib/stdio.h	445;"	d
_GL_CXXALIASWARN1_1	virt-p2v/include/gnulib/stdlib.h	448;"	d
_GL_CXXALIASWARN1_1	virt-p2v/include/gnulib/string.h	366;"	d
_GL_CXXALIASWARN1_1	virt-p2v/include/gnulib/unistd.h	432;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/c++defs.h	300;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/c++defs.h	305;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/c++defs.h	308;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/inttypes.h	364;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/inttypes.h	369;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/inttypes.h	372;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/stdio.h	450;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/stdio.h	455;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/stdio.h	458;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/stdlib.h	453;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/stdlib.h	458;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/stdlib.h	461;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/string.h	371;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/string.h	376;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/string.h	379;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/unistd.h	437;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/unistd.h	442;"	d
_GL_CXXALIASWARN1_2	virt-p2v/include/gnulib/unistd.h	445;"	d
_GL_CXXALIASWARN_1	virt-p2v/include/gnulib/c++defs.h	267;"	d
_GL_CXXALIASWARN_1	virt-p2v/include/gnulib/inttypes.h	331;"	d
_GL_CXXALIASWARN_1	virt-p2v/include/gnulib/stdio.h	417;"	d
_GL_CXXALIASWARN_1	virt-p2v/include/gnulib/stdlib.h	420;"	d
_GL_CXXALIASWARN_1	virt-p2v/include/gnulib/string.h	338;"	d
_GL_CXXALIASWARN_1	virt-p2v/include/gnulib/unistd.h	404;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/c++defs.h	272;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/c++defs.h	277;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/c++defs.h	280;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/inttypes.h	336;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/inttypes.h	341;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/inttypes.h	344;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/stdio.h	422;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/stdio.h	427;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/stdio.h	430;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/stdlib.h	425;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/stdlib.h	430;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/stdlib.h	433;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/string.h	343;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/string.h	348;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/string.h	351;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/unistd.h	409;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/unistd.h	414;"	d
_GL_CXXALIASWARN_2	virt-p2v/include/gnulib/unistd.h	417;"	d
_GL_CXXALIAS_RPL	virt-p2v/include/gnulib/c++defs.h	127;"	d
_GL_CXXALIAS_RPL	virt-p2v/include/gnulib/inttypes.h	191;"	d
_GL_CXXALIAS_RPL	virt-p2v/include/gnulib/stdio.h	277;"	d
_GL_CXXALIAS_RPL	virt-p2v/include/gnulib/stdlib.h	280;"	d
_GL_CXXALIAS_RPL	virt-p2v/include/gnulib/string.h	198;"	d
_GL_CXXALIAS_RPL	virt-p2v/include/gnulib/unistd.h	264;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/c++defs.h	130;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/c++defs.h	145;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/inttypes.h	194;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/inttypes.h	209;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/stdio.h	280;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/stdio.h	295;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/stdlib.h	283;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/stdlib.h	298;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/string.h	201;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/string.h	216;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/unistd.h	267;"	d
_GL_CXXALIAS_RPL_1	virt-p2v/include/gnulib/unistd.h	282;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/c++defs.h	155;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/c++defs.h	170;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/inttypes.h	219;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/inttypes.h	234;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/stdio.h	305;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/stdio.h	320;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/stdlib.h	308;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/stdlib.h	323;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/string.h	226;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/string.h	241;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/unistd.h	292;"	d
_GL_CXXALIAS_RPL_CAST_1	virt-p2v/include/gnulib/unistd.h	307;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/c++defs.h	185;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/c++defs.h	200;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/inttypes.h	249;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/inttypes.h	264;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/stdio.h	335;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/stdio.h	350;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/stdlib.h	338;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/stdlib.h	353;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/string.h	256;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/string.h	271;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/unistd.h	322;"	d
_GL_CXXALIAS_SYS	virt-p2v/include/gnulib/unistd.h	337;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/c++defs.h	210;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/c++defs.h	225;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/inttypes.h	274;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/inttypes.h	289;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/stdio.h	360;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/stdio.h	375;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/stdlib.h	363;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/stdlib.h	378;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/string.h	281;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/string.h	296;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/unistd.h	347;"	d
_GL_CXXALIAS_SYS_CAST	virt-p2v/include/gnulib/unistd.h	362;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/c++defs.h	241;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/c++defs.h	256;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/inttypes.h	305;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/inttypes.h	320;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/stdio.h	391;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/stdio.h	406;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/stdlib.h	394;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/stdlib.h	409;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/string.h	312;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/string.h	327;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/unistd.h	378;"	d
_GL_CXXALIAS_SYS_CAST2	virt-p2v/include/gnulib/unistd.h	393;"	d
_GL_CXXDEFS_H	virt-p2v/include/gnulib/c++defs.h	18;"	d
_GL_CXXDEFS_H	virt-p2v/include/gnulib/inttypes.h	82;"	d
_GL_CXXDEFS_H	virt-p2v/include/gnulib/stdio.h	168;"	d
_GL_CXXDEFS_H	virt-p2v/include/gnulib/stdlib.h	171;"	d
_GL_CXXDEFS_H	virt-p2v/include/gnulib/string.h	89;"	d
_GL_CXXDEFS_H	virt-p2v/include/gnulib/unistd.h	155;"	d
_GL_DIVIDE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	271;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/c++defs.h	23;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/c++defs.h	26;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/inttypes.h	87;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/inttypes.h	90;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/stdio.h	173;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/stdio.h	176;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/stdlib.h	176;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/stdlib.h	179;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/string.h	94;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/string.h	97;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/unistd.h	160;"	d
_GL_END_NAMESPACE	virt-p2v/include/gnulib/unistd.h	163;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/c++defs.h	91;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/c++defs.h	93;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/inttypes.h	155;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/inttypes.h	157;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/stdio.h	241;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/stdio.h	243;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/stdlib.h	244;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/stdlib.h	246;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/string.h	162;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/string.h	164;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/unistd.h	228;"	d
_GL_EXTERN_C	virt-p2v/include/gnulib/unistd.h	230;"	d
_GL_EXTERN_INLINE	virt-p2v/include/config.h	1012;"	d
_GL_EXTERN_INLINE	virt-p2v/include/config.h	1022;"	d
_GL_EXTERN_INLINE	virt-p2v/include/config.h	1026;"	d
_GL_EXTERN_INLINE_IN_USE	virt-p2v/include/config.h	1013;"	d
_GL_EXTERN_INLINE_IN_USE	virt-p2v/include/config.h	1023;"	d
_GL_EXTERN_INLINE_STDHEADER_BUG	virt-p2v/include/config.h	1002;"	d
_GL_FSEEK_WARN	virt-p2v/include/gnulib/stdio.h	1024;"	d
_GL_FSEEK_WARN	virt-p2v/include/gnulib/stdio.h	1034;"	d
_GL_FTELL_WARN	virt-p2v/include/gnulib/stdio.h	1085;"	d
_GL_FTELL_WARN	virt-p2v/include/gnulib/stdio.h	1095;"	d
_GL_FUNCDECL_RPL	virt-p2v/include/gnulib/c++defs.h	103;"	d
_GL_FUNCDECL_RPL	virt-p2v/include/gnulib/inttypes.h	167;"	d
_GL_FUNCDECL_RPL	virt-p2v/include/gnulib/stdio.h	253;"	d
_GL_FUNCDECL_RPL	virt-p2v/include/gnulib/stdlib.h	256;"	d
_GL_FUNCDECL_RPL	virt-p2v/include/gnulib/string.h	174;"	d
_GL_FUNCDECL_RPL	virt-p2v/include/gnulib/unistd.h	240;"	d
_GL_FUNCDECL_RPL_1	virt-p2v/include/gnulib/c++defs.h	105;"	d
_GL_FUNCDECL_RPL_1	virt-p2v/include/gnulib/inttypes.h	169;"	d
_GL_FUNCDECL_RPL_1	virt-p2v/include/gnulib/stdio.h	255;"	d
_GL_FUNCDECL_RPL_1	virt-p2v/include/gnulib/stdlib.h	258;"	d
_GL_FUNCDECL_RPL_1	virt-p2v/include/gnulib/string.h	176;"	d
_GL_FUNCDECL_RPL_1	virt-p2v/include/gnulib/unistd.h	242;"	d
_GL_FUNCDECL_SYS	virt-p2v/include/gnulib/c++defs.h	115;"	d
_GL_FUNCDECL_SYS	virt-p2v/include/gnulib/inttypes.h	179;"	d
_GL_FUNCDECL_SYS	virt-p2v/include/gnulib/stdio.h	265;"	d
_GL_FUNCDECL_SYS	virt-p2v/include/gnulib/stdlib.h	268;"	d
_GL_FUNCDECL_SYS	virt-p2v/include/gnulib/string.h	186;"	d
_GL_FUNCDECL_SYS	virt-p2v/include/gnulib/unistd.h	252;"	d
_GL_GENSYM	virt-p2v/include/gnulib/verify.h	175;"	d
_GL_GETPROGNAME_H	virt-p2v/include/gnulib/getprogname.h	18;"	d
_GL_HAS_BUILTIN_ADD_OVERFLOW	virt-p2v/include/gnulib/intprops.h	226;"	d
_GL_HAS_BUILTIN_ADD_OVERFLOW	virt-p2v/include/gnulib/intprops.h	228;"	d
_GL_HAS_BUILTIN_ADD_OVERFLOW	virt-p2v/include/gnulib/intprops.h	230;"	d
_GL_HAS_BUILTIN_MUL_OVERFLOW	virt-p2v/include/gnulib/intprops.h	236;"	d
_GL_HAS_BUILTIN_MUL_OVERFLOW	virt-p2v/include/gnulib/intprops.h	238;"	d
_GL_HAS_BUILTIN_OVERFLOW_P	virt-p2v/include/gnulib/intprops.h	243;"	d
_GL_HAS_BUILTIN_TRAP	virt-p2v/include/gnulib/verify.h	237;"	d
_GL_HAS_BUILTIN_TRAP	virt-p2v/include/gnulib/verify.h	239;"	d
_GL_HAS_BUILTIN_TRAP	virt-p2v/include/gnulib/verify.h	241;"	d
_GL_HAS_BUILTIN_UNREACHABLE	virt-p2v/include/gnulib/verify.h	245;"	d
_GL_HAS_BUILTIN_UNREACHABLE	virt-p2v/include/gnulib/verify.h	247;"	d
_GL_HAS_BUILTIN_UNREACHABLE	virt-p2v/include/gnulib/verify.h	249;"	d
_GL_HAVE_STATIC_ASSERT1	virt-p2v/include/gnulib/verify.h	47;"	d
_GL_HAVE__STATIC_ASSERT	virt-p2v/include/gnulib/verify.h	39;"	d
_GL_HAVE__STATIC_ASSERT1	virt-p2v/include/gnulib/verify.h	43;"	d
_GL_HAVE___TYPEOF__	virt-p2v/include/gnulib/intprops.h	91;"	d
_GL_HAVE___TYPEOF__	virt-p2v/include/gnulib/intprops.h	93;"	d
_GL_IGNORE_VALUE_H	virt-p2v/include/gnulib/ignore-value.h	36;"	d
_GL_IGNORE_VALUE_H	virt-p2v/include/ignore-value.h	36;"	d
_GL_INCLUDING_UNISTD_H	virt-p2v/include/gnulib/unistd.h	39;"	d
_GL_INCLUDING_UNISTD_H	virt-p2v/include/gnulib/unistd.h	41;"	d
_GL_INLINE	virt-p2v/include/config.h	1011;"	d
_GL_INLINE	virt-p2v/include/config.h	1018;"	d
_GL_INLINE	virt-p2v/include/config.h	1020;"	d
_GL_INLINE	virt-p2v/include/config.h	1025;"	d
_GL_INLINE_HEADER_BEGIN	virt-p2v/include/config.h	1042;"	d
_GL_INLINE_HEADER_BEGIN	virt-p2v/include/config.h	1050;"	d
_GL_INLINE_HEADER_CONST_PRAGMA	virt-p2v/include/config.h	1037;"	d
_GL_INLINE_HEADER_CONST_PRAGMA	virt-p2v/include/config.h	1039;"	d
_GL_INLINE_HEADER_END	virt-p2v/include/config.h	1047;"	d
_GL_INLINE_HEADER_END	virt-p2v/include/config.h	1051;"	d
_GL_INTEGER_WIDTH	virt-p2v/include/gnulib/limits.h	66;"	d
_GL_INTEGER_WIDTH	virt-p2v/include/gnulib/limits.in.h	65;"	d
_GL_INTPROPS_H	virt-p2v/include/gnulib/intprops.h	21;"	d
_GL_INT_ADD_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	535;"	d
_GL_INT_CONVERT	virt-p2v/include/gnulib/intprops.h	27;"	d
_GL_INT_MAXIMUM	virt-p2v/include/gnulib/intprops.h	68;"	d
_GL_INT_MINIMUM	virt-p2v/include/gnulib/intprops.h	64;"	d
_GL_INT_MULTIPLY_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	562;"	d
_GL_INT_NEGATE_CONVERT	virt-p2v/include/gnulib/intprops.h	31;"	d
_GL_INT_OP_CALC	virt-p2v/include/gnulib/intprops.h	506;"	d
_GL_INT_OP_WRAPV	virt-p2v/include/gnulib/intprops.h	408;"	d
_GL_INT_OP_WRAPV	virt-p2v/include/gnulib/intprops.h	463;"	d
_GL_INT_OP_WRAPV_LONGISH	virt-p2v/include/gnulib/intprops.h	480;"	d
_GL_INT_OP_WRAPV_LONGISH	virt-p2v/include/gnulib/intprops.h	493;"	d
_GL_INT_OP_WRAPV_SMALLISH	virt-p2v/include/gnulib/intprops.h	448;"	d
_GL_INT_OP_WRAPV_SMALLISH	virt-p2v/include/gnulib/intprops.h	453;"	d
_GL_INT_OP_WRAPV_VIA_UNSIGNED	virt-p2v/include/gnulib/intprops.h	528;"	d
_GL_INT_SUBTRACT_RANGE_OVERFLOW	virt-p2v/include/gnulib/intprops.h	550;"	d
_GL_JUST_INCLUDE_SYSTEM_INTTYPES_H	virt-p2v/include/gnulib/stdint.h	126;"	d
_GL_JUST_INCLUDE_SYSTEM_INTTYPES_H	virt-p2v/include/gnulib/stdint.h	35;"	d
_GL_JUST_INCLUDE_SYSTEM_INTTYPES_H	virt-p2v/include/gnulib/stdint.in.h	34;"	d
_GL_JUST_INCLUDE_SYSTEM_WCHAR_H	virt-p2v/include/gnulib/stdint.h	589;"	d
_GL_JUST_INCLUDE_SYSTEM_WCHAR_H	virt-p2v/include/gnulib/stdint.h	591;"	d
_GL_LIMITS_H	virt-p2v/include/gnulib/limits.h	30;"	d
_GL_MULTIPLY_OVERFLOW	virt-p2v/include/gnulib/intprops.h	254;"	d
_GL_MULTIPLY_OVERFLOW	virt-p2v/include/gnulib/intprops.h	267;"	d
_GL_REMAINDER_OVERFLOW	virt-p2v/include/gnulib/intprops.h	275;"	d
_GL_SIGNED_INT_MAXIMUM	virt-p2v/include/gnulib/intprops.h	72;"	d
_GL_SIGNED_TYPE_OR_EXPR	virt-p2v/include/gnulib/intprops.h	100;"	d
_GL_SIGNED_TYPE_OR_EXPR	virt-p2v/include/gnulib/intprops.h	102;"	d
_GL_STDBOOL_H	virt-p2v/include/gnulib/stdbool.in.h	18;"	d
_GL_STDDEF_WINT_T	virt-p2v/include/gnulib/stddef.in.h	42;"	d
_GL_STDINT_H	virt-p2v/include/gnulib/stdint.h	81;"	d
_GL_STDIO_H	virt-p2v/include/gnulib/stdio.h	48;"	d
_GL_STDIO_MACROEXPAND_AND_STRINGIZE	virt-p2v/include/gnulib/stdio.h	631;"	d
_GL_STDIO_STRINGIZE	virt-p2v/include/gnulib/stdio.h	630;"	d
_GL_STDLIB_H	virt-p2v/include/gnulib/stdlib.h	39;"	d
_GL_STRERROR_OVERRIDE_H	virt-p2v/include/gnulib/strerror-override.h	19;"	d
_GL_STRING_H	virt-p2v/include/gnulib/string.h	46;"	d
_GL_SUBTRACT_OVERFLOW	virt-p2v/include/gnulib/intprops.h	252;"	d
_GL_SUBTRACT_OVERFLOW	virt-p2v/include/gnulib/intprops.h	262;"	d
_GL_UNISTD_H	virt-p2v/include/gnulib/unistd.h	53;"	d
_GL_UNISTD_INLINE	virt-p2v/include/gnulib/unistd.h	628;"	d
_GL_UNSIGNED_NEG_MULTIPLE	virt-p2v/include/gnulib/intprops.h	284;"	d
_GL_UNUSED	virt-p2v/include/config.h	1118;"	d
_GL_UNUSED	virt-p2v/include/config.h	1120;"	d
_GL_UNUSED_LABEL	virt-p2v/include/config.h	1131;"	d
_GL_UNUSED_LABEL	virt-p2v/include/config.h	1133;"	d
_GL_USE_CRT_EXTERNS	virt-p2v/include/gnulib/unistd.h	932;"	d
_GL_VERIFY	virt-p2v/include/gnulib/verify.h	216;"	d
_GL_VERIFY	virt-p2v/include/gnulib/verify.h	218;"	d
_GL_VERIFY_H	virt-p2v/include/gnulib/verify.h	21;"	d
_GL_VERIFY_TRUE	virt-p2v/include/gnulib/verify.h	181;"	d
_GL_VERIFY_TYPE	virt-p2v/include/gnulib/verify.h	192;"	d
_GL_VERIFY_TYPE	virt-p2v/include/gnulib/verify.h	195;"	d
_GL_VERIFY_TYPE	virt-p2v/include/gnulib/verify.h	201;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/inttypes.h	537;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/inttypes.h	539;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/stdio.h	623;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/stdio.h	625;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/stdlib.h	626;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/stdlib.h	628;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/string.h	544;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/string.h	546;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/unistd.h	610;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/unistd.h	612;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/warn-on-use.h	127;"	d
_GL_WARN_EXTERN_C	virt-p2v/include/gnulib/warn-on-use.h	129;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/inttypes.h	496;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/inttypes.h	502;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/inttypes.h	506;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/stdio.h	582;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/stdio.h	588;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/stdio.h	592;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/stdlib.h	585;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/stdlib.h	591;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/stdlib.h	595;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/string.h	503;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/string.h	509;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/string.h	513;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/unistd.h	569;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/unistd.h	575;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/unistd.h	579;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/warn-on-use.h	86;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/warn-on-use.h	92;"	d
_GL_WARN_ON_USE	virt-p2v/include/gnulib/warn-on-use.h	96;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/inttypes.h	498;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/inttypes.h	504;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/inttypes.h	508;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/stdio.h	584;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/stdio.h	590;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/stdio.h	594;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/stdlib.h	587;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/stdlib.h	593;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/stdlib.h	597;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/string.h	505;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/string.h	511;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/string.h	515;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/unistd.h	571;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/unistd.h	577;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/unistd.h	581;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/warn-on-use.h	88;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/warn-on-use.h	94;"	d
_GL_WARN_ON_USE_ATTRIBUTE	virt-p2v/include/gnulib/warn-on-use.h	98;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/inttypes.h	520;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/inttypes.h	525;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/inttypes.h	528;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/stdio.h	606;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/stdio.h	611;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/stdio.h	614;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/stdlib.h	609;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/stdlib.h	614;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/stdlib.h	617;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/string.h	527;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/string.h	532;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/string.h	535;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/unistd.h	593;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/unistd.h	598;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/unistd.h	601;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/warn-on-use.h	110;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/warn-on-use.h	115;"	d
_GL_WARN_ON_USE_CXX	virt-p2v/include/gnulib/warn-on-use.h	118;"	d
_GL__GENERIC_BOGUS	virt-p2v/include/gnulib/intprops.h	399;"	d
_GL__GENERIC_BOGUS	virt-p2v/include/gnulib/intprops.h	401;"	d
_GNU_SOURCE	torrent/include/libtorrent/aux_/path.hpp	59;"	d
_GNU_SOURCE	torrent/include/libtorrent/file.hpp	60;"	d
_GNU_SOURCE	virt-p2v/include/config.h	759;"	d
_HPUX_ALT_XOPEN_SOCKET_API	virt-p2v/include/config.h	814;"	d
_IPsin	torrent/bak/tracker.cpp	/^int btTracker::_IPsin(char *h, int p, struct sockaddr_in *psin)$/;"	f	class:btTracker
_IS_DRIVE_LETTER	virt-p2v/include/gnulib/dosname.h	27;"	d
_IS_DRIVE_LETTER	virt-p2v/include/gnulib/filename.h	61;"	d
_IS_DRIVE_LETTER	virt-p2v/include/gnulib/filename.h	64;"	d
_IS_DRIVE_LETTER	virt-p2v/include/gnulib/filename.h	65;"	d
_LARGE_FILES	torrent/src/file.cpp	53;"	d	file:
_LARGE_FILES	torrent/src/path.cpp	50;"	d	file:
_LONG_LONG_FORMAT_PREFIX	virt-p2v/include/gnulib/inttypes.h	548;"	d
_LONG_LONG_FORMAT_PREFIX	virt-p2v/include/gnulib/inttypes.h	550;"	d
_LONG_LONG_FORMAT_PREFIX	virt-p2v/include/gnulib/inttypes.in.h	74;"	d
_MSVC_INVAL_H	virt-p2v/include/gnulib/msvc-inval.h	18;"	d
_MSVC_NOTHROW_H	virt-p2v/include/gnulib/msvc-nothrow.h	19;"	d
_NETBSD_SOURCE	virt-p2v/include/config.h	763;"	d
_NETBSD_SOURCE	virt-p2v/include/config.h	867;"	d
_NET_ROUTE_H_	torrent/include/libtorrent/aux_/route.h	65;"	d
_Noreturn	virt-p2v/include/config.h	881;"	d
_Noreturn	virt-p2v/include/config.h	887;"	d
_Noreturn	virt-p2v/include/config.h	889;"	d
_Noreturn	virt-p2v/include/config.h	891;"	d
_Noreturn	virt-p2v/include/gnulib/_Noreturn.h	28;"	d
_Noreturn	virt-p2v/include/gnulib/_Noreturn.h	34;"	d
_Noreturn	virt-p2v/include/gnulib/_Noreturn.h	36;"	d
_Noreturn	virt-p2v/include/gnulib/_Noreturn.h	38;"	d
_Noreturn	virt-p2v/include/gnulib/stdlib.h	139;"	d
_Noreturn	virt-p2v/include/gnulib/stdlib.h	145;"	d
_Noreturn	virt-p2v/include/gnulib/stdlib.h	147;"	d
_Noreturn	virt-p2v/include/gnulib/stdlib.h	149;"	d
_OPENBSD_SOURCE	virt-p2v/include/config.h	767;"	d
_POSIX_PTHREAD_SEMANTICS	virt-p2v/include/config.h	771;"	d
_PRI64_PREFIX	virt-p2v/include/gnulib/inttypes.h	663;"	d
_PRI64_PREFIX	virt-p2v/include/gnulib/inttypes.h	665;"	d
_PRI64_PREFIX	virt-p2v/include/gnulib/inttypes.h	667;"	d
_PRI64_PREFIX	virt-p2v/include/gnulib/inttypes.in.h	189;"	d
_PRIu64_PREFIX	virt-p2v/include/gnulib/inttypes.h	680;"	d
_PRIu64_PREFIX	virt-p2v/include/gnulib/inttypes.h	682;"	d
_PRIu64_PREFIX	virt-p2v/include/gnulib/inttypes.h	684;"	d
_PRIu64_PREFIX	virt-p2v/include/gnulib/inttypes.in.h	206;"	d
_PedCHSGeometry	include/device.h	/^struct _PedCHSGeometry{$/;"	s
_PedDevice	include/device.h	/^struct _PedDevice {$/;"	s
_QCowHeader	include/qcow2.h	/^typedef struct _QCowHeader {$/;"	s
_QCowHeader	test/check.c	/^typedef struct _QCowHeader {$/;"	s	file:
_ResponseData	virt-p2v/include/gui-gtk2-compat.h	/^struct _ResponseData$/;"	s
_Restrict	virt-p2v/include/config.h	1098;"	d
_SCN64_PREFIX	virt-p2v/include/gnulib/inttypes.h	1156;"	d
_SCN64_PREFIX	virt-p2v/include/gnulib/inttypes.h	1158;"	d
_SCN64_PREFIX	virt-p2v/include/gnulib/inttypes.h	1160;"	d
_SCN64_PREFIX	virt-p2v/include/gnulib/inttypes.in.h	682;"	d
_SCNu64_PREFIX	virt-p2v/include/gnulib/inttypes.h	1173;"	d
_SCNu64_PREFIX	virt-p2v/include/gnulib/inttypes.h	1175;"	d
_SCNu64_PREFIX	virt-p2v/include/gnulib/inttypes.h	1177;"	d
_SCNu64_PREFIX	virt-p2v/include/gnulib/inttypes.in.h	699;"	d
_STDINT_MAX	virt-p2v/include/gnulib/stdint.h	140;"	d
_STDINT_SIGNED_MIN	virt-p2v/include/gnulib/stdint.h	137;"	d
_STDINT_UNSIGNED_MIN	virt-p2v/include/gnulib/stdint.h	135;"	d
_S_IFBLK	src/linux.c	14;"	d	file:
_Static_assert	virt-p2v/include/gnulib/verify.h	226;"	d
_Static_assert	virt-p2v/include/gnulib/verify.h	56;"	d
_StoreDriver	include/StoreConfig.h	/^typedef struct _StoreDriver$/;"	s
_TANDEM_SOURCE	virt-p2v/include/config.h	803;"	d
_TIME_	qt_pro/external.cpp	12;"	d	file:
_UINT32_T	virt-p2v/include/gnulib/stdint.h	223;"	d
_UINT64_T	virt-p2v/include/gnulib/stdint.h	224;"	d
_UINT8_T	virt-p2v/include/gnulib/stdint.h	222;"	d
_UNUSED_PARAMETER_	virt-p2v/include/config.h	1124;"	d
_USE_STD_STAT	virt-p2v/include/config.h	908;"	d
_WINDOWS_INITGUARD_H	virt-p2v/include/gnulib/windows-initguard.h	21;"	d
_WINDOWS_MUTEX_H	virt-p2v/include/gnulib/windows-mutex.h	21;"	d
_WINDOWS_ONCE_H	virt-p2v/include/gnulib/windows-once.h	21;"	d
_WINDOWS_RECMUTEX_H	virt-p2v/include/gnulib/windows-recmutex.h	21;"	d
_WINDOWS_RWLOCK_H	virt-p2v/include/gnulib/windows-rwlock.h	21;"	d
_WINDOWS_TLS_H	virt-p2v/include/gnulib/windows-tls.h	20;"	d
_XOPEN_SOURCE	torrent/include/libtorrent/aux_/path.hpp	63;"	d
_XOPEN_SOURCE	torrent/include/libtorrent/file.hpp	64;"	d
_YZY_DISK_BACK_FILE	include/qcow2.h	/^typedef struct _YZY_DISK_BACK_FILE {$/;"	s
_YZY_DISK_BACK_FILE	test/check.c	/^typedef struct _YZY_DISK_BACK_FILE {$/;"	s	file:
_YZY_DISK_ITEM	include/StoreConfig.h	/^typedef struct _YZY_DISK_ITEM$/;"	s
_YZY_QCOW_ENTRY	include/StoreConfig.h	/^typedef struct _YZY_QCOW_ENTRY$/;"	s
_YZY_STORE_CONFIG	include/StoreConfig.h	/^typedef struct _YZY_STORE_CONFIG$/;"	s
__BASE_H__	include/base.h	2;"	d
__CLIENT_H__	include/client.h	2;"	d
__CONFIG_H__	include/config.h	2;"	d
__DEBUG__	include/base.h	42;"	d
__DEBUG__	qt_pro/global.h	14;"	d
__DEVICE_H__	include/device.h	2;"	d
__ERROR_H__	include/error.h	2;"	d
__EXTENSIONS__	virt-p2v/include/config.h	818;"	d
__EXTERNAL_H__	qt_pro/external.h	2;"	d
__GLOBAL_H__	include/global.h	2;"	d
__GNUC_STDC_INLINE__	virt-p2v/include/config.h	1073;"	d
__MINGW_USE_VC2005_COMPAT	torrent/src/file.cpp	72;"	d	file:
__MINGW_USE_VC2005_COMPAT	torrent/src/path.cpp	56;"	d	file:
__PACKET_H__	include/packet.h	2;"	d
__PROTOTYPES	virt-p2v/include/config.h	915;"	d
__QCOW2_H__	include/qcow2.h	2;"	d
__QUEUE_H__	include/queue.h	2;"	d
__SOCKET_H__	include/socket.h	2;"	d
__STDC_CONSTANT_MACROS	virt-p2v/include/gnulib/stdint.h	65;"	d
__STDC_FORMAT_MACROS	virt-p2v/include/gnulib/inttypes.h	38;"	d
__STDC_FORMAT_MACROS	virt-p2v/include/gnulib/inttypes.in.h	37;"	d
__STDC_LIMIT_MACROS	virt-p2v/include/gnulib/stdint.h	68;"	d
__STDC_WANT_IEC_60559_ATTRIBS_EXT__	virt-p2v/include/config.h	775;"	d
__STDC_WANT_IEC_60559_BFP_EXT__	virt-p2v/include/config.h	779;"	d
__STDC_WANT_IEC_60559_DFP_EXT__	virt-p2v/include/config.h	783;"	d
__STDC_WANT_IEC_60559_FUNCS_EXT__	virt-p2v/include/config.h	787;"	d
__STDC_WANT_IEC_60559_TYPES_EXT__	virt-p2v/include/config.h	791;"	d
__STDC_WANT_LIB_EXT2__	virt-p2v/include/config.h	795;"	d
__STDC_WANT_MATH_SPEC_FUNCS__	virt-p2v/include/config.h	799;"	d
__STDINT_H__	virt-p2v/include/gnulib/stdint.h	59;"	d
__TASK_H__	include/task.h	2;"	d
__TORRENT_H__	include/torrent.h	2;"	d
__USE_MINGW_ANSI_STDIO	virt-p2v/include/config.h	620;"	d
__bool_true_false_are_defined	virt-p2v/include/gnulib/stdbool.in.h	130;"	d
__has_builtin	torrent/include/libtorrent/config.hpp	534;"	d
__need_system_stdlib_h	virt-p2v/include/gnulib/unistd.h	92;"	d
__need_system_stdlib_h	virt-p2v/include/gnulib/unistd.h	94;"	d
__restrict__	virt-p2v/include/config.h	1099;"	d
__strtol	virt-p2v/src/xstrtoull.c	1;"	d	file:
__strtol_t	virt-p2v/src/xstrtoull.c	2;"	d	file:
__xalloc_count_type	virt-p2v/include/gnulib/xalloc-oversized.h	/^typedef ptrdiff_t __xalloc_count_type;$/;"	t
__xalloc_count_type	virt-p2v/include/gnulib/xalloc-oversized.h	/^typedef size_t __xalloc_count_type;$/;"	t
__xalloc_oversized	virt-p2v/include/gnulib/xalloc-oversized.h	30;"	d
__xstrtol	virt-p2v/src/xstrtoull.c	3;"	d	file:
_async_ops	torrent/src/session_impl.cpp	/^	std::map<std::string, async_t> _async_ops;$/;"	m	namespace:libtorrent	file:
_async_ops_mutex	torrent/src/session_impl.cpp	/^	std::mutex _async_ops_mutex;$/;"	m	namespace:libtorrent	file:
_async_ops_nthreads	torrent/src/session_impl.cpp	/^	int _async_ops_nthreads = 0;$/;"	m	namespace:libtorrent	file:
_begin	torrent/include/libtorrent/aux_/range.hpp	/^		Iter _begin;$/;"	m	struct:libtorrent::aux::iterator_range
_begin	torrent/include/libtorrent/index_range.hpp	/^	Index _begin;$/;"	m	struct:libtorrent::index_range
_bit	torrent/include/libtorrent/flags.hpp	/^constexpr bit_t operator "" _bit(unsigned long long int b) { return bit_t{static_cast<int>(b)}; }$/;"	f	namespace:libtorrent
_device_get_length	src/linux.c	/^static PedSector _device_get_length(PedDevice *dev)$/;"	f	file:
_device_get_part_path	src/linux.c	/^static char *_device_get_part_path(PedDevice *dev, int num)$/;"	f	file:
_device_probe_geometry	src/linux.c	/^static int _device_probe_geometry(PedDevice *dev)$/;"	f	file:
_device_seek	src/gpt.c	/^int _device_seek(int fd, PedSector sector)$/;"	f
_device_seek	src/linux.c	/^static _device_seek(const PedDevice* dev, PedSector sector)$/;"	f	file:
_device_set_sector_size	src/linux.c	/^static void _device_set_sector_size(PedDevice *dev)$/;"	f	file:
_device_stat	src/linux.c	/^static int _device_stat(PedDevice *dev, struct stat *dev_stat)$/;"	f	file:
_end	torrent/include/libtorrent/aux_/range.hpp	/^		Iter _end;$/;"	m	struct:libtorrent::aux::iterator_range
_end	torrent/include/libtorrent/index_range.hpp	/^	Index _end;$/;"	m	struct:libtorrent::index_range
_get_linux_version	src/linux.c	/^static int _get_linux_version ()$/;"	f	file:
_get_osfhandle	virt-p2v/include/gnulib/msvc-nothrow.h	37;"	d
_gl_verify_error_if_negative	virt-p2v/include/gnulib/verify.h	/^    unsigned int _gl_verify_error_if_negative: w;$/;"	m	struct:_gl_verify_type
_gl_verify_type	virt-p2v/include/gnulib/verify.h	/^  struct _gl_verify_type {$/;"	s
_kernel_has_blkgetsize64	src/linux.c	/^static int _kernel_has_blkgetsize64(void)$/;"	f	file:
_mount_table_search	src/linux.c	/^static int _mount_table_search(const char* file_name, dev_t dev)$/;"	f	file:
_partition_is_mounted_by_dev	src/linux.c	/^static int _partition_is_mounted_by_dev (dev_t dev)$/;"	f	file:
_partition_is_mounted_by_path	src/linux.c	/^static int _partition_is_mounted_by_path(const char *path)$/;"	f	file:
_req_head	include/socket.h	/^typedef struct _req_head$/;"	s
_req_head	qt_pro/pipethread.cpp	/^typedef struct _req_head$/;"	s	file:
_s2sin	torrent/bak/tracker.cpp	/^int btTracker::_s2sin(char *h, int p, struct sockaddr_in *psin)$/;"	f	class:btTracker
_sv	torrent/include/libtorrent/string_view.hpp	/^	constexpr string_view operator "" _sv(char const* str, std::size_t len)$/;"	f	namespace:libtorrent::literals
_verify_intmax_size	virt-p2v/include/gnulib/stdint.h	/^typedef int _verify_intmax_size[sizeof (intmax_t) == sizeof (uintmax_t)$/;"	t
_wakeups	torrent/src/session_impl.cpp	/^	std::deque<wakeup_t> _wakeups;$/;"	m	namespace:libtorrent	file:
_yzyGUID	include/StoreConfig.h	/^typedef struct _yzyGUID$/;"	s
abort	torrent/kademlia/rpc_manager.cpp	/^void observer::abort()$/;"	f	class:libtorrent::dht::observer
abort	torrent/src/disk_io_thread.cpp	/^	void disk_io_thread::abort(bool const wait)$/;"	f	class:disk_io_thread
abort	torrent/src/disk_io_thread_pool.cpp	/^	void disk_io_thread_pool::abort(bool wait)$/;"	f	class:libtorrent::disk_io_thread_pool
abort	torrent/src/resolver.cpp	/^	void resolver::abort()$/;"	f	class:libtorrent::resolver
abort	torrent/src/session.cpp	/^	session_proxy session::abort()$/;"	f	class:libtorrent::session
abort	torrent/src/torrent.cpp	/^	void torrent::abort()$/;"	f	class:libtorrent::torrent
abort_all_requests	torrent/src/tracker_manager.cpp	/^	void tracker_manager::abort_all_requests(bool all)$/;"	f	class:libtorrent::tracker_manager
abort_dirty	torrent/src/block_cache.cpp	/^void block_cache::abort_dirty(cached_piece_entry* pe)$/;"	f	class:libtorrent::block_cache
abort_download	torrent/src/piece_picker.cpp	/^	void piece_picker::abort_download(piece_block const block, torrent_peer* peer)$/;"	f	class:libtorrent::piece_picker
abort_on_shutdown	torrent/include/libtorrent/resolver_interface.hpp	/^	static constexpr resolver_flags abort_on_shutdown = 1_bit;$/;"	m	struct:libtorrent::resolver_interface
abort_on_shutdown	torrent/src/resolver.cpp	/^	constexpr resolver_flags resolver_interface::abort_on_shutdown;$/;"	m	class:libtorrent::resolver_interface	file:
aborted	torrent/include/libtorrent/disk_io_job.hpp	/^		static constexpr disk_job_flags_t aborted = 6_bit;$/;"	m	struct:libtorrent::disk_io_job
aborted	torrent/src/disk_io_job.cpp	/^	constexpr disk_job_flags_t disk_io_job::aborted;$/;"	m	class:libtorrent::disk_io_job	file:
aborted_peers	torrent/include/libtorrent/performance_counters.hpp	/^			aborted_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
about_button_clicked	virt-p2v/src/gui.c	/^about_button_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
abs_builddir	torrent/include/libtorrent/Makefile	/^abs_builddir = \/home\/ysr\/project\/libtorrent\/include\/libtorrent$/;"	m
abs_srcdir	torrent/include/libtorrent/Makefile	/^abs_srcdir = \/home\/ysr\/project\/libtorrent\/include\/libtorrent$/;"	m
abs_top_builddir	torrent/include/libtorrent/Makefile	/^abs_top_builddir = \/home\/ysr\/project\/libtorrent$/;"	m
abs_top_srcdir	torrent/include/libtorrent/Makefile	/^abs_top_srcdir = \/home\/ysr\/project\/libtorrent$/;"	m
ac_ct_AR	torrent/include/libtorrent/Makefile	/^ac_ct_AR = ar$/;"	m
ac_ct_CC	torrent/include/libtorrent/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	torrent/include/libtorrent/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_DUMPBIN	torrent/include/libtorrent/Makefile	/^ac_ct_DUMPBIN = $/;"	m
accept	torrent/include/libtorrent/alert_types.hpp	/^			accept TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
accept_handshake	torrent/include/libtorrent/ssl_stream.hpp	/^	void accept_handshake(error_code& ec)$/;"	f	class:libtorrent::ssl_stream
accept_incoming	torrent/include/libtorrent/aux_/session_impl.hpp	/^		static constexpr listen_socket_flags_t accept_incoming = 0_bit;$/;"	m	struct:libtorrent::aux::listen_socket_t
accept_incoming	torrent/src/session_impl.cpp	/^	constexpr listen_socket_flags_t listen_socket_t::accept_incoming;$/;"	m	class:libtorrent::aux::listen_socket_t	file:
accepted	torrent/include/libtorrent/error_code.hpp	/^			accepted = 202,$/;"	e	enum:libtorrent::errors::http_errors
access	torrent/include/libtorrent/ip_filter.hpp	/^			std::uint32_t access;$/;"	m	struct:libtorrent::detail::filter_impl::range
access	torrent/include/libtorrent/ip_filter.hpp	/^		std::uint32_t access(Addr const& addr) const$/;"	f	class:libtorrent::detail::filter_impl
access	torrent/src/ip_filter.cpp	/^	std::uint32_t ip_filter::access(address const& addr) const$/;"	f	class:libtorrent::ip_filter
access	torrent/src/ip_filter.cpp	/^	std::uint32_t port_filter::access(std::uint16_t port) const$/;"	f	class:libtorrent::port_filter
access	virt-p2v/include/gnulib/unistd.h	744;"	d
access_flags	torrent/include/libtorrent/ip_filter.hpp	/^	enum access_flags$/;"	g	class:libtorrent::port_filter
access_flags	torrent/include/libtorrent/ip_filter.hpp	/^	enum access_flags$/;"	g	struct:libtorrent::ip_filter
account_received_bytes	torrent/src/peer_connection.cpp	/^	void peer_connection::account_received_bytes(int const bytes_transferred)$/;"	f	class:libtorrent::peer_connection
ack_nr	torrent/include/libtorrent/utp_stream.hpp	/^	be_uint16 ack_nr;$/;"	m	struct:libtorrent::utp_header
ack_packet	torrent/src/utp_stream.cpp	/^std::uint32_t utp_socket_impl::ack_packet(packet_ptr p, time_point const receive_time$/;"	f	class:libtorrent::utp_socket_impl
acpi	virt-p2v/include/p2v-config.h	/^  bool acpi;$/;"	m	struct:cpu_config
acquire	torrent/include/libtorrent/packet_pool.hpp	/^		packet_ptr acquire(int const allocate)$/;"	f	struct:libtorrent::packet_pool
acquire_manage_volume_privs	torrent/src/file.cpp	/^	void acquire_manage_volume_privs()$/;"	f	namespace:libtorrent
acquire_packet	torrent/include/libtorrent/utp_socket_manager.hpp	/^		packet_ptr acquire_packet(int const allocate) { return m_packet_pool.acquire(allocate); }$/;"	f	struct:libtorrent::utp_socket_manager
acquire_packet	torrent/src/utp_stream.cpp	/^	packet_ptr acquire_packet(int const allocate) { return m_sm.acquire_packet(allocate); }$/;"	f	struct:libtorrent::utp_socket_impl
act	torrent/include/libtorrent/aux_/portmap.hpp	/^		portmap_action act = portmap_action::none;$/;"	m	struct:libtorrent::aux::base_mapping
action	torrent/include/libtorrent/disk_io_job.hpp	/^		job_action_t action = job_action_t::read;$/;"	m	struct:libtorrent::disk_io_job
action_failed	torrent/include/libtorrent/upnp.hpp	/^			action_failed = 501,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
action_t	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		enum class action_t : std::uint8_t$/;"	c	class:libtorrent::udp_tracker_connection
activate_action	virt-p2v/src/gui.c	/^activate_action (GSimpleAction *action, GVariant *parameter, gpointer user_data)$/;"	f	file:
active	include/gpt.h	/^    uint8_t      active;$/;"	m	struct:__anon9
active	torrent/src/udp_socket.cpp	/^	bool active() const { return m_active; }$/;"	f	struct:libtorrent::socks5
active_checking	torrent/include/libtorrent/settings_pack.hpp	/^			active_checking,$/;"	e	enum:libtorrent::settings_pack::int_types
active_dht_limit	torrent/include/libtorrent/settings_pack.hpp	/^			active_dht_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
active_downloads	torrent/include/libtorrent/settings_pack.hpp	/^			active_downloads,$/;"	e	enum:libtorrent::settings_pack::int_types
active_duration	torrent/include/libtorrent/torrent_status.hpp	/^		seconds active_duration;$/;"	m	struct:libtorrent::torrent_status
active_limit	torrent/include/libtorrent/settings_pack.hpp	/^			active_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
active_loaded_limit	torrent/include/libtorrent/settings_pack.hpp	/^			active_loaded_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
active_lsd_limit	torrent/include/libtorrent/settings_pack.hpp	/^			active_lsd_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
active_requests	torrent/include/libtorrent/session_status.hpp	/^		std::vector<dht_lookup> active_requests;$/;"	m	struct:libtorrent::session_status
active_seeds	torrent/include/libtorrent/settings_pack.hpp	/^			active_seeds,$/;"	e	enum:libtorrent::settings_pack::int_types
active_socks5	torrent/src/udp_socket.cpp	/^bool udp_socket::active_socks5() const$/;"	f	class:libtorrent::udp_socket
active_time	torrent/include/libtorrent/add_torrent_params.hpp	/^		int active_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
active_time	torrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER active_time = 0;$/;"	m	struct:libtorrent::torrent_status
active_time	torrent/src/torrent.cpp	/^	seconds32 torrent::active_time() const$/;"	f	class:libtorrent::torrent
active_tracker_limit	torrent/include/libtorrent/settings_pack.hpp	/^			active_tracker_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
active_traversals	torrent/kademlia/dht_tracker.cpp	/^		int active_traversals;$/;"	m	struct:libtorrent::dht::__anon151::get_immutable_item_ctx	file:
active_traversals	torrent/kademlia/dht_tracker.cpp	/^		int active_traversals;$/;"	m	struct:libtorrent::dht::__anon151::get_mutable_item_ctx	file:
active_traversals	torrent/kademlia/dht_tracker.cpp	/^		int active_traversals;$/;"	m	struct:libtorrent::dht::__anon151::put_item_ctx	file:
add	torrent/include/libtorrent/aux_/portmap.hpp	/^		none, add, del$/;"	m	class:libtorrent::aux::portmap_action
add	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		void add(socket_type_t const st, peer_class_t const peer_class)$/;"	f	namespace:libtorrent
add	torrent/include/libtorrent/stat.hpp	/^		void add(int count)$/;"	f	class:libtorrent::stat_channel
add	torrent/src/piece_picker.cpp	/^	void piece_picker::add(piece_index_t index)$/;"	f	class:libtorrent::piece_picker
addDisk	include/StoreConfig.h	/^    int (*addDisk)(PYZYGUID diskName, uint64_t size_lba); \/* è¿åå¼ >=0 æåå¼ä¸ºå½åä¸æ   -2 å·²å­å¨,ä¼æ´æ°size  -1å·²æ»¡ æ·»å å¤±è´¥ *\/$/;"	m	struct:_StoreDriver
add_blocks	torrent/src/piece_picker.cpp	/^	int piece_picker::add_blocks(piece_index_t piece$/;"	f	class:libtorrent::piece_picker
add_blocks_downloading	torrent/src/piece_picker.cpp	/^	int piece_picker::add_blocks_downloading(downloading_piece const& dp$/;"	f	class:libtorrent::piece_picker
add_class	torrent/src/peer_class_set.cpp	/^	void peer_class_set::add_class(peer_class_pool& pool, peer_class_t c)$/;"	f	class:libtorrent::peer_class_set
add_collection	torrent/src/create_torrent.cpp	/^	void create_torrent::add_collection(string_view c)$/;"	f	class:libtorrent::create_torrent
add_default_plugins	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr session_flags_t add_default_plugins = 0_bit;$/;"	m	struct:libtorrent::session_handle
add_default_plugins	torrent/src/session_handle.cpp	/^	constexpr session_flags_t session_handle::add_default_plugins;$/;"	m	class:libtorrent::session_handle	file:
add_dht_counters	torrent/kademlia/dht_tracker.cpp	/^	void add_dht_counters(node const& dht, counters& c)$/;"	f	namespace:libtorrent::dht::__anon150
add_dht_node	torrent/src/session_handle.cpp	/^	void session_handle::add_dht_node(std::pair<std::string, int> const& node)$/;"	f	class:libtorrent::session_handle
add_dht_node	torrent/src/session_impl.cpp	/^	void session_impl::add_dht_node(udp::endpoint const& n)$/;"	f	class:libtorrent::aux::session_impl
add_dht_node_name	torrent/src/session_impl.cpp	/^	void session_impl::add_dht_node_name(std::pair<std::string, int> const& node)$/;"	f	class:libtorrent::aux::session_impl
add_dht_router	torrent/src/session_handle.cpp	/^	void session_handle::add_dht_router(std::pair<std::string, int> const& node)$/;"	f	class:libtorrent::session_handle
add_dht_router	torrent/src/session_impl.cpp	/^	void session_impl::add_dht_router(std::pair<std::string, int> const& node)$/;"	f	class:libtorrent::aux::session_impl
add_dirty_block	torrent/src/block_cache.cpp	/^cached_piece_entry* block_cache::add_dirty_block(disk_io_job* j, bool const add_hasher)$/;"	f	class:libtorrent::block_cache
add_download_piece	torrent/src/piece_picker.cpp	/^	piece_picker::add_download_piece(piece_index_t const piece)$/;"	f	class:libtorrent::piece_picker
add_entry	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::add_entry(node_id const& id$/;"	f	class:libtorrent::dht::traversal_algorithm
add_error	torrent/src/stat_cache.cpp	/^	int stat_cache::add_error(error_code const& ec)$/;"	f	class:libtorrent::stat_cache
add_extension	torrent/src/alert_manager.cpp	/^	void alert_manager::add_extension(std::shared_ptr<plugin> ext)$/;"	f	class:libtorrent::alert_manager
add_extension	torrent/src/peer_connection.cpp	/^	void peer_connection::add_extension(std::shared_ptr<peer_plugin> ext)$/;"	f	class:libtorrent::peer_connection
add_extension	torrent/src/peer_connection_handle.cpp	/^void peer_connection_handle::add_extension(std::shared_ptr<peer_plugin> ext)$/;"	f	class:libtorrent::peer_connection_handle
add_extension	torrent/src/session_handle.cpp	/^	void session_handle::add_extension(std::function<std::shared_ptr<torrent_plugin>(torrent_handle const&, void*)> ext)$/;"	f	class:libtorrent::session_handle
add_extension	torrent/src/session_handle.cpp	/^	void session_handle::add_extension(std::shared_ptr<plugin> ext)$/;"	f	class:libtorrent::session_handle
add_extension	torrent/src/session_impl.cpp	/^	void session_impl::add_extension(ext_function_t ext)$/;"	f	class:libtorrent::aux::session_impl
add_extension	torrent/src/torrent.cpp	/^	void torrent::add_extension(std::shared_ptr<torrent_plugin> ext)$/;"	f	class:libtorrent::torrent
add_extension	torrent/src/torrent_handle.cpp	/^	void torrent_handle::add_extension($/;"	f	class:libtorrent::torrent_handle
add_extension_fun	torrent/src/torrent.cpp	/^	void torrent::add_extension_fun(std::function<std::shared_ptr<torrent_plugin>(torrent_handle const&, void*)> const& ext$/;"	f	class:libtorrent::torrent
add_extensions_to_torrent	torrent/src/session_impl.cpp	/^	void session_impl::add_extensions_to_torrent($/;"	f	class:libtorrent::aux::session_impl
add_failed_bytes	torrent/src/torrent.cpp	/^	void torrent::add_failed_bytes(int const b)$/;"	f	class:libtorrent::torrent
add_file	torrent/src/file_storage.cpp	/^	void file_storage::add_file(file_entry const& fe, char const* filehash)$/;"	f	class:libtorrent::file_storage
add_file	torrent/src/file_storage.cpp	/^	void file_storage::add_file(std::string const& path, std::int64_t file_size$/;"	f	class:libtorrent::file_storage
add_file	torrent/src/file_storage.cpp	/^	void file_storage::add_file(std::wstring const& file, std::int64_t file_size$/;"	f	class:libtorrent::file_storage
add_file_borrow	torrent/src/file_storage.cpp	/^	void file_storage::add_file_borrow(char const* filename, int filename_len$/;"	f	class:libtorrent::file_storage
add_file_borrow	torrent/src/file_storage.cpp	/^	void file_storage::add_file_borrow(string_view filename$/;"	f	class:libtorrent::file_storage
add_files	torrent/src/create_torrent.cpp	/^	void add_files(file_storage& fs$/;"	f	namespace:libtorrent
add_files	torrent/src/create_torrent.cpp	/^	void add_files(file_storage& fs, std::string const& file$/;"	f	namespace:libtorrent
add_files	torrent/src/create_torrent.cpp	/^	void add_files(file_storage& fs, std::string const& file, create_flags_t const flags)$/;"	f	namespace:libtorrent
add_files	torrent/src/create_torrent.cpp	/^	void add_files(file_storage& fs, std::wstring const& wfile$/;"	f	namespace:libtorrent
add_files_impl	torrent/src/create_torrent.cpp	/^	void add_files_impl(file_storage& fs, std::string const& p$/;"	f	namespace:libtorrent::__anon134
add_handshake	torrent/include/libtorrent/extensions.hpp	/^		virtual void add_handshake(entry&) {}$/;"	f	struct:libtorrent::peer_plugin
add_headers	torrent/src/web_connection_base.cpp	/^	void web_connection_base::add_headers(std::string& request$/;"	f	class:libtorrent::web_connection_base
add_http_seed	torrent/src/create_torrent.cpp	/^	void create_torrent::add_http_seed(string_view url)$/;"	f	class:libtorrent::create_torrent
add_http_seed	torrent/src/torrent_handle.cpp	/^	void torrent_handle::add_http_seed(std::string const& url) const$/;"	f	class:libtorrent::torrent_handle
add_http_seed	torrent/src/torrent_info.cpp	/^	void torrent_info::add_http_seed(std::string const& url$/;"	f	class:libtorrent::torrent_info
add_i2p_peer	torrent/src/peer_list.cpp	/^	torrent_peer* peer_list::add_i2p_peer(string_view const destination$/;"	f	class:libtorrent::peer_list
add_indent	torrent/src/entry.cpp	/^	void add_indent(std::string& out, int const indent)$/;"	f	namespace:libtorrent::__anon63
add_input_driver	virt-p2v/src/ssh.c	/^add_input_driver (const char *name, size_t len)$/;"	f	file:
add_magnet	torrent/bak/client_test.cpp	/^void add_magnet(lt::session& ses, lt::string_view uri)$/;"	f
add_magnet_uri	torrent/src/magnet_uri.cpp	/^	torrent_handle add_magnet_uri(session& ses, std::string const& uri$/;"	f	namespace:libtorrent
add_magnet_uri_deprecated	torrent/src/magnet_uri.cpp	/^		torrent_handle add_magnet_uri_deprecated(session& ses, std::string const& uri$/;"	f	namespace:libtorrent::__anon60
add_mapping	torrent/src/natpmp.cpp	/^port_mapping_t natpmp::add_mapping(portmap_protocol const p, int const external_port$/;"	f	class:libtorrent::natpmp
add_mapping	torrent/src/upnp.cpp	/^port_mapping_t upnp::add_mapping(portmap_protocol const p, int const external_port$/;"	f	class:libtorrent::upnp
add_merkle_nodes	torrent/src/torrent.cpp	/^	bool torrent::add_merkle_nodes(std::map<int, sha1_hash> const& nodes$/;"	f	class:libtorrent::torrent
add_merkle_nodes	torrent/src/torrent_info.cpp	/^	bool torrent_info::add_merkle_nodes(std::map<int, sha1_hash> const& subtree$/;"	f	class:libtorrent::torrent_info
add_node	torrent/include/libtorrent/torrent_info.hpp	/^		void add_node(std::pair<std::string, int> const& node)$/;"	f	class:libtorrent::torrent_info
add_node	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::add_node(udp::endpoint const& node)$/;"	f	class:libtorrent::dht::dht_tracker
add_node	torrent/kademlia/node.cpp	/^void node::add_node(udp::endpoint const& node)$/;"	f	class:libtorrent::dht::node
add_node	torrent/kademlia/routing_table.cpp	/^bool routing_table::add_node(node_entry const& e)$/;"	f	class:libtorrent::dht::routing_table
add_node	torrent/src/create_torrent.cpp	/^	void create_torrent::add_node(std::pair<std::string, int> node)$/;"	f	class:libtorrent::create_torrent
add_node_impl	torrent/kademlia/routing_table.cpp	/^routing_table::add_node_status_t routing_table::add_node_impl(node_entry e)$/;"	f	class:libtorrent::dht::routing_table
add_node_status_t	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	enum add_node_status_t {$/;"	g	class:libtorrent::dht::routing_table
add_null	virt-p2v/src/kernel-cmdline.c	/^add_null (char ***argv, size_t *lenp)$/;"	f	file:
add_obfuscated_hash	torrent/src/session_impl.cpp	/^	void session_impl::add_obfuscated_hash(sha1_hash const& obfuscated$/;"	f	class:libtorrent::aux::session_impl
add_option	virt-p2v/src/ssh.c	/^add_option (const char *type, char ***drivers, const char *name, size_t len)$/;"	f	file:
add_our_id	torrent/kademlia/rpc_manager.cpp	/^void rpc_manager::add_our_id(entry& e)$/;"	f	class:libtorrent::dht::rpc_manager
add_output_driver	virt-p2v/src/ssh.c	/^add_output_driver (const char *name, size_t len)$/;"	f	file:
add_outstanding_async	torrent/include/libtorrent/debug.hpp	/^	inline void add_outstanding_async(char const* name)$/;"	f	namespace:libtorrent
add_pad_file	torrent/src/file_storage.cpp	/^	void file_storage::add_pad_file(int const size$/;"	f	class:libtorrent::file_storage
add_peer	torrent/src/peer_list.cpp	/^	torrent_peer* peer_list::add_peer(tcp::endpoint const& remote$/;"	f	class:libtorrent::peer_list
add_peer	torrent/src/torrent.cpp	/^	torrent_peer* torrent::add_peer(tcp::endpoint const& adr$/;"	f	class:libtorrent::torrent
add_piece	torrent/include/libtorrent/aux_/suggest_piece.hpp	/^	void add_piece(piece_index_t const index, int const availability$/;"	f	struct:libtorrent::aux::suggest_piece
add_piece	torrent/src/storage_piece_set.cpp	/^	void storage_piece_set::add_piece(cached_piece_entry* p)$/;"	f	class:libtorrent::aux::storage_piece_set
add_piece	torrent/src/torrent.cpp	/^	void torrent::add_piece(piece_index_t const piece, char const* data$/;"	f	class:libtorrent::torrent
add_piece	torrent/src/torrent_handle.cpp	/^	void torrent_handle::add_piece(piece_index_t piece, char const* data, add_piece_flags_t const flags) const$/;"	f	class:libtorrent::torrent_handle
add_port_mapping	torrent/src/session_handle.cpp	/^	std::vector<port_mapping_t> session_handle::add_port_mapping(portmap_protocol const t$/;"	f	class:libtorrent::session_handle
add_port_mapping	torrent/src/session_impl.cpp	/^	std::vector<port_mapping_t> session_impl::add_port_mapping(portmap_protocol const t$/;"	f	class:libtorrent::aux::session_impl
add_qcow2	src/qcow2.c	/^uint64_t add_qcow2(PedDevice *dev, char *name, uint32_t diff, uint64_t sizeLba, uint64_t realLba, uint32_t stype, uint32_t disk_type)$/;"	f
add_read_buffer	torrent/src/utp_stream.cpp	/^void utp_stream::add_read_buffer(void* buf, std::size_t const len)$/;"	f	class:libtorrent::utp_stream
add_redundant_bytes	torrent/src/torrent.cpp	/^	void torrent::add_redundant_bytes(int const b, waste_reason const reason)$/;"	f	class:libtorrent::torrent
add_request	torrent/src/peer_connection.cpp	/^	bool peer_connection::add_request(piece_block const& block$/;"	f	class:libtorrent::peer_connection
add_requests	torrent/kademlia/traversal_algorithm.cpp	/^bool traversal_algorithm::add_requests()$/;"	f	class:libtorrent::dht::traversal_algorithm
add_router_entries	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::add_router_entries()$/;"	f	class:libtorrent::dht::traversal_algorithm
add_router_node	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::add_router_node(udp::endpoint const& node)$/;"	f	class:libtorrent::dht::dht_tracker
add_router_node	torrent/kademlia/node.cpp	/^void node::add_router_node(udp::endpoint const& router)$/;"	f	class:libtorrent::dht::node
add_router_node	torrent/kademlia/routing_table.cpp	/^void routing_table::add_router_node(udp::endpoint const& router)$/;"	f	class:libtorrent::dht::routing_table
add_rule	torrent/include/libtorrent/ip_filter.hpp	/^		void add_rule(Addr first, Addr last, std::uint32_t const flags)$/;"	f	class:libtorrent::detail::filter_impl
add_rule	torrent/src/ip_filter.cpp	/^	void ip_filter::add_rule(address const& first, address const& last, std::uint32_t flags)$/;"	f	class:libtorrent::ip_filter
add_rule	torrent/src/ip_filter.cpp	/^	void port_filter::add_rule(std::uint16_t first, std::uint16_t last, std::uint32_t flags)$/;"	f	class:libtorrent::port_filter
add_sample	torrent/include/libtorrent/sliding_average.hpp	/^	void add_sample(Int s)$/;"	f	struct:libtorrent::sliding_average
add_sample	torrent/src/timestamp_history.cpp	/^std::uint32_t timestamp_history::add_sample(std::uint32_t sample, bool step)$/;"	f	class:libtorrent::timestamp_history
add_ses_extension	torrent/src/session_impl.cpp	/^	void session_impl::add_ses_extension(std::shared_ptr<plugin> ext)$/;"	f	class:libtorrent::aux::session_impl
add_similar_torrent	torrent/src/create_torrent.cpp	/^	void create_torrent::add_similar_torrent(sha1_hash ih)$/;"	f	class:libtorrent::create_torrent
add_stat	torrent/include/libtorrent/stat.hpp	/^		void add_stat(std::int64_t downloaded, std::int64_t uploaded)$/;"	f	class:libtorrent::stat
add_stat	torrent/src/peer_connection.cpp	/^	void peer_connection::add_stat(std::int64_t const downloaded, std::int64_t const uploaded)$/;"	f	class:libtorrent::peer_connection
add_string	virt-p2v/src/kernel-cmdline.c	/^add_string (char ***argv, size_t *lenp, const char *str, size_t len)$/;"	f	file:
add_suffix	torrent/bak/print.hpp	/^template<class T> std::string add_suffix(T val, char const* suffix = nullptr) {$/;"	f
add_suffix_float	qt_pro/uploadwindow.cpp	/^QString add_suffix_float(double val, char const* suffix)$/;"	f
add_suffix_float	src/torrent.cpp	/^std::string add_suffix_float(double val, char const* suffix)$/;"	f
add_suffix_float	torrent/bak/print.cpp	/^std::string add_suffix_float(double val, char const* suffix)$/;"	f
add_suggest_piece	torrent/src/torrent.cpp	/^	void torrent::add_suggest_piece(piece_index_t const index)$/;"	f	class:libtorrent::torrent
add_torrent	torrent/bak/client_test.cpp	/^bool add_torrent(lt::session& ses, std::string torrent)$/;"	f
add_torrent	torrent/src/session_handle.cpp	/^	torrent_handle session_handle::add_torrent($/;"	f	class:libtorrent::session_handle
add_torrent	torrent/src/session_handle.cpp	/^	torrent_handle session_handle::add_torrent(add_torrent_params const& params)$/;"	f	class:libtorrent::session_handle
add_torrent	torrent/src/session_handle.cpp	/^	torrent_handle session_handle::add_torrent(add_torrent_params const& params, error_code& ec)$/;"	f	class:libtorrent::session_handle
add_torrent	torrent/src/session_handle.cpp	/^	torrent_handle session_handle::add_torrent(add_torrent_params&& params)$/;"	f	class:libtorrent::session_handle
add_torrent	torrent/src/session_handle.cpp	/^	torrent_handle session_handle::add_torrent(add_torrent_params&& params, error_code& ec)$/;"	f	class:libtorrent::session_handle
add_torrent	torrent/src/session_impl.cpp	/^	torrent_handle session_impl::add_torrent(add_torrent_params&& params$/;"	f	class:libtorrent::aux::session_impl
add_torrent_alert	torrent/src/alert.cpp	/^	add_torrent_alert::add_torrent_alert(aux::stack_allocator& alloc, torrent_handle const& h$/;"	f	class:libtorrent::add_torrent_alert
add_torrent_impl	torrent/src/session_impl.cpp	/^	session_impl::add_torrent_impl(add_torrent_params& params, error_code& ec)$/;"	f	class:libtorrent::aux::session_impl
add_torrent_params	torrent/include/libtorrent/add_torrent_params.hpp	/^	struct TORRENT_EXPORT add_torrent_params$/;"	s	namespace:libtorrent
add_torrent_params	torrent/src/add_torrent_params.cpp	/^	add_torrent_params::add_torrent_params(storage_constructor_type sc)$/;"	f	class:libtorrent::add_torrent_params
add_tracker	torrent/src/create_torrent.cpp	/^	void create_torrent::add_tracker(string_view url, int const tier)$/;"	f	class:libtorrent::create_torrent
add_tracker	torrent/src/torrent.cpp	/^	bool torrent::add_tracker(announce_entry const& url)$/;"	f	class:libtorrent::torrent
add_tracker	torrent/src/torrent_handle.cpp	/^	void torrent_handle::add_tracker(announce_entry const& url) const$/;"	f	class:libtorrent::torrent_handle
add_tracker	torrent/src/torrent_info.cpp	/^	void torrent_info::add_tracker(std::string const& url, int const tier$/;"	f	class:libtorrent::torrent_info
add_tracker	torrent/src/torrent_info.cpp	/^	void torrent_info::add_tracker(std::string const& url, int const tier)$/;"	f	class:libtorrent::torrent_info
add_traversal_algorithm	torrent/include/libtorrent/kademlia/node.hpp	/^	void add_traversal_algorithm(traversal_algorithm* a)$/;"	f	class:libtorrent::dht::node
add_url_seed	torrent/src/create_torrent.cpp	/^	void create_torrent::add_url_seed(string_view url)$/;"	f	class:libtorrent::create_torrent
add_url_seed	torrent/src/torrent_handle.cpp	/^	void torrent_handle::add_url_seed(std::string const& url) const$/;"	f	class:libtorrent::torrent_handle
add_url_seed	torrent/src/torrent_info.cpp	/^	void torrent_info::add_url_seed(std::string const& url$/;"	f	class:libtorrent::torrent_info
add_v2v_output	virt-p2v/src/gui.c	/^add_v2v_output (gpointer user_data)$/;"	f	file:
add_vote	torrent/src/ip_voter.cpp	/^	bool ip_voter::external_ip_t::add_vote(sha1_hash const& k$/;"	f	class:libtorrent::ip_voter::external_ip_t
add_web_seed	torrent/src/torrent.cpp	/^	web_seed_t* torrent::add_web_seed(std::string const& url$/;"	f	class:libtorrent::torrent
add_write_buffer	torrent/src/utp_stream.cpp	/^void utp_stream::add_write_buffer(void const* buf, std::size_t const len)$/;"	f	class:libtorrent::utp_stream
added	torrent/include/libtorrent/extensions.hpp	/^		virtual void added(session_handle const&) {}$/;"	f	struct:libtorrent::plugin
added	torrent/include/libtorrent/torrent.hpp	/^		void added()$/;"	f	class:libtorrent::torrent
added	torrent/kademlia/dht_storage.cpp	/^		time_point added;$/;"	m	struct:libtorrent::dht::__anon153::peer_entry	file:
added_time	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t added_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
added_time	torrent/include/libtorrent/torrent_status.hpp	/^		std::time_t added_time = 0;$/;"	m	struct:libtorrent::torrent_status
addr	torrent/include/libtorrent/aux_/session_impl.hpp	/^			address addr;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
addr	torrent/include/libtorrent/ip_voter.hpp	/^			address addr;$/;"	m	struct:libtorrent::ip_voter::external_ip_t
addr	torrent/include/libtorrent/kademlia/msg.hpp	/^	udp::endpoint addr;$/;"	m	struct:libtorrent::dht::msg
addr	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	address addr() const { return endpoint.address(); }$/;"	f	struct:libtorrent::dht::node_entry
addr	torrent/include/libtorrent/torrent_handle.hpp	/^		addr_t addr;$/;"	m	struct:libtorrent::block_info
addr	torrent/include/libtorrent/torrent_peer.hpp	/^		address_v4 addr;$/;"	m	struct:libtorrent::ipv4_peer
addr	torrent/include/libtorrent/torrent_peer.hpp	/^		const address_v6::bytes_type addr;$/;"	m	struct:libtorrent::ipv6_peer
addr	torrent/include/libtorrent/union_endpoint.hpp	/^		addr_t addr;$/;"	m	struct:libtorrent::union_address
addr	torrent/include/libtorrent/union_endpoint.hpp	/^		union_address addr;$/;"	m	struct:libtorrent::union_endpoint
addr	torrent/kademlia/dht_storage.cpp	/^		tcp::endpoint addr;$/;"	m	struct:libtorrent::dht::__anon153::peer_entry	file:
addr_t	torrent/include/libtorrent/kademlia/observer.hpp	/^	union addr_t$/;"	u	struct:libtorrent::dht::observer
addr_t	torrent/include/libtorrent/torrent_handle.hpp	/^		union addr_t$/;"	u	struct:libtorrent::block_info
addr_t	torrent/include/libtorrent/union_endpoint.hpp	/^		union addr_t$/;"	u	struct:libtorrent::union_address
address	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<lt::address> address;$/;"	m	namespace:libtorrent
address	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<lt::address> address;$/;"	v
address	torrent/include/libtorrent/union_endpoint.hpp	/^		libtorrent::address address() const { return addr; }$/;"	f	struct:libtorrent::union_endpoint
address	torrent/src/torrent_peer.cpp	/^	libtorrent::address torrent_peer::address() const$/;"	f	class:libtorrent::torrent_peer
address_size	torrent/include/libtorrent/socket_io.hpp	/^		std::size_t address_size(Proto p)$/;"	f	namespace:libtorrent::detail
address_to_bytes	torrent/src/socket_io.cpp	/^	std::string address_to_bytes(address const& a)$/;"	f	namespace:libtorrent
addresses	torrent/include/libtorrent/resolver.hpp	/^		std::vector<address> addresses;$/;"	m	struct:libtorrent::final::dns_cache_entry
addrinuse_peers	torrent/include/libtorrent/performance_counters.hpp	/^			addrinuse_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
adjust_base	torrent/src/timestamp_history.cpp	/^void timestamp_history::adjust_base(int change)$/;"	f	class:libtorrent::timestamp_history
advance_bufs	torrent/src/storage_utils.cpp	/^	span<iovec_t> advance_bufs(span<iovec_t> bufs, int const bytes)$/;"	f	namespace:libtorrent::aux
advance_pos	torrent/src/receive_buffer.cpp	/^int crypto_receive_buffer::advance_pos(int bytes)$/;"	f	class:libtorrent::crypto_receive_buffer
advance_pos	torrent/src/receive_buffer.cpp	/^int receive_buffer::advance_pos(int const bytes)$/;"	f	class:libtorrent::receive_buffer
advapi32	torrent/include/libtorrent/aux_/win_util.hpp	/^	struct advapi32 {$/;"	s	namespace:libtorrent::aux
aggressive_lookups	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool aggressive_lookups = true;$/;"	m	struct:libtorrent::dht::dht_settings
aio_limit_reached	torrent/include/libtorrent/alert_types.hpp	/^			aio_limit_reached,$/;"	e	enum:libtorrent::final::performance_warning_t
aio_max	torrent/include/libtorrent/settings_pack.hpp	/^			aio_max TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
aio_threads	torrent/include/libtorrent/settings_pack.hpp	/^			aio_threads,$/;"	e	enum:libtorrent::settings_pack::int_types
alert	torrent/include/libtorrent/alert.hpp	/^	class TORRENT_EXPORT alert$/;"	c	namespace:libtorrent
alert	torrent/src/alert.cpp	/^	alert::alert() : m_timestamp(clock_type::now()) {}$/;"	f	class:libtorrent::alert
alert_cast	torrent/include/libtorrent/alert.hpp	/^template <class T> T const* alert_cast(alert const* a)$/;"	f	namespace:libtorrent
alert_cast	torrent/include/libtorrent/alert.hpp	/^template <class T> T* alert_cast(alert* a)$/;"	f	namespace:libtorrent
alert_category	torrent/include/libtorrent/alert.hpp	/^namespace alert_category {$/;"	n	namespace:libtorrent
alert_feature	torrent/include/libtorrent/extensions.hpp	/^		static constexpr feature_flags_t alert_feature = 4_bit;$/;"	m	struct:libtorrent::plugin
alert_feature	torrent/src/session.cpp	/^	constexpr feature_flags_t plugin::alert_feature;$/;"	m	class:libtorrent::plugin	file:
alert_manager	torrent/include/libtorrent/alert_manager.hpp	/^	class TORRENT_EXTRA_EXPORT alert_manager$/;"	c	namespace:libtorrent
alert_manager	torrent/src/alert_manager.cpp	/^	alert_manager::alert_manager(int const queue_limit, alert_category_t const alert_mask)$/;"	f	class:libtorrent::alert_manager
alert_mask	torrent/include/libtorrent/settings_pack.hpp	/^			alert_mask,$/;"	e	enum:libtorrent::settings_pack::int_types
alert_name	torrent/src/alert.cpp	/^	char const* alert_name(int const alert_type)$/;"	f	namespace:libtorrent
alert_priority	torrent/include/libtorrent/alert_types.hpp	/^	enum alert_priority$/;"	g	namespace:libtorrent
alert_priority_critical	torrent/include/libtorrent/alert_types.hpp	/^		alert_priority_critical$/;"	e	enum:libtorrent::alert_priority
alert_priority_high	torrent/include/libtorrent/alert_types.hpp	/^		alert_priority_high,$/;"	e	enum:libtorrent::alert_priority
alert_priority_normal	torrent/include/libtorrent/alert_types.hpp	/^		alert_priority_normal = 0,$/;"	e	enum:libtorrent::alert_priority
alert_queue_size	torrent/include/libtorrent/settings_pack.hpp	/^			alert_queue_size,$/;"	e	enum:libtorrent::settings_pack::int_types
alert_type	torrent/include/libtorrent/alert_types.hpp	/^		static const int TORRENT_DEPRECATED_MEMBER alert_type = 0;$/;"	m	struct:libtorrent::torrent_alert
alert_type	torrent/include/libtorrent/alert_types.hpp	/^		static const int TORRENT_DEPRECATED_MEMBER alert_type = 1;$/;"	m	struct:libtorrent::peer_alert
alert_type	torrent/include/libtorrent/alert_types.hpp	/^		static const int TORRENT_DEPRECATED_MEMBER alert_type = 2;$/;"	m	struct:libtorrent::tracker_alert
alert_when_available	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr deadline_flags_t alert_when_available = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
alert_when_available	torrent/src/torrent_handle.cpp	/^	constexpr deadline_flags_t torrent_handle::alert_when_available;$/;"	m	class:libtorrent::torrent_handle	file:
alerts	torrent/src/torrent.cpp	/^	alert_manager& torrent::alerts() const$/;"	f	class:libtorrent::torrent
alerts_dropped_alert	torrent/src/alert.cpp	/^	alerts_dropped_alert::alerts_dropped_alert(aux::stack_allocator&$/;"	f	class:libtorrent::alerts_dropped_alert
algorithm	torrent/include/libtorrent/kademlia/observer.hpp	/^	traversal_algorithm* algorithm() const { return m_algorithm.get(); }$/;"	f	struct:libtorrent::dht::observer
align_expanded_pieces	torrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t align_expanded_pieces = 6_bit;$/;"	m	class:libtorrent::piece_picker
align_expanded_pieces	torrent/src/piece_picker.cpp	/^	constexpr picker_options_t piece_picker::align_expanded_pieces;$/;"	m	class:libtorrent::piece_picker	file:
aligned_storage	torrent/include/libtorrent/aux_/aligned_storage.hpp	/^struct aligned_storage$/;"	s	namespace:libtorrent::aux
aligned_union	torrent/include/libtorrent/aux_/aligned_union.hpp	/^struct aligned_union$/;"	s	namespace:libtorrent::aux
all	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t all = alert_category_t::all();$/;"	m	namespace:libtorrent::alert_category
all	torrent/include/libtorrent/flags.hpp	/^	static constexpr bitfield_flag all()$/;"	f	namespace:libtorrent::flags
all	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t all = torrent_flags_t::all();$/;"	m	namespace:libtorrent::torrent_flags
all_categories	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t all_categories = alert_category_t::all();$/;"	m	class:libtorrent::alert
all_categories	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::all_categories;$/;"	m	class:libtorrent::alert	file:
all_disks	virt-p2v/src/p2v.c	/^char **all_disks;$/;"	v
all_disks	virt-p2v/src/p2v_transform.c	/^char **all_disks;$/;"	v
all_in_same_bucket	torrent/kademlia/routing_table.cpp	/^bool all_in_same_bucket(span<node_entry const> b, node_id const& id, int const bucket_index)$/;"	f	namespace:libtorrent::dht
all_interfaces	virt-p2v/src/p2v.c	/^char **all_interfaces;$/;"	v
all_interfaces	virt-p2v/src/p2v_transform.c	/^char **all_interfaces;$/;"	v
all_path_hashes	torrent/src/file_storage.cpp	/^	void file_storage::all_path_hashes($/;"	f	class:libtorrent::file_storage
all_pieces	torrent/src/block_cache.cpp	/^std::pair<block_cache::const_iterator, block_cache::const_iterator> block_cache::all_pieces() const$/;"	f	class:libtorrent::block_cache
all_pieces	torrent/src/piece_picker.cpp	/^	piece_count piece_picker::all_pieces() const$/;"	f	class:libtorrent::piece_picker
all_removable	virt-p2v/src/p2v.c	/^char **all_removable;$/;"	v
all_removable	virt-p2v/src/p2v_transform.c	/^char **all_removable;$/;"	v
all_time_download	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t all_time_download = 0;$/;"	m	struct:libtorrent::torrent_status
all_time_upload	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t all_time_upload = 0;$/;"	m	struct:libtorrent::torrent_status
all_verified	torrent/include/libtorrent/torrent.hpp	/^		bool all_verified() const$/;"	f	class:libtorrent::torrent
alloc	include/StoreConfig.h	/^    int (*alloc)(uint32_t difLevel, PYZYGUID name, PYZYGUID diskName, uint64_t sizeLba, uint64_t realLba, int type, PYZY_QCOW_ENTRY *ppQe);$/;"	m	struct:_StoreDriver
alloc	torrent/include/libtorrent/packet_pool.hpp	/^		packet_ptr alloc()$/;"	f	struct:libtorrent::packet_slab
alloc	torrent/include/libtorrent/packet_pool.hpp	/^		packet_ptr alloc(int const allocate)$/;"	f	struct:libtorrent::packet_pool
alloc	torrent/src/disk_buffer_holder.cpp	/^		: m_allocator(&alloc), m_buf(buf), m_size(sz), m_ref()$/;"	m	namespace:libtorrent	file:
alloc	torrent/src/disk_buffer_holder.cpp	/^		: m_allocator(&alloc), m_buf(buf), m_size(sz), m_ref(ref)$/;"	m	namespace:libtorrent	file:
alloc	virt-p2v/include/gnulib/windows-rwlock.h	/^          unsigned int alloc; \/* length of allocated array *\/$/;"	m	struct:__anon163
alloc	virt-p2v/include/miniexpect.h	/^  size_t alloc;$/;"	m	struct:mexp_h
alloc	virt-p2v/miniexpect/miniexpect.h	/^  size_t alloc;$/;"	m	struct:mexp_h
alloc_cache_piece	torrent/include/libtorrent/operations.hpp	/^		alloc_cache_piece,$/;"	m	class:libtorrent::operation_t
alloc_recvbuf	torrent/include/libtorrent/operations.hpp	/^		alloc_recvbuf,$/;"	m	class:libtorrent::operation_t
alloc_sndbuf	torrent/include/libtorrent/operations.hpp	/^		alloc_sndbuf,$/;"	m	class:libtorrent::operation_t
alloca_destructor	torrent/include/libtorrent/aux_/alloca.hpp	/^struct alloca_destructor$/;"	s	namespace:libtorrent::aux
allocate	torrent/src/stack_allocator.cpp	/^	allocation_slot stack_allocator::allocate(int const bytes)$/;"	f	class:libtorrent::aux::stack_allocator
allocate_appendix	torrent/src/chained_buffer.cpp	/^	char* chained_buffer::allocate_appendix(int const s)$/;"	f	class:libtorrent::chained_buffer
allocate_buffer	torrent/src/disk_buffer_pool.cpp	/^	char* disk_buffer_pool::allocate_buffer(bool& exceeded$/;"	f	class:libtorrent::disk_buffer_pool
allocate_buffer	torrent/src/disk_buffer_pool.cpp	/^	char* disk_buffer_pool::allocate_buffer(char const* category)$/;"	f	class:libtorrent::disk_buffer_pool
allocate_buffer_impl	torrent/src/disk_buffer_pool.cpp	/^	char* disk_buffer_pool::allocate_buffer_impl(std::unique_lock<std::mutex>& l$/;"	f	class:libtorrent::disk_buffer_pool
allocate_iovec	torrent/src/disk_buffer_pool.cpp	/^	int disk_buffer_pool::allocate_iovec(span<iovec_t> iov)$/;"	f	class:libtorrent::disk_buffer_pool
allocate_job	torrent/src/disk_job_pool.cpp	/^	disk_io_job* disk_job_pool::allocate_job(job_action_t const type)$/;"	f	class:libtorrent::disk_job_pool
allocate_observer	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	std::shared_ptr<T> allocate_observer(Args&&... args)$/;"	f	class:libtorrent::dht::rpc_manager
allocate_observer	torrent/kademlia/rpc_manager.cpp	/^void* rpc_manager::allocate_observer()$/;"	f	class:libtorrent::dht::rpc_manager
allocate_overlapped	torrent/src/file.cpp	/^	int allocate_overlapped(::iovec const* bufs, lt::span<OVERLAPPED> ol$/;"	f	namespace:__anon80
allocate_peer_entry	torrent/src/torrent_peer_allocator.cpp	/^	torrent_peer* torrent_peer_allocator::allocate_peer_entry(int type)$/;"	f	class:libtorrent::torrent_peer_allocator
allocate_piece	torrent/src/block_cache.cpp	/^cached_piece_entry* block_cache::allocate_piece(disk_io_job const* j, std::uint16_t const cache_state)$/;"	f	class:libtorrent::block_cache
allocate_size	torrent/include/libtorrent/packet_pool.hpp	/^		int const allocate_size;$/;"	m	struct:libtorrent::packet_slab
allocate_slot	torrent/src/part_file.cpp	/^	slot_index_t part_file::allocate_slot(piece_index_t const piece)$/;"	f	class:libtorrent::part_file
allocate_string_copy	torrent/src/string_util.cpp	/^	char* allocate_string_copy(string_view str)$/;"	f	namespace:libtorrent
allocated	torrent/include/libtorrent/packet_pool.hpp	/^		std::uint16_t allocated;$/;"	m	struct:libtorrent::packet
allocating	torrent/include/libtorrent/torrent_status.hpp	/^			allocating,$/;"	e	enum:libtorrent::torrent_status::state_t
allocating_handler	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		allocating_handler($/;"	f	struct:libtorrent::aux::allocating_handler
allocating_handler	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^	struct allocating_handler$/;"	s	namespace:libtorrent::aux
allocation	virt-p2v/include/p2v-config.h	/^  enum output_allocation allocation;$/;"	m	struct:output_config	typeref:enum:output_config::output_allocation
allocation_mode	torrent/bak/client_test.cpp	/^lt::storage_mode_t allocation_mode = lt::storage_mode_sparse;$/;"	v
allocation_size	torrent/kademlia/rpc_manager.cpp	/^size_t rpc_manager::allocation_size() const$/;"	f	class:libtorrent::dht::rpc_manager
allocation_slot	torrent/include/libtorrent/stack_allocator.hpp	/^	struct allocation_slot$/;"	s	namespace:libtorrent::aux
allow	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		void allow(socket_type_t const st, peer_class_t const peer_class)$/;"	f	namespace:libtorrent
allow_ghost	torrent/include/libtorrent/block_cache.hpp	/^			allow_ghost,$/;"	e	enum:libtorrent::block_cache::eviction_mode
allow_i2p_mixed	torrent/include/libtorrent/settings_pack.hpp	/^			allow_i2p_mixed,$/;"	e	enum:libtorrent::settings_pack::bool_types
allow_multiple_connections_per_ip	torrent/include/libtorrent/peer_list.hpp	/^		bool allow_multiple_connections_per_ip = false;$/;"	m	struct:libtorrent::torrent_state
allow_multiple_connections_per_ip	torrent/include/libtorrent/settings_pack.hpp	/^			allow_multiple_connections_per_ip = bool_type_base,$/;"	e	enum:libtorrent::settings_pack::bool_types
allow_partial_disk_writes	torrent/include/libtorrent/settings_pack.hpp	/^			allow_partial_disk_writes,$/;"	e	enum:libtorrent::settings_pack::bool_types
allowed_enc_level	torrent/include/libtorrent/session_settings.hpp	/^		std::uint8_t allowed_enc_level;$/;"	m	struct:libtorrent::pe_settings
allowed_enc_level	torrent/include/libtorrent/settings_pack.hpp	/^			allowed_enc_level,$/;"	e	enum:libtorrent::settings_pack::int_types
allowed_fast	torrent/bak/connection_tester.cpp	/^	std::vector<piece_index_t> allowed_fast;$/;"	m	struct:peer_conn	file:
allowed_fast	torrent/src/peer_connection.cpp	/^	std::vector<piece_index_t> const& peer_connection::allowed_fast()$/;"	f	class:libtorrent::std::peer_connection
allowed_fast_set_size	torrent/include/libtorrent/settings_pack.hpp	/^			allowed_fast_set_size,$/;"	e	enum:libtorrent::settings_pack::int_types
allowed_upload_slots	torrent/include/libtorrent/session_status.hpp	/^		int allowed_upload_slots;$/;"	m	struct:libtorrent::session_status
alternate_header_lba	include/gpt.h	/^    uint64_t  alternate_header_lba;$/;"	m	struct:__anon6
always_replace_files	torrent/include/libtorrent/storage_defs.hpp	/^		always_replace_files TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::deprecated_move_flags_t
always_replace_files	torrent/include/libtorrent/storage_defs.hpp	/^		always_replace_files,$/;"	m	class:libtorrent::move_flags_t
always_send_user_agent	torrent/include/libtorrent/settings_pack.hpp	/^			always_send_user_agent,$/;"	e	enum:libtorrent::settings_pack::bool_types
am__DIST_COMMON	torrent/include/libtorrent/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in$/;"	m
am__aclocal_m4_deps	torrent/include/libtorrent/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/m4\/ax_boost_base.m4 \\$/;"	m
am__base_list	torrent/include/libtorrent/Makefile	/^am__base_list = \\$/;"	m
am__can_run_installinfo	torrent/include/libtorrent/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	torrent/include/libtorrent/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	torrent/include/libtorrent/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	torrent/include/libtorrent/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__include	torrent/include/libtorrent/Makefile	/^am__include = include$/;"	m
am__install_max	torrent/include/libtorrent/Makefile	/^am__install_max = 40$/;"	m
am__installdirs	torrent/include/libtorrent/Makefile	/^am__installdirs = "$(DESTDIR)$(includedir)"$/;"	m
am__is_gnu_make	torrent/include/libtorrent/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	torrent/include/libtorrent/Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	torrent/include/libtorrent/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	torrent/include/libtorrent/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	torrent/include/libtorrent/Makefile	/^am__make_running_with_option = \\$/;"	m
am__nobase_list	torrent/include/libtorrent/Makefile	/^am__nobase_list = $(am__nobase_strip_setup); \\$/;"	m
am__nobase_strip	torrent/include/libtorrent/Makefile	/^am__nobase_strip = \\$/;"	m
am__nobase_strip_setup	torrent/include/libtorrent/Makefile	/^am__nobase_strip_setup = \\$/;"	m
am__quote	torrent/include/libtorrent/Makefile	/^am__quote = $/;"	m
am__strip_dir	torrent/include/libtorrent/Makefile	/^am__strip_dir = f=`echo $$p | sed -e 's|^.*\/||'`;$/;"	m
am__tagged_files	torrent/include/libtorrent/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	torrent/include/libtorrent/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uninstall_files_from_dir	torrent/include/libtorrent/Makefile	/^am__uninstall_files_from_dir = { \\$/;"	m
am__uniquify_input	torrent/include/libtorrent/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	torrent/include/libtorrent/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_GEN_	torrent/include/libtorrent/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	torrent/include/libtorrent/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	torrent/include/libtorrent/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	torrent/include/libtorrent/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	torrent/include/libtorrent/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	torrent/include/libtorrent/Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	torrent/include/libtorrent/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	torrent/include/libtorrent/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	torrent/include/libtorrent/Makefile	/^am__v_at_1 = $/;"	m
am__vpath_adj	torrent/include/libtorrent/Makefile	/^am__vpath_adj = case $$p in \\$/;"	m
am__vpath_adj_setup	torrent/include/libtorrent/Makefile	/^am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;$/;"	m
announce	torrent/include/libtorrent/kademlia/announce_flags.hpp	/^namespace announce {$/;"	n	namespace:libtorrent::dht
announce	torrent/include/libtorrent/udp_tracker_connection.hpp	/^			announce,$/;"	m	class:libtorrent::udp_tracker_connection::action_t
announce	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::announce(sha1_hash const& ih, int listen_port$/;"	f	class:libtorrent::dht::dht_tracker
announce	torrent/kademlia/node.cpp	/^void node::announce(sha1_hash const& info_hash, int listen_port, announce_flags_t const flags$/;"	f	class:libtorrent::dht::node
announce	torrent/src/lsd.cpp	/^void lsd::announce(sha1_hash const& ih, int listen_port)$/;"	f	class:libtorrent::lsd
announce	torrent/src/session_impl.cpp	/^	void session_impl::announce(sha1_hash const& ih, address const& addr$/;"	f	class:libtorrent::aux::session_impl
announce_crypto_support	torrent/include/libtorrent/settings_pack.hpp	/^			announce_crypto_support,$/;"	e	enum:libtorrent::settings_pack::bool_types
announce_double_nat	torrent/include/libtorrent/settings_pack.hpp	/^			announce_double_nat TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
announce_endpoint	torrent/include/libtorrent/announce_entry.hpp	/^	struct TORRENT_EXPORT announce_endpoint$/;"	s	namespace:libtorrent
announce_endpoint	torrent/src/announce_entry.cpp	/^	announce_endpoint::announce_endpoint(aux::listen_socket_handle const& s, bool const completed)$/;"	f	class:libtorrent::announce_endpoint
announce_entry	torrent/include/libtorrent/announce_entry.hpp	/^	struct TORRENT_EXPORT announce_entry$/;"	s	namespace:libtorrent
announce_entry	torrent/src/announce_entry.cpp	/^	announce_entry::announce_entry()$/;"	f	class:libtorrent::announce_entry
announce_entry	torrent/src/announce_entry.cpp	/^	announce_entry::announce_entry(string_view u)$/;"	f	class:libtorrent::announce_entry
announce_fun	torrent/kademlia/node.cpp	/^	void announce_fun(std::vector<std::pair<node_entry, std::string>> const& v$/;"	f	namespace:libtorrent::dht::__anon148
announce_impl	torrent/src/lsd.cpp	/^void lsd::announce_impl(sha1_hash const& ih, int const listen_port$/;"	f	class:libtorrent::lsd
announce_interval	torrent/include/libtorrent/torrent_status.hpp	/^		time_duration TORRENT_DEPRECATED_MEMBER announce_interval;$/;"	m	struct:libtorrent::torrent_status
announce_interval	torrent/kademlia/dht_storage.cpp	/^	constexpr time_duration announce_interval = minutes(30);$/;"	m	namespace:libtorrent::dht::__anon153	file:
announce_ip	torrent/include/libtorrent/settings_pack.hpp	/^			announce_ip,$/;"	e	enum:libtorrent::settings_pack::string_types
announce_lsd	torrent/src/session_impl.cpp	/^	void session_impl::announce_lsd(sha1_hash const& ih, int port)$/;"	f	class:libtorrent::aux::session_impl
announce_observer	torrent/include/libtorrent/kademlia/node.hpp	/^	announce_observer(std::shared_ptr<traversal_algorithm> algo$/;"	f	class:libtorrent::dht::announce_observer
announce_observer	torrent/include/libtorrent/kademlia/node.hpp	/^class announce_observer : public observer$/;"	c	namespace:libtorrent::dht
announce_piece	torrent/src/peer_connection.cpp	/^	void peer_connection::announce_piece(piece_index_t const index)$/;"	f	class:libtorrent::peer_connection
announce_request	torrent/include/libtorrent/tracker_manager.hpp	/^			announce_request = 0,$/;"	e	enum:libtorrent::tracker_request::kind_t
announce_state	torrent/src/torrent.cpp	/^			explicit announce_state(aux::listen_socket_handle const& s)$/;"	f	struct:libtorrent::__anon105::announce_state
announce_state	torrent/src/torrent.cpp	/^		struct announce_state$/;"	s	namespace:libtorrent::__anon105	file:
announce_to_all_tiers	torrent/include/libtorrent/settings_pack.hpp	/^			announce_to_all_tiers,$/;"	e	enum:libtorrent::settings_pack::bool_types
announce_to_all_trackers	torrent/include/libtorrent/settings_pack.hpp	/^			announce_to_all_trackers,$/;"	e	enum:libtorrent::settings_pack::bool_types
announce_with_tracker	torrent/src/torrent.cpp	/^	void torrent::announce_with_tracker(std::uint8_t e)$/;"	f	class:libtorrent::torrent
announcing_to_dht	torrent/include/libtorrent/torrent_status.hpp	/^		bool announcing_to_dht = false;$/;"	m	struct:libtorrent::torrent_status
announcing_to_lsd	torrent/include/libtorrent/torrent_status.hpp	/^		bool announcing_to_lsd = false;$/;"	m	struct:libtorrent::torrent_status
announcing_to_trackers	torrent/include/libtorrent/torrent_status.hpp	/^		bool announcing_to_trackers = false;$/;"	m	struct:libtorrent::torrent_status
anonymous_mode	torrent/include/libtorrent/settings_pack.hpp	/^			anonymous_mode,$/;"	e	enum:libtorrent::settings_pack::bool_types
anonymous_mode_alert	torrent/src/alert.cpp	/^	anonymous_mode_alert::anonymous_mode_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::anonymous_mode_alert
ansi_blue	virt-p2v/include/guestfs-utils.h	69;"	d
ansi_blue	virt-p2v/libguestfs/guestfs-utils.h	69;"	d
ansi_green	virt-p2v/include/guestfs-utils.h	59;"	d
ansi_green	virt-p2v/libguestfs/guestfs-utils.h	59;"	d
ansi_magenta	virt-p2v/include/guestfs-utils.h	74;"	d
ansi_magenta	virt-p2v/libguestfs/guestfs-utils.h	74;"	d
ansi_red	virt-p2v/include/guestfs-utils.h	64;"	d
ansi_red	virt-p2v/libguestfs/guestfs-utils.h	64;"	d
ansi_restore	virt-p2v/include/guestfs-utils.h	79;"	d
ansi_restore	virt-p2v/libguestfs/guestfs-utils.h	79;"	d
anti_leech_score	torrent/src/choker.cpp	/^	int anti_leech_score(peer_connection const* peer)$/;"	f	namespace:libtorrent::__anon91
any_count	torrent/include/libtorrent/aux_/route.h	/^	int	any_count;$/;"	m	struct:route_cb
any_torrent_has_peer	torrent/src/session_impl.cpp	/^	bool session_impl::any_torrent_has_peer(peer_connection const* p) const$/;"	f	class:libtorrent::aux::session_impl
apic	virt-p2v/include/p2v-config.h	/^  bool apic;$/;"	m	struct:cpu_config
append	torrent/include/libtorrent/tailqueue.hpp	/^		void append(tailqueue<T>& rhs)$/;"	f	struct:libtorrent::tailqueue
append	torrent/src/chained_buffer.cpp	/^	char* chained_buffer::append(span<char const> buf)$/;"	f	class:libtorrent::chained_buffer
append_blocks	torrent/src/piece_picker.cpp	/^		int append_blocks(std::vector<piece_block>& dst, std::vector<piece_block>& src$/;"	f	namespace:libtorrent::__anon133
append_buffer	torrent/include/libtorrent/chained_buffer.hpp	/^		void append_buffer(Holder buffer, int used_size)$/;"	f	namespace:libtorrent
append_const_send_buffer	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void append_const_send_buffer(Holder holder, int size)$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
append_path	torrent/src/path.cpp	/^	void append_path(std::string& branch, string_view leaf)$/;"	f	namespace:libtorrent
append_send_buffer	torrent/include/libtorrent/peer_connection.hpp	/^		void append_send_buffer(Holder buffer, int size)$/;"	f	class:libtorrent::peer_connection
apply	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		std::uint32_t apply(socket_type_t const st, std::uint32_t peer_class_mask)$/;"	f	namespace:libtorrent
apply	torrent/src/sha1.cpp	/^		static u32 apply(CHAR64LONG16* block, int i)$/;"	f	struct:libtorrent::__anon103::big_endian_blk0
apply	torrent/src/sha1.cpp	/^		static u32 apply(CHAR64LONG16* block, int i)$/;"	f	struct:libtorrent::__anon103::little_endian_blk0
apply_ansi_code	torrent/bak/print.cpp	/^void apply_ansi_code(WORD* attributes, bool* reverse, bool* support_chaining, int code)$/;"	f
apply_flag	torrent/src/read_resume_data.cpp	/^	void apply_flag(torrent_flags_t& current_flags$/;"	f	namespace:libtorrent::__anon116
apply_ip_filter	torrent/include/libtorrent/torrent.hpp	/^		bool apply_ip_filter() const { return m_apply_ip_filter; }$/;"	f	class:libtorrent::torrent
apply_ip_filter	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t apply_ip_filter = 3_bit;$/;"	m	namespace:libtorrent::torrent_flags
apply_ip_filter	torrent/src/peer_list.cpp	/^	void peer_list::apply_ip_filter(ip_filter const& filter$/;"	f	class:libtorrent::peer_list
apply_ip_filter	torrent/src/torrent_handle.cpp	/^	void torrent_handle::apply_ip_filter(bool b) const$/;"	f	class:libtorrent::torrent_handle
apply_ip_filter_to_trackers	torrent/include/libtorrent/settings_pack.hpp	/^			apply_ip_filter_to_trackers,$/;"	e	enum:libtorrent::settings_pack::bool_types
apply_mask	torrent/src/torrent_peer.cpp	/^		void apply_mask(std::uint8_t* b, std::uint8_t const* mask, int size)$/;"	f	namespace:libtorrent::__anon84
apply_pack	torrent/src/settings_pack.cpp	/^	void apply_pack(settings_pack const* pack, aux::session_settings& sett$/;"	f	namespace:libtorrent
apply_pack_impl	torrent/src/settings_pack.cpp	/^	void apply_pack_impl(settings_pack const* pack, aux::session_settings_single_thread& sett$/;"	f	namespace:libtorrent
apply_pointer_offset	torrent/src/file_storage.cpp	/^	void file_storage::apply_pointer_offset(std::ptrdiff_t const off)$/;"	f	class:libtorrent::file_storage
apply_port_filter	torrent/src/peer_list.cpp	/^	void peer_list::apply_port_filter(port_filter const& filter$/;"	f	class:libtorrent::peer_list
apply_settings	torrent/src/session_handle.cpp	/^	void session_handle::apply_settings(settings_pack const& s)$/;"	f	class:libtorrent::session_handle
apply_settings	torrent/src/session_handle.cpp	/^	void session_handle::apply_settings(settings_pack&& s)$/;"	f	class:libtorrent::session_handle
apply_settings_pack	torrent/src/session_impl.cpp	/^	void session_impl::apply_settings_pack(std::shared_ptr<settings_pack> pack)$/;"	f	class:libtorrent::aux::session_impl
apply_settings_pack_impl	torrent/src/session_impl.cpp	/^	void session_impl::apply_settings_pack_impl(settings_pack const& pack)$/;"	f	class:libtorrent::aux::session_impl
arc_mfu_ghost_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_mfu_ghost_size;$/;"	m	struct:libtorrent::cache_status
arc_mfu_ghost_size	torrent/include/libtorrent/performance_counters.hpp	/^			arc_mfu_ghost_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_mfu_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_mfu_size;$/;"	m	struct:libtorrent::cache_status
arc_mfu_size	torrent/include/libtorrent/performance_counters.hpp	/^			arc_mfu_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_mru_ghost_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_mru_ghost_size;$/;"	m	struct:libtorrent::cache_status
arc_mru_ghost_size	torrent/include/libtorrent/performance_counters.hpp	/^			arc_mru_ghost_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_mru_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_mru_size;$/;"	m	struct:libtorrent::cache_status
arc_mru_size	torrent/include/libtorrent/performance_counters.hpp	/^			arc_mru_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_volatile_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_volatile_size;$/;"	m	struct:libtorrent::cache_status
arc_volatile_size	torrent/include/libtorrent/performance_counters.hpp	/^			arc_volatile_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
arc_write_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int arc_write_size;$/;"	m	struct:libtorrent::cache_status
arc_write_size	torrent/include/libtorrent/performance_counters.hpp	/^			arc_write_size,$/;"	e	enum:libtorrent::counters::stats_gauge_t
are_files_checked	torrent/include/libtorrent/torrent.hpp	/^		bool are_files_checked() const$/;"	f	class:libtorrent::torrent
argument	torrent/include/libtorrent/disk_io_job.hpp	/^			> argument;$/;"	m	struct:libtorrent::disk_io_job
arm_crc32c_support	torrent/src/cpuid.cpp	/^	bool const arm_crc32c_support = supports_arm_crc32c();$/;"	m	namespace:libtorrent::aux	file:
arm_neon_support	torrent/src/cpuid.cpp	/^	bool const arm_neon_support = supports_arm_neon();$/;"	m	namespace:libtorrent::aux	file:
array	virt-p2v/include/gnulib/windows-rwlock.h	/^          HANDLE *array; \/* array of waiting threads, each represented by an event *\/$/;"	m	struct:__anon163
arrow_down	torrent/bak/torrent_view.cpp	/^void torrent_view::arrow_down()$/;"	f	class:torrent_view
arrow_up	torrent/bak/torrent_view.cpp	/^void torrent_view::arrow_up()$/;"	f	class:torrent_view
artificial_jobs	torrent/include/libtorrent/block_cache.hpp	/^		enum artificial_jobs$/;"	g	struct:libtorrent::piece_log_t
as_for_ip	torrent/src/session_handle.cpp	/^	int session_handle::as_for_ip(address const&)$/;"	f	class:libtorrent::session_handle
asio	torrent/include/libtorrent/aux_/session_interface.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	torrent/include/libtorrent/http_connection.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	torrent/include/libtorrent/io_service_fwd.hpp	/^namespace sim { namespace asio {$/;"	n	namespace:sim
asio	torrent/include/libtorrent/torrent.hpp	/^namespace asio {$/;"	n	namespace:boost
asio	torrent/include/libtorrent/tracker_manager.hpp	/^namespace asio {$/;"	n	namespace:boost
asio_handler_allocate	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		friend void* asio_handler_allocate($/;"	f	struct:libtorrent::aux::allocating_handler
asio_handler_allocate	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^	friend void* asio_handler_allocate($/;"	f	struct:libtorrent::aux::handler_wrapper
asio_handler_deallocate	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		friend void asio_handler_deallocate($/;"	f	struct:libtorrent::aux::allocating_handler
asio_handler_deallocate	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^	friend void asio_handler_deallocate($/;"	f	struct:libtorrent::aux::handler_wrapper
assert_fail	torrent/src/assert.cpp	/^TORRENT_EXPORT void assert_fail(char const* expr, int line$/;"	f	namespace:libtorrent::libtorrent
assert_print	torrent/src/assert.cpp	/^TORRENT_EXPORT void assert_print(char const* fmt, ...)$/;"	f	namespace:libtorrent::libtorrent
assert_print_piece	torrent/src/block_cache.cpp	/^	void assert_print_piece(cached_piece_entry const* pe)$/;"	f	namespace:libtorrent
assign	torrent/include/libtorrent/bitfield.hpp	/^		void assign(char const* b, int const bits)$/;"	f	struct:libtorrent::bitfield
assign	torrent/kademlia/item.cpp	/^bool item::assign(bdecode_node const& v, span<char const> salt$/;"	f	class:libtorrent::dht::item
assign	torrent/kademlia/item.cpp	/^void item::assign(bdecode_node const& v)$/;"	f	class:libtorrent::dht::item
assign	torrent/kademlia/item.cpp	/^void item::assign(entry v)$/;"	f	class:libtorrent::dht::item
assign	torrent/kademlia/item.cpp	/^void item::assign(entry v, span<char const> salt$/;"	f	class:libtorrent::dht::item
assign_bandwidth	torrent/src/bandwidth_queue_entry.cpp	/^	int bw_request::assign_bandwidth()$/;"	f	class:libtorrent::bw_request
assign_bandwidth	torrent/src/peer_connection.cpp	/^	void peer_connection::assign_bandwidth(int const channel, int const amount)$/;"	f	class:libtorrent::peer_connection
assign_bits	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         void assign_bits(Backend& val, Unsigned bits, unsigned bit_location, unsigned chunk_bits, const mpl::false_& tag)$/;"	f	namespace:boost::multiprecision::detail
assign_bits	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         void assign_bits(Backend& val, Unsigned bits, unsigned bit_location, unsigned chunk_bits, const mpl::true_&)$/;"	f	namespace:boost::multiprecision::detail
assign_setting	torrent/bak/client_test.cpp	/^void assign_setting(lt::settings_pack& settings, std::string const& key, char const* value)$/;"	f
assigned	torrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	int assigned;$/;"	m	struct:libtorrent::bw_request
associated_torrent	torrent/include/libtorrent/peer_connection.hpp	/^		std::weak_ptr<torrent> associated_torrent() const$/;"	f	class:libtorrent::peer_connection
associated_torrent	torrent/src/peer_connection_handle.cpp	/^torrent_handle peer_connection_handle::associated_torrent() const$/;"	f	class:libtorrent::peer_connection_handle
assume	virt-p2v/include/gnulib/verify.h	286;"	d
assume	virt-p2v/include/gnulib/verify.h	288;"	d
assume	virt-p2v/include/gnulib/verify.h	293;"	d
assume	virt-p2v/include/gnulib/verify.h	296;"	d
assure	virt-p2v/include/gnulib/assure.h	32;"	d
assure	virt-p2v/include/gnulib/assure.h	34;"	d
async_accept	torrent/src/session_impl.cpp	/^	void session_impl::async_accept(std::shared_ptr<tcp::acceptor> const& listener$/;"	f	class:libtorrent::aux::session_impl
async_accept_handshake	torrent/include/libtorrent/ssl_stream.hpp	/^	void async_accept_handshake(Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_add_torrent	torrent/src/session_handle.cpp	/^	void session_handle::async_add_torrent(add_torrent_params const& params)$/;"	f	class:libtorrent::session_handle
async_add_torrent	torrent/src/session_handle.cpp	/^	void session_handle::async_add_torrent(add_torrent_params&& params)$/;"	f	class:libtorrent::session_handle
async_add_torrent	torrent/src/session_impl.cpp	/^	void session_impl::async_add_torrent(add_torrent_params* params)$/;"	f	class:libtorrent::aux::session_impl
async_call	torrent/src/session_handle.cpp	/^	void session_handle::async_call(Fun f, Args&&... a) const$/;"	f	class:libtorrent::session_handle
async_call	torrent/src/torrent_handle.cpp	/^	void torrent_handle::async_call(Fun f, Args&&... a) const$/;"	f	class:libtorrent::torrent_handle
async_connect	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	struct:libtorrent::aux::socket_type
async_connect	torrent/include/libtorrent/http_stream.hpp	/^	void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	class:libtorrent::http_stream
async_connect	torrent/include/libtorrent/i2p_stream.hpp	/^	void async_connect(endpoint_type const&, Handler const& handler)$/;"	f	class:libtorrent::i2p_stream
async_connect	torrent/include/libtorrent/socks5_stream.hpp	/^	void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	class:libtorrent::socks5_stream
async_connect	torrent/include/libtorrent/ssl_stream.hpp	/^	void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_connect	torrent/include/libtorrent/utp_stream.hpp	/^	void async_connect(endpoint_type const& endpoint, Handler const& handler)$/;"	f	struct:libtorrent::utp_stream
async_dec_threads	torrent/include/libtorrent/debug.hpp	/^	inline void async_dec_threads()$/;"	f	namespace:libtorrent
async_inc_threads	torrent/include/libtorrent/debug.hpp	/^	inline void async_inc_threads()$/;"	f	namespace:libtorrent
async_name_lookup	torrent/src/i2p_stream.cpp	/^	void i2p_connection::async_name_lookup(char const* name$/;"	f	class:libtorrent::i2p_connection
async_read	torrent/include/libtorrent/udp_socket.hpp	/^		void async_read(Handler&& h)$/;"	f	class:libtorrent::udp_socket
async_read_some	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void async_read_some(Mutable_Buffers const& buffers, Handler const& handler)$/;"	f	struct:libtorrent::aux::socket_type
async_read_some	torrent/include/libtorrent/proxy_base.hpp	/^	void async_read_some(Mutable_Buffers const& buffers, Handler const& handler)$/;"	f	class:libtorrent::proxy_base
async_read_some	torrent/include/libtorrent/ssl_stream.hpp	/^	void async_read_some(Mutable_Buffers const& buffers, Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_read_some	torrent/include/libtorrent/utp_stream.hpp	/^	void async_read_some(Mutable_Buffers const& buffers, Handler const& handler)$/;"	f	struct:libtorrent::utp_stream
async_read_some	torrent/include/libtorrent/utp_stream.hpp	/^	void async_read_some(null_buffers const&, Handler const& handler)$/;"	f	struct:libtorrent::utp_stream
async_resolve	torrent/src/resolver.cpp	/^	void resolver::async_resolve(std::string const& host, resolver_flags const flags$/;"	f	class:libtorrent::resolver
async_shutdown	torrent/include/libtorrent/ssl_stream.hpp	/^	void async_shutdown(Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_shutdown	torrent/src/socket_type.cpp	/^	void async_shutdown(socket_type& s, std::shared_ptr<void> holder)$/;"	f	namespace:libtorrent::aux
async_t	torrent/include/libtorrent/debug.hpp	/^		async_t() : refs(0) {}$/;"	f	struct:libtorrent::async_t
async_t	torrent/include/libtorrent/debug.hpp	/^	struct async_t$/;"	s	namespace:libtorrent
async_write	torrent/include/libtorrent/udp_socket.hpp	/^		void async_write(Handler&& h)$/;"	f	class:libtorrent::udp_socket
async_write_some	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void async_write_some(Const_Buffers const& buffers, Handler const& handler)$/;"	f	struct:libtorrent::aux::socket_type
async_write_some	torrent/include/libtorrent/proxy_base.hpp	/^	void async_write_some(Const_Buffers const& buffers, Handler const& handler)$/;"	f	class:libtorrent::proxy_base
async_write_some	torrent/include/libtorrent/ssl_stream.hpp	/^	void async_write_some(Const_Buffers const& buffers, Handler const& handler)$/;"	f	class:libtorrent::ssl_stream
async_write_some	torrent/include/libtorrent/utp_stream.hpp	/^	void async_write_some(Const_Buffers const& buffers, Handler const& handler)$/;"	f	struct:libtorrent::utp_stream
at	torrent/src/file_storage.cpp	/^	file_entry file_storage::at(file_storage::iterator i) const$/;"	f	class:libtorrent::file_storage
at	torrent/src/file_storage.cpp	/^	file_entry file_storage::at(int index) const$/;"	f	class:libtorrent::file_storage
at	torrent/src/packet_buffer.cpp	/^	packet* packet_buffer::at(index_type idx) const$/;"	f	class:libtorrent::packet_buffer
at	torrent/src/peer_class.cpp	/^	peer_class const* peer_class_pool::at(peer_class_t c) const$/;"	f	class:libtorrent::peer_class_pool
at	torrent/src/peer_class.cpp	/^	peer_class* peer_class_pool::at(peer_class_t c)$/;"	f	class:libtorrent::peer_class_pool
at_deprecated	torrent/src/file_storage.cpp	/^	file_entry file_storage::at_deprecated(int index) const$/;"	f	class:libtorrent::file_storage
atime	torrent/include/libtorrent/aux_/path.hpp	/^		std::uint64_t atime = 0;$/;"	m	struct:libtorrent::file_status
atoll	virt-p2v/include/gnulib/stdlib.h	675;"	d
attach_peer	torrent/src/torrent.cpp	/^	bool torrent::attach_peer(peer_connection* p) try$/;"	f	class:libtorrent::torrent
attach_to_torrent	torrent/src/peer_connection.cpp	/^	void peer_connection::attach_to_torrent(sha1_hash const& ih)$/;"	f	class:libtorrent::peer_connection
attribute	virt-p2v/include/libxml2-writer-macros.h	122;"	d
attribute	virt-p2v/libguestfs/libxml2-writer-macros.h	122;"	d
attribute_executable	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t attribute_executable = 8_bit;$/;"	m	namespace:libtorrent::open_mode
attribute_executable	torrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t TORRENT_DEPRECATED_MEMBER attribute_executable = 2_bit;$/;"	m	class:libtorrent::file_storage
attribute_executable	torrent/src/file_storage.cpp	/^	constexpr file_flags_t file_storage::attribute_executable;$/;"	m	class:libtorrent::file_storage	file:
attribute_format	virt-p2v/include/libxml2-writer-macros.h	130;"	d
attribute_format	virt-p2v/libguestfs/libxml2-writer-macros.h	130;"	d
attribute_hidden	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t attribute_hidden = 7_bit;$/;"	m	namespace:libtorrent::open_mode
attribute_hidden	torrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t TORRENT_DEPRECATED_MEMBER attribute_hidden = 1_bit;$/;"	m	class:libtorrent::file_storage
attribute_hidden	torrent/src/file_storage.cpp	/^	constexpr file_flags_t file_storage::attribute_hidden;$/;"	m	class:libtorrent::file_storage	file:
attribute_mask	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t attribute_mask = attribute_hidden | attribute_executable;$/;"	m	namespace:libtorrent::open_mode
attribute_ns	virt-p2v/include/libxml2-writer-macros.h	142;"	d
attribute_ns	virt-p2v/libguestfs/libxml2-writer-macros.h	142;"	d
attribute_symlink	torrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t TORRENT_DEPRECATED_MEMBER attribute_symlink = 3_bit;$/;"	m	class:libtorrent::file_storage
attribute_symlink	torrent/src/file_storage.cpp	/^	constexpr file_flags_t file_storage::attribute_symlink;$/;"	m	class:libtorrent::file_storage	file:
attributes	include/gpt.h	/^    uint64_t  attributes;$/;"	m	struct:__anon7
auth	torrent/include/libtorrent/torrent_info.hpp	/^		std::string auth;$/;"	m	struct:libtorrent::web_seed_entry
auth	torrent/include/libtorrent/tracker_manager.hpp	/^		std::string auth;$/;"	m	struct:libtorrent::tracker_request
auth	virt-p2v/include/p2v-config.h	/^  struct auth_config auth;$/;"	m	struct:config	typeref:struct:config::auth_config
auth_config	virt-p2v/include/p2v-config.h	/^struct auth_config {$/;"	s
authentication_error	torrent/include/libtorrent/socks5_stream.hpp	/^		authentication_error,$/;"	e	enum:libtorrent::socks_error::socks_error_code
authors	virt-p2v/src/about-authors.c	/^const char *authors[] = {$/;"	v
auto_cloud_flag	qt_pro/configwindow.h	/^    bool auto_cloud_flag;$/;"	m	class:ConfigWindow
auto_desktop	include/config.h	/^    unsigned int auto_desktop;      \/\/èªå¨è¿å¥æ¡é¢$/;"	m	struct:terminal_info
auto_desktop	qt_pro/external.h	/^    unsigned int auto_desktop;      \/\/èªå¨è¿å¥æ¡é¢$/;"	m	struct:terminal_info
auto_manage_checking_torrents	torrent/src/session_impl.cpp	/^	void session_impl::auto_manage_checking_torrents(std::vector<torrent*>& list$/;"	f	class:libtorrent::aux::session_impl
auto_manage_interval	torrent/include/libtorrent/settings_pack.hpp	/^			auto_manage_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
auto_manage_prefer_seeds	torrent/include/libtorrent/settings_pack.hpp	/^			auto_manage_prefer_seeds,$/;"	e	enum:libtorrent::settings_pack::bool_types
auto_manage_startup	torrent/include/libtorrent/settings_pack.hpp	/^			auto_manage_startup,$/;"	e	enum:libtorrent::settings_pack::int_types
auto_manage_torrents	torrent/src/session_impl.cpp	/^	void session_impl::auto_manage_torrents(std::vector<torrent*>& list$/;"	f	class:libtorrent::aux::session_impl
auto_managed	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t auto_managed = 5_bit;$/;"	m	namespace:libtorrent::torrent_flags
auto_managed	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER auto_managed = false;$/;"	m	struct:libtorrent::torrent_status
auto_managed	torrent/src/torrent.cpp	/^	void torrent::auto_managed(bool a)$/;"	f	class:libtorrent::torrent
auto_managed	torrent/src/torrent_handle.cpp	/^	void torrent_handle::auto_managed(bool m) const$/;"	f	class:libtorrent::torrent_handle
auto_scrape_interval	torrent/include/libtorrent/settings_pack.hpp	/^			auto_scrape_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
auto_scrape_min_interval	torrent/include/libtorrent/settings_pack.hpp	/^			auto_scrape_min_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
auto_sequential	torrent/include/libtorrent/settings_pack.hpp	/^			auto_sequential,$/;"	e	enum:libtorrent::settings_pack::bool_types
aux	torrent/include/libtorrent/aux_/aligned_storage.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/aligned_union.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/alloca.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/array.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/block_cache_reference.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/byteswap.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/cpuid.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/deque.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/dev_random.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/ffs.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/file_progress.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/generate_peer_id.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/has_block.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/instantiate_connection.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/io.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/ip_notifier.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/keepalive.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/lsd.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/noexcept_movable.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/numeric_cast.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/openssl.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/portmap.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/range.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/scope_end.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/session_call.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/session_impl.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/session_interface.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/session_settings.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/set_socket_buffer.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/socket_type.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/storage_piece_set.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/storage_utils.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/string_ptr.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/suggest_piece.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/throw.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/time.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/unique_ptr.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/vector.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/aux_/win_util.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/block_cache.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/choker.hpp	/^	namespace aux { struct session_settings; }$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/create_torrent.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/disk_buffer_pool.hpp	/^namespace aux { struct session_settings; }$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/disk_io_thread.hpp	/^namespace aux { struct block_cache_reference; }$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/entry.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/file_storage.hpp	/^	namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/heterogeneous_queue.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/hex.hpp	/^	namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/identify_client.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^namespace aux { struct listen_socket_handle; }$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/peer_connection.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/random.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/session.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/settings_pack.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/sha1_hash.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/span.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/stack_allocator.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/storage.hpp	/^	namespace aux { struct session_settings; }$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/torrent_handle.hpp	/^namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/tracker_manager.hpp	/^	namespace aux { struct session_logger; struct session_settings; }$/;"	n	namespace:libtorrent
aux	torrent/include/libtorrent/units.hpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent
aux	torrent/src/cpuid.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/create_torrent.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/disk_job_fence.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/escape_string.cpp	/^	namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/ffs.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/file_progress.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/file_storage.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/generate_peer_id.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/hex.cpp	/^	namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/identify_client.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/instantiate_connection.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/ip_notifier.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/listen_socket_handle.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/openssl.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/proxy_settings.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/random.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/session.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/session_call.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/session_impl.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/session_settings.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/sha1_hash.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/socket_type.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/stack_allocator.cpp	/^namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/storage_piece_set.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/storage_utils.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
aux	torrent/src/time.cpp	/^namespace libtorrent { namespace aux {$/;"	n	namespace:libtorrent	file:
available	torrent/include/libtorrent/operations.hpp	/^		available,$/;"	m	class:libtorrent::operation_t
available	torrent/include/libtorrent/proxy_base.hpp	/^	std::size_t available() const$/;"	f	class:libtorrent::proxy_base
available	torrent/include/libtorrent/proxy_base.hpp	/^	std::size_t available(error_code& ec) const$/;"	f	class:libtorrent::proxy_base
available	torrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t available() const$/;"	f	class:libtorrent::ssl_stream
available	torrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t available(error_code& ec) const$/;"	f	class:libtorrent::ssl_stream
available	torrent/include/libtorrent/utp_stream.hpp	/^	std::size_t available(error_code& \/*ec*\/) const { return available(); }$/;"	f	struct:libtorrent::utp_stream
available	torrent/src/socket_type.cpp	/^	std::size_t socket_type::available() const$/;"	f	class:libtorrent::aux::socket_type
available	torrent/src/socket_type.cpp	/^	std::size_t socket_type::available(error_code& ec) const$/;"	f	class:libtorrent::aux::socket_type
available	torrent/src/utp_stream.cpp	/^std::size_t utp_socket_impl::available() const$/;"	f	class:libtorrent::utp_socket_impl
available	torrent/src/utp_stream.cpp	/^std::size_t utp_stream::available() const$/;"	f	class:libtorrent::utp_stream
average_hash_time	torrent/include/libtorrent/disk_io_thread.hpp	/^		int average_hash_time;$/;"	m	struct:libtorrent::cache_status
average_job_time	torrent/include/libtorrent/disk_io_thread.hpp	/^		int average_job_time;$/;"	m	struct:libtorrent::cache_status
average_read_time	torrent/include/libtorrent/disk_io_thread.hpp	/^		int average_read_time;$/;"	m	struct:libtorrent::cache_status
average_write_time	torrent/include/libtorrent/disk_io_thread.hpp	/^		int average_write_time;$/;"	m	struct:libtorrent::cache_status
avg_deviation	torrent/include/libtorrent/sliding_average.hpp	/^	Int avg_deviation() const { return m_num_samples > 1 ? (m_average_deviation + 32) \/ 64 : 0; }$/;"	f	struct:libtorrent::sliding_average
ax_pthread_config	torrent/include/libtorrent/Makefile	/^ax_pthread_config = $/;"	m
b	torrent/include/libtorrent/buffer.hpp	/^	buffer& operator=(buffer const& b) = delete;$/;"	m	class:libtorrent::buffer
b	torrent/include/libtorrent/buffer.hpp	/^	buffer(buffer const& b) = delete;$/;"	m	class:libtorrent::buffer
back	torrent/include/libtorrent/linked_list.hpp	/^		T const* back() const { return m_last; }$/;"	f	struct:libtorrent::linked_list
back	torrent/include/libtorrent/linked_list.hpp	/^		T* back() { return m_last; }$/;"	f	struct:libtorrent::linked_list
backgroudWidget	qt_pro/ui_downloadwindow.h	/^    QLabel *backgroudWidget;$/;"	m	class:Ui_DownloadWindow
backgroud_init_4	qt_pro/ui_errodialog.h	/^    QLabel *backgroud_init_4;$/;"	m	class:Ui_ErroDialog
backing_file	include/qcow2.h	/^    char backing_file[YZY_MAX_PATH]; \/\/å¿é¡»æ¾å°æåé¢ä¿æå¼å®¹$/;"	m	struct:_YZY_DISK_BACK_FILE
backing_file	test/check.c	/^    char backing_file[YZY_MAX_PATH]; \/\/å¿é¡»æ¾å°æåé¢ä¿æå¼å®¹$/;"	m	struct:_YZY_DISK_BACK_FILE	file:
backing_file_offset	include/qcow2.h	/^    uint64_t backing_file_offset;$/;"	m	struct:_QCowHeader
backing_file_offset	test/check.c	/^    uint64_t backing_file_offset;$/;"	m	struct:_QCowHeader	file:
backing_file_size	include/qcow2.h	/^    uint32_t backing_file_size;$/;"	m	struct:_QCowHeader
backing_file_size	test/check.c	/^    uint32_t backing_file_size;$/;"	m	struct:_QCowHeader	file:
backup1	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::backup1;$/;"	m	class:libtorrent::picker_log_alert	file:
backup2	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::backup2;$/;"	m	class:libtorrent::picker_log_alert	file:
bad_gateway	torrent/include/libtorrent/error_code.hpp	/^			bad_gateway = 502,$/;"	e	enum:libtorrent::errors::http_errors
bad_request	torrent/include/libtorrent/error_code.hpp	/^			bad_request = 400,$/;"	e	enum:libtorrent::errors::http_errors
ban_ip	torrent/src/session_impl.cpp	/^	void session_impl::ban_ip(address addr)$/;"	f	class:libtorrent::aux::session_impl
ban_peer	torrent/src/peer_list.cpp	/^	bool peer_list::ban_peer(torrent_peer* p)$/;"	f	class:libtorrent::peer_list
ban_peer	torrent/src/torrent.cpp	/^	bool torrent::ban_peer(torrent_peer* tp)$/;"	f	class:libtorrent::torrent
ban_web_seeds	torrent/include/libtorrent/settings_pack.hpp	/^			ban_web_seeds,$/;"	e	enum:libtorrent::settings_pack::bool_types
bandwidth_channel	torrent/include/libtorrent/bandwidth_limit.hpp	/^struct TORRENT_EXTRA_EXPORT bandwidth_channel$/;"	s	namespace:libtorrent
bandwidth_channel	torrent/src/bandwidth_limit.cpp	/^	bandwidth_channel::bandwidth_channel()$/;"	f	class:libtorrent::bandwidth_channel
bandwidth_manager	torrent/include/libtorrent/bandwidth_manager.hpp	/^struct TORRENT_EXTRA_EXPORT bandwidth_manager$/;"	s	namespace:libtorrent
bandwidth_manager	torrent/src/bandwidth_manager.cpp	/^	bandwidth_manager::bandwidth_manager(int channel)$/;"	f	class:libtorrent::bandwidth_manager
bandwidth_socket	torrent/include/libtorrent/bandwidth_socket.hpp	/^	struct TORRENT_EXTRA_EXPORT bandwidth_socket$/;"	s	namespace:libtorrent
banned	torrent/include/libtorrent/peer_info.hpp	/^			banned = 1$/;"	e	enum:libtorrent::peer_list_entry::flags_t
banned	torrent/include/libtorrent/torrent_peer.hpp	/^		bool banned:1;$/;"	m	struct:libtorrent::torrent_peer
banned_by_ip_filter	torrent/include/libtorrent/error_code.hpp	/^			banned_by_ip_filter,$/;"	e	enum:libtorrent::errors::error_code_enum
banned_by_port_filter	torrent/include/libtorrent/error_code.hpp	/^			banned_by_port_filter,$/;"	e	enum:libtorrent::errors::error_code_enum
banned_for_hash_failure	torrent/include/libtorrent/performance_counters.hpp	/^			banned_for_hash_failure,$/;"	e	enum:libtorrent::counters::stats_counter_t
banned_peers	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<tcp::endpoint>> banned_peers;$/;"	m	struct:libtorrent::add_torrent_params
barStyle	qt_pro/QRoundProgressBar.h	/^    BarStyle barStyle() const { return m_barStyle; }$/;"	f	class:QRoundProgressBar
barrier	torrent/include/libtorrent/pe_crypto.hpp	/^			barrier(std::shared_ptr<crypto_plugin> plugin, int n)$/;"	f	struct:libtorrent::encryption_handler::barrier
barrier	torrent/include/libtorrent/pe_crypto.hpp	/^		struct barrier$/;"	s	struct:libtorrent::encryption_handler
base	torrent/ed25519/precomp_data.h	/^static const ge_precomp base[32][8] = {$/;"	v
base	torrent/include/libtorrent/timestamp_history.hpp	/^	std::uint32_t base() const { TORRENT_ASSERT(initialized()); return m_base; }$/;"	f	struct:libtorrent::timestamp_history
base32decode	torrent/src/escape_string.cpp	/^	std::string base32decode(string_view s)$/;"	f	namespace:libtorrent
base32encode	torrent/src/escape_string.cpp	/^	std::string base32encode(string_view s, encode_string_flags_t const flags)$/;"	f	namespace:libtorrent
base64	virt-p2v/include/libxml2-writer-macros.h	181;"	d
base64	virt-p2v/libguestfs/libxml2-writer-macros.h	181;"	d
base64encode	torrent/src/escape_string.cpp	/^	std::string base64encode(const std::string& s)$/;"	f	namespace:libtorrent
base_mapping	torrent/include/libtorrent/aux_/portmap.hpp	/^	struct base_mapping$/;"	s	namespace:libtorrent::aux
basic_nl_endpoint	torrent/include/libtorrent/netlink.hpp	/^		basic_nl_endpoint(protocol_type netlink_family, std::uint32_t group, std::uint32_t pid = 0)$/;"	f	class:libtorrent::basic_nl_endpoint
basic_nl_endpoint	torrent/include/libtorrent/netlink.hpp	/^	class basic_nl_endpoint$/;"	c	namespace:libtorrent
basis	virt-p2v/include/p2v-config.h	/^  enum basis basis;$/;"	m	struct:rtc_config	typeref:enum:rtc_config::basis
basis	virt-p2v/include/p2v-config.h	/^enum basis {$/;"	g
bdecode	torrent/include/libtorrent/bencode.hpp	/^	entry bdecode(InIt start, InIt end$/;"	f	namespace:libtorrent
bdecode	torrent/include/libtorrent/bencode.hpp	/^	entry bdecode(InIt start, InIt end)$/;"	f	namespace:libtorrent
bdecode	torrent/src/bdecode.cpp	/^	bdecode_node bdecode(span<char const> buffer$/;"	f	namespace:libtorrent
bdecode	torrent/src/bdecode.cpp	/^	bdecode_node bdecode(span<char const> buffer, int depth_limit, int token_limit)$/;"	f	namespace:libtorrent
bdecode	torrent/src/bdecode.cpp	/^	int bdecode(char const* start, char const* end, bdecode_node& ret$/;"	f	namespace:libtorrent
bdecode_category	torrent/src/bdecode.cpp	/^	boost::system::error_category& bdecode_category()$/;"	f	namespace:libtorrent
bdecode_errors	torrent/include/libtorrent/bdecode.hpp	/^namespace bdecode_errors$/;"	n	namespace:libtorrent
bdecode_errors	torrent/src/bdecode.cpp	/^	namespace bdecode_errors$/;"	n	namespace:libtorrent	file:
bdecode_node	torrent/include/libtorrent/bdecode.hpp	/^struct TORRENT_EXPORT bdecode_node$/;"	s
bdecode_node	torrent/src/bdecode.cpp	/^	bdecode_node::bdecode_node(bdecode_node const& n)$/;"	f	class:libtorrent::bdecode_node
bdecode_node	torrent/src/bdecode.cpp	/^	bdecode_node::bdecode_node(bdecode_token const* tokens, char const* buf$/;"	f	class:libtorrent::bdecode_node
bdecode_recursive	torrent/include/libtorrent/bencode.hpp	/^		void bdecode_recursive(InIt& in, InIt end, entry& ret, bool& err, int depth)$/;"	f	namespace:libtorrent::detail
bdecode_token	torrent/include/libtorrent/bdecode.hpp	/^	bdecode_token(std::ptrdiff_t off, bdecode_token::type_t t)$/;"	f	namespace:libtorrent::detail
bdecode_token	torrent/include/libtorrent/bdecode.hpp	/^	bdecode_token(std::ptrdiff_t off, std::uint32_t next$/;"	f	namespace:libtorrent::detail
bdecode_token	torrent/include/libtorrent/bdecode.hpp	/^struct bdecode_token$/;"	s	namespace:libtorrent::detail
begin	torrent/include/libtorrent/aux_/range.hpp	/^		Iter begin() { return _begin; }$/;"	f	struct:libtorrent::aux::iterator_range
begin	torrent/include/libtorrent/buffer.hpp	/^	char const* begin() const { return m_begin; }$/;"	f	class:libtorrent::buffer
begin	torrent/include/libtorrent/buffer.hpp	/^	char* begin() { return m_begin; }$/;"	f	class:libtorrent::buffer
begin	torrent/include/libtorrent/file_storage.hpp	/^		iterator begin() const { return m_files.begin(); }$/;"	f	class:libtorrent::file_storage
begin	torrent/include/libtorrent/index_range.hpp	/^	index_iter<Index> begin() { return index_iter<Index>{_begin}; }$/;"	f	struct:libtorrent::index_range
begin	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	router_iterator begin() const { return m_router_nodes.begin(); }$/;"	f	class:libtorrent::dht::routing_table
begin	torrent/include/libtorrent/peer_list.hpp	/^		const_iterator begin() const { return m_peers.begin(); }$/;"	f	struct:libtorrent::peer_list
begin	torrent/include/libtorrent/peer_list.hpp	/^		iterator begin() { return m_peers.begin(); }$/;"	f	struct:libtorrent::peer_list
begin	torrent/include/libtorrent/sha1_hash.hpp	/^		const_iterator begin() const$/;"	f	class:libtorrent::digest32
begin	torrent/include/libtorrent/sha1_hash.hpp	/^		iterator begin()$/;"	f	class:libtorrent::digest32
begin	torrent/include/libtorrent/torrent.hpp	/^		const_peer_iterator begin() const { return m_connections.begin(); }$/;"	f	class:libtorrent::torrent
begin	torrent/include/libtorrent/torrent.hpp	/^		peer_iterator begin() { return m_connections.begin(); }$/;"	f	class:libtorrent::torrent
begin_deprecated	torrent/include/libtorrent/file_storage.hpp	/^		iterator begin_deprecated() const { return m_files.begin(); }$/;"	f	class:libtorrent::file_storage
begin_files	torrent/include/libtorrent/torrent_info.hpp	/^		file_iterator begin_files() const { return m_files.begin_deprecated(); }$/;"	f	class:libtorrent::torrent_info
bencode	torrent/include/libtorrent/bencode.hpp	/^	template<class OutIt> int bencode(OutIt out, const entry& e)$/;"	f	namespace:libtorrent
bencode_recursive	torrent/include/libtorrent/bencode.hpp	/^		int bencode_recursive(OutIt& out, const entry& e)$/;"	f	namespace:libtorrent::detail
big_endian_blk0	torrent/src/sha1.cpp	/^	struct big_endian_blk0$/;"	s	namespace:libtorrent::__anon103	file:
big_endian_int	torrent/include/libtorrent/utp_stream.hpp	/^	template <class T> struct big_endian_int$/;"	s	namespace:libtorrent
bind	torrent/include/libtorrent/alert_types.hpp	/^			bind TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
bind	torrent/include/libtorrent/proxy_base.hpp	/^	void bind(endpoint_type const& \/* endpoint *\/)$/;"	f	class:libtorrent::proxy_base
bind	torrent/include/libtorrent/proxy_base.hpp	/^	void bind(endpoint_type const& \/* endpoint *\/, error_code& \/* ec *\/)$/;"	f	class:libtorrent::proxy_base
bind	torrent/include/libtorrent/ssl_stream.hpp	/^	void bind(endpoint_type const& endpoint)$/;"	f	class:libtorrent::ssl_stream
bind	torrent/include/libtorrent/ssl_stream.hpp	/^	void bind(endpoint_type const& endpoint, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
bind	torrent/include/libtorrent/utp_stream.hpp	/^	void bind(endpoint_type const& \/*endpoint*\/) {}$/;"	f	struct:libtorrent::utp_stream
bind	torrent/src/socket_type.cpp	/^	void socket_type::bind(endpoint_type const& endpoint)$/;"	f	class:libtorrent::aux::socket_type
bind	torrent/src/socket_type.cpp	/^	void socket_type::bind(endpoint_type const& endpoint, error_code& ec)$/;"	f	class:libtorrent::aux::socket_type
bind	torrent/src/udp_socket.cpp	/^void udp_socket::bind(udp::endpoint const& ep, error_code& ec)$/;"	f	class:libtorrent::udp_socket
bind	torrent/src/utp_stream.cpp	/^void utp_stream::bind(endpoint_type const&, error_code&) { }$/;"	f	class:libtorrent::utp_stream
bind_device	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^	void bind_device(T& sock, char const* device, error_code& ec)$/;"	f	namespace:libtorrent::aux
bind_interface	torrent/src/tracker_manager.cpp	/^	address tracker_connection::bind_interface() const$/;"	f	class:libtorrent::tracker_connection
bind_outgoing_socket	torrent/src/session_impl.cpp	/^	tcp::endpoint session_impl::bind_outgoing_socket(socket_type& s$/;"	f	class:libtorrent::aux::session_impl
bind_socket	torrent/include/libtorrent/tracker_manager.hpp	/^		aux::listen_socket_handle const& bind_socket() const { return m_req.outgoing_socket; }$/;"	f	class:libtorrent::tracker_connection::aux
bind_socket_to_device	torrent/include/libtorrent/enum_net.hpp	/^	address bind_socket_to_device(io_service& ios, Socket& sock$/;"	f	namespace:libtorrent
bind_source_port	virt-p2v/src/nbd.c	/^bind_source_port (int sockfd, int family, int source_port)$/;"	f	file:
bind_tcpip_socket	virt-p2v/src/nbd.c	/^bind_tcpip_socket (const char *ipaddr, const char *port,$/;"	f	file:
bind_to_device	torrent/include/libtorrent/alert_types.hpp	/^			bind_to_device TORRENT_DEPRECATED_ENUM$/;"	e	enum:libtorrent::op_t
bind_to_device	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^		explicit bind_to_device(char const* device): m_value(device) {}$/;"	f	struct:libtorrent::aux::bind_to_device
bind_to_device	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^	struct bind_to_device$/;"	s	namespace:libtorrent::aux
bindir	torrent/include/libtorrent/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bios_geom	include/device.h	/^    PedCHSGeometry bios_geom;$/;"	m	struct:_PedDevice
bit	torrent/include/libtorrent/bitfield.hpp	/^			std::uint32_t bit = 0x80000000;$/;"	m	struct:libtorrent::bitfield::const_iterator
bit_t	torrent/include/libtorrent/flags.hpp	/^	explicit constexpr bit_t(int b) : m_bit_idx(b) {}$/;"	f	struct:libtorrent::bit_t
bit_t	torrent/include/libtorrent/flags.hpp	/^struct bit_t$/;"	s	namespace:libtorrent
bitbuf	torrent/src/puff.cpp	/^    int bitbuf;                 \/* bit buffer *\/$/;"	m	struct:state	file:
bitcnt	torrent/src/puff.cpp	/^    int bitcnt;                 \/* number of bits in bit buffer *\/$/;"	m	struct:state	file:
bitfield	torrent/include/libtorrent/bitfield.hpp	/^		bitfield(bitfield const& rhs) { assign(rhs.data(), rhs.size()); }$/;"	f	struct:libtorrent::bitfield
bitfield	torrent/include/libtorrent/bitfield.hpp	/^		bitfield(char const* b, int bits) { assign(b, bits); }$/;"	f	struct:libtorrent::bitfield
bitfield	torrent/include/libtorrent/bitfield.hpp	/^		bitfield(int bits, bool val) { resize(bits, val); }$/;"	f	struct:libtorrent::bitfield
bitfield	torrent/include/libtorrent/bitfield.hpp	/^		explicit bitfield(int bits) { resize(bits); }$/;"	f	struct:libtorrent::bitfield
bitfield	torrent/include/libtorrent/bitfield.hpp	/^	struct TORRENT_EXPORT bitfield$/;"	s	namespace:libtorrent
bitfield_flag	torrent/include/libtorrent/flags.hpp	/^struct bitfield_flag$/;"	s	namespace:libtorrent::flags
bits	torrent/include/libtorrent/bloom_filter.hpp	/^		std::uint8_t bits[N];$/;"	m	struct:libtorrent::bloom_filter
bits	torrent/src/puff.cpp	/^local int bits(struct state *s, int need)$/;"	f
bits_in_byte	torrent/include/libtorrent/sha1_hash.hpp	/^		static constexpr int bits_in_byte = 8;$/;"	m	class:libtorrent::digest32
bits_shift_left	torrent/src/sha1_hash.cpp	/^	void bits_shift_left(span<std::uint32_t> const number, int n)$/;"	f	namespace:libtorrent::aux
bits_shift_right	torrent/src/sha1_hash.cpp	/^	void bits_shift_right(span<std::uint32_t> const number, int n)$/;"	f	namespace:libtorrent::aux
bittorrent	torrent/include/libtorrent/operations.hpp	/^		bittorrent,$/;"	m	class:libtorrent::operation_t
bittorrent	torrent/include/libtorrent/peer_connection.hpp	/^		bittorrent,$/;"	m	class:libtorrent::connection_type
bittyrant_unchoke_compare	torrent/src/choker.cpp	/^	bool bittyrant_unchoke_compare(peer_connection const* lhs$/;"	f	namespace:libtorrent::__anon91
bittyrant_with_no_uplimit	torrent/include/libtorrent/alert_types.hpp	/^			bittyrant_with_no_uplimit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::final::performance_warning_t
blk	torrent/src/sha1.cpp	70;"	d	file:
blkdev_ioctl_param	src/linux.c	/^struct blkdev_ioctl_param {$/;"	s	file:
block	src/linux.c	/^        unsigned int block;$/;"	m	struct:blkdev_ioctl_param	file:
block	torrent/bak/connection_tester.cpp	/^	int block;$/;"	m	struct:peer_conn	file:
block	torrent/include/libtorrent/aux_/has_block.hpp	/^		piece_block const& block;$/;"	m	struct:libtorrent::aux::has_block
block	torrent/include/libtorrent/block_cache.hpp	/^		int block;$/;"	m	struct:libtorrent::piece_log_t
block	torrent/include/libtorrent/peer_connection.hpp	/^		piece_block block;$/;"	m	struct:libtorrent::pending_block
block_cache	torrent/include/libtorrent/block_cache.hpp	/^	struct TORRENT_EXTRA_EXPORT block_cache : disk_buffer_pool$/;"	s	namespace:libtorrent
block_cache	torrent/src/block_cache.cpp	/^block_cache::block_cache(io_service& ios$/;"	f	class:libtorrent::block_cache
block_cache_reference	torrent/include/libtorrent/aux_/block_cache_reference.hpp	/^		block_cache_reference(storage_index_t const idx, std::int32_t const c)$/;"	f	struct:libtorrent::aux::block_cache_reference
block_cache_reference	torrent/include/libtorrent/aux_/block_cache_reference.hpp	/^	struct block_cache_reference$/;"	s	namespace:libtorrent::aux
block_contents	src/linux.c	/^        char * block_contents;$/;"	m	struct:blkdev_ioctl_param	file:
block_downloading_alert	torrent/src/alert.cpp	/^	block_downloading_alert::block_downloading_alert(aux::stack_allocator& alloc, torrent_handle h$/;"	f	class:libtorrent::block_downloading_alert
block_entry	torrent/src/smart_ban.cpp	/^		struct block_entry$/;"	s	struct:libtorrent::__anon85::final	file:
block_finished_alert	torrent/src/alert.cpp	/^	block_finished_alert::block_finished_alert(aux::stack_allocator& alloc, torrent_handle h$/;"	f	class:libtorrent::block_finished_alert
block_index	torrent/include/libtorrent/alert_types.hpp	/^		int const block_index;$/;"	m	struct:libtorrent::final
block_index	torrent/include/libtorrent/piece_block.hpp	/^		int block_index = 0;$/;"	m	struct:libtorrent::piece_block
block_index	torrent/include/libtorrent/piece_block_progress.hpp	/^		int block_index;$/;"	m	struct:libtorrent::piece_block_progress
block_info	torrent/include/libtorrent/piece_picker.hpp	/^			block_info(): num_peers(0), state(state_none) {}$/;"	f	struct:libtorrent::piece_picker::block_info
block_info	torrent/include/libtorrent/piece_picker.hpp	/^		struct block_info$/;"	s	class:libtorrent::piece_picker
block_info	torrent/include/libtorrent/torrent_handle.hpp	/^	struct TORRENT_EXPORT block_info$/;"	s	namespace:libtorrent
block_progress	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t block_progress = 24_bit;$/;"	m	namespace:libtorrent::alert_category
block_progress_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t block_progress_notification = 24_bit;$/;"	m	class:libtorrent::alert
block_progress_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::block_progress_notification;$/;"	m	class:libtorrent::alert	file:
block_ratelimit	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int block_ratelimit = 5;$/;"	m	struct:libtorrent::dht::dht_settings
block_size	torrent/include/libtorrent/torrent.hpp	/^		int block_size() const$/;"	f	class:libtorrent::torrent
block_size	torrent/include/libtorrent/torrent_handle.hpp	/^		unsigned block_size:15;$/;"	m	struct:libtorrent::block_info
block_size	torrent/include/libtorrent/torrent_status.hpp	/^		int block_size = 0;$/;"	m	struct:libtorrent::torrent_status
block_state_t	torrent/include/libtorrent/torrent_handle.hpp	/^		enum block_state_t$/;"	g	struct:libtorrent::block_info
block_timeout	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int block_timeout = 5 * 60;$/;"	m	struct:libtorrent::dht::dht_settings
block_timeout_alert	torrent/src/alert.cpp	/^	block_timeout_alert::block_timeout_alert(aux::stack_allocator& alloc, torrent_handle h$/;"	f	class:libtorrent::block_timeout_alert
block_uploaded_alert	torrent/src/alert.cpp	/^	block_uploaded_alert::block_uploaded_alert(aux::stack_allocator& alloc, torrent_handle h$/;"	f	class:libtorrent::block_uploaded_alert
blocked	torrent/include/libtorrent/close_reason.hpp	/^		blocked,$/;"	m	class:libtorrent::close_reason_t
blocked	torrent/include/libtorrent/disk_io_job.hpp	/^		mutable bool blocked = false;$/;"	m	struct:libtorrent::disk_io_job
blocked	torrent/include/libtorrent/ip_filter.hpp	/^		blocked = 1$/;"	e	enum:libtorrent::ip_filter::access_flags
blocked	torrent/include/libtorrent/ip_filter.hpp	/^		blocked = 1$/;"	e	enum:libtorrent::port_filter::access_flags
blocked_disk_jobs	torrent/include/libtorrent/performance_counters.hpp	/^			blocked_disk_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
blocked_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		int blocked_jobs;$/;"	m	struct:libtorrent::cache_status
blocking_call	torrent/src/session_call.cpp	/^void blocking_call()$/;"	f	namespace:libtorrent::aux
blocks	torrent/include/libtorrent/block_cache.hpp	/^		aux::unique_ptr<cached_block_entry[]> blocks;$/;"	m	struct:libtorrent::cached_piece_entry
blocks	torrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<bool> blocks;$/;"	m	struct:libtorrent::cached_piece_info
blocks	torrent/include/libtorrent/torrent_handle.hpp	/^		block_info* blocks;$/;"	m	struct:libtorrent::partial_piece_info
blocks	torrent/src/alert.cpp	/^	std::vector<piece_block> picker_log_alert::blocks() const$/;"	f	class:libtorrent::picker_log_alert
blocks_flushed	torrent/src/block_cache.cpp	/^bool block_cache::blocks_flushed(cached_piece_entry* pe, int const* flushed, int const num_flushed)$/;"	f	class:libtorrent::block_cache
blocks_for_piece	torrent/src/piece_picker.cpp	/^	span<piece_picker::block_info const> piece_picker::blocks_for_piece($/;"	f	class:libtorrent::piece_picker
blocks_in_last_piece	torrent/include/libtorrent/piece_picker.hpp	/^		int blocks_in_last_piece() const$/;"	f	class:libtorrent::piece_picker
blocks_in_piece	torrent/include/libtorrent/block_cache.hpp	/^		std::uint64_t blocks_in_piece:14;$/;"	m	struct:libtorrent::cached_piece_entry
blocks_in_piece	torrent/include/libtorrent/torrent_handle.hpp	/^		int blocks_in_piece;$/;"	m	struct:libtorrent::partial_piece_info
blocks_in_piece	torrent/src/piece_picker.cpp	/^	int piece_picker::blocks_in_piece(piece_index_t const index) const$/;"	f	class:libtorrent::piece_picker
blocks_inc_refcount	torrent/include/libtorrent/block_cache.hpp	/^		enum { blocks_inc_refcount = 1 };$/;"	e	enum:libtorrent::block_cache::__anon11
blocks_left	torrent/include/libtorrent/torrent.hpp	/^			int blocks_left;$/;"	m	struct:libtorrent::torrent::read_piece_struct
blocks_per_piece	torrent/bak/connection_tester.cpp	/^	int blocks_per_piece;$/;"	m	struct:peer_conn	file:
blocks_read	torrent/include/libtorrent/disk_io_thread.hpp	/^		int blocks_read;$/;"	m	struct:libtorrent::cache_status
blocks_read_hit	torrent/include/libtorrent/disk_io_thread.hpp	/^		int blocks_read_hit;$/;"	m	struct:libtorrent::cache_status
blocks_received	torrent/bak/connection_tester.cpp	/^	int blocks_received;$/;"	m	struct:peer_conn	file:
blocks_sent	torrent/bak/connection_tester.cpp	/^	int blocks_sent;$/;"	m	struct:peer_conn	file:
blocks_written	torrent/include/libtorrent/disk_io_thread.hpp	/^		int blocks_written;$/;"	m	struct:libtorrent::cache_status
bloom_filter	torrent/include/libtorrent/bloom_filter.hpp	/^		bloom_filter() { clear(); }$/;"	f	struct:libtorrent::bloom_filter
bloom_filter	torrent/include/libtorrent/bloom_filter.hpp	/^	struct bloom_filter$/;"	s	namespace:libtorrent
boardcast_addr	include/config.h	/^    char boardcast_addr[32];$/;"	m	struct:netcard_param
boardcast_addr	qt_pro/external.h	/^    char boardcast_addr[32];$/;"	m	struct:netcard_param
body_start	torrent/include/libtorrent/http_parser.hpp	/^		int body_start() const { return m_body_start_pos; }$/;"	f	class:libtorrent::http_parser
bool	virt-p2v/include/gnulib/stdbool.in.h	118;"	d
bool	virt-p2v/include/gnulib/stdbool.in.h	71;"	d
bool_setting_entry_t	torrent/src/settings_pack.cpp	/^	struct bool_setting_entry_t$/;"	s	namespace:libtorrent	file:
bool_type_base	torrent/include/libtorrent/settings_pack.hpp	/^			bool_type_base =   0x8000,$/;"	e	enum:libtorrent::settings_pack::type_bases
bool_types	torrent/include/libtorrent/settings_pack.hpp	/^		enum bool_types$/;"	g	struct:libtorrent::settings_pack
boost	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^namespace boost {$/;"	n
boost	torrent/include/libtorrent/aux_/session_interface.hpp	/^namespace boost {$/;"	n
boost	torrent/include/libtorrent/bdecode.hpp	/^namespace boost { namespace system {$/;"	n
boost	torrent/include/libtorrent/error_code.hpp	/^namespace boost { namespace system {$/;"	n
boost	torrent/include/libtorrent/gzip.hpp	/^namespace boost { namespace system {$/;"	n
boost	torrent/include/libtorrent/http_connection.hpp	/^namespace boost {$/;"	n
boost	torrent/include/libtorrent/i2p_stream.hpp	/^namespace boost { namespace system {$/;"	n
boost	torrent/include/libtorrent/natpmp.hpp	/^namespace boost { namespace system {$/;"	n
boost	torrent/include/libtorrent/socks5_stream.hpp	/^namespace boost { namespace system {$/;"	n
boost	torrent/include/libtorrent/torrent.hpp	/^namespace boost {$/;"	n
boost	torrent/include/libtorrent/tracker_manager.hpp	/^namespace boost {$/;"	n
boost	torrent/include/libtorrent/upnp.hpp	/^namespace boost { namespace system {$/;"	n
boost	torrent/src/session_impl.cpp	/^namespace boost {$/;"	n	file:
boost_connection_attempts	torrent/include/libtorrent/performance_counters.hpp	/^			boost_connection_attempts,$/;"	e	enum:libtorrent::counters::stats_counter_t
bootLevel	include/StoreConfig.h	/^    uint32_t            bootLevel;$/;"	m	struct:_YZY_STORE_CONFIG
boot_dirty	include/device.h	/^    int boot_dirty;$/;"	m	struct:_PedDevice
boot_disk	include/device.h	/^	disk_param *boot_disk;$/;"	m	struct:device_info
boot_flag	include/device.h	/^	uint8_t boot_flag;		$/;"	m	struct:_PedDevice
bootstrap	torrent/include/libtorrent/kademlia/refresh.hpp	/^class bootstrap : public get_peers$/;"	c	namespace:libtorrent::dht
bootstrap	torrent/kademlia/node.cpp	/^void node::bootstrap(std::vector<udp::endpoint> const& nodes$/;"	f	class:libtorrent::dht::node
bootstrap	torrent/kademlia/refresh.cpp	/^bootstrap::bootstrap($/;"	f	class:libtorrent::dht::bootstrap
both	torrent/include/libtorrent/session_settings.hpp	/^			both = 3$/;"	e	enum:libtorrent::pe_settings::enc_level
bottomWidget	qt_pro/ui_downloadwindow.h	/^    QLabel *bottomWidget;$/;"	m	class:Ui_DownloadWindow
bound_to_udp_socket	torrent/src/utp_stream.cpp	/^bool bound_to_udp_socket(utp_socket_impl* s, std::weak_ptr<utp_socket_interface> sock)$/;"	f	namespace:libtorrent
branch_factor	torrent/include/libtorrent/kademlia/node.hpp	/^	int branch_factor() const { return m_settings.search_branching; }$/;"	f	class:libtorrent::dht::node
branch_factor	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int branch_factor() const { TORRENT_ASSERT(m_branch_factor >= 0); return m_branch_factor; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
branch_path	torrent/bak/make_torrent.cpp	/^std::string branch_path(std::string const& f)$/;"	f
break_one_seed	torrent/src/piece_picker.cpp	/^	void piece_picker::break_one_seed()$/;"	f	class:libtorrent::piece_picker
broadcast	torrent/include/libtorrent/broadcast_socket.hpp	/^			bool broadcast;$/;"	m	struct:libtorrent::broadcast_socket::socket_entry
broadcast_address	torrent/include/libtorrent/broadcast_socket.hpp	/^			address_v4 broadcast_address() const$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
broadcast_lsd	torrent/include/libtorrent/settings_pack.hpp	/^			broadcast_lsd TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
broadcast_socket	torrent/include/libtorrent/broadcast_socket.hpp	/^	class TORRENT_EXTRA_EXPORT broadcast_socket$/;"	c	namespace:libtorrent
broadcast_socket	torrent/src/broadcast_socket.cpp	/^	broadcast_socket::broadcast_socket($/;"	f	class:libtorrent::broadcast_socket
broken_pipe_peers	torrent/include/libtorrent/performance_counters.hpp	/^			broken_pipe_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
btTracker	torrent/bak/tracker.cpp	/^btTracker::btTracker()$/;"	f	class:btTracker
bt_peer_connection	torrent/include/libtorrent/bt_peer_connection.hpp	/^	class TORRENT_EXTRA_EXPORT bt_peer_connection$/;"	c	namespace:libtorrent
bt_peer_connection	torrent/src/bt_peer_connection.cpp	/^	bt_peer_connection::bt_peer_connection(peer_connection_args const& pack)$/;"	f	class:libtorrent::bt_peer_connection
bt_peer_connection_handle	torrent/include/libtorrent/peer_connection_handle.hpp	/^	explicit bt_peer_connection_handle(peer_connection_handle pc)$/;"	f	struct:libtorrent::bt_peer_connection_handle
bt_peer_connection_handle	torrent/include/libtorrent/peer_connection_handle.hpp	/^struct TORRENT_EXPORT bt_peer_connection_handle : peer_connection_handle$/;"	s	namespace:libtorrent
btobj	Makefile	/^btobj := bt$/;"	m
bucket_limit	torrent/kademlia/routing_table.cpp	/^int routing_table::bucket_limit(int bucket) const$/;"	f	class:libtorrent::dht::routing_table
bucket_size	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	int bucket_size() const { return m_bucket_size; }$/;"	f	class:libtorrent::dht::routing_table
bucket_size	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	int bucket_size(int bucket) const$/;"	f	class:libtorrent::dht::routing_table
bucket_size	torrent/kademlia/node.cpp	/^int node::bucket_size(int bucket)$/;"	f	class:libtorrent::dht::node
buckets	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	table_t const& buckets() const$/;"	f	class:libtorrent::dht::routing_table
buf	torrent/include/libtorrent/bitfield.hpp	/^			std::uint32_t const* buf = nullptr;$/;"	m	class:libtorrent::bitfield::const_iterator::std
buf	torrent/include/libtorrent/block_cache.hpp	/^		char* buf = nullptr;$/;"	m	struct:libtorrent::cached_block_entry
buf	torrent/include/libtorrent/chained_buffer.hpp	/^			char* buf = nullptr; \/\/ the first byte of the buffer$/;"	m	struct:libtorrent::chained_buffer
buf	torrent/include/libtorrent/packet_pool.hpp	/^		std::uint8_t buf[1];$/;"	m	struct:libtorrent::packet
buf	torrent/include/libtorrent/pe_crypto.hpp	/^		aux::array<std::uint8_t, 256> buf;$/;"	m	struct:libtorrent::rc4
buf	torrent/include/libtorrent/sha512.hpp	/^		std::uint8_t buf[128];$/;"	m	struct:libtorrent::sha512_ctx
buf	torrent/src/utp_stream.cpp	/^		void* buf;$/;"	m	struct:libtorrent::utp_socket_impl::iovec_t	file:
buffer	torrent/bak/connection_tester.cpp	/^	std::uint32_t buffer[17*1024\/4];$/;"	m	struct:peer_conn	file:
buffer	torrent/bak/udp_tracker.cpp	/^	char* buffer;$/;"	m	class:CDataStream	file:
buffer	torrent/include/libtorrent/alert_types.hpp	/^		boost::shared_array<char> const buffer;$/;"	m	class:libtorrent::final::boost
buffer	torrent/include/libtorrent/aux_/aligned_storage.hpp	/^		alignas(Align) char buffer[Len];$/;"	m	struct:libtorrent::aux::aligned_storage::type
buffer	torrent/include/libtorrent/aux_/aligned_union.hpp	/^			char buffer[max(Len, max(sizeof(Types)...))];$/;"	m	struct:libtorrent::aux::aligned_union::type
buffer	torrent/include/libtorrent/buffer.hpp	/^	buffer(buffer&& b)$/;"	f	class:libtorrent::buffer
buffer	torrent/include/libtorrent/buffer.hpp	/^	buffer(difference_type const size, span<char const> initialize)$/;"	f	class:libtorrent::buffer
buffer	torrent/include/libtorrent/buffer.hpp	/^	explicit buffer(difference_type size = 0)$/;"	f	class:libtorrent::buffer
buffer	torrent/include/libtorrent/buffer.hpp	/^class buffer$/;"	c	namespace:libtorrent
buffer	torrent/include/libtorrent/sha1.hpp	/^		std::uint8_t buffer[64];$/;"	m	struct:libtorrent::sha1_ctx
buffer	virt-p2v/include/miniexpect.h	/^  char *buffer;$/;"	m	struct:mexp_h
buffer	virt-p2v/miniexpect/miniexpect.h	/^  char *buffer;$/;"	m	struct:mexp_h
buffer_allocator_interface	torrent/include/libtorrent/disk_buffer_holder.hpp	/^	struct TORRENT_EXTRA_EXPORT buffer_allocator_interface$/;"	s	namespace:libtorrent
buffer_peers	torrent/include/libtorrent/performance_counters.hpp	/^			buffer_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
buffer_size	torrent/include/libtorrent/disk_io_job.hpp	/^			std::uint16_t buffer_size;$/;"	m	struct:libtorrent::disk_io_job::un::io_args
buffer_t	torrent/include/libtorrent/chained_buffer.hpp	/^			buffer_t() {}$/;"	f	struct:libtorrent::chained_buffer::buffer_t
buffer_t	torrent/include/libtorrent/chained_buffer.hpp	/^		struct buffer_t$/;"	s	struct:libtorrent::chained_buffer
bufs_size	torrent/src/file.cpp	/^	int bufs_size(span<::iovec> bufs)$/;"	f	namespace:libtorrent::__anon81::__anon82
bufs_size	torrent/src/path.cpp	/^	int bufs_size(span<iovec_t const> bufs)$/;"	f	namespace:libtorrent
build	torrent/include/libtorrent/Makefile	/^build = x86_64-pc-linux-gnu$/;"	m
build_alias	torrent/include/libtorrent/Makefile	/^build_alias = $/;"	m
build_cpu	torrent/include/libtorrent/Makefile	/^build_cpu = x86_64$/;"	m
build_iovec	torrent/src/chained_buffer.cpp	/^	span<boost::asio::const_buffer const> chained_buffer::build_iovec(int const to_send)$/;"	f	class:libtorrent::chained_buffer
build_merkle_list	torrent/src/torrent_info.cpp	/^	torrent_info::build_merkle_list(piece_index_t const piece) const$/;"	f	class:libtorrent::torrent_info
build_mutable_iovec	torrent/src/chained_buffer.cpp	/^	void chained_buffer::build_mutable_iovec(int bytes, std::vector<span<char>> &vec)$/;"	f	class:libtorrent::chained_buffer
build_netmask	torrent/src/enum_net.cpp	/^	address build_netmask(int prefix_bits, int const family)$/;"	f	namespace:libtorrent
build_netmask_impl	torrent/src/enum_net.cpp	/^	void build_netmask_impl(span<unsigned char> mask, int prefix_bits)$/;"	f	namespace:libtorrent::__anon102
build_os	torrent/include/libtorrent/Makefile	/^build_os = linux-gnu$/;"	m
build_triplet	torrent/include/libtorrent/Makefile	/^build_triplet = x86_64-pc-linux-gnu$/;"	m
build_vec	torrent/src/chained_buffer.cpp	/^	void chained_buffer::build_vec(int bytes, std::vector<Buffer>& vec)$/;"	f	class:libtorrent::chained_buffer
build_vendor	torrent/include/libtorrent/Makefile	/^build_vendor = pc$/;"	m
builddir	torrent/include/libtorrent/Makefile	/^builddir = .$/;"	m
bulk_get	torrent/src/session_settings.cpp	/^	void session_settings::bulk_get(std::function<void(session_settings_single_thread const&)> f) const$/;"	f	class:libtorrent::aux::session_settings
bulk_set	torrent/src/session_settings.cpp	/^	void session_settings::bulk_set(std::function<void(session_settings_single_thread&)> f)$/;"	f	class:libtorrent::aux::session_settings
bump_lru	torrent/src/block_cache.cpp	/^void block_cache::bump_lru(cached_piece_entry* p)$/;"	f	class:libtorrent::block_cache
busy	torrent/include/libtorrent/peer_connection.hpp	/^		static constexpr request_flags_t busy = 1_bit;$/;"	m	class:libtorrent::peer_connection
busy	torrent/include/libtorrent/peer_connection.hpp	/^		std::uint32_t busy:1;$/;"	m	struct:libtorrent::pending_block
busy	torrent/src/peer_connection.cpp	/^	constexpr request_flags_t peer_connection::busy;$/;"	m	class:libtorrent::peer_connection	file:
busy_block_t	torrent/src/torrent.cpp	/^	struct busy_block_t$/;"	s	namespace:libtorrent::__anon114	file:
busy_requests	torrent/include/libtorrent/peer_info.hpp	/^		int busy_requests;$/;"	m	struct:libtorrent::peer_info
bw_disk	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr bandwidth_state_flags_t bw_disk = 4_bit;$/;"	m	struct:libtorrent::peer_info
bw_disk	torrent/src/peer_info.cpp	/^	constexpr bandwidth_state_flags_t peer_info::bw_disk;$/;"	m	class:libtorrent::peer_info	file:
bw_global	torrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER static constexpr bandwidth_state_flags_t bw_global = bw_limit;$/;"	m	struct:libtorrent::peer_info
bw_global	torrent/src/peer_info.cpp	/^	constexpr bandwidth_state_flags_t peer_info::bw_global;$/;"	m	class:libtorrent::peer_info	file:
bw_idle	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr bandwidth_state_flags_t bw_idle = 0_bit;$/;"	m	struct:libtorrent::peer_info
bw_idle	torrent/src/peer_info.cpp	/^	constexpr bandwidth_state_flags_t peer_info::bw_idle;$/;"	m	class:libtorrent::peer_info	file:
bw_limit	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr bandwidth_state_flags_t bw_limit = 1_bit;$/;"	m	struct:libtorrent::peer_info
bw_limit	torrent/src/peer_info.cpp	/^	constexpr bandwidth_state_flags_t peer_info::bw_limit;$/;"	m	class:libtorrent::peer_info	file:
bw_network	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr bandwidth_state_flags_t bw_network = 2_bit;$/;"	m	struct:libtorrent::peer_info
bw_network	torrent/src/peer_info.cpp	/^	constexpr bandwidth_state_flags_t peer_info::bw_network;$/;"	m	class:libtorrent::peer_info	file:
bw_request	torrent/include/libtorrent/bandwidth_queue_entry.hpp	/^struct TORRENT_EXTRA_EXPORT bw_request$/;"	s	namespace:libtorrent
bw_request	torrent/src/bandwidth_queue_entry.cpp	/^	bw_request::bw_request(std::shared_ptr<bandwidth_socket> pe$/;"	f	class:libtorrent::bw_request
bw_torrent	torrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER static constexpr bandwidth_state_flags_t bw_torrent = bw_limit;$/;"	m	struct:libtorrent::peer_info
bw_torrent	torrent/src/peer_info.cpp	/^	constexpr bandwidth_state_flags_t peer_info::bw_torrent;$/;"	m	class:libtorrent::peer_info	file:
bytes	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		typename aux::aligned_storage<Size>::type bytes;$/;"	m	struct:libtorrent::aux::handler_storage
bytes	torrent/include/libtorrent/bitfield.hpp	/^		char const* bytes() const { return data(); }$/;"	f	struct:libtorrent::bitfield
bytes	torrent/include/libtorrent/kademlia/types.hpp	/^		std::array<char, len> bytes;$/;"	m	struct:libtorrent::dht::public_key
bytes	torrent/include/libtorrent/kademlia/types.hpp	/^		std::array<char, len> bytes;$/;"	m	struct:libtorrent::dht::secret_key
bytes	torrent/include/libtorrent/kademlia/types.hpp	/^		std::array<char, len> bytes;$/;"	m	struct:libtorrent::dht::signature
bytes_done	torrent/src/torrent.cpp	/^	void torrent::bytes_done(torrent_status& st, status_flags_t const flags) const$/;"	f	class:libtorrent::torrent
bytes_downloaded	torrent/include/libtorrent/piece_block_progress.hpp	/^		int bytes_downloaded;$/;"	m	struct:libtorrent::piece_block_progress
bytes_left	torrent/src/torrent.cpp	/^	boost::optional<std::int64_t> torrent::bytes_left() const$/;"	f	class:libtorrent::torrent
bytes_progress	torrent/include/libtorrent/torrent_handle.hpp	/^		unsigned bytes_progress:15;$/;"	m	struct:libtorrent::block_info
c	torrent/src/sha1.cpp	/^		u8 c[64];$/;"	m	union:libtorrent::__anon103::CHAR64LONG16	file:
cJSON	cJSON/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	cJSON/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON	include/cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	include/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddBoolToObject	cJSON/cJSON.h	132;"	d
cJSON_AddBoolToObject	include/cJSON.h	132;"	d
cJSON_AddFalseToObject	cJSON/cJSON.h	131;"	d
cJSON_AddFalseToObject	include/cJSON.h	131;"	d
cJSON_AddItemReferenceToArray	cJSON/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToArray	src/cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToObject	cJSON/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToObject	src/cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f
cJSON_AddItemToArray	cJSON/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f
cJSON_AddItemToArray	src/cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f
cJSON_AddItemToObject	cJSON/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddItemToObject	src/cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddNullToObject	cJSON/cJSON.h	129;"	d
cJSON_AddNullToObject	include/cJSON.h	129;"	d
cJSON_AddNumberToObject	cJSON/cJSON.h	133;"	d
cJSON_AddNumberToObject	include/cJSON.h	133;"	d
cJSON_AddStringToObject	cJSON/cJSON.h	134;"	d
cJSON_AddStringToObject	include/cJSON.h	134;"	d
cJSON_AddTrueToObject	cJSON/cJSON.h	130;"	d
cJSON_AddTrueToObject	include/cJSON.h	130;"	d
cJSON_Array	cJSON/cJSON.h	37;"	d
cJSON_Array	include/cJSON.h	37;"	d
cJSON_CreateArray	cJSON/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f
cJSON_CreateArray	src/cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f
cJSON_CreateBool	cJSON/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f
cJSON_CreateBool	src/cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f
cJSON_CreateDoubleArray	cJSON/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateDoubleArray	src/cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateFalse	cJSON/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f
cJSON_CreateFalse	src/cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f
cJSON_CreateFloatArray	cJSON/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateFloatArray	src/cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateIntArray	cJSON/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateIntArray	src/cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateNull	cJSON/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f
cJSON_CreateNull	src/cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f
cJSON_CreateNumber	cJSON/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f
cJSON_CreateNumber	src/cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f
cJSON_CreateObject	cJSON/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f
cJSON_CreateObject	src/cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f
cJSON_CreateString	cJSON/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f
cJSON_CreateString	src/cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f
cJSON_CreateStringArray	cJSON/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateStringArray	src/cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateTrue	cJSON/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f
cJSON_CreateTrue	src/cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f
cJSON_Delete	cJSON/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f
cJSON_Delete	src/cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f
cJSON_DeleteItemFromArray	cJSON/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f
cJSON_DeleteItemFromArray	src/cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f
cJSON_DeleteItemFromObject	cJSON/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f
cJSON_DeleteItemFromObject	src/cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f
cJSON_DetachItemFromArray	cJSON/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f
cJSON_DetachItemFromArray	src/cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f
cJSON_DetachItemFromObject	cJSON/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f
cJSON_DetachItemFromObject	src/cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f
cJSON_Duplicate	cJSON/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f
cJSON_Duplicate	src/cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f
cJSON_False	cJSON/cJSON.h	32;"	d
cJSON_False	include/cJSON.h	32;"	d
cJSON_GetArrayItem	cJSON/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f
cJSON_GetArrayItem	src/cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f
cJSON_GetArraySize	cJSON/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f
cJSON_GetArraySize	src/cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f
cJSON_GetErrorPtr	cJSON/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f
cJSON_GetErrorPtr	src/cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f
cJSON_GetObjectItem	cJSON/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f
cJSON_GetObjectItem	src/cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f
cJSON_Hooks	cJSON/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	cJSON/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_Hooks	include/cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	include/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	cJSON/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InitHooks	src/cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_IsReference	cJSON/cJSON.h	40;"	d
cJSON_IsReference	include/cJSON.h	40;"	d
cJSON_Minify	cJSON/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f
cJSON_Minify	src/cJSON.c	/^void cJSON_Minify(char *json)$/;"	f
cJSON_NULL	cJSON/cJSON.h	34;"	d
cJSON_NULL	include/cJSON.h	34;"	d
cJSON_New_Item	cJSON/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:
cJSON_New_Item	src/cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:
cJSON_Number	cJSON/cJSON.h	35;"	d
cJSON_Number	include/cJSON.h	35;"	d
cJSON_Object	cJSON/cJSON.h	38;"	d
cJSON_Object	include/cJSON.h	38;"	d
cJSON_Parse	cJSON/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f
cJSON_Parse	src/cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f
cJSON_ParseWithOpts	cJSON/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f
cJSON_ParseWithOpts	src/cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f
cJSON_Print	cJSON/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}$/;"	f
cJSON_Print	src/cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1);}$/;"	f
cJSON_PrintUnformatted	cJSON/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}$/;"	f
cJSON_PrintUnformatted	src/cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0);}$/;"	f
cJSON_ReplaceItemInArray	cJSON/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f
cJSON_ReplaceItemInArray	src/cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f
cJSON_ReplaceItemInObject	cJSON/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f
cJSON_ReplaceItemInObject	src/cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f
cJSON_SetIntValue	cJSON/cJSON.h	137;"	d
cJSON_SetIntValue	include/cJSON.h	137;"	d
cJSON_String	cJSON/cJSON.h	36;"	d
cJSON_String	include/cJSON.h	36;"	d
cJSON_True	cJSON/cJSON.h	33;"	d
cJSON_True	include/cJSON.h	33;"	d
cJSON__h	cJSON/cJSON.h	24;"	d
cJSON__h	include/cJSON.h	24;"	d
cJSON_free	cJSON/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_free	src/cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	cJSON/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_malloc	src/cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	cJSON/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:
cJSON_strcasecmp	src/cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:
cJSON_strdup	cJSON/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:
cJSON_strdup	src/cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:
c_isalnum	virt-p2v/include/gnulib/c-ctype.h	/^c_isalnum (int c)$/;"	f
c_isalpha	virt-p2v/include/gnulib/c-ctype.h	/^c_isalpha (int c)$/;"	f
c_isascii	virt-p2v/include/gnulib/c-ctype.h	/^c_isascii (int c)$/;"	f
c_isblank	virt-p2v/include/gnulib/c-ctype.h	/^c_isblank (int c)$/;"	f
c_iscntrl	virt-p2v/include/gnulib/c-ctype.h	/^c_iscntrl (int c)$/;"	f
c_isdigit	virt-p2v/include/gnulib/c-ctype.h	/^c_isdigit (int c)$/;"	f
c_isgraph	virt-p2v/include/gnulib/c-ctype.h	/^c_isgraph (int c)$/;"	f
c_islower	virt-p2v/include/gnulib/c-ctype.h	/^c_islower (int c)$/;"	f
c_isprint	virt-p2v/include/gnulib/c-ctype.h	/^c_isprint (int c)$/;"	f
c_ispunct	virt-p2v/include/gnulib/c-ctype.h	/^c_ispunct (int c)$/;"	f
c_isspace	virt-p2v/include/gnulib/c-ctype.h	/^c_isspace (int c)$/;"	f
c_isupper	virt-p2v/include/gnulib/c-ctype.h	/^c_isupper (int c)$/;"	f
c_isxdigit	virt-p2v/include/gnulib/c-ctype.h	/^c_isxdigit (int c)$/;"	f
c_tolower	virt-p2v/include/gnulib/c-ctype.h	/^c_tolower (int c)$/;"	f
c_toupper	virt-p2v/include/gnulib/c-ctype.h	/^c_toupper (int c)$/;"	f
cache	torrent/include/libtorrent/disk_io_thread.hpp	/^		block_cache* cache() { return &m_disk_cache; }$/;"	f	struct:libtorrent::final
cache_buffer_chunk_size	torrent/include/libtorrent/settings_pack.hpp	/^			cache_buffer_chunk_size TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
cache_check_active	torrent/include/libtorrent/disk_io_thread.hpp	/^			cache_check_active,$/;"	e	enum:libtorrent::final::__anon25
cache_check_idle	torrent/include/libtorrent/disk_io_thread.hpp	/^			cache_check_idle,$/;"	e	enum:libtorrent::final::__anon25
cache_check_reinvoke	torrent/include/libtorrent/disk_io_thread.hpp	/^			cache_check_reinvoke$/;"	e	enum:libtorrent::final::__anon25
cache_expiry	torrent/include/libtorrent/settings_pack.hpp	/^			cache_expiry,$/;"	e	enum:libtorrent::settings_pack::int_types
cache_flushed_alert	torrent/src/alert.cpp	/^	cache_flushed_alert::cache_flushed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::cache_flushed_alert
cache_hit	torrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t cache_hit:1;$/;"	m	struct:libtorrent::cached_block_entry
cache_hit	torrent/include/libtorrent/disk_interface.hpp	/^		static constexpr disk_job_flags_t cache_hit = 5_bit;$/;"	m	struct:libtorrent::disk_interface
cache_hit	torrent/src/block_cache.cpp	/^void block_cache::cache_hit(cached_piece_entry* p, int block, bool volatile_read)$/;"	f	class:libtorrent::block_cache
cache_hit	torrent/src/disk_io_thread.cpp	/^constexpr disk_job_flags_t disk_interface::cache_hit;$/;"	m	class:disk_interface	file:
cache_miss	torrent/include/libtorrent/block_cache.hpp	/^			cache_miss,$/;"	e	enum:libtorrent::block_cache::cache_op_t
cache_only	torrent/include/libtorrent/resolver_interface.hpp	/^	static constexpr resolver_flags cache_only = 0_bit;$/;"	m	struct:libtorrent::resolver_interface
cache_only	torrent/src/resolver.cpp	/^	constexpr resolver_flags resolver_interface::cache_only;$/;"	m	class:libtorrent::resolver_interface	file:
cache_op_t	torrent/include/libtorrent/block_cache.hpp	/^		enum cache_op_t$/;"	g	struct:libtorrent::block_cache
cache_size	torrent/bak/client_test.cpp	/^int cache_size = -1;$/;"	v
cache_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int cache_size;$/;"	m	struct:libtorrent::cache_status
cache_size	torrent/include/libtorrent/settings_pack.hpp	/^			cache_size,$/;"	e	enum:libtorrent::settings_pack::int_types
cache_size_volatile	torrent/include/libtorrent/settings_pack.hpp	/^			cache_size_volatile,$/;"	e	enum:libtorrent::settings_pack::int_types
cache_ssh_identity	virt-p2v/src/ssh.c	/^cache_ssh_identity (struct config *config)$/;"	f	file:
cache_state	torrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t cache_state:3;$/;"	m	struct:libtorrent::cached_piece_entry
cache_state_t	torrent/include/libtorrent/block_cache.hpp	/^		enum cache_state_t$/;"	g	struct:libtorrent::cached_piece_entry
cache_status	torrent/include/libtorrent/disk_io_thread.hpp	/^		cache_status()$/;"	f	struct:libtorrent::cache_status
cache_status	torrent/include/libtorrent/disk_io_thread.hpp	/^	struct TORRENT_EXPORT cache_status$/;"	s	namespace:libtorrent
cached_block_entry	torrent/include/libtorrent/block_cache.hpp	/^		cached_block_entry()$/;"	f	struct:libtorrent::cached_block_entry
cached_block_entry	torrent/include/libtorrent/block_cache.hpp	/^	struct cached_block_entry$/;"	s	namespace:libtorrent
cached_piece_entry	torrent/include/libtorrent/block_cache.hpp	/^	struct TORRENT_EXTRA_EXPORT cached_piece_entry$/;"	s	namespace:libtorrent
cached_piece_entry	torrent/src/block_cache.cpp	/^cached_piece_entry::cached_piece_entry()$/;"	f	class:libtorrent::cached_piece_entry
cached_piece_info	torrent/include/libtorrent/disk_io_thread.hpp	/^	struct cached_piece_info$/;"	s	namespace:libtorrent
cached_pieces	torrent/include/libtorrent/aux_/storage_piece_set.hpp	/^		list_t const& cached_pieces() const$/;"	f	struct:libtorrent::aux::storage_piece_set
calc_bytes	torrent/src/torrent.cpp	/^	std::int64_t calc_bytes(file_storage const& fs, piece_count const& pc)$/;"	f	namespace:libtorrent
calculateInnerRect	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::calculateInnerRect(const QRectF &\/*baseRect*\/, double outerRadius, QRectF &innerRect, double &innerRadius)$/;"	f	class:QRoundProgressBar
calculate_node_id	torrent/kademlia/node.cpp	/^node_id calculate_node_id(node_id const& nid, aux::listen_socket_handle const& sock)$/;"	f	namespace:libtorrent::dht::__anon147
calculate_pad_bytes	torrent/include/libtorrent/heterogeneous_queue.hpp	/^	inline std::size_t calculate_pad_bytes(char const* inptr, std::size_t alignment)$/;"	f	namespace:libtorrent::aux
call_abort	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void call_abort()$/;"	f	struct:libtorrent::aux::final
call_callback	torrent/src/disk_io_job.cpp	/^	void disk_io_job::call_callback()$/;"	f	class:libtorrent::disk_io_job
call_destructor	torrent/src/entry.cpp	/^	void call_destructor(T* o)$/;"	f	namespace:libtorrent::__anon62
callback	torrent/src/http_connection.cpp	/^void http_connection::callback(error_code e, span<char> data)$/;"	f	class:libtorrent::http_connection
callback	torrent/src/resolver.cpp	/^	void resolver::callback(resolver_interface::callback_t const& h$/;"	f	class:libtorrent::resolver
callback_called	torrent/include/libtorrent/disk_io_job.hpp	/^		mutable bool callback_called = false;$/;"	m	struct:libtorrent::disk_io_job
caller_visitor	torrent/src/disk_io_job.cpp	/^			explicit caller_visitor(disk_io_job& j)$/;"	f	struct:libtorrent::__anon115::caller_visitor
caller_visitor	torrent/src/disk_io_job.cpp	/^		struct caller_visitor : boost::static_visitor<>$/;"	s	namespace:libtorrent::__anon115	file:
calloc	virt-p2v/include/gnulib/stdlib.h	697;"	d
can_announce	torrent/src/announce_entry.cpp	/^	bool announce_endpoint::can_announce(time_point now, bool is_seed, std::uint8_t fail_limit) const$/;"	f	class:libtorrent::announce_endpoint
can_announce	torrent/src/announce_entry.cpp	/^	bool announce_entry::can_announce(time_point now, bool is_seed) const$/;"	f	class:libtorrent::announce_entry
can_broadcast	torrent/include/libtorrent/broadcast_socket.hpp	/^			bool can_broadcast() const$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
can_disconnect	torrent/include/libtorrent/extensions.hpp	/^		virtual bool can_disconnect(error_code const& \/*ec*\/) { return true; }$/;"	f	struct:libtorrent::peer_plugin
can_disconnect	torrent/src/peer_connection.cpp	/^	bool peer_connection::can_disconnect(error_code const& ec) const$/;"	f	class:libtorrent::peer_connection
can_disconnect	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::can_disconnect(error_code const& ec) const$/;"	f	class:libtorrent::peer_connection_handle
can_pick	torrent/src/piece_picker.cpp	/^	bool piece_picker::can_pick(piece_index_t const piece$/;"	f	class:libtorrent::piece_picker
can_read	torrent/src/peer_connection.cpp	/^	bool peer_connection::can_read()$/;"	f	class:libtorrent::peer_connection
can_request_time_critical	torrent/src/peer_connection.cpp	/^	bool peer_connection::can_request_time_critical() const$/;"	f	class:libtorrent::peer_connection
can_route	torrent/src/listen_socket_handle.cpp	/^	bool listen_socket_handle::can_route(address const& a) const$/;"	f	class:libtorrent::aux::listen_socket_handle
can_route	torrent/src/session_impl.cpp	/^	bool listen_socket_t::can_route(address const& addr) const$/;"	f	class:libtorrent::aux::listen_socket_t
can_write	torrent/src/peer_connection.cpp	/^	bool peer_connection::can_write() const$/;"	f	class:libtorrent::peer_connection
cancel	torrent/include/libtorrent/proxy_base.hpp	/^	error_code cancel(error_code& ec)$/;"	f	class:libtorrent::proxy_base
cancel	torrent/include/libtorrent/utp_stream.hpp	/^	error_code cancel(error_code&)$/;"	f	struct:libtorrent::utp_stream
cancel	torrent/src/tracker_manager.cpp	/^	void timeout_handler::cancel()$/;"	f	class:libtorrent::timeout_handler
cancel_all_requests	torrent/src/peer_connection.cpp	/^	void peer_connection::cancel_all_requests()$/;"	f	class:libtorrent::peer_connection
cancel_block	torrent/src/torrent.cpp	/^	void torrent::cancel_block(piece_block block)$/;"	f	class:libtorrent::torrent
cancel_button	virt-p2v/src/gui.c	/^  *cancel_button, *shutdown_button;$/;"	v	file:
cancel_conversion	virt-p2v/src/conversion.c	/^cancel_conversion (void)$/;"	f
cancel_conversion_dialog	virt-p2v/src/gui.c	/^cancel_conversion_dialog (GtkWidget *w, gpointer data)$/;"	f	file:
cancel_handlers	torrent/src/utp_stream.cpp	/^bool utp_socket_impl::cancel_handlers(error_code const& ec, bool shutdown)$/;"	f	class:libtorrent::utp_socket_impl
cancel_handlers	torrent/src/utp_stream.cpp	/^void utp_stream::cancel_handlers(error_code const& ec)$/;"	f	class:libtorrent::utp_stream
cancel_non_critical	torrent/src/torrent.cpp	/^	void torrent::cancel_non_critical()$/;"	f	class:libtorrent::torrent
cancel_request	torrent/src/peer_connection.cpp	/^	void peer_connection::cancel_request(piece_block const& block, bool const force)$/;"	f	class:libtorrent::peer_connection
cancel_requested	virt-p2v/src/conversion.c	/^static int cancel_requested = 0;$/;"	v	file:
cancel_requested_mutex	virt-p2v/src/conversion.c	/^static pthread_mutex_t cancel_requested_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
cancelled	torrent/include/libtorrent/tracker_manager.hpp	/^		bool cancelled() const { return m_abort; }$/;"	f	struct:libtorrent::timeout_handler
cancelled_piece_requests	torrent/include/libtorrent/performance_counters.hpp	/^			cancelled_piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
canonical_string	torrent/kademlia/item.cpp	/^	int canonical_string(span<char const> v$/;"	f	namespace:libtorrent::dht::__anon155
canonicalize_file_name	virt-p2v/include/gnulib/stdlib.h	720;"	d
canonicalize_path	torrent/src/path.cpp	/^	std::string canonicalize_path(string_view f)$/;"	f	namespace:libtorrent
cant_reach_peer	torrent/include/libtorrent/i2p_stream.hpp	/^			cant_reach_peer,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
capacity	torrent/include/libtorrent/chained_buffer.hpp	/^		int capacity() const { return m_capacity; }$/;"	f	namespace:libtorrent
capacity	torrent/include/libtorrent/netlink.hpp	/^		std::size_t capacity() const$/;"	f	class:libtorrent::basic_nl_endpoint
capacity	torrent/include/libtorrent/packet_buffer.hpp	/^		std::uint32_t capacity() const$/;"	f	class:libtorrent::packet_buffer
capacity	torrent/include/libtorrent/receive_buffer.hpp	/^	int capacity() const { return aux::numeric_cast<int>(m_recv_buffer.size()); }$/;"	f	struct:libtorrent::receive_buffer
capacity	torrent/src/lazy_bdecode.cpp	/^	int lazy_entry::capacity() const$/;"	f	class:libtorrent::lazy_entry
cast_vote	torrent/src/ip_voter.cpp	/^	bool ip_voter::cast_vote(address const& ip$/;"	f	class:libtorrent::ip_voter
categories	torrent/include/libtorrent/piece_picker.hpp	/^		index_range<download_queue_t> categories() const$/;"	f	class:libtorrent::piece_picker
cd	torrent/src/escape_string.cpp	/^		, iconv_t cd, char const** in, size_t* insize, char** out, size_t* outsize)$/;"	m	namespace:libtorrent::__anon38	file:
chained_buffer	torrent/include/libtorrent/chained_buffer.hpp	/^		chained_buffer(): m_bytes(0), m_capacity(0)$/;"	f	struct:libtorrent::chained_buffer
chained_buffer	torrent/include/libtorrent/chained_buffer.hpp	/^	struct TORRENT_EXTRA_EXPORT chained_buffer : private single_threaded$/;"	s	namespace:libtorrent
change_back_file_qcow2	src/qcow2.c	/^int change_back_file_qcow2(PedDevice *dev, char *name, uint32_t diff)$/;"	f
channel	torrent/include/libtorrent/peer_class.hpp	/^		bandwidth_channel channel[2];$/;"	m	struct:libtorrent::peer_class
channels	torrent/include/libtorrent/peer_connection.hpp	/^		enum channels$/;"	g	class:libtorrent::peer_connection
character_special	torrent/include/libtorrent/aux_/path.hpp	/^			character_special = 0x2000,  \/\/ character special$/;"	e	enum:libtorrent::file_status::__anon31
chdir	virt-p2v/include/gnulib/unistd.h	759;"	d
check	torrent/src/peer_connection.cpp	/^		void check()$/;"	f	struct:libtorrent::check_postcondition
check_buffer_level	torrent/src/disk_buffer_pool.cpp	/^	void disk_buffer_pool::check_buffer_level(std::unique_lock<std::mutex>& l)$/;"	f	class:libtorrent::disk_buffer_pool
check_data_sh	src/shell.c	/^char check_data_sh[] = {"#!\/bin\/sh \\n"$/;"	v
check_fastresume	torrent/include/libtorrent/disk_io_job.hpp	/^		, check_fastresume$/;"	m	class:libtorrent::job_action_t
check_files	torrent/include/libtorrent/torrent.hpp	/^		enum class seed_mode_t { check_files, skip_checking };$/;"	m	class:libtorrent::torrent::seed_mode_t
check_graceful_pause	torrent/src/peer_connection.cpp	/^	void peer_connection::check_graceful_pause()$/;"	f	class:libtorrent::peer_connection
check_integer	torrent/src/bdecode.cpp	/^	char const* check_integer(char const* start, char const* end$/;"	f	namespace:libtorrent::__anon40
check_invariant	torrent/include/libtorrent/invariant_check.hpp	/^		static void check_invariant(T const& self)$/;"	f	class:libtorrent::invariant_access
check_invariant	torrent/include/libtorrent/invariant_check.hpp	/^	void check_invariant(T const& x)$/;"	f	namespace:libtorrent
check_invariant	torrent/include/libtorrent/receive_buffer.hpp	/^	void check_invariant() const$/;"	f	struct:libtorrent::receive_buffer
check_invariant	torrent/kademlia/routing_table.cpp	/^void routing_table::check_invariant() const$/;"	f	class:libtorrent::dht::routing_table
check_invariant	torrent/kademlia/rpc_manager.cpp	/^void rpc_manager::check_invariant() const$/;"	f	class:libtorrent::dht::rpc_manager
check_invariant	torrent/src/bandwidth_manager.cpp	/^	void bandwidth_manager::check_invariant() const$/;"	f	class:libtorrent::bandwidth_manager
check_invariant	torrent/src/block_cache.cpp	/^void block_cache::check_invariant() const$/;"	f	class:libtorrent::block_cache
check_invariant	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::check_invariant() const$/;"	f	class:libtorrent::bt_peer_connection
check_invariant	torrent/src/file_progress.cpp	/^	void file_progress::check_invariant() const$/;"	f	class:libtorrent::aux::file_progress
check_invariant	torrent/src/packet_buffer.cpp	/^	void packet_buffer::check_invariant() const$/;"	f	class:libtorrent::packet_buffer
check_invariant	torrent/src/peer_connection.cpp	/^	void peer_connection::check_invariant() const$/;"	f	class:libtorrent::peer_connection
check_invariant	torrent/src/peer_list.cpp	/^	void peer_list::check_invariant() const$/;"	f	class:libtorrent::peer_list
check_invariant	torrent/src/piece_picker.cpp	/^	void piece_picker::check_invariant(torrent const* t) const$/;"	f	class:libtorrent::piece_picker
check_invariant	torrent/src/session_impl.cpp	/^	void session_impl::check_invariant() const$/;"	f	class:libtorrent::aux::session_impl
check_invariant	torrent/src/torrent.cpp	/^	void torrent::check_invariant() const$/;"	f	class:libtorrent::torrent
check_invariant	torrent/src/torrent_info.cpp	/^	void torrent_info::check_invariant() const$/;"	f	class:libtorrent::torrent_info
check_invariant	torrent/src/utp_stream.cpp	/^void utp_socket_impl::check_invariant() const$/;"	f	class:libtorrent::utp_socket_impl
check_invariant	torrent/src/web_connection_base.cpp	/^	void web_connection_base::check_invariant() const$/;"	f	class:libtorrent::web_connection_base
check_peer_invariant	torrent/src/piece_picker.cpp	/^	void piece_picker::check_peer_invariant(typed_bitfield<piece_index_t> const& have$/;"	f	class:libtorrent::piece_picker
check_peers	torrent/src/piece_picker.cpp	/^	void piece_picker::check_peers()$/;"	f	class:libtorrent::piece_picker
check_piece_state	torrent/src/piece_picker.cpp	/^	void piece_picker::check_piece_state() const$/;"	f	class:libtorrent::piece_picker
check_postcondition	torrent/src/peer_connection.cpp	/^		explicit check_postcondition(std::shared_ptr<torrent> const& t_$/;"	f	struct:libtorrent::check_postcondition
check_postcondition	torrent/src/peer_connection.cpp	/^	struct check_postcondition$/;"	s	namespace:libtorrent	file:
check_qcow2	src/qcow2.c	/^int check_qcow2(PedDevice *dev)$/;"	f
check_receive_buffers	torrent/src/utp_stream.cpp	/^void utp_socket_impl::check_receive_buffers() const$/;"	f	class:libtorrent::utp_socket_impl
check_resume	torrent/include/libtorrent/operations.hpp	/^		check_resume,$/;"	m	class:libtorrent::operation_t
checking_files	torrent/include/libtorrent/torrent_status.hpp	/^			checking_files,$/;"	e	enum:libtorrent::torrent_status::state_t
checking_mem_usage	torrent/include/libtorrent/settings_pack.hpp	/^			checking_mem_usage,$/;"	e	enum:libtorrent::settings_pack::int_types
checking_resume_data	torrent/include/libtorrent/torrent_status.hpp	/^			checking_resume_data$/;"	e	enum:libtorrent::torrent_status::state_t
child	cJSON/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
child	include/cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
choke_peer	torrent/src/torrent.cpp	/^	bool torrent::choke_peer(peer_connection& c)$/;"	f	class:libtorrent::torrent
choke_this_peer	torrent/src/peer_connection.cpp	/^	void peer_connection::choke_this_peer()$/;"	f	class:libtorrent::peer_connection
choke_this_peer	torrent/src/peer_connection_handle.cpp	/^void peer_connection_handle::choke_this_peer()$/;"	f	class:libtorrent::peer_connection_handle
choked	torrent/bak/connection_tester.cpp	/^	bool choked;$/;"	m	struct:peer_conn	file:
choked	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t choked = 1_bit;$/;"	m	struct:libtorrent::peer_info
choked	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::choked;$/;"	m	class:libtorrent::peer_info	file:
choked_piece_requests	torrent/include/libtorrent/performance_counters.hpp	/^			choked_piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
choking_algorithm	torrent/include/libtorrent/settings_pack.hpp	/^			choking_algorithm,$/;"	e	enum:libtorrent::settings_pack::int_types
chown	virt-p2v/include/gnulib/unistd.h	790;"	d
chunked_encoding	torrent/include/libtorrent/http_parser.hpp	/^		bool chunked_encoding() const { return m_chunked_encoding; }$/;"	f	class:libtorrent::http_parser
chunks	torrent/include/libtorrent/http_parser.hpp	/^		std::vector<std::pair<std::int64_t, std::int64_t>> const& chunks() const { return m_chunked_ranges; }$/;"	f	class:libtorrent::http_parser::std
churn	torrent/bak/connection_tester.cpp	/^	int churn;$/;"	m	struct:peer_conn	file:
clamp	torrent/include/libtorrent/aux_/numeric_cast.hpp	/^	T clamp(T v, T lo, T hi)$/;"	f	namespace:libtorrent::aux
clamped_subtract_u16	torrent/src/torrent.cpp	/^	std::uint16_t clamped_subtract_u16(int const a, int const b)$/;"	f	namespace:libtorrent::__anon111
class_at	torrent/include/libtorrent/peer_class_set.hpp	/^		peer_class_t class_at(int i) const$/;"	f	struct:libtorrent::peer_class_set
classify_prefix	torrent/kademlia/routing_table.cpp	/^std::uint8_t classify_prefix(int const bucket_idx, bool const last_bucket$/;"	f	namespace:libtorrent::dht
cleanup_data_conns	virt-p2v/src/conversion.c	/^cleanup_data_conns (struct data_conn *data_conns, size_t nr)$/;"	f	file:
clear	torrent/bak/udp_tracker.cpp	/^    void clear()$/;"	f	class:CDataStream
clear	torrent/include/libtorrent/bloom_filter.hpp	/^		void clear() { std::memset(bits, 0, N); }$/;"	f	struct:libtorrent::bloom_filter
clear	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		void clear()$/;"	f	struct:libtorrent::heterogeneous_queue
clear	torrent/include/libtorrent/kademlia/item.hpp	/^	void clear() { m_value = entry(); }$/;"	f	class:libtorrent::dht::item
clear	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	void clear()$/;"	f	struct:libtorrent::dht::ip_set
clear	torrent/include/libtorrent/link.hpp	/^		void clear() { index = -1; }$/;"	f	struct:libtorrent::link
clear	torrent/include/libtorrent/peer_class.hpp	/^		void clear()$/;"	f	struct:libtorrent::peer_class
clear	torrent/include/libtorrent/stat.hpp	/^		void clear()$/;"	f	class:libtorrent::stat
clear	torrent/include/libtorrent/stat.hpp	/^		void clear()$/;"	f	class:libtorrent::stat_channel
clear	torrent/kademlia/dht_state.cpp	/^	void dht_state::clear()$/;"	f	class:libtorrent::dht::dht_state
clear	torrent/src/bdecode.cpp	/^	void bdecode_node::clear()$/;"	f	class:libtorrent::bdecode_node
clear	torrent/src/block_cache.cpp	/^void block_cache::clear(tailqueue<disk_io_job>& jobs)$/;"	f	class:libtorrent::block_cache
clear	torrent/src/chained_buffer.cpp	/^	void chained_buffer::clear()$/;"	f	class:libtorrent::chained_buffer
clear	torrent/src/file_progress.cpp	/^	void file_progress::clear()$/;"	f	class:libtorrent::aux::file_progress
clear	torrent/src/lazy_bdecode.cpp	/^	void lazy_entry::clear()$/;"	f	class:libtorrent::lazy_entry
clear	torrent/src/peer_list.cpp	/^	void peer_list::clear()$/;"	f	class:libtorrent::peer_list
clear	torrent/src/settings_pack.cpp	/^	void settings_pack::clear()$/;"	f	class:libtorrent::settings_pack
clear	torrent/src/settings_pack.cpp	/^	void settings_pack::clear(int const name)$/;"	f	class:libtorrent::settings_pack
clear	torrent/src/stat_cache.cpp	/^	void stat_cache::clear()$/;"	f	class:libtorrent::stat_cache
clear_bit	torrent/include/libtorrent/bitfield.hpp	/^		void clear_bit(IndexType const index)$/;"	f	namespace:libtorrent
clear_buffer	virt-p2v/miniexpect/miniexpect.c	/^clear_buffer (mexp_h *h)$/;"	f	file:
clear_bufs	torrent/src/storage_utils.cpp	/^	void clear_bufs(span<iovec_t const> bufs)$/;"	f	namespace:libtorrent::aux
clear_disk_cache	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr pause_flags_t clear_disk_cache = 1_bit;$/;"	m	struct:libtorrent::torrent_handle
clear_disk_cache	torrent/src/torrent_handle.cpp	/^	constexpr pause_flags_t torrent_handle::clear_disk_cache;$/;"	m	class:libtorrent::torrent_handle	file:
clear_download_queue	torrent/src/peer_connection.cpp	/^	void peer_connection::clear_download_queue()$/;"	f	class:libtorrent::peer_connection
clear_error	torrent/src/torrent.cpp	/^	void torrent::clear_error()$/;"	f	class:libtorrent::torrent
clear_error	torrent/src/torrent_handle.cpp	/^	void torrent_handle::clear_error() const$/;"	f	class:libtorrent::torrent_handle
clear_failcount	torrent/src/torrent.cpp	/^	void torrent::clear_failcount(torrent_peer* p)$/;"	f	class:libtorrent::torrent
clear_in_state_update	torrent/include/libtorrent/torrent.hpp	/^		void clear_in_state_update()$/;"	f	class:libtorrent::torrent
clear_outstanding_jobs	torrent/include/libtorrent/block_cache.hpp	/^			clear_outstanding_jobs,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
clear_peer	torrent/src/piece_picker.cpp	/^	void piece_picker::clear_peer(torrent_peer* peer)$/;"	f	class:libtorrent::piece_picker
clear_peer_prio	torrent/src/peer_list.cpp	/^	void peer_list::clear_peer_prio()$/;"	f	class:libtorrent::peer_list
clear_piece	torrent/include/libtorrent/disk_io_job.hpp	/^		, clear_piece$/;"	m	class:libtorrent::job_action_t
clear_piece_deadlines	torrent/src/torrent_handle.cpp	/^	void torrent_handle::clear_piece_deadlines() const$/;"	f	class:libtorrent::torrent_handle
clear_queue	src/queue.c	/^void clear_queue(QUEUE *pQueue)$/;"	f
clear_request_queue	torrent/src/peer_connection.cpp	/^	void peer_connection::clear_request_queue()$/;"	f	class:libtorrent::peer_connection
clear_rows	torrent/bak/print.cpp	/^void clear_rows(int y1, int y2)$/;"	f
clear_screen	torrent/bak/print.cpp	/^void clear_screen()$/;"	f
clear_task	src/task.c	/^void clear_task()$/;"	f
clear_time_critical	torrent/src/torrent.cpp	/^	void torrent::clear_time_critical()$/;"	f	class:libtorrent::torrent
client	include/client.h	/^struct client$/;"	s
client	torrent/include/libtorrent/peer_info.hpp	/^		std::string client;$/;"	m	struct:libtorrent::peer_info
clientIP	include/StoreConfig.h	/^    uint64_t            clientIP;$/;"	m	struct:_YZY_STORE_CONFIG
clientType	include/packet.h	/^    u8_t   clientType;          \/\/ç»ç«¯ç±»å       ä¾å¦ 0x01: uefi 0x02:linux  0x03: windows 0x04: server$/;"	m	struct:yzy_packet
client_connect	src/client.c	/^void client_connect()$/;"	f
client_disconnect	src/client.c	/^void client_disconnect()$/;"	f
client_fingerprint	torrent/src/identify_client.cpp	/^	boost::optional<fingerprint> client_fingerprint(peer_id const& p)$/;"	f	namespace:libtorrent
client_online	src/client.c	/^void client_online()$/;"	f
clients	test/test.c	/^struct client **clients = NULL;$/;"	v	typeref:struct:client
close	torrent/bak/connection_tester.cpp	/^	void close(char const* fmt, error_code const& ec)$/;"	f	struct:peer_conn
close	torrent/include/libtorrent/broadcast_socket.hpp	/^			void close()$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
close	torrent/include/libtorrent/http_stream.hpp	/^	void close()$/;"	f	class:libtorrent::http_stream
close	torrent/include/libtorrent/http_stream.hpp	/^	void close(error_code& ec)$/;"	f	class:libtorrent::http_stream
close	torrent/include/libtorrent/proxy_base.hpp	/^	void close()$/;"	f	class:libtorrent::proxy_base
close	torrent/include/libtorrent/proxy_base.hpp	/^	void close(error_code& ec)$/;"	f	class:libtorrent::proxy_base
close	torrent/include/libtorrent/socks5_stream.hpp	/^	void close()$/;"	f	class:libtorrent::socks5_stream
close	torrent/include/libtorrent/socks5_stream.hpp	/^	void close(error_code& ec)$/;"	f	class:libtorrent::socks5_stream
close	torrent/include/libtorrent/ssl_stream.hpp	/^	void close()$/;"	f	class:libtorrent::ssl_stream
close	torrent/include/libtorrent/ssl_stream.hpp	/^	void close(error_code& ec)$/;"	f	class:libtorrent::ssl_stream
close	torrent/include/libtorrent/utp_stream.hpp	/^	void close(error_code const&) { close(); }$/;"	f	struct:libtorrent::utp_stream
close	torrent/src/bandwidth_manager.cpp	/^	void bandwidth_manager::close()$/;"	f	class:libtorrent::bandwidth_manager
close	torrent/src/broadcast_socket.cpp	/^	void broadcast_socket::close()$/;"	f	class:libtorrent::broadcast_socket
close	torrent/src/file.cpp	/^	void file::close()$/;"	f	class:libtorrent::file
close	torrent/src/http_connection.cpp	/^void http_connection::close(bool force)$/;"	f	class:libtorrent::http_connection
close	torrent/src/http_tracker_connection.cpp	/^	void http_tracker_connection::close()$/;"	f	class:libtorrent::http_tracker_connection
close	torrent/src/i2p_stream.cpp	/^	void i2p_connection::close(error_code& e)$/;"	f	class:libtorrent::i2p_connection
close	torrent/src/lsd.cpp	/^void lsd::close()$/;"	f	class:libtorrent::lsd
close	torrent/src/natpmp.cpp	/^void natpmp::close()$/;"	f	class:libtorrent::natpmp
close	torrent/src/socket_type.cpp	/^	void socket_type::close()$/;"	f	class:libtorrent::aux::socket_type
close	torrent/src/socket_type.cpp	/^	void socket_type::close(error_code& ec)$/;"	f	class:libtorrent::aux::socket_type
close	torrent/src/udp_socket.cpp	/^void socks5::close()$/;"	f	class:libtorrent::socks5
close	torrent/src/udp_socket.cpp	/^void udp_socket::close()$/;"	f	class:libtorrent::udp_socket
close	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::close()$/;"	f	class:libtorrent::udp_tracker_connection
close	torrent/src/upnp.cpp	/^void upnp::close()$/;"	f	class:libtorrent::upnp
close	torrent/src/utp_stream.cpp	/^void utp_stream::close()$/;"	f	class:libtorrent::utp_stream
close	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (close);$/;"	v
close	virt-p2v/include/gnulib/unistd.h	813;"	d
close	virt-p2v/include/gnulib/unistd.h	814;"	d
close	virt-p2v/include/gnulib/unistd.h	816;"	d
closePipe	qt_pro/global.cpp	/^void Global::closePipe()$/;"	f	class:Global
close_client	test/test.c	/^void close_client(struct client *cli)$/;"	f
close_fd	src/socket.c	/^void close_fd(int fd) $/;"	f
close_file_interval	torrent/include/libtorrent/settings_pack.hpp	/^			close_file_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
close_impl	torrent/src/natpmp.cpp	/^void natpmp::close_impl()$/;"	f	class:libtorrent::natpmp
close_logs	src/log.c	/^void close_logs()$/;"	f
close_oldest	torrent/src/file_pool.cpp	/^	void file_pool::close_oldest()$/;"	f	class:libtorrent::file_pool
close_pipe	qt_pro/pipethread.cpp	/^void PipeThread::close_pipe()$/;"	f	class:PipeThread
close_pipe	src/main.c	/^void close_pipe()$/;"	f
close_reason_t	torrent/include/libtorrent/close_reason.hpp	/^	enum class close_reason_t : std::uint16_t$/;"	c	namespace:libtorrent
close_redundant_connections	torrent/include/libtorrent/settings_pack.hpp	/^			close_redundant_connections,$/;"	e	enum:libtorrent::settings_pack::bool_types
close_running_dialog	virt-p2v/src/gui.c	/^close_running_dialog (GtkWidget *w, GdkEvent *event, gpointer data)$/;"	f	file:
cluster_bits	include/qcow2.h	/^    uint32_t cluster_bits;$/;"	m	struct:_QCowHeader
cluster_bits	test/check.c	/^    uint32_t cluster_bits;$/;"	m	struct:_QCowHeader	file:
cmd	include/socket.h	/^    unsigned short cmd;$/;"	m	struct:_req_head
cmd	qt_pro/pipethread.cpp	/^    unsigned short cmd;$/;"	m	struct:_req_head	file:
cmd_accept	torrent/include/libtorrent/i2p_stream.hpp	/^		cmd_accept,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_connect	torrent/include/libtorrent/i2p_stream.hpp	/^		cmd_connect,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_create_session	torrent/include/libtorrent/i2p_stream.hpp	/^		cmd_create_session,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_incoming	torrent/include/libtorrent/i2p_stream.hpp	/^		cmd_incoming$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_name_lookup	torrent/include/libtorrent/i2p_stream.hpp	/^		cmd_name_lookup,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmd_none	torrent/include/libtorrent/i2p_stream.hpp	/^		cmd_none,$/;"	e	enum:libtorrent::i2p_stream::command_t
cmdline_servers	virt-p2v/src/nbd.c	/^static enum nbd_server *cmdline_servers = NULL;$/;"	v	typeref:enum:nbd_server	file:
cmov	torrent/ed25519/ge.cpp	/^static void cmov(ge_precomp *t, const ge_precomp *u, unsigned char b) {$/;"	f	file:
coalesce_buffers	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t coalesce_buffers = 6_bit;$/;"	m	namespace:libtorrent::open_mode
coalesce_read_buffers	torrent/src/file.cpp	/^	bool coalesce_read_buffers(span<iovec_t const>& bufs$/;"	f	namespace:libtorrent::__anon81
coalesce_read_buffers_end	torrent/src/file.cpp	/^	void coalesce_read_buffers_end(span<iovec_t const> bufs$/;"	f	namespace:libtorrent::__anon81
coalesce_reads	torrent/include/libtorrent/settings_pack.hpp	/^			coalesce_reads,$/;"	e	enum:libtorrent::settings_pack::bool_types
coalesce_write_buffers	torrent/src/file.cpp	/^	bool coalesce_write_buffers(span<iovec_t const>& bufs$/;"	f	namespace:libtorrent::__anon81
coalesce_writes	torrent/include/libtorrent/settings_pack.hpp	/^			coalesce_writes,$/;"	e	enum:libtorrent::settings_pack::bool_types
code	torrent/src/upnp.cpp	/^		int code;$/;"	m	struct:libtorrent::__anon124::error_code_t	file:
code_lengths_codes_incomplete	torrent/include/libtorrent/gzip.hpp	/^			code_lengths_codes_incomplete,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
codes	torrent/src/puff.cpp	/^local int codes(struct state *s,$/;"	f
col_black	torrent/bak/print.hpp	/^	col_black = 0,$/;"	e	enum:color_code
col_blue	torrent/bak/print.hpp	/^	col_blue = 4,$/;"	e	enum:color_code
col_cyan	torrent/bak/print.hpp	/^	col_cyan = 6,$/;"	e	enum:color_code
col_green	torrent/bak/print.hpp	/^	col_green = 2,$/;"	e	enum:color_code
col_magenta	torrent/bak/print.hpp	/^	col_magenta = 5,$/;"	e	enum:color_code
col_none	torrent/bak/print.hpp	/^	col_none = -1,$/;"	e	enum:color_code
col_red	torrent/bak/print.hpp	/^	col_red = 1,$/;"	e	enum:color_code
col_white	torrent/bak/print.hpp	/^	col_white = 7$/;"	e	enum:color_code
col_yellow	torrent/bak/print.hpp	/^	col_yellow = 3,$/;"	e	enum:color_code
collapse_chunk_headers	torrent/src/http_parser.cpp	/^	span<char> http_parser::collapse_chunk_headers(span<char> buffer) const$/;"	f	class:libtorrent::http_parser
collections	torrent/src/torrent_info.cpp	/^	std::vector<std::string> torrent_info::collections() const$/;"	f	class:libtorrent::torrent_info
color	torrent/bak/print.cpp	/^std::string color(std::string const& s, color_code c)$/;"	f
color_code	torrent/bak/print.hpp	/^enum color_code$/;"	g
combine_path	torrent/src/path.cpp	/^	std::string combine_path(string_view lhs, string_view rhs)$/;"	f	namespace:libtorrent
command_not_supported	torrent/include/libtorrent/socks5_stream.hpp	/^		command_not_supported,$/;"	e	enum:libtorrent::socks_error::socks_error_code
command_t	torrent/include/libtorrent/i2p_stream.hpp	/^	enum command_t$/;"	g	class:libtorrent::i2p_stream
comment	torrent/include/libtorrent/torrent_info.hpp	/^		const std::string& comment() const$/;"	f	class:libtorrent::torrent_info
comment	virt-p2v/include/libxml2-writer-macros.h	193;"	d
comment	virt-p2v/libguestfs/libxml2-writer-macros.h	193;"	d
compare	virt-p2v/src/p2v.c	/^compare (const void *vp1, const void *vp2)$/;"	f	file:
compare	virt-p2v/src/p2v_transform.c	/^compare (const void *vp1, const void *vp2)$/;"	f	file:
compare_disconnect_peer	torrent/src/torrent.cpp	/^	bool compare_disconnect_peer(peer_connection const* lhs, peer_connection const* rhs)$/;"	f	namespace:libtorrent::__anon110
compare_disconnect_torrent	torrent/src/session_impl.cpp	/^	bool compare_disconnect_torrent(session_impl::torrent_map::value_type const& lhs$/;"	f	namespace:libtorrent::aux::__anon50
compare_file_offset	torrent/src/file_storage.cpp	/^	bool compare_file_offset(internal_file_entry const& lhs$/;"	f	namespace:libtorrent::__anon57
compare_first	torrent/src/settings_pack.cpp	/^	bool compare_first(std::pair<std::uint16_t, T> const& lhs$/;"	f	namespace:__anon93
compare_id	torrent/src/identify_client.cpp	/^	bool compare_id(map_entry const& lhs, map_entry const& rhs)$/;"	f	namespace:__anon59
compare_ip_cidr	torrent/kademlia/routing_table.cpp	/^bool compare_ip_cidr(address const& lhs, address const& rhs)$/;"	f	namespace:libtorrent::dht
compare_less_wrap	torrent/src/utp_stream.cpp	/^bool compare_less_wrap(std::uint32_t lhs$/;"	f	namespace:libtorrent
compare_path	torrent/src/path.cpp	/^	bool compare_path(std::string const& lhs, std::string const& rhs)$/;"	f	namespace:libtorrent
compare_peer	torrent/src/peer_list.cpp	/^	bool peer_list::compare_peer(torrent_peer const* lhs, torrent_peer const* rhs$/;"	f	class:libtorrent::peer_list
compare_peer_erase	torrent/src/peer_list.cpp	/^	bool peer_list::compare_peer_erase(torrent_peer const& lhs, torrent_peer const& rhs) const$/;"	f	class:libtorrent::peer_list
compare_peers	torrent/src/choker.cpp	/^	int compare_peers(peer_connection const* lhs, peer_connection const* rhs)$/;"	f	namespace:libtorrent::__anon91
compare_ref	torrent/kademlia/node_id.cpp	/^bool compare_ref(node_id const& n1, node_id const& n2, node_id const& ref)$/;"	f	namespace:libtorrent::dht
compare_torrent	torrent/bak/torrent_view.cpp	/^bool compare_torrent(lt::torrent_status const* lhs, lt::torrent_status const* rhs)$/;"	f
compatible_type	torrent/include/libtorrent/span.hpp	/^	struct compatible_type$/;"	s	namespace:libtorrent::aux
compatible_version	virt-p2v/src/ssh.c	/^compatible_version (const char *v2v_version)$/;"	f	file:
compile_regexps	virt-p2v/src/ssh.c	/^compile_regexps (void)$/;"	f	file:
complete	src/torrent.cpp	/^int complete = 0;$/;"	v
complete	torrent/include/libtorrent/alert_types.hpp	/^		int const complete;$/;"	m	struct:libtorrent::final
complete	torrent/include/libtorrent/tracker_manager.hpp	/^		int complete;$/;"	m	struct:libtorrent::tracker_response
complete	torrent/src/path.cpp	/^	std::string complete(string_view f)$/;"	f	namespace:libtorrent
complete_async	torrent/include/libtorrent/debug.hpp	/^	inline void complete_async(char const* name)$/;"	f	namespace:libtorrent
complete_sent	torrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER complete_sent:1;$/;"	m	struct:libtorrent::announce_entry
complete_sent	torrent/include/libtorrent/announce_entry.hpp	/^		bool complete_sent : 1;$/;"	m	struct:libtorrent::announce_endpoint
completed	torrent/include/libtorrent/tracker_manager.hpp	/^			completed,$/;"	e	enum:libtorrent::tracker_request::event_t
completed	torrent/src/disk_io_job.cpp	/^	bool disk_io_job::completed(cached_piece_entry const* pe)$/;"	f	class:libtorrent::disk_io_job
completed	torrent/src/torrent.cpp	/^	void torrent::completed()$/;"	f	class:libtorrent::torrent
completed_piece	torrent/src/create_torrent.cpp	/^		piece_index_t completed_piece;$/;"	m	struct:libtorrent::__anon134::hash_state	file:
completed_time	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t completed_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
completed_time	torrent/include/libtorrent/torrent_status.hpp	/^		std::time_t completed_time = 0;$/;"	m	struct:libtorrent::torrent_status
compute_secret	torrent/src/pe_crypto.cpp	/^	void dh_key_exchange::compute_secret(key_t const& remote_pubkey)$/;"	f	class:libtorrent::dh_key_exchange
compute_secret	torrent/src/pe_crypto.cpp	/^	void dh_key_exchange::compute_secret(std::uint8_t const* remote_pubkey)$/;"	f	class:libtorrent::dh_key_exchange
computerName	include/StoreConfig.h	/^    uint8_t             computerName[32];$/;"	m	struct:_YZY_STORE_CONFIG
concat	torrent/kademlia/dht_tracker.cpp	/^	std::vector<udp::endpoint> concat(std::vector<udp::endpoint> const& v1$/;"	f	namespace:libtorrent::dht::__anon150
concat_warning	virt-p2v/src/gui.c	/^concat_warning (char *warning, const char *fs, ...)$/;"	f	file:
cond	torrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable std::condition_variable cond;$/;"	m	struct:libtorrent::aux::final
conf	qt_pro/global.h	/^    struct config conf;$/;"	m	class:Global	typeref:struct:Global::config
conf	src/main.c	/^struct config conf;$/;"	v	typeref:struct:config
config	include/config.h	/^struct config{$/;"	s
config	qt_pro/external.h	/^struct config{$/;"	s
config	virt-p2v/include/p2v-config.h	/^struct config {$/;"	s
config_file	src/main.c	/^char config_file[128] = "config.ini";$/;"	v
config_ui	qt_pro/global.h	/^    ConfigWindow *config_ui;$/;"	m	class:Global
config_ui	qt_pro/mainwindow.h	/^    ConfigWindow *config_ui;$/;"	m	class:MainWindow
config_ver	include/config.h	/^    int config_ver;$/;"	m	struct:config
config_ver	qt_pro/external.h	/^    int config_ver;$/;"	m	struct:config
configure_network_button_clicked	virt-p2v/src/gui.c	/^configure_network_button_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
confirmed	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	bool confirmed() const { return timeout_count == 0; }$/;"	f	struct:libtorrent::dht::node_entry
confirmed_supports_utp	torrent/include/libtorrent/torrent_peer.hpp	/^		bool confirmed_supports_utp:1;$/;"	m	struct:libtorrent::torrent_peer
conn_dlg	virt-p2v/src/gui.c	/^static GtkWidget *conn_dlg,$/;"	v	file:
connaborted_peers	torrent/include/libtorrent/performance_counters.hpp	/^			connaborted_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
connect	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t connect = 5_bit;$/;"	m	namespace:libtorrent::alert_category
connect	torrent/include/libtorrent/bt_peer_connection.hpp	/^			connect = 1,$/;"	m	class:libtorrent::bt_peer_connection::hp_message
connect	torrent/include/libtorrent/operations.hpp	/^		connect,$/;"	m	class:libtorrent::operation_t
connect	torrent/include/libtorrent/udp_tracker_connection.hpp	/^			connect,$/;"	m	class:libtorrent::udp_tracker_connection::action_t
connect	torrent/src/http_connection.cpp	/^void http_connection::connect()$/;"	f	class:libtorrent::http_connection
connect	torrent/src/upnp.cpp	/^void upnp::connect(rootdevice& d)$/;"	f	class:libtorrent::upnp
connect1	torrent/src/socks5_stream.cpp	/^	void socks5_stream::connect1(error_code const& e, handler_type h)$/;"	f	class:libtorrent::socks5_stream
connect1	torrent/src/udp_socket.cpp	/^void socks5::connect1(error_code const& e)$/;"	f	class:libtorrent::socks5
connect2	torrent/src/socks5_stream.cpp	/^	void socks5_stream::connect2(error_code const& e, handler_type h)$/;"	f	class:libtorrent::socks5_stream
connect2	torrent/src/udp_socket.cpp	/^void socks5::connect2(error_code const& e)$/;"	f	class:libtorrent::socks5
connect3	torrent/src/socks5_stream.cpp	/^	void socks5_stream::connect3(error_code const& e, handler_type h)$/;"	f	class:libtorrent::socks5_stream
connect_candidates	torrent/include/libtorrent/torrent_status.hpp	/^		int connect_candidates = 0;$/;"	m	struct:libtorrent::torrent_status
connect_failed	torrent/src/peer_connection.cpp	/^	void peer_connection::connect_failed(error_code const& e)$/;"	f	class:libtorrent::peer_connection
connect_i2p_tracker	torrent/src/http_connection.cpp	/^void http_connection::connect_i2p_tracker(char const* destination)$/;"	f	class:libtorrent::http_connection
connect_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t connect_notification = 5_bit;$/;"	m	class:libtorrent::alert
connect_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::connect_notification;$/;"	m	class:libtorrent::alert	file:
connect_one_peer	torrent/src/peer_list.cpp	/^	torrent_peer* peer_list::connect_one_peer(int session_time, torrent_state* state)$/;"	f	class:libtorrent::peer_list
connect_peer	torrent/src/torrent_handle.cpp	/^	void torrent_handle::connect_peer(tcp::endpoint const& adr$/;"	f	class:libtorrent::torrent_handle
connect_seed_every_n_download	torrent/include/libtorrent/settings_pack.hpp	/^			connect_seed_every_n_download,$/;"	e	enum:libtorrent::settings_pack::int_types
connect_server	src/socket.c	/^int connect_server(int fd, const char *ip, int port, int count)$/;"	f
connect_timeout	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int connect_timeout() const { return m_sett.get_int(settings_pack::utp_connect_timeout); }$/;"	f	struct:libtorrent::utp_socket_manager
connect_timeouts	torrent/include/libtorrent/performance_counters.hpp	/^			connect_timeouts,$/;"	e	enum:libtorrent::counters::stats_counter_t
connect_to_peer	torrent/src/torrent.cpp	/^	bool torrent::connect_to_peer(torrent_peer* peerinfo, bool const ignore_limit)$/;"	f	class:libtorrent::torrent
connect_to_url_seed	torrent/src/torrent.cpp	/^	void torrent::connect_to_url_seed(std::list<web_seed_t>::iterator web)$/;"	f	class:libtorrent::torrent
connect_web_seed	torrent/src/torrent.cpp	/^	void torrent::connect_web_seed(std::list<web_seed_t>::iterator web, tcp::endpoint a)$/;"	f	class:libtorrent::torrent
connect_with_source_port	virt-p2v/src/nbd.c	/^connect_with_source_port (const char *hostname, int dest_port, int source_port)$/;"	f	file:
connectable	torrent/include/libtorrent/torrent_peer.hpp	/^		bool connectable:1;$/;"	m	struct:libtorrent::torrent_peer
connected	torrent/include/libtorrent/ssl_stream.hpp	/^	void connected(error_code const& e, std::shared_ptr<handler_type> h)$/;"	f	class:libtorrent::ssl_stream
connected	torrent/src/http_stream.cpp	/^	void http_stream::connected(error_code const& e, handler_type& h)$/;"	f	class:libtorrent::http_stream
connected	torrent/src/i2p_stream.cpp	/^	void i2p_stream::connected(error_code const& e, handler_type& h)$/;"	f	class:libtorrent::i2p_stream
connected	torrent/src/socks5_stream.cpp	/^	void socks5_stream::connected(error_code const& e, handler_type h)$/;"	f	class:libtorrent::socks5_stream
connected_time	torrent/include/libtorrent/peer_connection.hpp	/^		time_point connected_time() const { return m_connect; }$/;"	f	class:libtorrent::peer_connection
connecting	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t connecting = 7_bit;$/;"	m	struct:libtorrent::peer_info
connecting	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::connecting;$/;"	m	class:libtorrent::peer_info	file:
connecting_time_compare	torrent/src/torrent.cpp	/^	bool connecting_time_compare(peer_connection const* lhs, peer_connection const* rhs)$/;"	f	namespace:libtorrent::__anon108
connection	torrent/include/libtorrent/torrent_peer.hpp	/^		peer_connection_interface* connection;$/;"	m	struct:libtorrent::torrent_peer
connection	virt-p2v/include/p2v-config.h	/^  char *connection;$/;"	m	struct:output_config
connection_attempt_loops	torrent/include/libtorrent/performance_counters.hpp	/^			connection_attempt_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
connection_attempts	torrent/include/libtorrent/performance_counters.hpp	/^			connection_attempts,$/;"	e	enum:libtorrent::counters::stats_counter_t
connection_cache_entry	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		struct connection_cache_entry$/;"	s	class:libtorrent::udp_tracker_connection
connection_close	torrent/include/libtorrent/http_parser.hpp	/^		bool connection_close() const { return m_connection_close; }$/;"	f	class:libtorrent::http_parser
connection_closed	torrent/src/peer_list.cpp	/^	void peer_list::connection_closed(const peer_connection_interface& c$/;"	f	class:libtorrent::peer_list
connection_id	torrent/include/libtorrent/udp_tracker_connection.hpp	/^			std::int64_t connection_id;$/;"	m	struct:libtorrent::udp_tracker_connection::connection_cache_entry
connection_id	torrent/include/libtorrent/utp_stream.hpp	/^	be_uint16 connection_id;$/;"	m	struct:libtorrent::utp_header
connection_limit_factor	torrent/include/libtorrent/peer_class.hpp	/^		int connection_limit_factor;$/;"	m	struct:libtorrent::peer_class
connection_limit_factor	torrent/include/libtorrent/peer_class.hpp	/^		int connection_limit_factor;$/;"	m	struct:libtorrent::peer_class_info
connection_next_clicked	virt-p2v/src/gui.c	/^connection_next_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
connection_speed	torrent/include/libtorrent/settings_pack.hpp	/^			connection_speed,$/;"	e	enum:libtorrent::settings_pack::int_types
connection_timeout	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::connection_timeout(aux::listen_socket_handle const& s, error_code const& e)$/;"	f	class:libtorrent::dht::dht_tracker
connection_timeout	torrent/kademlia/node.cpp	/^time_duration node::connection_timeout()$/;"	f	class:libtorrent::dht::node
connection_timer	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^			deadline_timer connection_timer;$/;"	m	struct:libtorrent::dht::final::tracker_node
connection_type	torrent/include/libtorrent/peer_connection.hpp	/^	enum class connection_type : std::uint8_t$/;"	c	namespace:libtorrent
connection_type	torrent/include/libtorrent/peer_info.hpp	/^		int connection_type;$/;"	m	struct:libtorrent::peer_info
connection_type_t	torrent/include/libtorrent/peer_info.hpp	/^		enum connection_type_t$/;"	g	struct:libtorrent::peer_info
connections_limit	torrent/include/libtorrent/settings_pack.hpp	/^			connections_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
connections_limit	torrent/include/libtorrent/torrent_status.hpp	/^		int connections_limit = 0;$/;"	m	struct:libtorrent::torrent_status
connections_slack	torrent/include/libtorrent/settings_pack.hpp	/^			connections_slack,$/;"	e	enum:libtorrent::settings_pack::int_types
connrefused_peers	torrent/include/libtorrent/performance_counters.hpp	/^			connrefused_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
connreset_peers	torrent/include/libtorrent/performance_counters.hpp	/^			connreset_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
const_iterator	torrent/include/libtorrent/bitfield.hpp	/^			const_iterator(std::uint32_t const* ptr, int offset)$/;"	f	struct:libtorrent::bitfield::const_iterator
const_iterator	torrent/include/libtorrent/bitfield.hpp	/^		struct const_iterator$/;"	s	struct:libtorrent::bitfield
construct	torrent/src/entry.cpp	/^	void entry::construct(data_type t)$/;"	f	class:libtorrent::entry
construct	torrent/src/puff.cpp	/^local int construct(struct huffman *h, const short *length, int n)$/;"	f
construct	torrent/src/socket_type.cpp	/^	void socket_type::construct(int type, void* userdata)$/;"	f	class:libtorrent::aux::socket_type
construct_dict	torrent/include/libtorrent/lazy_entry.hpp	/^		void construct_dict(char const* begin)$/;"	f	struct:libtorrent::lazy_entry
construct_int	torrent/include/libtorrent/lazy_entry.hpp	/^		void construct_int(char const* start, int const length)$/;"	f	struct:libtorrent::lazy_entry
construct_list	torrent/include/libtorrent/lazy_entry.hpp	/^		void construct_list(char const* begin)$/;"	f	struct:libtorrent::lazy_entry
construct_storage	torrent/src/torrent.cpp	/^	void torrent::construct_storage()$/;"	f	class:libtorrent::torrent
construct_string	torrent/src/lazy_bdecode.cpp	/^	void lazy_entry::construct_string(char const* start, int const length)$/;"	f	class:libtorrent::lazy_entry
construct_utp_impl	torrent/src/utp_stream.cpp	/^utp_socket_impl* construct_utp_impl(std::uint16_t recv_id$/;"	f	namespace:libtorrent
consttime_equal	torrent/ed25519/verify.cpp	/^static int consttime_equal(const unsigned char *x, const unsigned char *y) {$/;"	f	namespace:libtorrent
consume_incoming_data	torrent/src/utp_stream.cpp	/^bool utp_socket_impl::consume_incoming_data($/;"	f	class:libtorrent::utp_socket_impl
cont	torrent/include/libtorrent/error_code.hpp	/^			cont = 100,$/;"	e	enum:libtorrent::errors::http_errors
container_wrapper	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^		explicit container_wrapper(Base&& b) : Base(std::move(b)) {}$/;"	f	struct:libtorrent::aux::container_wrapper
container_wrapper	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^	struct container_wrapper : Base$/;"	s	namespace:libtorrent::aux
content_length	src/linux.c	/^        size_t content_length;$/;"	m	struct:blkdev_ioctl_param	file:
content_length	torrent/include/libtorrent/http_parser.hpp	/^		std::int64_t content_length() const { return m_content_length; }$/;"	f	class:libtorrent::http_parser
content_range	torrent/include/libtorrent/http_parser.hpp	/^		std::pair<std::int64_t, std::int64_t> content_range() const$/;"	f	class:libtorrent::http_parser
context_switches	torrent/include/libtorrent/debug.hpp	/^		std::uint64_t context_switches;$/;"	m	struct:libtorrent::wakeup_t
contiguous_recv_buffer	torrent/include/libtorrent/settings_pack.hpp	/^			contiguous_recv_buffer TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
control_h	virt-p2v/src/conversion.c	/^static mexp_h *control_h = NULL;$/;"	v	file:
control_url	torrent/include/libtorrent/upnp.hpp	/^		std::string control_url;$/;"	m	struct:libtorrent::final::rootdevice
control_url	torrent/include/libtorrent/upnp.hpp	/^	std::string control_url;$/;"	m	struct:libtorrent::parse_state
conv_dlg	virt-p2v/src/gui.c	/^static GtkWidget *conv_dlg,$/;"	v	file:
conversionOK	torrent/include/libtorrent/ConvertUTF.h	/^	conversionOK,     \/* conversion successful *\/$/;"	e	enum:ConversionResult
conversion_back_clicked	virt-p2v/src/gui.c	/^conversion_back_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
conversion_error	virt-p2v/src/conversion.c	/^static char *conversion_error;$/;"	v	file:
conversion_error	virt-p2v/src/gui.c	/^conversion_error (gpointer user_data)$/;"	f	file:
conversion_finished	virt-p2v/src/gui.c	/^conversion_finished (gpointer user_data)$/;"	f	file:
conversion_is_running	virt-p2v/src/conversion.c	/^conversion_is_running (void)$/;"	f
conversion_ok	torrent/include/libtorrent/utf8.hpp	/^			conversion_ok,$/;"	e	enum:libtorrent::utf8_errors::error_code_enum
convert	torrent/bak/udp_tracker.cpp	/^	static __int64 convert(__int64 iValue)$/;"	f	class:CNetworkByteOrder
convert	torrent/bak/udp_tracker.cpp	/^	static int convert(int iValue)$/;"	f	class:CNetworkByteOrder
convert	torrent/bak/udp_tracker.cpp	/^	static unsigned short int convert(unsigned short int iValue)$/;"	f	class:CNetworkByteOrder
convert	torrent/src/utf8.cpp	/^			static utf8_errors::error_code_enum convert(UTF8 const** src_start$/;"	f	struct:libtorrent::__anon126::convert_to_wide
convert	torrent/src/utf8.cpp	/^			static utf8_errors::error_code_enum convert(char const** src_start$/;"	f	struct:libtorrent::__anon126::convert_to_wide
convert	torrent/src/utf8.cpp	/^			static utf8_errors::error_code_enum convert(wchar_t const** src_start$/;"	f	struct:libtorrent::__anon126::convert_from_wide
convert_16	src/tools.c	/^unsigned short int convert_16(unsigned short int iValue)$/;"	f
convert_32	src/tools.c	/^int convert_32(int iValue)$/;"	f
convert_64	src/tools.c	/^int64_t convert_64(int64_t iValue)$/;"	f
convert_from_native	torrent/include/libtorrent/aux_/escape_string.hpp	/^	inline std::string const& convert_from_native(std::string const& s) { return s; }$/;"	f	class:libtorrent::std
convert_from_native	torrent/src/escape_string.cpp	/^	std::string convert_from_native(std::string const& s)$/;"	f	namespace:libtorrent
convert_from_native_path	torrent/src/path.cpp	/^	std::string convert_from_native_path(char const* s) { return convert_from_native(s); }$/;"	f	namespace:libtorrent
convert_from_native_path	torrent/src/path.cpp	/^	std::string convert_from_native_path(wchar_t const* s)$/;"	f	namespace:libtorrent
convert_from_wide	torrent/src/utf8.cpp	/^		struct convert_from_wide$/;"	s	namespace:libtorrent::__anon126	file:
convert_from_wide	torrent/src/utf8.cpp	/^		struct convert_from_wide<2>$/;"	s	namespace:libtorrent::__anon126	file:
convert_from_wide	torrent/src/utf8.cpp	/^		struct convert_from_wide<4>$/;"	s	namespace:libtorrent::__anon126	file:
convert_from_wstring	torrent/src/escape_string.cpp	/^	std::string convert_from_wstring(std::wstring const& s)$/;"	f	namespace:libtorrent
convert_path_to_posix	torrent/src/escape_string.cpp	/^	void convert_path_to_posix(std::string& path)$/;"	f	namespace:libtorrent
convert_path_to_windows	torrent/src/escape_string.cpp	/^	void convert_path_to_windows(std::string& path)$/;"	f	namespace:libtorrent
convert_to_native	torrent/include/libtorrent/aux_/escape_string.hpp	/^	inline std::string const& convert_to_native(std::string const& s) { return s; }$/;"	f	class:libtorrent::std
convert_to_native	torrent/src/escape_string.cpp	/^	std::string convert_to_native(std::string const& s)$/;"	f	namespace:libtorrent
convert_to_native_path_string	torrent/src/path.cpp	/^	native_path_string convert_to_native_path_string(std::string const& path)$/;"	f	namespace:libtorrent
convert_to_wide	torrent/src/utf8.cpp	/^		struct convert_to_wide$/;"	s	namespace:libtorrent::__anon126	file:
convert_to_wide	torrent/src/utf8.cpp	/^		struct convert_to_wide<2>$/;"	s	namespace:libtorrent::__anon126	file:
convert_to_wide	torrent/src/utf8.cpp	/^		struct convert_to_wide<4>$/;"	s	namespace:libtorrent::__anon126	file:
convert_to_wstring	torrent/src/escape_string.cpp	/^	std::wstring convert_to_wstring(std::string const& s)$/;"	f	namespace:libtorrent
cookie	torrent/include/libtorrent/aux_/block_cache_reference.hpp	/^		std::int32_t cookie = none;$/;"	m	struct:libtorrent::aux::block_cache_reference
copy	torrent/src/entry.cpp	/^	void entry::copy(entry const& e)$/;"	f	class:libtorrent::entry
copy_buffer	torrent/src/stack_allocator.cpp	/^	allocation_slot stack_allocator::copy_buffer(span<char const> buf)$/;"	f	class:libtorrent::aux::stack_allocator
copy_bufs	torrent/src/storage_utils.cpp	/^	int copy_bufs(span<iovec_t const> bufs, int bytes$/;"	f	namespace:libtorrent::aux
copy_config	virt-p2v/src/p2v_config.c	/^copy_config (struct config *old)$/;"	f
copy_file	torrent/src/path.cpp	/^	void copy_file(std::string const& inf, std::string const& newf, error_code& ec)$/;"	f	namespace:libtorrent
copy_from_piece	torrent/src/block_cache.cpp	/^int block_cache::copy_from_piece(cached_piece_entry* const pe$/;"	f	class:libtorrent::block_cache
copy_guid	include/gpt.h	20;"	d
copy_on_write	torrent/src/torrent_info.cpp	/^	void torrent_info::copy_on_write()$/;"	f	class:libtorrent::torrent_info
copy_pertinent_channels	torrent/src/session_impl.cpp	/^	int session_impl::copy_pertinent_channels(peer_class_set const& set$/;"	f	class:libtorrent::aux::session_impl
copy_ptr	torrent/include/libtorrent/copy_ptr.hpp	/^		copy_ptr(copy_ptr const& p): m_ptr(p.m_ptr ? new T(*p.m_ptr) : nullptr) {}$/;"	f	struct:libtorrent::copy_ptr
copy_ptr	torrent/include/libtorrent/copy_ptr.hpp	/^		explicit copy_ptr(T* t): m_ptr(t) {}$/;"	f	struct:libtorrent::copy_ptr
copy_ptr	torrent/include/libtorrent/copy_ptr.hpp	/^	struct copy_ptr$/;"	s	namespace:libtorrent
copy_string	torrent/src/stack_allocator.cpp	/^	allocation_slot stack_allocator::copy_string(char const* str)$/;"	f	class:libtorrent::aux::stack_allocator
copy_string	torrent/src/stack_allocator.cpp	/^	allocation_slot stack_allocator::copy_string(string_view str)$/;"	f	class:libtorrent::aux::stack_allocator
cores	virt-p2v/include/p2v-config.h	/^  unsigned cores;$/;"	m	struct:cpu_config
cork	torrent/include/libtorrent/peer_connection.hpp	/^		explicit cork(peer_connection& p): m_pc(p)$/;"	f	struct:libtorrent::cork
cork	torrent/include/libtorrent/peer_connection.hpp	/^	struct cork$/;"	s	namespace:libtorrent
corrupt	torrent/bak/connection_tester.cpp	/^	bool corrupt;$/;"	m	struct:peer_conn	file:
corrupt	torrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t corrupt;$/;"	m	struct:libtorrent::tracker_request
corrupt_pieces	torrent/include/libtorrent/close_reason.hpp	/^		corrupt_pieces,$/;"	m	class:libtorrent::close_reason_t
corruption_counter	torrent/bak/connection_tester.cpp	/^	int corruption_counter;$/;"	m	struct:peer_conn	file:
count	src/torrent.cpp	/^static int count;$/;"	v	file:
count	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^			int count;$/;"	m	struct:libtorrent::dht::dos_blocker::node_ban_entry
count	torrent/include/libtorrent/sha1.hpp	/^		std::uint32_t count[2];$/;"	m	struct:libtorrent::sha1_ctx
count	torrent/kademlia/dht_storage.cpp	/^		int count() const { return int(samples.size()); }$/;"	f	struct:libtorrent::dht::__anon153::infohashes_sample
count	torrent/src/client.cpp	/^static int count;$/;"	v	file:
count	torrent/src/puff.cpp	/^    short *count;       \/* number of symbols of each length *\/$/;"	m	struct:huffman	file:
count	virt-p2v/include/gnulib/windows-rwlock.h	/^          unsigned int count; \/* number of waiting threads *\/$/;"	m	struct:__anon163
count_bufs	torrent/src/storage_utils.cpp	/^	int count_bufs(span<iovec_t const> bufs, int bytes)$/;"	f	namespace:libtorrent::aux::__anon70
count_leading_zeros	torrent/src/ffs.cpp	/^	int count_leading_zeros(span<std::uint32_t const> buf)$/;"	f	namespace:libtorrent::aux
count_leading_zeros_hw	torrent/src/ffs.cpp	/^	int count_leading_zeros_hw(span<std::uint32_t const> buf)$/;"	f	namespace:libtorrent::aux
count_leading_zeros_sw	torrent/src/ffs.cpp	/^	int count_leading_zeros_sw(span<std::uint32_t const> buf)$/;"	f	namespace:libtorrent::aux
count_trailing_ones	torrent/src/ffs.cpp	/^	int count_trailing_ones(span<std::uint32_t const> buf)$/;"	f	namespace:libtorrent::aux
count_trailing_ones_hw	torrent/src/ffs.cpp	/^	int count_trailing_ones_hw(span<std::uint32_t const> buf)$/;"	f	namespace:libtorrent::aux
count_trailing_ones_sw	torrent/src/ffs.cpp	/^	int count_trailing_ones_sw(span<std::uint32_t const> buf)$/;"	f	namespace:libtorrent::aux
count_zero_bits	torrent/src/bloom_filter.cpp	/^	int count_zero_bits(std::uint8_t const* bits, int const len)$/;"	f	namespace:libtorrent
counter	torrent/include/libtorrent/session_stats.hpp	/^		counter, gauge$/;"	m	class:libtorrent::metric_type_t
counter	torrent/include/libtorrent/stat.hpp	/^		std::int32_t counter() const { return m_counter; }$/;"	f	class:libtorrent::stat_channel
counters	torrent/include/libtorrent/performance_counters.hpp	/^	struct TORRENT_EXTRA_EXPORT counters$/;"	s	namespace:libtorrent
counters	torrent/src/alert.cpp	/^	span<std::int64_t const> session_stats_alert::counters() const$/;"	f	class:libtorrent::session_stats_alert
counters_to_array	torrent/src/alert.cpp	/^	aux::array<std::int64_t, counters::num_counters> counters_to_array(counters const& cnt)$/;"	f	namespace:libtorrent::__anon100
cppobj	Makefile	/^cppobj = torrent.o$/;"	m
cppobj	torrent/Makefile	/^cppobj = client.o add_torrent_params.o     error_code.o               part_file.o               socket_type.o \\$/;"	m
cpu	include/config.h	/^    char cpu[128];$/;"	m	struct:terminal_info
cpu	qt_pro/external.h	/^    char cpu[128];$/;"	m	struct:terminal_info
cpu	qt_pro/global.h	/^    char cpu[128];$/;"	m	struct:hwinfo
cpu	virt-p2v/include/p2v-config.h	/^  struct cpu_config cpu;$/;"	m	struct:config	typeref:struct:config::cpu_config
cpu_config	virt-p2v/include/p2v-config.h	/^struct cpu_config {$/;"	s
cpuid	torrent/src/cpuid.cpp	/^	void cpuid(std::uint32_t* info, int type)$/;"	f	namespace:libtorrent::aux::__anon128
crc	include/StoreConfig.h	/^    uint32_t            crc;     \/\/crcæ ¡éªç $/;"	m	struct:_YZY_STORE_CONFIG
crc32	src/StoreConfig.c	/^uint32_t crc32(uint32_t crc, char* buff, int len)$/;"	f
crc32c	torrent/src/crc32c.cpp	/^	std::uint32_t crc32c(std::uint64_t const* buf, int num_words)$/;"	f	namespace:libtorrent
crc32c_32	torrent/src/crc32c.cpp	/^	std::uint32_t crc32c_32(std::uint32_t v)$/;"	f	namespace:libtorrent
create	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		HCRYPTHASH create()$/;"	f	struct:libtorrent::aux::crypt_hash
create_connection_dialog	virt-p2v/src/gui.c	/^create_connection_dialog (struct config *config)$/;"	f	file:
create_conversion_dialog	virt-p2v/src/gui.c	/^create_conversion_dialog (struct config *config)$/;"	f	file:
create_directories	torrent/src/path.cpp	/^	void create_directories(std::string const& f, error_code& ec)$/;"	f	namespace:libtorrent
create_directory	torrent/src/path.cpp	/^	void create_directory(std::string const& f, error_code& ec)$/;"	f	namespace:libtorrent
create_handle	virt-p2v/miniexpect/miniexpect.c	/^create_handle (void)$/;"	f	file:
create_ip_notifier	torrent/src/ip_notifier.cpp	/^	std::unique_ptr<ip_change_notifier> create_ip_notifier(io_service& ios)$/;"	f	namespace:libtorrent::aux
create_packet	torrent/include/libtorrent/packet_pool.hpp	/^	inline packet_ptr create_packet(int const size)$/;"	f	namespace:libtorrent
create_peer_class	torrent/src/session_handle.cpp	/^	peer_class_t session_handle::create_peer_class(char const* name)$/;"	f	class:libtorrent::session_handle
create_peer_class	torrent/src/session_impl.cpp	/^	peer_class_t session_impl::create_peer_class(char const* name)$/;"	f	class:libtorrent::aux::session_impl
create_port_mapping	torrent/src/upnp.cpp	/^void upnp::create_port_mapping(http_connection& c, rootdevice& d$/;"	f	class:libtorrent::upnp
create_reference	cJSON/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:
create_reference	src/cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:
create_running_dialog	virt-p2v/src/gui.c	/^create_running_dialog (void)$/;"	f	file:
create_smart_ban_plugin	torrent/src/smart_ban.cpp	/^	std::shared_ptr<torrent_plugin> create_smart_ban_plugin(torrent_handle const& th, void*)$/;"	f	namespace:libtorrent
create_tcp	src/socket.c	/^int create_tcp()$/;"	f
create_torrent	torrent/include/libtorrent/create_torrent.hpp	/^	struct TORRENT_EXPORT create_torrent$/;"	s	namespace:libtorrent
create_torrent	torrent/src/create_torrent.cpp	/^	create_torrent::create_torrent(file_storage& fs, int piece_size$/;"	f	class:libtorrent::create_torrent
create_torrent	torrent/src/create_torrent.cpp	/^	create_torrent::create_torrent(torrent_info const& ti)$/;"	f	class:libtorrent::create_torrent
create_ut_metadata_plugin	torrent/src/ut_metadata.cpp	/^	std::shared_ptr<torrent_plugin> create_ut_metadata_plugin(torrent_handle const& th, void*)$/;"	f	namespace:libtorrent
create_ut_pex_plugin	torrent/src/ut_pex.cpp	/^	std::shared_ptr<torrent_plugin> create_ut_pex_plugin(torrent_handle const& th, void*)$/;"	f	namespace:libtorrent
create_window	qt_pro/external.cpp	/^int create_window(int window_flag)$/;"	f
created	torrent/include/libtorrent/error_code.hpp	/^			created = 201,$/;"	e	enum:libtorrent::errors::http_errors
created	torrent/kademlia/dht_storage.cpp	/^		time_point created = min_time();$/;"	m	struct:libtorrent::dht::__anon153::infohashes_sample	file:
creation_date	torrent/include/libtorrent/torrent_info.hpp	/^		std::time_t creation_date() const$/;"	f	class:libtorrent::torrent_info
creator	torrent/include/libtorrent/torrent_info.hpp	/^		const std::string& creator() const$/;"	f	class:libtorrent::torrent_info
critical	torrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
crypt_acquire_provider	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^	inline HCRYPTPROV crypt_acquire_provider(DWORD provider_type)$/;"	f	namespace:libtorrent::aux
crypt_gen_random	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^	inline void crypt_gen_random(span<char> buffer)$/;"	f	namespace:libtorrent::aux
crypt_hash	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		crypt_hash() { m_hash = create(); }$/;"	f	struct:libtorrent::aux::crypt_hash
crypt_hash	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		crypt_hash(crypt_hash const& h) { m_hash = duplicate(h); }$/;"	f	struct:libtorrent::aux::crypt_hash
crypt_hash	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^	struct crypt_hash$/;"	s	namespace:libtorrent::aux
crypt_method	include/qcow2.h	/^    uint32_t crypt_method;$/;"	m	struct:_QCowHeader
crypt_method	test/check.c	/^    uint32_t crypt_method;$/;"	m	struct:_QCowHeader	file:
crypto_cut	torrent/include/libtorrent/receive_buffer.hpp	/^	void crypto_cut(int size, int packet_size)$/;"	f	struct:libtorrent::crypto_receive_buffer
crypto_packet_finished	torrent/include/libtorrent/receive_buffer.hpp	/^	bool crypto_packet_finished() const$/;"	f	struct:libtorrent::crypto_receive_buffer
crypto_packet_size	torrent/include/libtorrent/receive_buffer.hpp	/^	int crypto_packet_size() const$/;"	f	struct:libtorrent::crypto_receive_buffer
crypto_plugin	torrent/include/libtorrent/extensions.hpp	/^	struct TORRENT_EXPORT crypto_plugin$/;"	s	namespace:libtorrent
crypto_receive_buffer	torrent/include/libtorrent/receive_buffer.hpp	/^	explicit crypto_receive_buffer(receive_buffer& next)$/;"	f	struct:libtorrent::crypto_receive_buffer
crypto_receive_buffer	torrent/include/libtorrent/receive_buffer.hpp	/^struct crypto_receive_buffer$/;"	s	namespace:libtorrent
crypto_reset	torrent/src/receive_buffer.cpp	/^void crypto_receive_buffer::crypto_reset(int packet_size)$/;"	f	class:libtorrent::crypto_receive_buffer
ct	torrent/src/create_torrent.cpp	/^		create_torrent& ct;$/;"	m	struct:libtorrent::__anon134::hash_state	file:
ctime	torrent/include/libtorrent/aux_/path.hpp	/^		std::uint64_t ctime = 0;$/;"	m	struct:libtorrent::file_status
ctrace	torrent/include/libtorrent/aux_/route.h	/^typedef struct ctrace {$/;"	s
ctrace_t	torrent/include/libtorrent/aux_/route.h	/^} ctrace_t;$/;"	t	typeref:struct:ctrace
cumulative_hash_time	torrent/include/libtorrent/disk_io_thread.hpp	/^		int cumulative_hash_time;$/;"	m	struct:libtorrent::cache_status
cumulative_job_time	torrent/include/libtorrent/disk_io_thread.hpp	/^		int cumulative_job_time;$/;"	m	struct:libtorrent::cache_status
cumulative_read_time	torrent/include/libtorrent/disk_io_thread.hpp	/^		int cumulative_read_time;$/;"	m	struct:libtorrent::cache_status
cumulative_write_time	torrent/include/libtorrent/disk_io_thread.hpp	/^		int cumulative_write_time;$/;"	m	struct:libtorrent::cache_status
curl_download	virt-p2v/src/ssh.c	/^curl_download (const char *url, const char *local_file)$/;"	f	file:
curlen	torrent/include/libtorrent/sha512.hpp	/^		std::size_t curlen;$/;"	m	struct:libtorrent::sha512_ctx
currBoot	include/StoreConfig.h	/^    YZYGUID             currBoot;       \/\/å½åå¯å¨ç GUID$/;"	m	struct:_YZY_STORE_CONFIG
currData	include/StoreConfig.h	/^    YZYGUID             currData;       \/\/å½åæ°æ®ç GUID $/;"	m	struct:_YZY_STORE_CONFIG
current	torrent/bak/udp_tracker.cpp	/^    char* current;$/;"	m	class:CDataStream	file:
current_index	qt_pro/global.h	/^    int current_index;$/;"	m	class:Global
current_piece	torrent/bak/connection_tester.cpp	/^	piece_index_t current_piece; \/\/ the piece we're currently requesting blocks from$/;"	m	struct:peer_conn	file:
current_piece_is_allowed	torrent/bak/connection_tester.cpp	/^	bool current_piece_is_allowed;$/;"	m	struct:peer_conn	file:
current_size	torrent/include/libtorrent/file.hpp	/^		std::int64_t current_size;$/;"	m	struct:libtorrent::file
current_stats_state	torrent/src/torrent.cpp	/^	int torrent::current_stats_state() const$/;"	f	class:libtorrent::torrent
current_time	src/main.c	/^time_t current_time;$/;"	v
current_time	test/test.c	/^time_t current_time;$/;"	v
current_time	torrent/src/client.cpp	/^time_t current_time, last_time;$/;"	v
current_tracker	torrent/include/libtorrent/torrent_status.hpp	/^		std::string current_tracker;$/;"	m	struct:libtorrent::torrent_status
current_working_directory	torrent/src/path.cpp	/^	std::string current_working_directory()$/;"	f	namespace:libtorrent
cursor	torrent/include/libtorrent/packet_buffer.hpp	/^		index_type cursor() const { return m_first; }$/;"	f	class:libtorrent::packet_buffer
cursor	torrent/include/libtorrent/piece_picker.hpp	/^		piece_index_t cursor() const { return m_cursor; }$/;"	f	class:libtorrent::piece_picker
cut	torrent/src/receive_buffer.cpp	/^void crypto_receive_buffer::cut(int size, int packet_size, int offset)$/;"	f	class:libtorrent::crypto_receive_buffer
cut	torrent/src/receive_buffer.cpp	/^void receive_buffer::cut(int const size, int const packet_size, int const offset)$/;"	f	class:libtorrent::receive_buffer
cwnd_reduce_timer	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int cwnd_reduce_timer() const { return m_sett.get_int(settings_pack::utp_cwnd_reduce_timer); }$/;"	f	struct:libtorrent::utp_socket_manager
cylinders	include/device.h	/^    int cylinders;$/;"	m	struct:_PedCHSGeometry
cylinders	src/linux.c	/^        unsigned short cylinders;$/;"	m	struct:hd_geometry	file:
d	torrent/ed25519/ge.cpp	/^static const fe d = {$/;"	v	file:
d	torrent/include/libtorrent/disk_io_job.hpp	/^		} d;$/;"	m	struct:libtorrent::disk_io_job	typeref:union:libtorrent::disk_io_job::un
d2	torrent/ed25519/ge.cpp	/^static const fe d2 = {$/;"	v	file:
data	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^		char const* data(Protocol const&) const { return m_value; }$/;"	f	struct:libtorrent::aux::bind_to_device
data	torrent/include/libtorrent/aux_/keepalive.hpp	/^		char const* data(Protocol const&) const { return reinterpret_cast<char const*>(&m_value); }$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
data	torrent/include/libtorrent/aux_/keepalive.hpp	/^		char const* data(Protocol const&) const { return reinterpret_cast<char const*>(&m_value); }$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
data	torrent/include/libtorrent/buffer.hpp	/^	char const* data() const { return m_begin; }$/;"	f	class:libtorrent::buffer
data	torrent/include/libtorrent/buffer.hpp	/^	char* data() { return m_begin; }$/;"	f	class:libtorrent::buffer
data	torrent/include/libtorrent/entry.hpp	/^		>::type data;$/;"	m	class:libtorrent::entry
data	torrent/include/libtorrent/kademlia/put_data.hpp	/^	void set_data(item const& data) = delete;$/;"	m	struct:libtorrent::dht::put_data
data	torrent/include/libtorrent/netlink.hpp	/^		const data_type* data() const$/;"	f	class:libtorrent::basic_nl_endpoint
data	torrent/include/libtorrent/netlink.hpp	/^		data_type* data()$/;"	f	class:libtorrent::basic_nl_endpoint
data	torrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::dont_fragment
data	torrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::exclusive_address_use
data	torrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::no_enobufs
data	torrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::tcp_notsent_lowat
data	torrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::traffic_class
data	torrent/include/libtorrent/socket.hpp	/^		int const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::v6_protection_level
data	torrent/include/libtorrent/socket.hpp	/^		tos_t const* data(Protocol const&) const { return &m_value; }$/;"	f	struct:libtorrent::type_of_service
data	torrent/include/libtorrent/udp_socket.hpp	/^			span<char> data;$/;"	m	struct:libtorrent::udp_socket::packet
dataLabel	qt_pro/ui_downloadwindow.h	/^    QLabel *dataLabel;$/;"	m	class:Ui_DownloadWindow
dataLevel	include/StoreConfig.h	/^    uint32_t            dataLevel; $/;"	m	struct:_YZY_STORE_CONFIG
dataPenWidth	qt_pro/QRoundProgressBar.h	/^    double dataPenWidth() const { return m_dataPenWidth; }$/;"	f	class:QRoundProgressBar
dataSize	include/packet.h	/^    u32_t  dataSize;            \/\/æ°æ®åå¤§å°     ä¾å¦ 0x00001000$/;"	m	struct:yzy_packet
dataType	include/packet.h	/^    u8_t   dataType;            \/\/æ°æ®æ®µç±»å      ä¾å¦ ox00:äºè¿å¶æ°æ® 0x01:json 0x02:protobuf$/;"	m	struct:yzy_packet
data_buf	include/client.h	/^    unsigned char *data_buf;$/;"	m	struct:client
data_conn	virt-p2v/include/p2v.h	/^struct data_conn {          \/* Data per NBD connection \/ physical disk. *\/$/;"	s
data_did_not_terminate	torrent/include/libtorrent/gzip.hpp	/^			data_did_not_terminate,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
data_label	qt_pro/global.h	/^    QLabel *data_label;$/;"	m	class:Global
data_len	include/packet.h	/^    unsigned long long data_len;$/;"	m	struct:yzy_torrent
data_len	test/test.c	/^    unsigned long long  data_len;$/;"	m	struct:yzy_torrent	file:
data_section	torrent/src/lazy_bdecode.cpp	/^	std::pair<char const*, int> lazy_entry::data_section() const$/;"	f	class:libtorrent::lazy_entry
data_size	include/client.h	/^    int data_size;$/;"	m	struct:client
data_size	include/socket.h	/^    unsigned int data_size;$/;"	m	struct:_req_head
data_size	qt_pro/pipethread.cpp	/^    unsigned int data_size;$/;"	m	struct:_req_head	file:
data_size	torrent/include/libtorrent/kademlia/node.hpp	/^	int data_size() const { return int(m_storage.num_torrents()); }$/;"	f	class:libtorrent::dht::node
data_t	torrent/include/libtorrent/lazy_entry.hpp	/^		union data_t$/;"	u	struct:libtorrent::lazy_entry
data_type	torrent/include/libtorrent/entry.hpp	/^		enum data_type$/;"	g	class:libtorrent::entry
datadir	torrent/include/libtorrent/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	torrent/include/libtorrent/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
date_label	qt_pro/configwindow.h	/^    QLabel *date_label;$/;"	m	class:ConfigWindow
date_label	qt_pro/downloadwindow.h	/^   QLabel *date_label;$/;"	m	class:DownloadWindow
date_label	qt_pro/mainwindow.h	/^    QLabel *date_label;$/;"	m	class:MainWindow
date_label	qt_pro/oswindow.h	/^    QLabel *date_label;$/;"	m	class:OSWindow
date_label	qt_pro/uploadwindow.h	/^    QLabel *date_label;$/;"	m	class:Uploadwindow
day_tab	src/tools.c	/^const char day_tab[] = "Sun,Mon,Tue,Wed,Thu,Fri,Sat,";$/;"	v
de_queue	src/queue.c	/^QUEUE_INDEX * de_queue(QUEUE *pQueue)$/;"	f
de_queuePos	src/queue.c	/^unsigned char de_queuePos(QUEUE *pQueue)$/;"	f
deadline	torrent/include/libtorrent/torrent.hpp	/^		time_point deadline;$/;"	m	struct:libtorrent::time_critical_piece
debug	torrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
debug_buffer	virt-p2v/miniexpect/miniexpect.c	/^debug_buffer (FILE *fp, const char *buf)$/;"	f	file:
debug_fp	virt-p2v/include/miniexpect.h	/^  FILE *debug_fp;$/;"	m	struct:mexp_h
debug_fp	virt-p2v/miniexpect/miniexpect.h	/^  FILE *debug_fp;$/;"	m	struct:mexp_h
debug_log	torrent/src/disk_io_thread.cpp	/^	void debug_log(char const* fmt, ...)$/;"	f	namespace:libtorrent::__anon122
debug_log	torrent/src/lsd.cpp	/^void lsd::debug_log(char const* fmt, ...) const$/;"	f	class:libtorrent::lsd
debug_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t TORRENT_DEPRECATED_MEMBER debug_notification = connect_notification;$/;"	m	class:libtorrent::alert
debug_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::debug_notification;$/;"	m	class:libtorrent::alert	file:
dec	torrent/include/libtorrent/bitfield.hpp	/^			void dec()$/;"	f	struct:libtorrent::bitfield::const_iterator
dec_block_refcount	torrent/src/block_cache.cpp	/^void block_cache::dec_block_refcount(cached_piece_entry* pe, int const block, int const reason)$/;"	f	class:libtorrent::block_cache
dec_num_connecting	torrent/include/libtorrent/torrent.hpp	/^		void dec_num_connecting(torrent_peer* pp)$/;"	f	class:libtorrent::torrent
dec_refcount	torrent/include/libtorrent/storage.hpp	/^		int dec_refcount()$/;"	f	struct:libtorrent::storage_interface
dec_refcount	torrent/src/piece_picker.cpp	/^	void piece_picker::dec_refcount(piece_index_t const index$/;"	f	class:libtorrent::piece_picker
dec_refcount	torrent/src/piece_picker.cpp	/^	void piece_picker::dec_refcount(typed_bitfield<piece_index_t> const& bitmask$/;"	f	class:libtorrent::piece_picker
dec_refcount_all	torrent/src/piece_picker.cpp	/^	void piece_picker::dec_refcount_all(const torrent_peer* peer)$/;"	f	class:libtorrent::piece_picker
decay	torrent/include/libtorrent/packet_pool.hpp	/^		void decay()$/;"	f	struct:libtorrent::packet_pool
decay	torrent/include/libtorrent/packet_pool.hpp	/^		void decay()$/;"	f	struct:libtorrent::packet_slab
decay	torrent/include/libtorrent/utp_socket_manager.hpp	/^		void decay() { m_packet_pool.decay(); }$/;"	f	struct:libtorrent::utp_socket_manager
decimals	qt_pro/QRoundProgressBar.h	/^    int decimals() const { return m_decimals; }$/;"	f	class:QRoundProgressBar
decltype	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^			decltype(auto)$/;"	f	struct:libtorrent::aux::container_wrapper
decltype	torrent/include/libtorrent/aux_/unique_ptr.hpp	/^			decltype(auto)$/;"	f	struct:libtorrent::aux::unique_ptr
decltype	torrent/include/libtorrent/vector_utils.hpp	/^		-> decltype(container.begin())$/;"	f	namespace:libtorrent
decode	torrent/src/puff.cpp	/^local int decode(struct state *s, const struct huffman *h)$/;"	f
decode_digit	torrent/src/identify_client.cpp	/^	int decode_digit(std::uint8_t c)$/;"	f	namespace:__anon59
decrease_est_reciprocation_rate	torrent/include/libtorrent/settings_pack.hpp	/^			decrease_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
decrease_est_reciprocation_rate	torrent/src/peer_connection.cpp	/^	void peer_connection::decrease_est_reciprocation_rate()$/;"	f	class:libtorrent::peer_connection
decref	torrent/src/peer_class.cpp	/^	void peer_class_pool::decref(peer_class_t c)$/;"	f	class:libtorrent::peer_class_pool
decrypt	torrent/src/pe_crypto.cpp	/^	int encryption_handler::decrypt(crypto_receive_buffer& recv_buffer$/;"	f	class:libtorrent::encryption_handler
decrypt	torrent/src/pe_crypto.cpp	/^	std::tuple<int, int, int> rc4_handler::decrypt(span<span<char>> bufs)$/;"	f	class:libtorrent::rc4_handler
def_read_sector	src/gpt.c	/^int def_read_sector(void* hd, uint64_t lba, uint8_t* buffer)$/;"	f
def_write_sector	src/gpt.c	/^int def_write_sector(void* hd, uint64_t lba, uint8_t* buffer)$/;"	f
default_block_size	torrent/include/libtorrent/disk_interface.hpp	/^	constexpr int default_block_size = 0x4000;$/;"	m	namespace:libtorrent
default_cache_min_age	torrent/include/libtorrent/settings_pack.hpp	/^			default_cache_min_age TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
default_est_reciprocation_rate	torrent/include/libtorrent/settings_pack.hpp	/^			default_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
default_flags	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t default_flags =$/;"	m	namespace:libtorrent::torrent_flags
default_int_value	torrent/src/settings_pack.cpp	/^	int default_int_value(int const name)$/;"	f	namespace:libtorrent
default_max_bottled_buffer_size	torrent/include/libtorrent/http_connection.hpp	/^constexpr int default_max_bottled_buffer_size = 2 * 1024 * 1024;$/;"	m	namespace:libtorrent
default_piece_limit	torrent/src/torrent_info.cpp	/^	constexpr int default_piece_limit = 0x100000;$/;"	m	namespace:libtorrent::__anon86	file:
default_plugins	torrent/src/session.cpp	/^		std::vector<std::shared_ptr<plugin>> default_plugins($/;"	f	namespace:libtorrent::__anon66
default_pred	torrent/src/create_torrent.cpp	/^	bool default_pred(std::string const&) { return true; }$/;"	f	namespace:libtorrent::__anon134
default_settings	torrent/src/settings_pack.cpp	/^	settings_pack default_settings()$/;"	f	namespace:libtorrent
default_storage	torrent/include/libtorrent/storage.hpp	/^	class TORRENT_EXPORT default_storage : public storage_interface$/;"	c	namespace:libtorrent
default_storage	torrent/src/storage.cpp	/^	default_storage::default_storage(storage_params const& params$/;"	f	class:libtorrent::default_storage
default_storage_constructor	torrent/src/storage.cpp	/^	storage_interface* default_storage_constructor(storage_params const& params$/;"	f	namespace:libtorrent
default_value	torrent/src/settings_pack.cpp	/^		bool default_value;$/;"	m	struct:libtorrent::bool_setting_entry_t	file:
default_value	torrent/src/settings_pack.cpp	/^		char const *default_value;$/;"	m	struct:libtorrent::str_setting_entry_t	file:
default_value	torrent/src/settings_pack.cpp	/^		int default_value;$/;"	m	struct:libtorrent::int_setting_entry_t	file:
defer_ack	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::defer_ack(utp_socket_impl* s)$/;"	f	class:libtorrent::utp_socket_manager
defer_ack	torrent/src/utp_stream.cpp	/^void utp_socket_impl::defer_ack()$/;"	f	class:libtorrent::utp_socket_impl
defer_handler	torrent/src/disk_io_thread.cpp	/^	constexpr status_t defer_handler = static_cast<status_t>(200);$/;"	m	namespace:libtorrent::__anon122	file:
deferred_handler	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^struct deferred_handler$/;"	s	namespace:libtorrent::aux
deferred_submit_jobs	torrent/src/session_impl.cpp	/^	void session_impl::deferred_submit_jobs()$/;"	f	class:libtorrent::aux::session_impl
del	include/StoreConfig.h	/^    int (*del)(uint32_t difLevel, PYZYGUID name); \/\/ æ³¨æï¼ï¼ï¼ï¼ å é¤èç¹åä¼éå»ºï¼æææéå¤±æï¼éè¦éæ°SCAN$/;"	m	struct:_StoreDriver
del_diff_qcow2	src/qcow2.c	/^void del_diff_qcow2(PedDevice *dev, char *name)$/;"	f
delay_load_torrent	torrent/src/session_impl.cpp	/^	std::shared_ptr<torrent> session_impl::delay_load_torrent(sha1_hash const& info_hash$/;"	f	class:libtorrent::aux::session_impl
delete_files	torrent/include/libtorrent/disk_io_job.hpp	/^		, delete_files$/;"	m	class:libtorrent::job_action_t
delete_files	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr remove_flags_t delete_files = 0_bit;$/;"	m	struct:libtorrent::session_handle
delete_files	torrent/src/session_handle.cpp	/^	constexpr remove_flags_t session_handle::delete_files;$/;"	m	class:libtorrent::session_handle	file:
delete_files	torrent/src/storage.cpp	/^	void default_storage::delete_files(remove_flags_t const options, storage_error& ec)$/;"	f	class:libtorrent::default_storage
delete_files	torrent/src/storage_utils.cpp	/^	void delete_files(file_storage const& fs, std::string const& save_path$/;"	f	namespace:libtorrent::aux
delete_files	torrent/src/torrent.cpp	/^	bool torrent::delete_files(remove_flags_t const options)$/;"	f	class:libtorrent::torrent
delete_mapping	torrent/src/natpmp.cpp	/^void natpmp::delete_mapping(port_mapping_t const index)$/;"	f	class:libtorrent::natpmp
delete_mapping	torrent/src/upnp.cpp	/^void upnp::delete_mapping(port_mapping_t const mapping)$/;"	f	class:libtorrent::upnp
delete_one_file	torrent/src/storage_utils.cpp	/^	void delete_one_file(std::string const& p, error_code& ec)$/;"	f	namespace:libtorrent::aux::__anon71
delete_partfile	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr remove_flags_t delete_partfile = 1_bit;$/;"	m	struct:libtorrent::session_handle
delete_partfile	torrent/src/session_handle.cpp	/^	constexpr remove_flags_t session_handle::delete_partfile;$/;"	m	class:libtorrent::session_handle	file:
delete_peer_class	torrent/src/session_handle.cpp	/^	void session_handle::delete_peer_class(peer_class_t cid)$/;"	f	class:libtorrent::session_handle
delete_peer_class	torrent/src/session_impl.cpp	/^	void session_impl::delete_peer_class(peer_class_t const cid)$/;"	f	class:libtorrent::aux::session_impl
delete_port_mapping	torrent/src/session_handle.cpp	/^	void session_handle::delete_port_mapping(port_mapping_t handle)$/;"	f	class:libtorrent::session_handle
delete_port_mapping	torrent/src/session_impl.cpp	/^	void session_impl::delete_port_mapping(port_mapping_t handle)$/;"	f	class:libtorrent::aux::session_impl
delete_port_mapping	torrent/src/upnp.cpp	/^void upnp::delete_port_mapping(rootdevice& d, port_mapping_t const i)$/;"	f	class:libtorrent::upnp
delete_socket	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::delete_socket(aux::listen_socket_handle const& s)$/;"	f	class:libtorrent::dht::dht_tracker
delete_utp_impl	torrent/src/utp_stream.cpp	/^void delete_utp_impl(utp_socket_impl* s)$/;"	f	namespace:libtorrent
demangle	torrent/src/assert.cpp	/^std::string demangle(char const* name) { return name; }$/;"	f	namespace:libtorrent
demangle	torrent/src/assert.cpp	/^std::string demangle(char const* name)$/;"	f	namespace:libtorrent
deprecated_estimated_reciprocation_rate	torrent/include/libtorrent/peer_info.hpp	/^		int deprecated_estimated_reciprocation_rate;$/;"	m	struct:libtorrent::peer_info
deprecated_get_peer_id	torrent/src/session_impl.cpp	/^	peer_id session_impl::deprecated_get_peer_id() const$/;"	f	class:libtorrent::aux::session_impl
deprecated_move_flags_t	torrent/include/libtorrent/storage_defs.hpp	/^	enum deprecated_move_flags_t$/;"	g	namespace:libtorrent
deprioritize_tracker	torrent/src/torrent.cpp	/^	int torrent::deprioritize_tracker(int index)$/;"	f	class:libtorrent::torrent
depth	torrent/kademlia/routing_table.cpp	/^int routing_table::depth() const$/;"	f	class:libtorrent::dht::routing_table
depth	virt-p2v/include/gnulib/windows-recmutex.h	/^          unsigned long depth;$/;"	m	struct:__anon158
depth_exceeded	torrent/include/libtorrent/bdecode.hpp	/^		depth_exceeded,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
depth_exceeded	torrent/include/libtorrent/error_code.hpp	/^			depth_exceeded,$/;"	e	enum:libtorrent::errors::error_code_enum
desLabel_35	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_35;$/;"	m	class:Ui_DownloadWindow
desLabel_36	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_36;$/;"	m	class:Ui_DownloadWindow
desLabel_37	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_37;$/;"	m	class:Ui_DownloadWindow
desLabel_38	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_38;$/;"	m	class:Ui_DownloadWindow
desLabel_39	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_39;$/;"	m	class:Ui_DownloadWindow
desLabel_40	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_40;$/;"	m	class:Ui_DownloadWindow
desLabel_41	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_41;$/;"	m	class:Ui_DownloadWindow
desLabel_42	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_42;$/;"	m	class:Ui_DownloadWindow
desLabel_43	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_43;$/;"	m	class:Ui_DownloadWindow
desLabel_44	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_44;$/;"	m	class:Ui_DownloadWindow
desLabel_45	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_45;$/;"	m	class:Ui_DownloadWindow
desLabel_46	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_46;$/;"	m	class:Ui_DownloadWindow
desLabel_47	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_47;$/;"	m	class:Ui_DownloadWindow
desLabel_48	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_48;$/;"	m	class:Ui_DownloadWindow
desLabel_49	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_49;$/;"	m	class:Ui_DownloadWindow
desLabel_50	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_50;$/;"	m	class:Ui_DownloadWindow
desLabel_51	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_51;$/;"	m	class:Ui_DownloadWindow
desLabel_52	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_52;$/;"	m	class:Ui_DownloadWindow
desLabel_53	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_53;$/;"	m	class:Ui_DownloadWindow
desLabel_54	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_54;$/;"	m	class:Ui_DownloadWindow
desLabel_55	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_55;$/;"	m	class:Ui_DownloadWindow
desLabel_56	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_56;$/;"	m	class:Ui_DownloadWindow
desLabel_57	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_57;$/;"	m	class:Ui_DownloadWindow
desLabel_58	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_58;$/;"	m	class:Ui_DownloadWindow
desLabel_59	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_59;$/;"	m	class:Ui_DownloadWindow
desLabel_60	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_60;$/;"	m	class:Ui_DownloadWindow
desLabel_61	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_61;$/;"	m	class:Ui_DownloadWindow
desLabel_62	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_62;$/;"	m	class:Ui_DownloadWindow
desLabel_63	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_63;$/;"	m	class:Ui_DownloadWindow
desLabel_64	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_64;$/;"	m	class:Ui_DownloadWindow
desLabel_65	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_65;$/;"	m	class:Ui_DownloadWindow
desLabel_66	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_66;$/;"	m	class:Ui_DownloadWindow
desLabel_67	qt_pro/ui_downloadwindow.h	/^    QLabel *desLabel_67;$/;"	m	class:Ui_DownloadWindow
desired_queue_size	torrent/include/libtorrent/peer_connection.hpp	/^		int desired_queue_size() const$/;"	f	class:libtorrent::peer_connection
desktop_rect	qt_pro/global.h	/^    QRect desktop_rect;$/;"	m	class:Global
desktop_type	include/config.h	/^    unsigned int desktop_type;      \/\/1, 2, ä¸ªäººæ¡é¢æå­¦æ¡é¢$/;"	m	struct:terminal_info
desktop_type	qt_pro/external.h	/^    unsigned int desktop_type;      \/\/1, 2, ä¸ªäººæ¡é¢æå­¦æ¡é¢$/;"	m	struct:terminal_info
dest	torrent/src/torrent_peer.cpp	/^	string_view torrent_peer::dest() const$/;"	f	class:libtorrent::torrent_peer
destination	torrent/include/libtorrent/enum_net.hpp	/^		address destination;$/;"	m	struct:libtorrent::ip_route
destination	torrent/include/libtorrent/i2p_stream.hpp	/^	std::string const& destination() { return m_dest; }$/;"	f	class:libtorrent::i2p_stream::std
destination	torrent/include/libtorrent/torrent_peer.hpp	/^		aux::string_ptr destination;$/;"	m	struct:libtorrent::i2p_peer
destroy	torrent/src/utp_stream.cpp	/^bool utp_socket_impl::destroy()$/;"	f	class:libtorrent::utp_socket_impl
destruct	torrent/src/entry.cpp	/^	void entry::destruct()$/;"	f	class:libtorrent::entry
destruct	torrent/src/socket_type.cpp	/^	void socket_type::destruct()$/;"	f	class:libtorrent::aux::socket_type
destruct_holder	torrent/include/libtorrent/chained_buffer.hpp	/^			destruct_holder_fun destruct_holder;$/;"	m	struct:libtorrent::chained_buffer
destructing_torrent	torrent/include/libtorrent/error_code.hpp	/^			destructing_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
detach	torrent/src/utp_stream.cpp	/^void utp_socket_impl::detach()$/;"	f	class:libtorrent::utp_socket_impl
detach_utp_impl	torrent/src/utp_stream.cpp	/^void detach_utp_impl(utp_socket_impl* s)$/;"	f	namespace:libtorrent
detail	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^      namespace detail {$/;"	n	namespace:boost::multiprecision
detail	torrent/include/libtorrent/bdecode.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	torrent/include/libtorrent/bencode.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	torrent/include/libtorrent/create_torrent.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	torrent/include/libtorrent/entry.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	torrent/include/libtorrent/io.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	torrent/include/libtorrent/ip_filter.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	torrent/include/libtorrent/socket_io.hpp	/^namespace detail {$/;"	n	namespace:libtorrent
detail	torrent/src/bdecode.cpp	/^namespace detail {$/;"	n	namespace:libtorrent	file:
detail	torrent/src/entry.cpp	/^namespace detail {$/;"	n	namespace:libtorrent	file:
dev	include/device.h	/^    PedDevice *dev;$/;"	m	struct:disk_param
dev	torrent/bak/connection_tester.cpp	/^std::random_device dev;$/;"	m	namespace:__anon144	file:
dev_info	src/device.c	/^struct device_info dev_info;$/;"	v	typeref:struct:device_info
dev_random	torrent/include/libtorrent/aux_/dev_random.hpp	/^		dev_random()$/;"	f	struct:libtorrent::aux::dev_random
dev_random	torrent/include/libtorrent/aux_/dev_random.hpp	/^	struct dev_random$/;"	s	namespace:libtorrent::aux
device	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::string device;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
device	torrent/include/libtorrent/aux_/session_impl.hpp	/^		std::string device;$/;"	m	struct:libtorrent::aux::listen_socket_t
device	torrent/include/libtorrent/string_util.hpp	/^		std::string device;$/;"	m	struct:libtorrent::listen_interface_t
device_contains	src/device.c	/^device_contains (const char *dev, dev_t root_device)$/;"	f	file:
device_contains	virt-p2v/src/p2v.c	/^device_contains (const char *dev, dev_t root_device)$/;"	f	file:
device_contains	virt-p2v/src/p2v_transform.c	/^device_contains (const char *dev, dev_t root_device)$/;"	f	file:
device_for_address	torrent/src/enum_net.cpp	/^	std::string device_for_address(address addr, io_service& ios, error_code& ec)$/;"	f	namespace:libtorrent
device_info	include/device.h	/^struct device_info$/;"	s
devices	torrent/include/libtorrent/upnp.hpp	/^		std::set<rootdevice> devices;$/;"	m	struct:libtorrent::final::upnp_state_t
dh_key_exchange	torrent/include/libtorrent/pe_crypto.hpp	/^	class TORRENT_EXTRA_EXPORT dh_key_exchange$/;"	c	namespace:libtorrent
dh_key_exchange	torrent/src/pe_crypto.cpp	/^	dh_key_exchange::dh_key_exchange()$/;"	f	class:libtorrent::dh_key_exchange
dh_key_len	torrent/src/bt_peer_connection.cpp	/^	constexpr std::size_t dh_key_len = 96;$/;"	m	namespace:libtorrent::__anon118	file:
dhcp_flag	qt_pro/dialogwindow.h	/^    int dhcp_flag;$/;"	m	class:DialogWindow
dht	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t dht = 10_bit;$/;"	m	namespace:libtorrent::alert_category
dht	torrent/include/libtorrent/aux_/session_impl.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/aux_/session_interface.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/fwd.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/announce_flags.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/dht_state.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^			node dht;$/;"	m	struct:libtorrent::dht::final::tracker_node
dht	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/direct_request.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/ed25519.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/find_data.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/get_item.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/get_peers.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/io.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/item.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/msg.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/node.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/node_entry.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/node_id.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/observer.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/put_data.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/refresh.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/routing_table.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^namespace libtorrent { namespace dht$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/kademlia/types.hpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent
dht	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t dht = 1_bit;$/;"	m	struct:libtorrent::peer_info
dht	torrent/kademlia/dht_settings.cpp	/^namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/dht_state.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/dht_storage.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/dht_tracker.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/dos_blocker.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/ed25519.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/find_data.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/get_item.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/get_peers.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/item.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/msg.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/node.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/node_entry.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/node_id.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/put_data.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/refresh.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/routing_table.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/rpc_manager.cpp	/^namespace libtorrent { namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/sample_infohashes.cpp	/^namespace libtorrent { namespace dht$/;"	n	namespace:libtorrent	file:
dht	torrent/kademlia/traversal_algorithm.cpp	/^namespace dht {$/;"	n	namespace:libtorrent	file:
dht	torrent/src/peer_info.cpp	/^	constexpr peer_source_flags_t peer_info::dht;$/;"	m	class:libtorrent::peer_info	file:
dht_active_requests	torrent/bak/client_test.cpp	/^std::vector<lt::dht_lookup> dht_active_requests;$/;"	v
dht_allocated_observers	torrent/include/libtorrent/performance_counters.hpp	/^			dht_allocated_observers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_announce	torrent/src/session_handle.cpp	/^	void session_handle::dht_announce(sha1_hash const& info_hash, int port$/;"	f	class:libtorrent::session_handle
dht_announce	torrent/src/session_impl.cpp	/^	void session_impl::dht_announce(sha1_hash const& info_hash, int port, dht::announce_flags_t const flags)$/;"	f	class:libtorrent::aux::session_impl
dht_announce	torrent/src/torrent.cpp	/^	void torrent::dht_announce()$/;"	f	class:libtorrent::torrent
dht_announce_alert	torrent/src/alert.cpp	/^	dht_announce_alert::dht_announce_alert(aux::stack_allocator&$/;"	f	class:libtorrent::dht_announce_alert
dht_announce_interval	torrent/include/libtorrent/settings_pack.hpp	/^			dht_announce_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
dht_announce_peer_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_announce_peer_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_announce_peer_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_announce_peer_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_bootstrap_alert	torrent/src/alert.cpp	/^	dht_bootstrap_alert::dht_bootstrap_alert(aux::stack_allocator&)$/;"	f	class:libtorrent::dht_bootstrap_alert
dht_bootstrap_nodes	torrent/include/libtorrent/settings_pack.hpp	/^			dht_bootstrap_nodes,$/;"	e	enum:libtorrent::settings_pack::string_types
dht_bytes_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_bytes_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_bytes_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_bytes_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_default_storage	torrent/kademlia/dht_storage.cpp	/^		explicit dht_default_storage(dht_settings const& settings)$/;"	f	class:libtorrent::dht::__anon153::final
dht_default_storage_constructor	torrent/kademlia/dht_storage.cpp	/^std::unique_ptr<dht_storage_interface> dht_default_storage_constructor($/;"	f	namespace:libtorrent::dht
dht_direct_request	torrent/src/session_handle.cpp	/^	void session_handle::dht_direct_request(udp::endpoint const& ep, entry const& e, void* userdata)$/;"	f	class:libtorrent::session_handle
dht_direct_request	torrent/src/session_impl.cpp	/^	void session_impl::dht_direct_request(udp::endpoint const& ep, entry& e, void* userdata)$/;"	f	class:libtorrent::aux::session_impl
dht_direct_response_alert	torrent/src/alert.cpp	/^	dht_direct_response_alert::dht_direct_response_alert($/;"	f	class:libtorrent::dht_direct_response_alert
dht_download_rate	torrent/include/libtorrent/session_status.hpp	/^		int dht_download_rate;$/;"	m	struct:libtorrent::session_status
dht_error_alert	torrent/src/alert.cpp	/^	dht_error_alert::dht_error_alert(aux::stack_allocator&$/;"	f	class:libtorrent::dht_error_alert
dht_find_node_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_find_node_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_find_node_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_find_node_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_immutable_item	torrent/src/session_impl.cpp	/^	void session_impl::dht_get_immutable_item(sha1_hash const& target)$/;"	f	class:libtorrent::aux::session_impl
dht_get_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_get_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_item	torrent/src/session_handle.cpp	/^	void session_handle::dht_get_item(sha1_hash const& target)$/;"	f	class:libtorrent::session_handle
dht_get_item	torrent/src/session_handle.cpp	/^	void session_handle::dht_get_item(std::array<char, 32> key$/;"	f	class:libtorrent::session_handle
dht_get_mutable_item	torrent/src/session_impl.cpp	/^	void session_impl::dht_get_mutable_item(std::array<char, 32> key$/;"	f	class:libtorrent::aux::session_impl
dht_get_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_get_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_peers	torrent/src/session_handle.cpp	/^	void session_handle::dht_get_peers(sha1_hash const& info_hash)$/;"	f	class:libtorrent::session_handle
dht_get_peers	torrent/src/session_impl.cpp	/^	void session_impl::dht_get_peers(sha1_hash const& info_hash)$/;"	f	class:libtorrent::aux::session_impl
dht_get_peers_alert	torrent/src/alert.cpp	/^	dht_get_peers_alert::dht_get_peers_alert(aux::stack_allocator&$/;"	f	class:libtorrent::dht_get_peers_alert
dht_get_peers_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_get_peers_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_peers_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_get_peers_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_get_peers_reply_alert	torrent/src/alert.cpp	/^	dht_get_peers_reply_alert::dht_get_peers_reply_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::dht_get_peers_reply_alert
dht_global_nodes	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t dht_global_nodes;$/;"	m	struct:libtorrent::session_status
dht_immutable_data	torrent/include/libtorrent/performance_counters.hpp	/^			dht_immutable_data,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_immutable_item	torrent/kademlia/dht_storage.cpp	/^	struct dht_immutable_item$/;"	s	namespace:libtorrent::dht::__anon153	file:
dht_immutable_item_alert	torrent/src/alert.cpp	/^	dht_immutable_item_alert::dht_immutable_item_alert(aux::stack_allocator&$/;"	f	class:libtorrent::dht_immutable_item_alert
dht_invalid_announce	torrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_announce,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_find_node	torrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_find_node,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_get	torrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_get,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_get_peers	torrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_get_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_put	torrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_put,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_invalid_sample_infohashes	torrent/include/libtorrent/performance_counters.hpp	/^			dht_invalid_sample_infohashes,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_live_nodes	torrent/src/session_handle.cpp	/^	void session_handle::dht_live_nodes(sha1_hash const& nid)$/;"	f	class:libtorrent::session_handle
dht_live_nodes	torrent/src/session_impl.cpp	/^	void session_impl::dht_live_nodes(sha1_hash const& nid)$/;"	f	class:libtorrent::aux::session_impl
dht_live_nodes_alert	torrent/src/alert.cpp	/^	dht_live_nodes_alert::dht_live_nodes_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::dht_live_nodes_alert
dht_log	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t dht_log = 17_bit;$/;"	m	namespace:libtorrent::alert_category
dht_log_alert	torrent/src/alert.cpp	/^	dht_log_alert::dht_log_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::dht_log_alert
dht_log_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t dht_log_notification = 17_bit;$/;"	m	class:libtorrent::alert
dht_log_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::dht_log_notification;$/;"	m	class:libtorrent::alert	file:
dht_logger	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^	struct TORRENT_EXTRA_EXPORT dht_logger$/;"	s	namespace:libtorrent::dht
dht_messages_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_messages_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_messages_in_dropped	torrent/include/libtorrent/performance_counters.hpp	/^			dht_messages_in_dropped,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_messages_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_messages_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_messages_out_dropped	torrent/include/libtorrent/performance_counters.hpp	/^			dht_messages_out_dropped,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_mutable_data	torrent/include/libtorrent/performance_counters.hpp	/^			dht_mutable_data,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_mutable_item	torrent/kademlia/dht_storage.cpp	/^	struct dht_mutable_item : dht_immutable_item$/;"	s	namespace:libtorrent::dht::__anon153	file:
dht_mutable_item_alert	torrent/src/alert.cpp	/^	dht_mutable_item_alert::dht_mutable_item_alert(aux::stack_allocator&$/;"	f	class:libtorrent::dht_mutable_item_alert
dht_node_cache	torrent/include/libtorrent/performance_counters.hpp	/^			dht_node_cache,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_node_cache	torrent/include/libtorrent/session_status.hpp	/^		int dht_node_cache;$/;"	m	struct:libtorrent::session_status
dht_nodes	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<std::pair<std::string, int>>> dht_nodes;$/;"	m	struct:libtorrent::add_torrent_params
dht_nodes	torrent/include/libtorrent/performance_counters.hpp	/^			dht_nodes,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_nodes	torrent/include/libtorrent/session_status.hpp	/^		int dht_nodes;$/;"	m	struct:libtorrent::session_status
dht_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t dht_notification = 10_bit;$/;"	m	class:libtorrent::alert
dht_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::dht_notification;$/;"	m	class:libtorrent::alert	file:
dht_observer	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^	struct TORRENT_EXTRA_EXPORT dht_observer : dht_logger$/;"	s	namespace:libtorrent::dht
dht_operation	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t dht_operation = 18_bit;$/;"	m	namespace:libtorrent::alert_category
dht_operation_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t dht_operation_notification = 18_bit;$/;"	m	class:libtorrent::alert
dht_operation_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::dht_operation_notification;$/;"	m	class:libtorrent::alert	file:
dht_outgoing_get_peers_alert	torrent/src/alert.cpp	/^	dht_outgoing_get_peers_alert::dht_outgoing_get_peers_alert(aux::stack_allocator&$/;"	f	class:libtorrent::dht_outgoing_get_peers_alert
dht_peers	torrent/include/libtorrent/performance_counters.hpp	/^			dht_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_ping_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_ping_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_ping_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_ping_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_pkt_alert	torrent/src/alert.cpp	/^	dht_pkt_alert::dht_pkt_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::dht_pkt_alert
dht_prefer_verified_node_ids	torrent/include/libtorrent/settings_pack.hpp	/^			dht_prefer_verified_node_ids,$/;"	e	enum:libtorrent::settings_pack::bool_types
dht_proxy	torrent/src/session_handle.cpp	/^	proxy_settings session_handle::dht_proxy() const$/;"	f	class:libtorrent::session_handle
dht_put_alert	torrent/src/alert.cpp	/^	dht_put_alert::dht_put_alert(aux::stack_allocator&$/;"	f	class:libtorrent::dht_put_alert
dht_put_alert	torrent/src/alert.cpp	/^	dht_put_alert::dht_put_alert(aux::stack_allocator&, sha1_hash const& t, int n)$/;"	f	class:libtorrent::dht_put_alert
dht_put_immutable_item	torrent/src/session_impl.cpp	/^	void session_impl::dht_put_immutable_item(entry const& data, sha1_hash target)$/;"	f	class:libtorrent::aux::session_impl
dht_put_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_put_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_put_item	torrent/src/session_handle.cpp	/^	sha1_hash session_handle::dht_put_item(entry data)$/;"	f	class:libtorrent::session_handle
dht_put_item	torrent/src/session_handle.cpp	/^	void session_handle::dht_put_item(std::array<char, 32> key$/;"	f	class:libtorrent::session_handle
dht_put_mutable_item	torrent/src/session_impl.cpp	/^	void session_impl::dht_put_mutable_item(std::array<char, 32> key$/;"	f	class:libtorrent::aux::session_impl
dht_put_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_put_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_reply_alert	torrent/src/alert.cpp	/^	dht_reply_alert::dht_reply_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::dht_reply_alert
dht_request_feature	torrent/include/libtorrent/extensions.hpp	/^		static constexpr feature_flags_t dht_request_feature = 3_bit;$/;"	m	struct:libtorrent::plugin
dht_request_feature	torrent/src/session.cpp	/^	constexpr feature_flags_t plugin::dht_request_feature;$/;"	m	class:libtorrent::plugin	file:
dht_routing_bucket	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT dht_routing_bucket$/;"	s	namespace:libtorrent
dht_routing_table	torrent/bak/client_test.cpp	/^std::vector<lt::dht_routing_bucket> dht_routing_table;$/;"	v
dht_routing_table	torrent/include/libtorrent/session_status.hpp	/^		std::vector<dht_routing_bucket> dht_routing_table;$/;"	m	struct:libtorrent::session_status
dht_sample_infohashes	torrent/src/session_handle.cpp	/^	void session_handle::dht_sample_infohashes(udp::endpoint const& ep, sha1_hash const& target)$/;"	f	class:libtorrent::session_handle
dht_sample_infohashes	torrent/src/session_impl.cpp	/^	void session_impl::dht_sample_infohashes(udp::endpoint const& ep, sha1_hash const& target)$/;"	f	class:libtorrent::aux::session_impl
dht_sample_infohashes_alert	torrent/src/alert.cpp	/^	dht_sample_infohashes_alert::dht_sample_infohashes_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::dht_sample_infohashes_alert
dht_sample_infohashes_in	torrent/include/libtorrent/performance_counters.hpp	/^			dht_sample_infohashes_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_sample_infohashes_out	torrent/include/libtorrent/performance_counters.hpp	/^			dht_sample_infohashes_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
dht_settings	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^	struct TORRENT_EXPORT dht_settings$/;"	s	namespace:libtorrent::dht
dht_settings	torrent/include/libtorrent/session.hpp	/^		dht::dht_settings dht_settings;$/;"	m	struct:libtorrent::session_params
dht_state	torrent/include/libtorrent/kademlia/dht_state.hpp	/^	struct TORRENT_EXPORT dht_state$/;"	s	namespace:libtorrent::dht
dht_state	torrent/include/libtorrent/session.hpp	/^		dht::dht_state dht_state;$/;"	m	struct:libtorrent::session_params
dht_state	torrent/src/session_handle.cpp	/^	entry session_handle::dht_state() const$/;"	f	class:libtorrent::session_handle
dht_state	torrent/src/session_impl.cpp	/^	entry session_impl::dht_state() const$/;"	f	class:libtorrent::aux::session_impl
dht_stats_alert	torrent/src/alert.cpp	/^	dht_stats_alert::dht_stats_alert(aux::stack_allocator&$/;"	f	class:libtorrent::dht_stats_alert
dht_status	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::dht_status(session_status& s)$/;"	f	class:libtorrent::dht::dht_tracker
dht_status	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::dht_status(std::vector<dht_routing_bucket>& table$/;"	f	class:libtorrent::dht::dht_tracker
dht_storage_constructor	torrent/include/libtorrent/session.hpp	/^		dht::dht_storage_constructor_type dht_storage_constructor;$/;"	m	struct:libtorrent::session_params
dht_storage_counters	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^	struct TORRENT_EXPORT dht_storage_counters$/;"	s	namespace:libtorrent::dht
dht_storage_interface	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^	struct TORRENT_EXPORT dht_storage_interface$/;"	s	namespace:libtorrent::dht
dht_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			dht_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
dht_torrents	torrent/include/libtorrent/session_status.hpp	/^		int dht_torrents;$/;"	m	struct:libtorrent::session_status
dht_total_allocations	torrent/include/libtorrent/session_status.hpp	/^		int dht_total_allocations;$/;"	m	struct:libtorrent::session_status
dht_tracker	torrent/kademlia/dht_tracker.cpp	/^	dht_tracker::dht_tracker(dht_observer* observer$/;"	f	class:libtorrent::dht::dht_tracker
dht_upload_rate	torrent/include/libtorrent/session_status.hpp	/^		int dht_upload_rate;$/;"	m	struct:libtorrent::session_status
dht_upload_rate_limit	torrent/include/libtorrent/settings_pack.hpp	/^			dht_upload_rate_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
dialog_ui	qt_pro/configwindow.h	/^    DialogWindow *dialog_ui;$/;"	m	class:ConfigWindow
dialog_ui	qt_pro/downloadwindow.h	/^   DialogWindow *dialog_ui;$/;"	m	class:DownloadWindow
dialog_ui	qt_pro/global.h	/^    DialogWindow *dialog_ui;$/;"	m	class:Global
dialog_ui	qt_pro/mainwindow.h	/^    DialogWindow *dialog_ui;$/;"	m	class:MainWindow
dialog_ui	qt_pro/oswindow.h	/^    DialogWindow *dialog_ui;$/;"	m	class:OSWindow
dialog_ui	qt_pro/uploadwindow.h	/^    DialogWindow *dialog_ui;$/;"	m	class:Uploadwindow
dict	torrent/include/libtorrent/bdecode.hpp	/^	{ none, dict, list, string, integer, end };$/;"	m	struct:libtorrent::detail::bdecode_token	typeref:enum:libtorrent::detail::bdecode_token::
dict	torrent/include/libtorrent/lazy_entry.hpp	/^			lazy_dict_entry* dict;$/;"	m	union:libtorrent::lazy_entry::data_t
dict	torrent/src/entry.cpp	/^	entry::dictionary_type const& entry::dict() const$/;"	f	class:libtorrent::entry::entry
dict	torrent/src/entry.cpp	/^	entry::dictionary_type& entry::dict()$/;"	f	class:libtorrent::entry
dict_append	torrent/src/lazy_bdecode.cpp	/^	lazy_entry* lazy_entry::dict_append(char const* name)$/;"	f	class:libtorrent::lazy_entry
dict_at	torrent/src/bdecode.cpp	/^	std::pair<string_view, bdecode_node> bdecode_node::dict_at(int i) const$/;"	f	class:libtorrent::bdecode_node
dict_at	torrent/src/lazy_bdecode.cpp	/^	std::pair<std::string, lazy_entry const*> lazy_entry::dict_at(int const i) const$/;"	f	class:libtorrent::lazy_entry
dict_find	torrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry const* dict_find(char const* name) const$/;"	f	struct:libtorrent::lazy_entry
dict_find	torrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry const* dict_find(std::string const& name) const$/;"	f	struct:libtorrent::lazy_entry
dict_find	torrent/src/bdecode.cpp	/^	bdecode_node bdecode_node::dict_find(string_view key) const$/;"	f	class:libtorrent::bdecode_node
dict_find	torrent/src/lazy_bdecode.cpp	/^	lazy_entry* lazy_entry::dict_find(char const* name)$/;"	f	class:libtorrent::lazy_entry
dict_find	torrent/src/lazy_bdecode.cpp	/^	lazy_entry* lazy_entry::dict_find(std::string const& name)$/;"	f	class:libtorrent::lazy_entry
dict_find_dict	torrent/src/bdecode.cpp	/^	bdecode_node bdecode_node::dict_find_dict(string_view key) const$/;"	f	class:libtorrent::bdecode_node
dict_find_dict	torrent/src/lazy_bdecode.cpp	/^	lazy_entry const* lazy_entry::dict_find_dict(char const* name) const$/;"	f	class:libtorrent::lazy_entry
dict_find_dict	torrent/src/lazy_bdecode.cpp	/^	lazy_entry const* lazy_entry::dict_find_dict(std::string const& name) const$/;"	f	class:libtorrent::lazy_entry
dict_find_int	torrent/src/bdecode.cpp	/^	bdecode_node bdecode_node::dict_find_int(string_view key) const$/;"	f	class:libtorrent::bdecode_node
dict_find_int	torrent/src/lazy_bdecode.cpp	/^	lazy_entry const* lazy_entry::dict_find_int(char const* name) const$/;"	f	class:libtorrent::lazy_entry
dict_find_int_value	torrent/src/bdecode.cpp	/^	std::int64_t bdecode_node::dict_find_int_value(string_view key$/;"	f	class:libtorrent::bdecode_node
dict_find_int_value	torrent/src/lazy_bdecode.cpp	/^	std::int64_t lazy_entry::dict_find_int_value(char const* name$/;"	f	class:libtorrent::lazy_entry
dict_find_list	torrent/src/bdecode.cpp	/^	bdecode_node bdecode_node::dict_find_list(string_view key) const$/;"	f	class:libtorrent::bdecode_node
dict_find_list	torrent/src/lazy_bdecode.cpp	/^	lazy_entry const* lazy_entry::dict_find_list(char const* name) const$/;"	f	class:libtorrent::lazy_entry
dict_find_pstr	torrent/src/lazy_bdecode.cpp	/^	pascal_string lazy_entry::dict_find_pstr(char const* name) const$/;"	f	class:libtorrent::lazy_entry
dict_find_string	torrent/src/bdecode.cpp	/^	bdecode_node bdecode_node::dict_find_string(string_view key) const$/;"	f	class:libtorrent::bdecode_node
dict_find_string	torrent/src/lazy_bdecode.cpp	/^	lazy_entry const* lazy_entry::dict_find_string(char const* name) const$/;"	f	class:libtorrent::lazy_entry
dict_find_string_value	torrent/src/bdecode.cpp	/^	string_view bdecode_node::dict_find_string_value(string_view key$/;"	f	class:libtorrent::bdecode_node
dict_find_string_value	torrent/src/lazy_bdecode.cpp	/^	std::string lazy_entry::dict_find_string_value(char const* name) const$/;"	f	class:libtorrent::lazy_entry
dict_size	torrent/include/libtorrent/lazy_entry.hpp	/^		int dict_size() const$/;"	f	struct:libtorrent::lazy_entry
dict_size	torrent/src/bdecode.cpp	/^	int bdecode_node::dict_size() const$/;"	f	class:libtorrent::bdecode_node
dict_t	torrent/include/libtorrent/bdecode.hpp	/^		dict_t,$/;"	e	enum:bdecode_node::type_t
dict_t	torrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
dictionary_t	torrent/include/libtorrent/entry.hpp	/^			dictionary_t,$/;"	e	enum:libtorrent::entry::data_type
did	include/device.h	/^    short host, did;$/;"	m	struct:_PedDevice
difLevel	include/StoreConfig.h	/^    uint32_t    difLevel; \/\/å·®å¼æä»¶å±æ° 0æ¯base$/;"	m	struct:_YZY_QCOW_ENTRY
difLevel	include/qcow2.h	/^    uint32_t difLevel;$/;"	m	struct:_YZY_DISK_BACK_FILE
difLevel	test/check.c	/^    uint32_t difLevel;$/;"	m	struct:_YZY_DISK_BACK_FILE	file:
dif_level	include/packet.h	/^    int dif_level;$/;"	m	struct:yzy_torrent
dif_level	test/test.c	/^    int dif_level;$/;"	m	struct:yzy_torrent	file:
diff	include/torrent.h	/^	int diff;$/;"	m	struct:torrent_task
digest	torrent/src/smart_ban.cpp	/^			sha1_hash digest;$/;"	m	struct:libtorrent::__anon85::final::block_entry	file:
digest32	torrent/include/libtorrent/sha1_hash.hpp	/^		explicit digest32(std::string const& s)$/;"	f	class:libtorrent::digest32
digest32	torrent/include/libtorrent/sha1_hash.hpp	/^	class digest32$/;"	c	namespace:libtorrent
direct_observer	torrent/include/libtorrent/kademlia/direct_request.hpp	/^	direct_observer(std::shared_ptr<traversal_algorithm> algo$/;"	f	struct:libtorrent::dht::direct_observer
direct_observer	torrent/include/libtorrent/kademlia/direct_request.hpp	/^struct direct_observer : observer$/;"	s	namespace:libtorrent::dht
direct_request	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::direct_request(udp::endpoint const& ep, entry& e$/;"	f	class:libtorrent::dht::dht_tracker
direct_request	torrent/kademlia/node.cpp	/^void node::direct_request(udp::endpoint const& ep, entry& e$/;"	f	class:libtorrent::dht::node
direct_traversal	torrent/include/libtorrent/kademlia/direct_request.hpp	/^	direct_traversal(node& node$/;"	f	struct:libtorrent::dht::direct_traversal
direct_traversal	torrent/include/libtorrent/kademlia/direct_request.hpp	/^struct direct_traversal : traversal_algorithm$/;"	s	namespace:libtorrent::dht
directory	torrent/include/libtorrent/aux_/path.hpp	/^			directory = 0x4000,  \/\/ directory$/;"	e	enum:libtorrent::file_status::__anon31
directory	torrent/include/libtorrent/file.hpp	/^	class TORRENT_EXTRA_EXPORT directory : public boost::noncopyable$/;"	c	namespace:libtorrent
directory	torrent/src/file.cpp	/^	directory::directory(std::string const& path, error_code& ec)$/;"	f	class:libtorrent::directory
dirty	include/device.h	/^    int dirty;$/;"	m	struct:_PedDevice
dirty	torrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t dirty:1;$/;"	m	struct:libtorrent::cached_block_entry
disable	torrent/src/natpmp.cpp	/^void natpmp::disable(error_code const& ec)$/;"	f	class:libtorrent::natpmp
disable	torrent/src/upnp.cpp	/^void upnp::disable(error_code const& ec)$/;"	f	class:libtorrent::upnp
disable_dht	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t disable_dht = 19_bit;$/;"	m	namespace:libtorrent::torrent_flags
disable_hash_checks	torrent/include/libtorrent/settings_pack.hpp	/^			disable_hash_checks,$/;"	e	enum:libtorrent::settings_pack::bool_types
disable_lsd	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t disable_lsd = 20_bit;$/;"	m	namespace:libtorrent::torrent_flags
disable_pex	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t disable_pex = 21_bit;$/;"	m	namespace:libtorrent::torrent_flags
disable_storage	torrent/bak/client_test.cpp	/^bool disable_storage = false;$/;"	v
disabled	torrent/include/libtorrent/session_settings.hpp	/^			disabled$/;"	e	enum:libtorrent::pe_settings::enc_policy
disabled	torrent/include/libtorrent/upnp.hpp	/^		bool disabled = false;$/;"	m	struct:libtorrent::final::rootdevice
disabled_storage	torrent/src/storage.cpp	/^			explicit disabled_storage(file_storage const& fs) : storage_interface(fs) {}$/;"	f	class:libtorrent::__anon67::final
disabled_storage_constructor	torrent/src/storage.cpp	/^	storage_interface* disabled_storage_constructor(storage_params const& params, file_pool&)$/;"	f	namespace:libtorrent
disallow	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		void disallow(socket_type_t const st, peer_class_t const peer_class)$/;"	f	namespace:libtorrent
disallow_ghost	torrent/include/libtorrent/block_cache.hpp	/^			disallow_ghost$/;"	e	enum:libtorrent::block_cache::eviction_mode
disarm	torrent/include/libtorrent/aux_/scope_end.hpp	/^		void disarm() { m_armed = false; }$/;"	f	struct:libtorrent::aux::scope_end_impl
discardable	torrent/include/libtorrent/alert.hpp	/^		bool discardable() const { return discardable_impl(); }$/;"	f	class:libtorrent::alert
discardable_impl	torrent/include/libtorrent/alert.hpp	/^		virtual bool discardable_impl() const { return true; }$/;"	f	class:libtorrent::alert
disconnect	torrent/src/http_seed_connection.cpp	/^	void http_seed_connection::disconnect(error_code const& ec$/;"	f	class:libtorrent::http_seed_connection
disconnect	torrent/src/peer_connection.cpp	/^	void peer_connection::disconnect(error_code const& ec$/;"	f	class:libtorrent::peer_connection
disconnect	torrent/src/peer_connection_handle.cpp	/^void peer_connection_handle::disconnect(error_code const& ec, operation_t const op$/;"	f	class:libtorrent::peer_connection_handle
disconnect	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::disconnect(error_code const& ec$/;"	f	class:libtorrent::web_peer_connection
disconnect_all	torrent/src/torrent.cpp	/^	void torrent::disconnect_all(error_code const& ec, operation_t op)$/;"	f	class:libtorrent::torrent
disconnect_if_redundant	torrent/src/peer_connection.cpp	/^	bool peer_connection::disconnect_if_redundant()$/;"	f	class:libtorrent::peer_connection
disconnect_peers	torrent/src/torrent.cpp	/^	int torrent::disconnect_peers(int const num, error_code const& ec)$/;"	f	class:libtorrent::torrent
disconnect_web_seed	torrent/src/torrent.cpp	/^	void torrent::disconnect_web_seed(peer_connection* p)$/;"	f	class:libtorrent::torrent
disconnected_peers	torrent/include/libtorrent/performance_counters.hpp	/^			disconnected_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
discover_device_impl	torrent/src/upnp.cpp	/^void upnp::discover_device_impl()$/;"	f	class:libtorrent::upnp
diskItem	include/StoreConfig.h	/^    YZY_DISK_ITEM       diskItem[YZY_MAX_DISK_COUNT]; \/\/ç©çç¡¬çå¤§å°$/;"	m	struct:_YZY_STORE_CONFIG
diskName	include/StoreConfig.h	/^    YZYGUID     diskName; \/\/ å¤ç¡¬çæ¯æ,ç£çGUIDï¼ç¨æ¥æ¥æ¾å½åèç¹æ°æ®æå¨ç©çç£ç,æ¾ä¸å°é»è®¤ä¸ºåç£ç$/;"	m	struct:_YZY_QCOW_ENTRY
diskName	include/StoreConfig.h	/^    YZYGUID diskName;$/;"	m	struct:_YZY_DISK_ITEM
diskName	include/gpt.h	/^    uint8_t diskName[16];$/;"	m	struct:_DiskDriver
diskSizeLba	include/StoreConfig.h	/^    uint64_t diskSizeLba;$/;"	m	struct:_YZY_DISK_ITEM
disk_aborter	torrent/src/create_torrent.cpp	/^		explicit disk_aborter(disk_io_thread& dio) : m_dio(dio) {}$/;"	f	struct:libtorrent::__anon135::disk_aborter
disk_aborter	torrent/src/create_torrent.cpp	/^	struct disk_aborter$/;"	s	namespace:libtorrent::__anon135	file:
disk_blocks_in_use	torrent/include/libtorrent/performance_counters.hpp	/^			disk_blocks_in_use,$/;"	e	enum:libtorrent::counters::stats_gauge_t
disk_buffer_holder	torrent/include/libtorrent/disk_buffer_holder.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_buffer_holder$/;"	s	namespace:libtorrent
disk_buffer_pool	torrent/include/libtorrent/disk_buffer_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_buffer_pool$/;"	s	namespace:libtorrent
disk_buffer_pool	torrent/src/disk_buffer_pool.cpp	/^	disk_buffer_pool::disk_buffer_pool(io_service& ios$/;"	f	class:libtorrent::disk_buffer_pool
disk_cache_no_pieces	torrent/include/libtorrent/session_handle.hpp	/^		enum { disk_cache_no_pieces = 1 };$/;"	e	enum:libtorrent::session_handle::__anon26
disk_class	torrent/include/libtorrent/torrent.hpp	/^		enum class disk_class { none, write };$/;"	c	class:libtorrent::torrent
disk_count	include/device.h	/^    int disk_count;$/;"	m	struct:device_info
disk_guid	include/gpt.h	/^    uint8_t   disk_guid[16];$/;"	m	struct:__anon6
disk_hash_time	torrent/include/libtorrent/performance_counters.hpp	/^			disk_hash_time,$/;"	e	enum:libtorrent::counters::stats_counter_t
disk_interface	torrent/include/libtorrent/disk_interface.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_interface$/;"	s	namespace:libtorrent
disk_io_job	torrent/include/libtorrent/disk_io_job.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_io_job : tailqueue_node<disk_io_job>$/;"	s	namespace:libtorrent
disk_io_job	torrent/src/disk_io_job.cpp	/^	disk_io_job::disk_io_job()$/;"	f	class:libtorrent::disk_io_job
disk_io_read_mode	torrent/include/libtorrent/settings_pack.hpp	/^			disk_io_read_mode,$/;"	e	enum:libtorrent::settings_pack::int_types
disk_io_thread	torrent/src/disk_io_thread.cpp	/^	disk_io_thread::disk_io_thread(io_service& ios, aux::session_settings const& sett, counters& cnt)$/;"	f	class:disk_io_thread
disk_io_thread_pool	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_io_thread_pool$/;"	s	namespace:libtorrent
disk_io_thread_pool	torrent/src/disk_io_thread_pool.cpp	/^	disk_io_thread_pool::disk_io_thread_pool(pool_thread_interface& thread_iface$/;"	f	class:libtorrent::disk_io_thread_pool
disk_io_write_mode	torrent/include/libtorrent/settings_pack.hpp	/^			disk_io_write_mode,$/;"	e	enum:libtorrent::settings_pack::int_types
disk_job_fence	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^	struct TORRENT_EXPORT disk_job_fence$/;"	s	namespace:libtorrent::aux
disk_job_pool	torrent/include/libtorrent/disk_job_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_job_pool$/;"	s	namespace:libtorrent
disk_job_pool	torrent/src/disk_job_pool.cpp	/^	disk_job_pool::disk_job_pool()$/;"	f	class:libtorrent::disk_job_pool
disk_job_time	torrent/include/libtorrent/performance_counters.hpp	/^			disk_job_time,$/;"	e	enum:libtorrent::counters::stats_counter_t
disk_name	include/device.h	/^	uint8_t disk_name[16];$/;"	m	struct:_PedDevice
disk_observer	torrent/include/libtorrent/disk_observer.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_observer$/;"	s	namespace:libtorrent
disk_param	include/device.h	/^struct disk_param$/;"	s
disk_param	include/device.h	/^typedef struct disk_param disk_param;$/;"	t	typeref:struct:disk_param
disk_read_queue	torrent/include/libtorrent/session_status.hpp	/^		int disk_read_queue;$/;"	m	struct:libtorrent::session_status
disk_read_time	torrent/include/libtorrent/performance_counters.hpp	/^			disk_read_time,$/;"	e	enum:libtorrent::counters::stats_counter_t
disk_ready	include/config.h	/^    int disk_ready;                 \/\/è£¸ç£çqcow2 ç»æä½åå§åå®æ $/;"	m	struct:config
disk_ready	include/device.h	/^	unsigned char disk_ready;		\/\/ æ£æµæ¯å¦æyzy ç»æä½crcæ ¡éª åtag	$/;"	m	struct:disk_param
disk_ready	qt_pro/external.h	/^    int disk_ready;                 \/\/è£¸ç£çqcow2 ç»æä½åå§åå®æ$/;"	m	struct:config
disk_size	include/config.h	/^    unsigned long long disk_size;$/;"	m	struct:terminal_info
disk_size	qt_pro/external.h	/^    unsigned long long disk_size;$/;"	m	struct:terminal_info
disk_size	qt_pro/global.h	/^    unsigned int disk_size;$/;"	m	struct:hwinfo
disk_size_lba	include/gpt.h	/^    uint64_t disk_size_lba;$/;"	m	struct:_DiskDriver
disk_thread	torrent/include/libtorrent/peer_connection.hpp	/^		disk_interface* disk_thread;$/;"	m	struct:libtorrent::peer_connection_args
disk_type	include/device.h	/^    unsigned char disk_type;        \/\/ 2 ç¡¬ç 3 u ç $/;"	m	struct:disk_param
disk_type	include/device.h	/^typedef enum disk_type {$/;"	g
disk_type	include/torrent.h	/^	int disk_type;$/;"	m	struct:torrent_task
disk_write_queue	torrent/include/libtorrent/session_status.hpp	/^		int disk_write_queue;$/;"	m	struct:libtorrent::session_status
disk_write_time	torrent/include/libtorrent/performance_counters.hpp	/^			disk_write_time,$/;"	e	enum:libtorrent::counters::stats_counter_t
disks	include/device.h	/^    disk_param disks[10];$/;"	m	struct:device_info
disks	virt-p2v/include/p2v-config.h	/^  char **disks;$/;"	m	struct:config
disks_list	virt-p2v/src/gui.c	/^  *disks_list, *removable_list, *interfaces_list,$/;"	v	file:
dispatch_message	torrent/src/bt_peer_connection.cpp	/^	bool bt_peer_connection::dispatch_message(int const received)$/;"	f	class:libtorrent::bt_peer_connection
display	qt_pro/moc_downloadwindow.cpp	/^void DownloadWindow::display(int _t1)$/;"	f	class:DownloadWindow
display_long_options	virt-p2v/src/p2v.c	/^display_long_options (const struct option *long_options)$/;"	f	file:
display_long_options	virt-p2v/src/p2v_transform.c	/^display_long_options (const struct option *long_options)$/;"	f	file:
display_short_options	virt-p2v/src/p2v.c	/^display_short_options (const char *format)$/;"	f	file:
display_short_options	virt-p2v/src/p2v_transform.c	/^display_short_options (const char *format)$/;"	f	file:
distance	torrent/kademlia/node_id.cpp	/^node_id distance(node_id const& n1, node_id const& n2)$/;"	f	namespace:libtorrent::dht
distance_exp	torrent/kademlia/node_id.cpp	/^int distance_exp(node_id const& n1, node_id const& n2)$/;"	f	namespace:libtorrent::dht
distance_too_far_back_in_block	torrent/include/libtorrent/gzip.hpp	/^			distance_too_far_back_in_block,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
distribute_quota	torrent/include/libtorrent/bandwidth_limit.hpp	/^	int distribute_quota;$/;"	m	struct:libtorrent::bandwidth_channel
distributed_copies	torrent/include/libtorrent/torrent_status.hpp	/^		float distributed_copies = 0.f;$/;"	m	struct:libtorrent::torrent_status
distributed_copies	torrent/src/piece_picker.cpp	/^	std::pair<int, int> piece_picker::distributed_copies() const$/;"	f	class:libtorrent::piece_picker
distributed_fraction	torrent/include/libtorrent/torrent_status.hpp	/^		int distributed_fraction = 0;$/;"	m	struct:libtorrent::torrent_status
distributed_full_copies	torrent/include/libtorrent/torrent_status.hpp	/^		int distributed_full_copies = 0;$/;"	m	struct:libtorrent::torrent_status
div_round_up	torrent/src/ut_metadata.cpp	/^	int div_round_up(int numerator, int denominator)$/;"	f	namespace:libtorrent::__anon72
dllobj	Makefile	/^dllobj =$/;"	m
dllobj	torrent/Makefile	/^dllobj =$/;"	m
dmtype	include/device.h	/^    char *dmtype;$/;"	m	struct:_PedDevice
dns1	include/StoreConfig.h	/^    uint64_t            dns1;$/;"	m	struct:_YZY_STORE_CONFIG
dns1	include/config.h	/^    char dns1[32];$/;"	m	struct:netcard_param
dns1	qt_pro/external.h	/^    char dns1[32];$/;"	m	struct:netcard_param
dns2	include/StoreConfig.h	/^    uint64_t            dns2;$/;"	m	struct:_YZY_STORE_CONFIG
dns2	include/config.h	/^    char dns2[32];$/;"	m	struct:netcard_param
dns2	qt_pro/external.h	/^    char dns2[32];$/;"	m	struct:netcard_param
dns_cache_entry	torrent/include/libtorrent/resolver.hpp	/^	struct dns_cache_entry$/;"	s	struct:libtorrent::final
do_connect	torrent/src/i2p_stream.cpp	/^	void i2p_stream::do_connect(error_code const& e, tcp::resolver::iterator i$/;"	f	class:libtorrent::i2p_stream
do_connect	torrent/src/utp_stream.cpp	/^void utp_stream::do_connect(tcp::endpoint const& ep)$/;"	f	class:libtorrent::utp_stream
do_connect_boost	torrent/src/torrent.cpp	/^	void torrent::do_connect_boost()$/;"	f	class:libtorrent::torrent
do_exit	src/main.c	/^static void do_exit()$/;"	f	file:
do_exit	test/test.c	/^static void do_exit()$/;"	f	file:
do_ledbat	torrent/src/utp_stream.cpp	/^void utp_socket_impl::do_ledbat(const int acked_bytes, const int delay$/;"	f	class:libtorrent::utp_socket_impl
do_name_lookup	torrent/src/i2p_stream.cpp	/^	void i2p_connection::do_name_lookup(std::string const& name$/;"	f	class:libtorrent::i2p_connection
do_pause	torrent/src/torrent.cpp	/^	void torrent::do_pause(pause_flags_t const flags)$/;"	f	class:libtorrent::torrent
do_resume	torrent/src/torrent.cpp	/^	void torrent::do_resume()$/;"	f	class:libtorrent::torrent
do_tick	torrent/include/libtorrent/storage.hpp	/^		void do_tick()$/;"	f	struct:libtorrent::storage_interface
do_update_interest	torrent/src/peer_connection.cpp	/^	void peer_connection::do_update_interest()$/;"	f	class:libtorrent::peer_connection
docdir	torrent/include/libtorrent/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
domain	include/StoreConfig.h	/^    uint8_t             domain[32];$/;"	m	struct:_YZY_STORE_CONFIG
done	torrent/include/libtorrent/file.hpp	/^		bool done() const { return m_done; }$/;"	f	class:libtorrent::directory
done	torrent/kademlia/find_data.cpp	/^void find_data::done()$/;"	f	class:libtorrent::dht::find_data
done	torrent/kademlia/get_item.cpp	/^void get_item::done()$/;"	f	class:libtorrent::dht::get_item
done	torrent/kademlia/get_peers.cpp	/^void obfuscated_get_peers::done()$/;"	f	class:libtorrent::dht::obfuscated_get_peers
done	torrent/kademlia/put_data.cpp	/^void put_data::done()$/;"	f	class:libtorrent::dht::put_data
done	torrent/kademlia/refresh.cpp	/^void bootstrap::done()$/;"	f	class:libtorrent::dht::bootstrap
done	torrent/kademlia/rpc_manager.cpp	/^void observer::done()$/;"	f	class:libtorrent::dht::observer
done	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::done()$/;"	f	class:libtorrent::dht::traversal_algorithm
done	torrent/src/torrent.cpp	/^			bool done = false;$/;"	m	struct:libtorrent::__anon105::announce_state	file:
done	torrent/src/torrent.cpp	/^			bool done = false;$/;"	m	struct:libtorrent::__anon112::timer_state	file:
done	virt-p2v/include/gnulib/windows-initguard.h	/^          volatile int done;$/;"	m	struct:__anon159
dont_count_slow_torrents	torrent/include/libtorrent/settings_pack.hpp	/^			dont_count_slow_torrents,$/;"	e	enum:libtorrent::settings_pack::bool_types
dont_flush_write_cache	torrent/include/libtorrent/settings_pack.hpp	/^			dont_flush_write_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
dont_follow_links	torrent/include/libtorrent/aux_/path.hpp	/^	enum { dont_follow_links = 1 };$/;"	e	enum:libtorrent::__anon32
dont_fragment	torrent/include/libtorrent/socket.hpp	/^		explicit dont_fragment(bool val) : m_value(val) {}$/;"	f	struct:libtorrent::dont_fragment
dont_fragment	torrent/include/libtorrent/socket.hpp	/^		explicit dont_fragment(bool val)$/;"	f	struct:libtorrent::dont_fragment
dont_fragment	torrent/include/libtorrent/socket.hpp	/^	struct dont_fragment$/;"	s	namespace:libtorrent
dont_fragment	torrent/include/libtorrent/udp_socket.hpp	/^		static constexpr udp_send_flags_t dont_fragment = 3_bit;$/;"	m	class:libtorrent::udp_socket
dont_fragment	torrent/src/udp_socket.cpp	/^constexpr udp_send_flags_t udp_socket::dont_fragment;$/;"	m	class:libtorrent::udp_socket	file:
dont_have_msg	torrent/include/libtorrent/bt_peer_connection.hpp	/^			dont_have_msg = 7,$/;"	e	enum:libtorrent::bt_peer_connection::__anon16
dont_parse_chunks	torrent/include/libtorrent/http_parser.hpp	/^		enum flags_t { dont_parse_chunks = 1 };$/;"	e	enum:libtorrent::http_parser::flags_t
dont_queue	torrent/include/libtorrent/udp_socket.hpp	/^		static constexpr udp_send_flags_t dont_queue = 2_bit;$/;"	m	class:libtorrent::udp_socket
dont_queue	torrent/src/udp_socket.cpp	/^constexpr udp_send_flags_t udp_socket::dont_queue;$/;"	m	class:libtorrent::udp_socket	file:
dont_replace	torrent/include/libtorrent/storage_defs.hpp	/^		dont_replace TORRENT_DEPRECATED_ENUM$/;"	e	enum:libtorrent::deprecated_move_flags_t
dos_blocker	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^	struct TORRENT_EXTRA_EXPORT dos_blocker$/;"	s	namespace:libtorrent::dht
dos_blocker	torrent/kademlia/dos_blocker.cpp	/^	dos_blocker::dos_blocker()$/;"	f	class:libtorrent::dht::dos_blocker
down_bandwidth_bytes_queue	torrent/include/libtorrent/session_status.hpp	/^		int down_bandwidth_bytes_queue;$/;"	m	struct:libtorrent::session_status
down_bandwidth_queue	torrent/include/libtorrent/session_status.hpp	/^		int down_bandwidth_queue;$/;"	m	struct:libtorrent::session_status
down_bandwidth_queue	torrent/include/libtorrent/torrent_status.hpp	/^		int down_bandwidth_queue = 0;$/;"	m	struct:libtorrent::torrent_status
down_desktop	qt_pro/global.h	/^    unsigned int down_desktop;$/;"	m	struct:hwinfo
down_speed	torrent/include/libtorrent/peer_info.hpp	/^		int down_speed;$/;"	m	struct:libtorrent::peer_info
download_channel	torrent/include/libtorrent/peer_connection.hpp	/^			download_channel,$/;"	e	enum:libtorrent::peer_connection::channels
download_flag	qt_pro/global.h	/^    int download_flag;$/;"	m	class:Global
download_ip_overhead	torrent/include/libtorrent/stat.hpp	/^		int download_ip_overhead() const { return m_stat[download_ip_protocol].counter(); }$/;"	f	class:libtorrent::stat
download_ip_protocol	torrent/include/libtorrent/stat.hpp	/^			download_ip_protocol,$/;"	e	enum:libtorrent::stat::__anon12
download_limit	torrent/include/libtorrent/add_torrent_params.hpp	/^		int download_limit = -1;$/;"	m	struct:libtorrent::add_torrent_params
download_limit	torrent/include/libtorrent/peer_class.hpp	/^		int download_limit;$/;"	m	struct:libtorrent::peer_class_info
download_limit	torrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER int download_limit;$/;"	m	struct:libtorrent::peer_info
download_limit	torrent/src/torrent.cpp	/^	int torrent::download_limit() const$/;"	f	class:libtorrent::torrent
download_limit	torrent/src/torrent_handle.cpp	/^	int torrent_handle::download_limit() const$/;"	f	class:libtorrent::torrent_handle
download_limit_too_low	torrent/include/libtorrent/alert_types.hpp	/^			download_limit_too_low,$/;"	e	enum:libtorrent::final::performance_warning_t
download_payload	torrent/include/libtorrent/stat.hpp	/^			download_payload,$/;"	e	enum:libtorrent::stat::__anon12
download_payload_rate	torrent/include/libtorrent/peer_connection.hpp	/^		int download_payload_rate() const { return m_statistics.download_payload_rate(); }$/;"	f	class:libtorrent::peer_connection
download_payload_rate	torrent/include/libtorrent/stat.hpp	/^		int download_payload_rate() const$/;"	f	class:libtorrent::stat
download_payload_rate	torrent/include/libtorrent/torrent_status.hpp	/^		int download_payload_rate = 0;$/;"	m	struct:libtorrent::torrent_status
download_priority	torrent/include/libtorrent/peer_class.hpp	/^		int download_priority;$/;"	m	struct:libtorrent::peer_class_info
download_protocol	torrent/include/libtorrent/stat.hpp	/^			download_protocol,$/;"	e	enum:libtorrent::stat::__anon12
download_queue	torrent/include/libtorrent/piece_picker.hpp	/^			download_queue_t download_queue() const$/;"	f	struct:libtorrent::piece_picker::piece_pos
download_queue	torrent/src/peer_connection.cpp	/^	std::vector<pending_block> const& peer_connection::download_queue() const$/;"	f	class:libtorrent::std::peer_connection
download_queue_length	torrent/include/libtorrent/peer_info.hpp	/^		int download_queue_length;$/;"	m	struct:libtorrent::peer_info
download_queue_time	torrent/include/libtorrent/peer_info.hpp	/^		time_duration download_queue_time;$/;"	m	struct:libtorrent::peer_info
download_queue_time	torrent/src/peer_connection.cpp	/^	time_duration peer_connection::download_queue_time(int const extra_bytes) const$/;"	f	class:libtorrent::peer_connection
download_rate	include/torrent.h	/^    unsigned long long download_rate;$/;"	m	struct:progress_info
download_rate	qt_pro/global.h	/^    unsigned long long download_rate;$/;"	m	struct:progress_info
download_rate	torrent/include/libtorrent/session_status.hpp	/^		int download_rate;$/;"	m	struct:libtorrent::session_status
download_rate	torrent/include/libtorrent/stat.hpp	/^		int download_rate() const$/;"	f	class:libtorrent::stat
download_rate	torrent/include/libtorrent/torrent_status.hpp	/^		int download_rate = 0;$/;"	m	struct:libtorrent::torrent_status
download_rate	virt-p2v/src/conversion.c	/^    unsigned long long download_rate;$/;"	m	struct:progress_info	file:
download_rate_limit	torrent/include/libtorrent/settings_pack.hpp	/^			download_rate_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
download_rate_limit	torrent/src/session_handle.cpp	/^	int session_handle::download_rate_limit() const$/;"	f	class:libtorrent::session_handle
download_rate_limit	torrent/src/session_impl.cpp	/^	int session_impl::download_rate_limit(peer_class_t c) const$/;"	f	class:libtorrent::aux::session_impl
download_rate_limit_depr	torrent/src/session_impl.cpp	/^	int session_impl::download_rate_limit_depr() const$/;"	f	class:libtorrent::aux::session_impl
download_rate_peak	torrent/include/libtorrent/peer_info.hpp	/^		int download_rate_peak;$/;"	m	struct:libtorrent::peer_info
download_state	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint32_t download_state : 3;$/;"	m	struct:libtorrent::piece_picker::piece_pos
download_test	torrent/bak/connection_tester.cpp	/^enum test_mode_t{ none, upload_test, download_test, dual_test };$/;"	e	enum:test_mode_t	file:
download_ui	qt_pro/global.h	/^    DownloadWindow *download_ui;$/;"	m	class:Global
downloaded	torrent/include/libtorrent/tracker_manager.hpp	/^		int downloaded;$/;"	m	struct:libtorrent::tracker_response
downloaded	torrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t downloaded;$/;"	m	struct:libtorrent::tracker_request
downloaded_in_last_round	torrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t downloaded_in_last_round() const$/;"	f	class:libtorrent::peer_connection
downloaders	torrent/include/libtorrent/tracker_manager.hpp	/^		int downloaders;$/;"	m	struct:libtorrent::tracker_response
downloading	torrent/include/libtorrent/piece_picker.hpp	/^			bool downloading() const { return state() != piece_open; }$/;"	f	struct:libtorrent::piece_picker::piece_pos
downloading	torrent/include/libtorrent/piece_picker.hpp	/^			bool downloading;$/;"	m	struct:libtorrent::piece_picker::piece_stats_t
downloading	torrent/include/libtorrent/torrent_status.hpp	/^			downloading,$/;"	e	enum:libtorrent::torrent_status::state_t
downloading_block_index	torrent/include/libtorrent/peer_info.hpp	/^		int downloading_block_index;$/;"	m	struct:libtorrent::peer_info
downloading_metadata	torrent/include/libtorrent/torrent_status.hpp	/^			downloading_metadata,$/;"	e	enum:libtorrent::torrent_status::state_t
downloading_piece	torrent/include/libtorrent/piece_picker.hpp	/^			downloading_piece()$/;"	f	struct:libtorrent::piece_picker::downloading_piece
downloading_piece	torrent/include/libtorrent/piece_picker.hpp	/^		struct downloading_piece$/;"	s	class:libtorrent::piece_picker
downloading_piece_index	torrent/include/libtorrent/peer_info.hpp	/^		piece_index_t downloading_piece_index;$/;"	m	struct:libtorrent::peer_info
downloading_piece_progress	torrent/src/bt_peer_connection.cpp	/^	piece_block_progress bt_peer_connection::downloading_piece_progress() const$/;"	f	class:libtorrent::bt_peer_connection
downloading_piece_progress	torrent/src/http_seed_connection.cpp	/^	piece_block_progress http_seed_connection::downloading_piece_progress() const$/;"	f	class:libtorrent::http_seed_connection
downloading_piece_progress	torrent/src/peer_connection.cpp	/^	piece_block_progress peer_connection::downloading_piece_progress() const$/;"	f	class:libtorrent::peer_connection
downloading_piece_progress	torrent/src/web_peer_connection.cpp	/^piece_block_progress web_peer_connection::downloading_piece_progress() const$/;"	f	class:libtorrent::web_peer_connection
downloading_progress	torrent/include/libtorrent/peer_info.hpp	/^		int downloading_progress;$/;"	m	struct:libtorrent::peer_info
downloading_total	torrent/include/libtorrent/peer_info.hpp	/^		int downloading_total;$/;"	m	struct:libtorrent::peer_info
downloadsize	src/torrent.cpp	/^int64_t downloadsize = 0;$/;"	v
downloadsize	torrent/src/client.cpp	/^int64_t downloadsize = 0;$/;"	v
dprintf	virt-p2v/include/gnulib/stdio.h	662;"	d
drain_piece_bufs	torrent/src/block_cache.cpp	/^int block_cache::drain_piece_bufs(cached_piece_entry& p, std::vector<char*>& buf)$/;"	f	class:libtorrent::block_cache
drawBackground	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::drawBackground(QPainter &p, const QRectF &baseRect)$/;"	f	class:QRoundProgressBar
drawBase	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::drawBase(QPainter &p, const QRectF &baseRect,const QRectF &innerRect)$/;"	f	class:QRoundProgressBar
drawInnerBackground	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::drawInnerBackground(QPainter &p, const QRectF &innerRect)$/;"	f	class:QRoundProgressBar
drawText	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::drawText(QPainter &p, const QRectF &innerRect, double innerRadius, double value)$/;"	f	class:QRoundProgressBar
drawValue	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::drawValue(QPainter &p$/;"	f	class:QRoundProgressBar
dual_test	torrent/bak/connection_tester.cpp	/^enum test_mode_t{ none, upload_test, download_test, dual_test };$/;"	e	enum:test_mode_t	file:
dump_call_profile	torrent/src/session_call.cpp	/^void dump_call_profile()$/;"	f	namespace:libtorrent::aux
dup	virt-p2v/include/gnulib/unistd.h	853;"	d
dup2	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (dup2);$/;"	v
dup2	virt-p2v/include/gnulib/unistd.h	881;"	d
dup3	virt-p2v/include/gnulib/unistd.h	910;"	d
dup_ack_limit	torrent/src/utp_stream.cpp	/^	dup_ack_limit = 3$/;"	e	enum:libtorrent::__anon125	file:
duplicate	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		HCRYPTHASH duplicate(crypt_hash const& h)$/;"	f	struct:libtorrent::aux::crypt_hash
duplicate_is_error	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t duplicate_is_error = 6_bit;$/;"	m	namespace:libtorrent::torrent_flags
duplicate_peer_id	torrent/include/libtorrent/close_reason.hpp	/^		duplicate_peer_id,$/;"	m	class:libtorrent::close_reason_t
duplicate_peer_id	torrent/include/libtorrent/error_code.hpp	/^			duplicate_peer_id,$/;"	e	enum:libtorrent::errors::error_code_enum
duplicate_torrent	torrent/include/libtorrent/error_code.hpp	/^			duplicate_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
duplicated_id	torrent/include/libtorrent/i2p_stream.hpp	/^			duplicated_id,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
dvidir	torrent/include/libtorrent/Makefile	/^dvidir = ${docdir}$/;"	m
dynamic	torrent/src/puff.cpp	/^local int dynamic(struct state *s)$/;"	f
eYzyProtocolStatus	include/packet.h	/^} eYzyProtocolStatus;$/;"	t	typeref:enum:vYzyProtocolStatus
ec	torrent/include/libtorrent/alert_types.hpp	/^		error_code TORRENT_DEPRECATED_MEMBER ec;$/;"	m	struct:libtorrent::final
ec	torrent/include/libtorrent/error_code.hpp	/^		error_code ec;$/;"	m	struct:libtorrent::storage_error
ec	torrent/src/create_torrent.cpp	/^		error_code& ec;$/;"	m	struct:libtorrent::__anon134::hash_state	file:
ed25519_add_scalar	torrent/ed25519/add_scalar.cpp	/^void ed25519_add_scalar(unsigned char *public_key, unsigned char *private_key, const unsigned char *scalar) {$/;"	f	namespace:libtorrent
ed25519_add_scalar	torrent/kademlia/ed25519.cpp	/^	public_key ed25519_add_scalar(public_key const& pk$/;"	f	namespace:libtorrent::dht
ed25519_add_scalar	torrent/kademlia/ed25519.cpp	/^	secret_key ed25519_add_scalar(secret_key const& sk$/;"	f	namespace:libtorrent::dht
ed25519_create_keypair	torrent/ed25519/keypair.cpp	/^void ed25519_create_keypair(unsigned char *public_key, unsigned char *private_key, const unsigned char *seed) {$/;"	f	namespace:libtorrent
ed25519_create_keypair	torrent/kademlia/ed25519.cpp	/^	std::tuple<public_key, secret_key> ed25519_create_keypair($/;"	f	namespace:libtorrent::dht
ed25519_create_seed	torrent/kademlia/ed25519.cpp	/^	std::array<char, 32> ed25519_create_seed()$/;"	f	namespace:libtorrent::dht
ed25519_key_exchange	torrent/ed25519/key_exchange.cpp	/^void ed25519_key_exchange(unsigned char *shared_secret$/;"	f	namespace:libtorrent
ed25519_key_exchange	torrent/kademlia/ed25519.cpp	/^	std::array<char, 32> ed25519_key_exchange($/;"	f	namespace:libtorrent::dht
ed25519_private_key_size	torrent/include/libtorrent/ed25519.hpp	/^	ed25519_private_key_size = 64,$/;"	e	enum:libtorrent::__anon10
ed25519_public_key_size	torrent/include/libtorrent/ed25519.hpp	/^	ed25519_public_key_size = 32,$/;"	e	enum:libtorrent::__anon10
ed25519_scalar_size	torrent/include/libtorrent/ed25519.hpp	/^	ed25519_scalar_size = 32,$/;"	e	enum:libtorrent::__anon10
ed25519_seed_size	torrent/include/libtorrent/ed25519.hpp	/^	ed25519_seed_size = 32,$/;"	e	enum:libtorrent::__anon10
ed25519_shared_secret_size	torrent/include/libtorrent/ed25519.hpp	/^	ed25519_shared_secret_size = 32$/;"	e	enum:libtorrent::__anon10
ed25519_sign	torrent/ed25519/sign.cpp	/^void ed25519_sign(unsigned char *signature, const unsigned char *message, std::ptrdiff_t message_len, const unsigned char *public_key, const unsigned char *private_key) {$/;"	f	namespace:libtorrent
ed25519_sign	torrent/kademlia/ed25519.cpp	/^	signature ed25519_sign(span<char const> msg$/;"	f	namespace:libtorrent::dht
ed25519_signature_size	torrent/include/libtorrent/ed25519.hpp	/^	ed25519_signature_size = 64,$/;"	e	enum:libtorrent::__anon10
ed25519_verify	torrent/ed25519/verify.cpp	/^int ed25519_verify(const unsigned char *signature, const unsigned char *message, std::ptrdiff_t message_len, const unsigned char *public_key) {$/;"	f	namespace:libtorrent
ed25519_verify	torrent/kademlia/ed25519.cpp	/^	bool ed25519_verify(signature const& sig$/;"	f	namespace:libtorrent::dht
emplace_alert	torrent/include/libtorrent/alert_manager.hpp	/^		void emplace_alert(Args&&... args) try$/;"	f	class:libtorrent::alert_manager
emplace_back	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		emplace_back(Args&&... args)$/;"	f	struct:libtorrent::heterogeneous_queue
empty	torrent/include/libtorrent/aux_/file_progress.hpp	/^		bool empty() const { return m_file_progress.empty(); }$/;"	f	struct:libtorrent::aux::file_progress
empty	torrent/include/libtorrent/buffer.hpp	/^	bool empty() const { return m_size == 0; }$/;"	f	class:libtorrent::buffer
empty	torrent/include/libtorrent/chained_buffer.hpp	/^		bool empty() const { return m_bytes == 0; }$/;"	f	namespace:libtorrent
empty	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		bool empty() const { return m_num_items == 0; }$/;"	f	struct:libtorrent::heterogeneous_queue
empty	torrent/include/libtorrent/kademlia/item.hpp	/^	bool empty() const { return m_value.type() == entry::undefined_t; }$/;"	f	class:libtorrent::dht::item
empty	torrent/include/libtorrent/linked_list.hpp	/^		bool empty() const { return m_size == 0; }$/;"	f	struct:libtorrent::linked_list
empty	torrent/include/libtorrent/packet_buffer.hpp	/^		bool empty() const { return m_size == 0; }$/;"	f	class:libtorrent::packet_buffer
empty	torrent/include/libtorrent/tailqueue.hpp	/^		bool empty() const { TORRENT_ASSERT(m_size >= 0); return m_size == 0; }$/;"	f	struct:libtorrent::tailqueue
empty	torrent/src/tracker_manager.cpp	/^	bool tracker_manager::empty() const$/;"	f	class:libtorrent::tracker_manager
empty_element	virt-p2v/include/libxml2-writer-macros.h	79;"	d
empty_element	virt-p2v/libguestfs/libxml2-writer-macros.h	79;"	d
empty_guid	src/gpt.c	/^uint8_t empty_guid[16] = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };$/;"	v
empty_queue	src/queue.c	/^unsigned char empty_queue(QUEUE *pQueue)$/;"	f
en_queue	src/queue.c	/^unsigned char en_queue(QUEUE *pQueue,unsigned char *ucpData,unsigned int uiSize,unsigned char ucType)$/;"	f
enable_all_trackers	torrent/src/torrent.cpp	/^	void torrent::enable_all_trackers()$/;"	f	class:libtorrent::torrent
enable_dht	torrent/include/libtorrent/settings_pack.hpp	/^			enable_dht,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_incoming_tcp	torrent/include/libtorrent/settings_pack.hpp	/^			enable_incoming_tcp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_incoming_utp	torrent/include/libtorrent/settings_pack.hpp	/^			enable_incoming_utp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_ip_notifier	torrent/include/libtorrent/settings_pack.hpp	/^			enable_ip_notifier,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_lsd	torrent/include/libtorrent/settings_pack.hpp	/^			enable_lsd,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_natpmp	torrent/include/libtorrent/settings_pack.hpp	/^			enable_natpmp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_outgoing_tcp	torrent/include/libtorrent/settings_pack.hpp	/^			enable_outgoing_tcp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_outgoing_utp	torrent/include/libtorrent/settings_pack.hpp	/^			enable_outgoing_utp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enable_upnp	torrent/include/libtorrent/settings_pack.hpp	/^			enable_upnp,$/;"	e	enum:libtorrent::settings_pack::bool_types
enabled	torrent/include/libtorrent/announce_entry.hpp	/^		bool enabled : 1;$/;"	m	struct:libtorrent::announce_endpoint
enabled	torrent/include/libtorrent/session_settings.hpp	/^			enabled,$/;"	e	enum:libtorrent::pe_settings::enc_policy
enc_get_utf8_size	src/tools.c	/^int enc_get_utf8_size(const unsigned char pInput)$/;"	f
enc_handler	torrent/include/libtorrent/pe_crypto.hpp	/^			std::shared_ptr<crypto_plugin> enc_handler;$/;"	m	struct:libtorrent::encryption_handler::barrier
enc_level	torrent/include/libtorrent/session_settings.hpp	/^		enum enc_level$/;"	g	struct:libtorrent::pe_settings
enc_policy	torrent/include/libtorrent/session_settings.hpp	/^		enum enc_policy$/;"	g	struct:libtorrent::pe_settings
enc_unicode_to_utf8_one	src/tools.c	/^int enc_unicode_to_utf8_one(unsigned long unic, unsigned char *pOutput,$/;"	f
enc_utf8_to_unicode_one	src/tools.c	/^int enc_utf8_to_unicode_one(const unsigned char *pInput, unsigned long *Unic)$/;"	f
encoding	include/packet.h	/^    u8_t   encoding;            \/\/æ°æ®æ®µåç¼©æ¹å¼  ä¾å¦ ox00:æ åç¼©$/;"	m	struct:yzy_packet
encrypt	torrent/src/pe_crypto.cpp	/^	encryption_handler::encrypt($/;"	f	class:libtorrent::encryption_handler
encrypt	torrent/src/pe_crypto.cpp	/^	rc4_handler::encrypt(span<span<char>> bufs)$/;"	f	class:libtorrent::rc4_handler
encrypt_flag	include/socket.h	/^    unsigned char encrypt_flag;$/;"	m	struct:_req_head
encrypt_flag	qt_pro/pipethread.cpp	/^    unsigned char encrypt_flag;$/;"	m	struct:_req_head	file:
encryption	torrent/include/libtorrent/operations.hpp	/^		encryption,$/;"	m	class:libtorrent::operation_t
encryption_error	torrent/include/libtorrent/close_reason.hpp	/^		encryption_error = 256,$/;"	m	class:libtorrent::close_reason_t
encryption_handler	torrent/include/libtorrent/pe_crypto.hpp	/^	struct TORRENT_EXTRA_EXPORT encryption_handler$/;"	s	namespace:libtorrent
end	torrent/include/libtorrent/aux_/range.hpp	/^		Iter end() { return _end; }$/;"	f	struct:libtorrent::aux::iterator_range
end	torrent/include/libtorrent/buffer.hpp	/^	char const* end() const { return m_begin + m_size; }$/;"	f	class:libtorrent::buffer
end	torrent/include/libtorrent/buffer.hpp	/^	char* end() { return m_begin + m_size; }$/;"	f	class:libtorrent::buffer
end	torrent/include/libtorrent/file_storage.hpp	/^		iterator end() const { return m_files.end(); }$/;"	f	class:libtorrent::file_storage
end	torrent/include/libtorrent/index_range.hpp	/^	index_iter<Index> end() { return index_iter<Index>{_end}; }$/;"	f	struct:libtorrent::index_range
end	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	router_iterator end() const { return m_router_nodes.end(); }$/;"	f	class:libtorrent::dht::routing_table
end	torrent/include/libtorrent/peer_list.hpp	/^		const_iterator end() const { return m_peers.end(); }$/;"	f	struct:libtorrent::peer_list
end	torrent/include/libtorrent/peer_list.hpp	/^		iterator end() { return m_peers.end(); }$/;"	f	struct:libtorrent::peer_list
end	torrent/include/libtorrent/sha1_hash.hpp	/^		const_iterator end() const$/;"	f	class:libtorrent::digest32
end	torrent/include/libtorrent/sha1_hash.hpp	/^		iterator end()$/;"	f	class:libtorrent::digest32
end	torrent/include/libtorrent/torrent.hpp	/^		const_peer_iterator end() const { return m_connections.end(); }$/;"	f	class:libtorrent::torrent
end	torrent/include/libtorrent/torrent.hpp	/^		peer_iterator end() { return m_connections.end(); }$/;"	f	class:libtorrent::torrent
endLba	include/StoreConfig.h	/^    uint64_t    endLba;  \/\/qcow æä¿ççç©ºé´ç»æä½ç½®ï¼æ­£å¸¸æå®¹éï¼ä¹å¯ä»¥æå®å¤§å°$/;"	m	struct:_YZY_QCOW_ENTRY
end_chs	include/gpt.h	/^    uint8_t   end_chs[3];$/;"	m	struct:__anon4
end_deprecated	torrent/include/libtorrent/file_storage.hpp	/^		iterator end_deprecated() const { return m_files.end(); }$/;"	f	class:libtorrent::file_storage
end_element	virt-p2v/include/libxml2-writer-macros.h	64;"	d
end_element	virt-p2v/libguestfs/libxml2-writer-macros.h	64;"	d
end_files	torrent/include/libtorrent/torrent_info.hpp	/^		file_iterator end_files() const { return m_files.end_deprecated(); }$/;"	f	class:libtorrent::torrent_info
end_game	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::end_game;$/;"	m	class:libtorrent::picker_log_alert	file:
end_game_piece_picks	torrent/include/libtorrent/performance_counters.hpp	/^			end_game_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
end_index	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^		IndexType end_index() const$/;"	f	struct:libtorrent::aux::container_wrapper
end_lba	include/gpt.h	/^    uint64_t    end_lba;$/;"	m	struct:__anon9
end_lba	include/gpt.h	/^    uint64_t  end_lba;$/;"	m	struct:__anon7
end_of_string	src/inirw.c	/^static int end_of_string(char c)$/;"	f	file:
end_piece	torrent/include/libtorrent/file_storage.hpp	/^		piece_index_t end_piece() const$/;"	f	class:libtorrent::file_storage
end_piece	torrent/include/libtorrent/torrent_info.hpp	/^		piece_index_t end_piece() const$/;"	f	class:libtorrent::torrent_info
end_time	torrent/bak/connection_tester.cpp	/^	time_point end_time;$/;"	m	struct:peer_conn	file:
endgame	torrent/include/libtorrent/peer_connection.hpp	/^		bool endgame() const { return m_endgame_mode; }$/;"	f	class:libtorrent::peer_connection
endgame_mode	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t endgame_mode = 14_bit;$/;"	m	struct:libtorrent::peer_info
endgame_mode	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::endgame_mode;$/;"	m	class:libtorrent::peer_info	file:
endp	torrent/include/libtorrent/peer_connection.hpp	/^		tcp::endpoint endp;$/;"	m	struct:libtorrent::peer_connection_args
endpoint	torrent/bak/connection_tester.cpp	/^	tcp::endpoint endpoint;$/;"	m	struct:peer_conn	file:
endpoint	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> TORRENT_DEPRECATED_MEMBER endpoint;$/;"	m	namespace:libtorrent
endpoint	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> TORRENT_DEPRECATED_MEMBER endpoint;$/;"	v
endpoint	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> endpoint;$/;"	m	struct:libtorrent::peer_alert
endpoint	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<udp::endpoint> endpoint;$/;"	m	struct:libtorrent::final
endpoint	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	union_endpoint endpoint;$/;"	m	struct:libtorrent::dht::node_entry
endpoint_to_bytes	torrent/src/socket_io.cpp	/^	std::string endpoint_to_bytes(udp::endpoint const& ep)$/;"	f	namespace:libtorrent
endpoints	torrent/include/libtorrent/announce_entry.hpp	/^		std::vector<announce_endpoint> endpoints;$/;"	m	struct:libtorrent::announce_entry
endpoints	torrent/include/libtorrent/http_connection.hpp	/^	std::vector<tcp::endpoint> const& endpoints() const { return m_endpoints; }$/;"	f	class:libtorrent::http_connection::std
endpoints	torrent/include/libtorrent/torrent.hpp	/^		std::vector<tcp::endpoint> endpoints;$/;"	m	struct:libtorrent::web_seed_t
endusershell	virt-p2v/include/gnulib/unistd.h	1531;"	d
enforce_node_id	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool enforce_node_id = false;$/;"	m	struct:libtorrent::dht::dht_settings
ensure_string	torrent/src/settings_pack.cpp	/^	char const* ensure_string(char const* str)$/;"	f	namespace:__anon93
ensure_trailing_slash	torrent/include/libtorrent/string_util.hpp	/^	inline void ensure_trailing_slash(std::string& url)$/;"	f	namespace:libtorrent
ensure_v6	torrent/src/broadcast_socket.cpp	/^	address ensure_v6(address const& a)$/;"	f	namespace:libtorrent
entry	include/StoreConfig.h	/^    struct _YZY_QCOW_ENTRY   entry[];  \/\/ä¸ç´å­å°168æåºï¼é¤ç¬¬ä¸ä¸ªå¤æ¯ä¸ªæåºä¿å­ ä¸ª$/;"	m	struct:_YZY_STORE_CONFIG	typeref:struct:_YZY_STORE_CONFIG::_YZY_QCOW_ENTRY
entry	torrent/include/libtorrent/entry.hpp	/^		entry(U v) \/\/ NOLINT$/;"	f	class:libtorrent::entry
entry	torrent/include/libtorrent/entry.hpp	/^	class TORRENT_EXPORT entry$/;"	c	namespace:libtorrent
entry	torrent/src/entry.cpp	/^	entry::entry()$/;"	f	class:libtorrent::entry
entry	torrent/src/entry.cpp	/^	entry::entry(bdecode_node const& n)$/;"	f	class:libtorrent::entry
entry	torrent/src/entry.cpp	/^	entry::entry(const entry& e)$/;"	f	class:libtorrent::entry
entry	torrent/src/entry.cpp	/^	entry::entry(data_type t)$/;"	f	class:libtorrent::entry
entry	torrent/src/entry.cpp	/^	entry::entry(dictionary_type v)$/;"	f	class:libtorrent::entry
entry	torrent/src/entry.cpp	/^	entry::entry(integer_type v)$/;"	f	class:libtorrent::entry
entry	torrent/src/entry.cpp	/^	entry::entry(list_type v)$/;"	f	class:libtorrent::entry
entry	torrent/src/entry.cpp	/^	entry::entry(preformatted_type v)$/;"	f	class:libtorrent::entry
entry	torrent/src/entry.cpp	/^	entry::entry(span<char const> v)$/;"	f	class:libtorrent::entry
entry_count	include/gpt.h	/^    uint32_t  entry_count;$/;"	m	struct:__anon6
entry_crc32	include/gpt.h	/^    uint32_t  entry_crc32;$/;"	m	struct:__anon6
entry_lba	include/gpt.h	/^    uint64_t  entry_lba;$/;"	m	struct:__anon6
entry_size	include/gpt.h	/^    uint32_t  entry_size;$/;"	m	struct:__anon6
entry_type_t	torrent/include/libtorrent/lazy_entry.hpp	/^		enum entry_type_t$/;"	g	struct:libtorrent::lazy_entry
enum_if	torrent/include/libtorrent/alert_types.hpp	/^			enum_if TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
enum_if	torrent/include/libtorrent/operations.hpp	/^		enum_if,$/;"	m	class:libtorrent::operation_t
enum_net_interfaces	torrent/src/enum_net.cpp	/^	std::vector<ip_interface> enum_net_interfaces(io_service& ios, error_code& ec)$/;"	f	namespace:libtorrent
enum_route	torrent/include/libtorrent/operations.hpp	/^		enum_route,$/;"	m	class:libtorrent::operation_t
enum_routes	torrent/src/enum_net.cpp	/^	std::vector<ip_route> enum_routes(io_service& ios, error_code& ec)$/;"	f	namespace:libtorrent
env	torrent/src/puff.cpp	/^	 std::jmp_buf env;$/;"	m	struct:state	file:
environ	virt-p2v/include/gnulib/unistd.h	/^_GL_EXTERN_C __declspec(dllimport) char **environ;$/;"	v
environ	virt-p2v/include/gnulib/unistd.h	937;"	d
environ	virt-p2v/include/gnulib/unistd.h	957;"	d
environ	virt-p2v/include/gnulib/unistd.h	958;"	d
eof_peers	torrent/include/libtorrent/performance_counters.hpp	/^			eof_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
ep	cJSON/cJSON.c	/^static const char *ep;$/;"	v	file:
ep	src/cJSON.c	/^static const char *ep;$/;"	v	file:
ep	torrent/include/libtorrent/kademlia/io.hpp	/^		udp::endpoint ep;$/;"	m	struct:libtorrent::dht::node_endpoint
ep	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	udp::endpoint ep() const { return endpoint; }$/;"	f	struct:libtorrent::dht::node_entry
ephemeral	torrent/include/libtorrent/torrent.hpp	/^		bool ephemeral = false;$/;"	m	struct:libtorrent::web_seed_t
ephemeral	torrent/include/libtorrent/torrent.hpp	/^		static constexpr web_seed_flag_t ephemeral = 0_bit;$/;"	m	class:libtorrent::torrent
equal	torrent/ed25519/ge.cpp	/^static unsigned char equal(signed char b, signed char c) {$/;"	f	file:
erase	torrent/include/libtorrent/linked_list.hpp	/^		void erase(T* e)$/;"	f	struct:libtorrent::linked_list
erase	torrent/kademlia/routing_table.cpp	/^void ip_set::erase(address const& addr)$/;"	f	class:libtorrent::dht::ip_set
erase_download_piece	torrent/src/piece_picker.cpp	/^	void piece_picker::erase_download_piece(std::vector<downloading_piece>::iterator i)$/;"	f	class:libtorrent::piece_picker
erase_one	torrent/kademlia/routing_table.cpp	/^	void erase_one(T& container, K const& key)$/;"	f	namespace:libtorrent::dht::__anon146
erase_peer	torrent/src/peer_list.cpp	/^	void peer_list::erase_peer(iterator i, torrent_state* state)$/;"	f	class:libtorrent::peer_list
erase_peer	torrent/src/peer_list.cpp	/^	void peer_list::erase_peer(torrent_peer* p, torrent_state* state)$/;"	f	class:libtorrent::peer_list
erase_peers	torrent/src/peer_list.cpp	/^	void peer_list::erase_peers(torrent_state* state, erase_peer_flags_t const flags)$/;"	f	class:libtorrent::peer_list
erase_piece	torrent/src/block_cache.cpp	/^void block_cache::erase_piece(cached_piece_entry* pe)$/;"	f	class:libtorrent::block_cache
erased	torrent/include/libtorrent/peer_list.hpp	/^		std::vector<torrent_peer*> erased;$/;"	m	struct:libtorrent::torrent_state
err_msg	src/log.c	/^void err_msg(const char *fmt, ...)$/;"	f
err_msg_desc	qt_pro/global.cpp	/^const char err_msg_desc[][128] = {$/;"	v
err_msg_desc	src/error.c	/^const char err_msg_desc[][128] = { $/;"	v
errc	torrent/include/libtorrent/torrent_status.hpp	/^		error_code errc;$/;"	m	struct:libtorrent::torrent_status
error	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t error = 0_bit;$/;"	m	namespace:libtorrent::alert_category
error	torrent/include/libtorrent/alert_types.hpp	/^		error_code const error;$/;"	m	namespace:libtorrent
error	torrent/include/libtorrent/alert_types.hpp	/^		error_code const error;$/;"	m	struct:libtorrent::final
error	torrent/include/libtorrent/disk_io_job.hpp	/^		storage_error error;$/;"	m	struct:libtorrent::disk_io_job
error	torrent/include/libtorrent/torrent.hpp	/^			error_code error;$/;"	m	struct:libtorrent::torrent::read_piece_struct
error	torrent/include/libtorrent/torrent.hpp	/^		error_code error() const { return m_error; }$/;"	f	class:libtorrent::torrent
error	torrent/include/libtorrent/torrent_status.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER error;$/;"	m	struct:libtorrent::torrent_status
error	torrent/include/libtorrent/udp_socket.hpp	/^			error_code error;$/;"	m	struct:libtorrent::udp_socket::packet
error_cacel_btn_2	qt_pro/ui_errodialog.h	/^    QPushButton *error_cacel_btn_2;$/;"	m	class:Ui_ErroDialog
error_code	torrent/include/libtorrent/upnp.hpp	/^	int error_code = -1;$/;"	m	struct:libtorrent::error_code_parse_state
error_code_enum	torrent/include/libtorrent/bdecode.hpp	/^	enum error_code_enum$/;"	g	namespace:libtorrent::bdecode_errors
error_code_enum	torrent/include/libtorrent/error_code.hpp	/^		enum error_code_enum$/;"	g	namespace:libtorrent::errors
error_code_enum	torrent/include/libtorrent/gzip.hpp	/^		enum error_code_enum$/;"	g	namespace:libtorrent::gzip_errors
error_code_enum	torrent/include/libtorrent/upnp.hpp	/^		enum error_code_enum$/;"	g	namespace:libtorrent::upnp_errors
error_code_enum	torrent/include/libtorrent/utf8.hpp	/^		enum error_code_enum$/;"	g	namespace:libtorrent::utf8_errors
error_code_max	torrent/include/libtorrent/bdecode.hpp	/^		error_code_max$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
error_code_max	torrent/include/libtorrent/error_code.hpp	/^			error_code_max$/;"	e	enum:libtorrent::errors::error_code_enum
error_code_max	torrent/include/libtorrent/gzip.hpp	/^			error_code_max$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
error_code_parse_state	torrent/include/libtorrent/upnp.hpp	/^struct error_code_parse_state$/;"	s	namespace:libtorrent
error_code_t	torrent/src/upnp.cpp	/^	struct error_code_t$/;"	s	namespace:libtorrent::__anon124	file:
error_codes	torrent/src/upnp.cpp	/^	error_code_t error_codes[] =$/;"	m	namespace:libtorrent::__anon124	file:
error_confirm_btn_2	qt_pro/ui_errodialog.h	/^    QPushButton *error_confirm_btn_2;$/;"	m	class:Ui_ErroDialog
error_encrypted_peers	torrent/include/libtorrent/performance_counters.hpp	/^			error_encrypted_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_file	torrent/include/libtorrent/torrent_status.hpp	/^		file_index_t error_file = torrent_status::error_file_none;$/;"	m	struct:libtorrent::torrent_status
error_file_exception	torrent/src/torrent_status.cpp	/^	file_index_t constexpr torrent_status::error_file_exception;$/;"	m	class:libtorrent::torrent_status	file:
error_file_metadata	torrent/src/torrent_status.cpp	/^	file_index_t constexpr torrent_status::error_file_metadata;$/;"	m	class:libtorrent::torrent_status	file:
error_file_none	torrent/src/torrent_status.cpp	/^	file_index_t constexpr torrent_status::error_file_none;$/;"	m	class:libtorrent::torrent_status	file:
error_file_partfile	torrent/src/torrent_status.cpp	/^	file_index_t constexpr torrent_status::error_file_partfile;$/;"	m	class:libtorrent::torrent_status	file:
error_file_ssl_ctx	torrent/src/torrent_status.cpp	/^	file_index_t constexpr torrent_status::error_file_ssl_ctx;$/;"	m	class:libtorrent::torrent_status	file:
error_file_url	torrent/src/torrent_status.cpp	/^	file_index_t constexpr torrent_status::error_file_url;$/;"	m	class:libtorrent::torrent_status	file:
error_handler	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		error_handler_interface& error_handler;$/;"	m	struct:libtorrent::aux::allocating_handler
error_handler_interface	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^	struct TORRENT_EXTRA_EXPORT error_handler_interface$/;"	s	namespace:libtorrent::aux
error_incoming_peers	torrent/include/libtorrent/performance_counters.hpp	/^			error_incoming_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_message	torrent/src/alert.cpp	/^	char const* scrape_failed_alert::error_message() const$/;"	f	class:libtorrent::scrape_failed_alert
error_message	torrent/src/alert.cpp	/^	char const* tracker_error_alert::error_message() const$/;"	f	class:libtorrent::tracker_error_alert
error_message	torrent/src/alert.cpp	/^	char const* url_seed_alert::error_message() const$/;"	f	class:libtorrent::url_seed_alert
error_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t error_notification = 0_bit;$/;"	m	class:libtorrent::alert
error_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::error_notification;$/;"	m	class:libtorrent::alert	file:
error_outgoing_peers	torrent/include/libtorrent/performance_counters.hpp	/^			error_outgoing_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_peers	torrent/include/libtorrent/performance_counters.hpp	/^			error_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_rc4_peers	torrent/include/libtorrent/performance_counters.hpp	/^			error_rc4_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_state	torrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	e	enum:libtorrent::http_parser::__anon22
error_tcp_peers	torrent/include/libtorrent/performance_counters.hpp	/^			error_tcp_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
error_to_close_reason	torrent/src/close_reason.cpp	/^	close_reason_t error_to_close_reason(error_code const& ec)$/;"	f	namespace:libtorrent
error_utp_peers	torrent/include/libtorrent/performance_counters.hpp	/^			error_utp_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
errors	torrent/include/libtorrent/error_code.hpp	/^	namespace errors$/;"	n	namespace:libtorrent
errors	torrent/include/libtorrent/natpmp.hpp	/^	namespace errors$/;"	n	namespace:libtorrent
errors	torrent/src/error_code.cpp	/^	namespace errors$/;"	n	namespace:libtorrent	file:
errors	torrent/src/natpmp.cpp	/^namespace errors$/;"	n	namespace:libtorrent	file:
esc	torrent/bak/print.cpp	/^char const* esc(char const* code)$/;"	f
esc	torrent/src/torrent.cpp	/^	char const* esc(char const* code)$/;"	f	namespace:libtorrent
escape_file_path	torrent/src/web_peer_connection.cpp	/^std::string escape_file_path(file_storage const& storage, file_index_t index)$/;"	f	namespace:libtorrent
escape_path	torrent/src/escape_string.cpp	/^	std::string escape_path(string_view str)$/;"	f	namespace:libtorrent
escape_string	torrent/src/bdecode.cpp	/^	void escape_string(std::string& ret, char const* str, int len)$/;"	f	namespace:libtorrent::detail
escape_string	torrent/src/escape_string.cpp	/^	std::string escape_string(string_view str)$/;"	f	namespace:libtorrent
escape_string_impl	torrent/src/escape_string.cpp	/^	std::string escape_string_impl(const char* str, int const len, int const offset)$/;"	f	namespace:libtorrent::__anon37
est_reciprocation_rate	torrent/include/libtorrent/peer_connection.hpp	/^		int est_reciprocation_rate() const { return m_est_reciprocation_rate; }$/;"	f	class:libtorrent::peer_connection
estimated_reciprocation_rate	torrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER int estimated_reciprocation_rate;$/;"	m	struct:libtorrent::peer_info
euidaccess	virt-p2v/include/gnulib/unistd.h	978;"	d
event	torrent/include/libtorrent/alert_types.hpp	/^		int const event;$/;"	m	struct:libtorrent::final
event	torrent/include/libtorrent/tracker_manager.hpp	/^		std::uint8_t event;$/;"	m	struct:libtorrent::tracker_request
event_loop	src/event.c	/^void event_loop(int network_fd)$/;"	f
event_t	torrent/include/libtorrent/tracker_manager.hpp	/^		enum event_t$/;"	g	struct:libtorrent::tracker_request
evict_piece	torrent/src/block_cache.cpp	/^bool block_cache::evict_piece(cached_piece_entry* pe, tailqueue<disk_io_job>& jobs$/;"	f	class:libtorrent::block_cache
eviction_mode	torrent/include/libtorrent/block_cache.hpp	/^		enum eviction_mode$/;"	g	struct:libtorrent::block_cache
exception	torrent/include/libtorrent/operations.hpp	/^		exception,$/;"	m	class:libtorrent::operation_t
exclusive_address_use	torrent/include/libtorrent/socket.hpp	/^		explicit exclusive_address_use(int enable): m_value(enable) {}$/;"	f	struct:libtorrent::exclusive_address_use
exclusive_address_use	torrent/include/libtorrent/socket.hpp	/^	struct exclusive_address_use$/;"	s	namespace:libtorrent
exec_cmd	src/tools.c	/^void exec_cmd(const char *cmd, char *result)$/;"	f
exec_prefix	torrent/include/libtorrent/Makefile	/^exec_prefix = ${prefix}$/;"	m
executable_attribute	torrent/include/libtorrent/file_storage.hpp	/^		bool executable_attribute:1;$/;"	m	struct:libtorrent::file_entry
executable_attribute	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t executable_attribute:1;$/;"	m	struct:libtorrent::internal_file_entry
exeobj	Makefile	/^exeobj = rescue$/;"	m
exeobj	torrent/Makefile	/^exeobj = torrent$/;"	m
exists	torrent/kademlia/routing_table.cpp	/^bool ip_set::exists(address const& addr) const$/;"	f	class:libtorrent::dht::ip_set
exists	torrent/src/path.cpp	/^	bool exists(std::string const& f)$/;"	f	namespace:libtorrent
exists	torrent/src/path.cpp	/^	bool exists(std::string const& f, error_code& ec)$/;"	f	namespace:libtorrent
exit	torrent/include/libtorrent/upnp.hpp	/^	bool exit = false;$/;"	m	struct:libtorrent::error_code_parse_state
expand_devices	torrent/src/session_impl.cpp	/^	void expand_devices(span<ip_interface const> const ifs$/;"	f	namespace:libtorrent::aux
expand_piece	torrent/src/piece_picker.cpp	/^	piece_picker::expand_piece(piece_index_t const piece, int const contiguous_blocks$/;"	f	class:libtorrent::piece_picker
expand_unspecified_address	torrent/src/session_impl.cpp	/^	void expand_unspecified_address(span<ip_interface const> const ifs$/;"	f	namespace:libtorrent::aux
expected_close_bracket_in_address	torrent/include/libtorrent/error_code.hpp	/^			expected_close_bracket_in_address,$/;"	e	enum:libtorrent::errors::error_code_enum
expected_colon	torrent/include/libtorrent/bdecode.hpp	/^		expected_colon,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
expected_colon	torrent/include/libtorrent/error_code.hpp	/^			expected_colon,$/;"	e	enum:libtorrent::errors::error_code_enum
expected_digit	torrent/include/libtorrent/bdecode.hpp	/^		expected_digit,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
expected_string	torrent/include/libtorrent/error_code.hpp	/^			expected_string = 190,$/;"	e	enum:libtorrent::errors::error_code_enum
expected_value	torrent/include/libtorrent/bdecode.hpp	/^		expected_value,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
expected_value	torrent/include/libtorrent/error_code.hpp	/^			expected_value,$/;"	e	enum:libtorrent::errors::error_code_enum
experienced_loss	torrent/src/utp_stream.cpp	/^void utp_socket_impl::experienced_loss(std::uint32_t const seq_nr, time_point const now)$/;"	f	class:libtorrent::utp_socket_impl
expire	torrent/include/libtorrent/block_cache.hpp	/^		time_point expire = min_time();$/;"	m	struct:libtorrent::cached_piece_entry
expires	torrent/include/libtorrent/aux_/portmap.hpp	/^		time_point expires;$/;"	m	struct:libtorrent::aux::base_mapping
expires	torrent/include/libtorrent/udp_tracker_connection.hpp	/^			time_point expires;$/;"	m	struct:libtorrent::udp_tracker_connection::connection_cache_entry
explicit_bzero	virt-p2v/include/gnulib/string.h	561;"	d
export_bits	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^      OutputIterator export_bits($/;"	f	namespace:boost::multiprecision
export_file	torrent/src/part_file.cpp	/^	void part_file::export_file(std::function<void(std::int64_t, span<char>)> f$/;"	f	class:libtorrent::part_file
export_filter	torrent/include/libtorrent/ip_filter.hpp	/^		std::vector<ip_range<ExternalAddressType>> export_filter() const$/;"	f	class:libtorrent::detail::filter_impl
export_filter	torrent/src/ip_filter.cpp	/^	ip_filter::filter_tuple_t ip_filter::export_filter() const$/;"	f	class:libtorrent::ip_filter
export_key	torrent/src/pe_crypto.cpp	/^	std::array<char, 96> export_key(key_t const& k)$/;"	f	namespace:libtorrent
export_progress	torrent/src/file_progress.cpp	/^	void file_progress::export_progress(vector<std::int64_t, file_index_t>& fp)$/;"	f	class:libtorrent::aux::file_progress
ext_priority	torrent/src/session_impl.cpp	/^			mutable uint64_t ext_priority = priority_undetermined;$/;"	m	struct:libtorrent::aux::__anon49::opt_unchoke_candidate	file:
extended_routing_table	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool extended_routing_table = true;$/;"	m	struct:libtorrent::dht::dht_settings
extension	torrent/include/libtorrent/utp_stream.hpp	/^	std::uint8_t extension;$/;"	m	struct:libtorrent::utp_header
extension	torrent/src/path.cpp	/^	std::string extension(std::string const& f)$/;"	f	namespace:libtorrent
extension_index	torrent/src/ut_pex.cpp	/^		extension_index = 1,$/;"	e	enum:libtorrent::__anon35::__anon36	file:
extension_name	torrent/src/ut_pex.cpp	/^	const char extension_name[] = "ut_pex";$/;"	m	namespace:libtorrent::__anon35	file:
extensions	torrent/include/libtorrent/add_torrent_params.hpp	/^			extensions;$/;"	m	struct:libtorrent::add_torrent_params
extensions	torrent/include/libtorrent/session.hpp	/^		std::vector<std::shared_ptr<plugin>> extensions;$/;"	m	struct:libtorrent::session_params
extent_affinity	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::extent_affinity;$/;"	m	class:libtorrent::picker_log_alert	file:
extent_for	torrent/src/piece_picker.cpp	/^	index_range<piece_index_t> piece_picker::extent_for(piece_extent_t const e) const$/;"	f	class:libtorrent::piece_picker
extent_for	torrent/src/piece_picker.cpp	/^	piece_extent_t piece_picker::extent_for(piece_index_t const p) const$/;"	f	class:libtorrent::piece_picker
external_address	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<address> external_address;$/;"	m	struct:libtorrent::final
external_address	torrent/include/libtorrent/aux_/session_impl.hpp	/^		ip_voter external_address;$/;"	m	struct:libtorrent::aux::listen_socket_t
external_address	torrent/include/libtorrent/ip_voter.hpp	/^		address external_address() const { return m_external_address; }$/;"	f	struct:libtorrent::ip_voter
external_address	torrent/include/libtorrent/natpmp.hpp	/^		address external_address;$/;"	m	struct:libtorrent::natpmp::mapping_t
external_address	torrent/src/ip_voter.cpp	/^	address external_ip::external_address(address const& ip) const$/;"	f	class:libtorrent::external_ip
external_address	torrent/src/session_impl.cpp	/^	external_ip session_impl::external_address() const$/;"	f	class:libtorrent::aux::session_impl
external_ip	torrent/include/libtorrent/ip_voter.hpp	/^		external_ip()$/;"	f	struct:libtorrent::external_ip
external_ip	torrent/include/libtorrent/ip_voter.hpp	/^	struct TORRENT_EXTRA_EXPORT external_ip$/;"	s	namespace:libtorrent
external_ip	torrent/include/libtorrent/tracker_manager.hpp	/^		address external_ip;$/;"	m	struct:libtorrent::tracker_response
external_ip	torrent/include/libtorrent/upnp.hpp	/^		address external_ip;$/;"	m	struct:libtorrent::final::rootdevice
external_ip	torrent/src/ip_voter.cpp	/^	external_ip::external_ip(address const& local4, address const& global4$/;"	f	class:libtorrent::external_ip
external_ip_alert	torrent/src/alert.cpp	/^	external_ip_alert::external_ip_alert(aux::stack_allocator&$/;"	f	class:libtorrent::external_ip_alert
external_ip_t	torrent/include/libtorrent/ip_voter.hpp	/^		struct external_ip_t$/;"	s	struct:libtorrent::ip_voter
external_mode	include/device.h	/^    int external_mode;$/;"	m	struct:_PedDevice
external_port	torrent/include/libtorrent/aux_/portmap.hpp	/^		int external_port = 0;$/;"	m	struct:libtorrent::aux::base_mapping
external_port	torrent/include/libtorrent/upnp.hpp	/^		int external_port = 0;$/;"	m	struct:libtorrent::final::global_mapping_t
external_port_cannot_be_wildcarded	torrent/include/libtorrent/upnp.hpp	/^			external_port_cannot_be_wildcarded = 716,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
external_port_must_be_wildcard	torrent/include/libtorrent/upnp.hpp	/^			external_port_must_be_wildcard = 727$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
external_udp_port	torrent/src/session_impl.cpp	/^	int session_impl::external_udp_port(address const& local_address) const$/;"	f	class:libtorrent::aux::session_impl
extra	virt-p2v/include/miniexpect.h	/^  const pcre_extra *extra;$/;"	m	struct:mexp_regexp
extra	virt-p2v/miniexpect/miniexpect.h	/^  const pcre_extra *extra;$/;"	m	struct:mexp_regexp
extra_headers	torrent/include/libtorrent/torrent_info.hpp	/^		headers_t extra_headers;$/;"	m	struct:libtorrent::web_seed_entry
extract_bits	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         inline std::uintmax_t extract_bits(const Backend& val, unsigned location, unsigned count, const mpl::true_&)$/;"	f	namespace:boost::multiprecision::detail
extract_bits	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         std::uintmax_t extract_bits(const Backend& val, unsigned location, unsigned count, const mpl::false_& tag)$/;"	f	namespace:boost::multiprecision::detail
extract_files	torrent/src/torrent_info.cpp	/^	bool extract_files(bdecode_node const& list, file_storage& target$/;"	f	namespace:libtorrent::__anon87
extract_node_ids	torrent/kademlia/dht_state.cpp	/^	node_ids_t extract_node_ids(bdecode_node const& e, string_view key)$/;"	f	namespace:libtorrent::dht
extract_peer_info	torrent/src/http_tracker_connection.cpp	/^	bool extract_peer_info(bdecode_node const& info, peer_entry& ret, error_code& ec)$/;"	f	namespace:libtorrent
extract_single_file	torrent/src/torrent_info.cpp	/^	bool extract_single_file(bdecode_node const& dict, file_storage& files$/;"	f	namespace:libtorrent::__anon87
f	torrent/src/create_torrent.cpp	/^		std::function<void(piece_index_t)> const& f;$/;"	m	class:libtorrent::__anon134::hash_state::std	file:
f2Label	qt_pro/ui_downloadwindow.h	/^    QLabel *f2Label;$/;"	m	class:Ui_DownloadWindow
faccessat	virt-p2v/include/gnulib/unistd.h	1008;"	d
fail	torrent/include/libtorrent/torrent.hpp	/^			bool fail;$/;"	m	struct:libtorrent::torrent::read_piece_struct
fail	torrent/src/lazy_bdecode.cpp	/^		int fail(int* error_pos$/;"	f	namespace:libtorrent::__anon75
fail	torrent/src/tracker_manager.cpp	/^	void tracker_connection::fail(error_code const& ec$/;"	f	class:libtorrent::tracker_connection
fail	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::fail(error_code const& ec$/;"	f	class:libtorrent::udp_tracker_connection
fail_count	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	int fail_count() const { return pinged() ? timeout_count : 0; }$/;"	f	struct:libtorrent::dht::node_entry
fail_if_exist	torrent/include/libtorrent/storage_defs.hpp	/^		fail_if_exist TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::deprecated_move_flags_t
fail_if_exist	torrent/include/libtorrent/storage_defs.hpp	/^		fail_if_exist,$/;"	m	class:libtorrent::move_flags_t
fail_impl	torrent/src/tracker_manager.cpp	/^	void tracker_connection::fail_impl(error_code const& ec$/;"	f	class:libtorrent::tracker_connection
fail_limit	torrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t fail_limit = 0;$/;"	m	struct:libtorrent::announce_entry
failcount	torrent/include/libtorrent/peer_info.hpp	/^		int failcount;$/;"	m	struct:libtorrent::peer_info
failcount	torrent/include/libtorrent/peer_info.hpp	/^		std::uint8_t failcount;$/;"	m	struct:libtorrent::peer_list_entry
failcount	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t failcount:5; \/\/ [0, 31]$/;"	m	struct:libtorrent::torrent_peer
failcount	torrent/include/libtorrent/upnp.hpp	/^		int failcount = 0;$/;"	m	struct:libtorrent::final::mapping_t
failed	torrent/include/libtorrent/bt_peer_connection.hpp	/^			failed = 2$/;"	m	class:libtorrent::bt_peer_connection::hp_message
failed	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::failed(observer_ptr o, traversal_flags_t const flags)$/;"	f	class:libtorrent::dht::traversal_algorithm
failed	torrent/src/announce_entry.cpp	/^	void announce_endpoint::failed(int const backoff_ratio, seconds32 const retry_interval)$/;"	f	class:libtorrent::announce_endpoint
failed	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::failed() const$/;"	f	class:libtorrent::peer_connection_handle
failed_hash_check	torrent/include/libtorrent/error_code.hpp	/^			failed_hash_check,$/;"	e	enum:libtorrent::errors::error_code_enum
failed_hash_check	torrent/src/ut_metadata.cpp	/^		void failed_hash_check(time_point const& now)$/;"	f	struct:libtorrent::__anon72::final
failed_to_add	torrent/include/libtorrent/kademlia/routing_table.hpp	/^		failed_to_add = 0,$/;"	e	enum:libtorrent::dht::routing_table::add_node_status_t
fails	torrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t TORRENT_DEPRECATED_MEMBER fails:7;$/;"	m	struct:libtorrent::announce_entry
fails	torrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t fails : 7;$/;"	m	struct:libtorrent::announce_endpoint
failure	torrent/src/peer_connection.cpp	/^	constexpr disconnect_severity_t peer_connection_interface::failure;$/;"	m	class:libtorrent::peer_connection_interface	file:
failure_reason	torrent/include/libtorrent/tracker_manager.hpp	/^		std::string failure_reason;$/;"	m	struct:libtorrent::tracker_response
false	virt-p2v/include/gnulib/stdbool.in.h	/^typedef enum { _Bool_must_promote_to_int = -1, false = 0, true = 1 } _Bool;$/;"	e	enum:__anon162
false	virt-p2v/include/gnulib/stdbool.in.h	123;"	d
false	virt-p2v/include/gnulib/stdbool.in.h	126;"	d
false	virt-p2v/include/gnulib/stdbool.in.h	65;"	d
family	torrent/include/libtorrent/netlink.hpp	/^		int family() const$/;"	f	class:libtorrent::netlink
family	torrent/src/enum_net.cpp	/^	int family(address const& a) { return a.is_v4() ? AF_INET : AF_INET6; }$/;"	f	namespace:libtorrent
family_name	torrent/include/libtorrent/kademlia/node.hpp	/^		char const* family_name;$/;"	m	struct:libtorrent::dht::node::protocol_descriptor
fast	torrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	e	enum:libtorrent::partial_piece_info::state_t
fast_extension	torrent/bak/connection_tester.cpp	/^	bool fast_extension;$/;"	m	struct:peer_conn	file:
fast_reconnect	torrent/src/peer_connection.cpp	/^	void peer_connection::fast_reconnect(bool r)$/;"	f	class:libtorrent::peer_connection
fast_reconnects	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t fast_reconnects:4;$/;"	m	struct:libtorrent::torrent_peer
fast_retransmit	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t fast_retransmit;$/;"	m	struct:libtorrent::utp_status
fastest_upload	torrent/include/libtorrent/settings_pack.hpp	/^			fastest_upload,$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
fastresume_rejected_alert	torrent/src/alert.cpp	/^	fastresume_rejected_alert::fastresume_rejected_alert($/;"	f	class:libtorrent::fastresume_rejected_alert
fatal	torrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
fatal_disk_error	torrent/include/libtorrent/storage_defs.hpp	/^		fatal_disk_error,$/;"	m	class:libtorrent::status_t
fchdir	virt-p2v/include/gnulib/unistd.h	1040;"	d
fchownat	virt-p2v/include/gnulib/unistd.h	1070;"	d
fclose	virt-p2v/include/gnulib/stdio.h	684;"	d
fd	include/client.h	/^    int fd; $/;"	m	struct:client
fd	include/device.h	/^    int fd;$/;"	m	struct:_PedDevice
fd	include/socket.h	/^    unsigned int fd; $/;"	m	struct:sock_udp
fd	virt-p2v/include/miniexpect.h	/^  int fd;$/;"	m	struct:mexp_h
fd	virt-p2v/miniexpect/miniexpect.h	/^  int fd;$/;"	m	struct:mexp_h
fdatasync	virt-p2v/include/gnulib/unistd.h	1089;"	d
fdopen	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (fdopen);$/;"	v
fdopen	virt-p2v/include/gnulib/stdio.h	704;"	d
fe	torrent/ed25519/fe.h	/^typedef i32 fe[10];$/;"	t
fe_0	torrent/ed25519/fe.cpp	/^void fe_0(fe h) {$/;"	f
fe_1	torrent/ed25519/fe.cpp	/^void fe_1(fe h) {$/;"	f
fe_add	torrent/ed25519/fe.cpp	/^void fe_add(fe h, const fe f, const fe g) {$/;"	f
fe_cmov	torrent/ed25519/fe.cpp	/^void fe_cmov(fe f, const fe g, unsigned int b) {$/;"	f
fe_copy	torrent/ed25519/fe.cpp	/^void fe_copy(fe h, const fe f) {$/;"	f
fe_cswap	torrent/ed25519/fe.cpp	/^void fe_cswap(fe f,fe g,unsigned int b) {$/;"	f
fe_frombytes	torrent/ed25519/fe.cpp	/^void fe_frombytes(fe h, const unsigned char *s) {$/;"	f
fe_invert	torrent/ed25519/fe.cpp	/^void fe_invert(fe out, const fe z) {$/;"	f
fe_isnegative	torrent/ed25519/fe.cpp	/^int fe_isnegative(const fe f) {$/;"	f
fe_isnonzero	torrent/ed25519/fe.cpp	/^int fe_isnonzero(const fe f) {$/;"	f
fe_mul	torrent/ed25519/fe.cpp	/^void fe_mul(fe h, const fe f, const fe g) {$/;"	f
fe_mul121666	torrent/ed25519/fe.cpp	/^void fe_mul121666(fe h, fe f) {$/;"	f
fe_neg	torrent/ed25519/fe.cpp	/^void fe_neg(fe h, const fe f) {$/;"	f
fe_pow22523	torrent/ed25519/fe.cpp	/^void fe_pow22523(fe out, const fe z) {$/;"	f
fe_sq	torrent/ed25519/fe.cpp	/^void fe_sq(fe h, const fe f) {$/;"	f
fe_sq2	torrent/ed25519/fe.cpp	/^void fe_sq2(fe h, const fe f) {$/;"	f
fe_sub	torrent/ed25519/fe.cpp	/^void fe_sub(fe h, const fe f, const fe g) {$/;"	f
fe_tobytes	torrent/ed25519/fe.cpp	/^void fe_tobytes(unsigned char *s, const fe h) {$/;"	f
feature_colours_option	virt-p2v/src/p2v.c	/^int feature_colours_option = 0;$/;"	v
feature_colours_option	virt-p2v/src/p2v_transform.c	/^int feature_colours_option = 0;$/;"	v
feature_colours_option_re	virt-p2v/src/ssh.c	/^static pcre *feature_colours_option_re;$/;"	v	file:
feature_input_re	virt-p2v/src/ssh.c	/^static pcre *feature_input_re;$/;"	v	file:
feature_libguestfs_rewrite_re	virt-p2v/src/ssh.c	/^static pcre *feature_libguestfs_rewrite_re;$/;"	v	file:
feature_output_re	virt-p2v/src/ssh.c	/^static pcre *feature_output_re;$/;"	v	file:
fence	torrent/include/libtorrent/disk_io_job.hpp	/^		static constexpr disk_job_flags_t fence = 1_bit;$/;"	m	struct:libtorrent::disk_io_job
fence_post_fence	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		enum { fence_post_fence = 0, fence_post_flush = 1, fence_post_none = 2 };$/;"	e	enum:libtorrent::aux::disk_job_fence::__anon33
fence_post_flush	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		enum { fence_post_fence = 0, fence_post_flush = 1, fence_post_none = 2 };$/;"	e	enum:libtorrent::aux::disk_job_fence::__anon33
fence_post_none	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		enum { fence_post_fence = 0, fence_post_flush = 1, fence_post_none = 2 };$/;"	e	enum:libtorrent::aux::disk_job_fence::__anon33
fflush	virt-p2v/include/gnulib/stdio.h	730;"	d
ffsl	virt-p2v/include/gnulib/string.h	576;"	d
ffsll	virt-p2v/include/gnulib/string.h	591;"	d
fgetc	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (fgetc);$/;"	v
fgets	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (fgets);$/;"	v
fifo	torrent/include/libtorrent/aux_/path.hpp	/^			fifo = 0x1000, \/\/ named pipe (fifo)$/;"	e	enum:libtorrent::file_status::__anon31
file	torrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER file;$/;"	m	struct:libtorrent::final
file	torrent/include/libtorrent/error_code.hpp	/^		file_index_t file() const { return file_index_t(file_idx); }$/;"	f	struct:libtorrent::storage_error
file	torrent/include/libtorrent/error_code.hpp	/^		void file(file_index_t f) { file_idx = static_cast<int>(f); }$/;"	f	struct:libtorrent::storage_error
file	torrent/include/libtorrent/file.hpp	/^	struct TORRENT_EXTRA_EXPORT file : boost::noncopyable$/;"	s	namespace:libtorrent
file	torrent/include/libtorrent/operations.hpp	/^		file,$/;"	m	class:libtorrent::operation_t
file	torrent/src/file.cpp	/^	file::file() : m_file_handle(INVALID_HANDLE_VALUE), is_physical_drive(false), current_size(0L)$/;"	f	class:libtorrent::file
file	torrent/src/file.cpp	/^	file::file(std::string const& path, open_mode_t const mode, error_code& ec)$/;"	f	class:libtorrent::file
file	torrent/src/file.cpp	/^	std::string directory::file() const$/;"	f	class:libtorrent::directory
file	virt-p2v/include/p2v-config.h	/^  char *file;$/;"	m	struct:identity_config
file_absolute_path	torrent/src/file_storage.cpp	/^	bool file_storage::file_absolute_path(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
file_at	torrent/include/libtorrent/torrent_info.hpp	/^		file_entry file_at(int index) const { return m_files.at_deprecated(index); }$/;"	f	class:libtorrent::torrent_info
file_at_offset	torrent/include/libtorrent/torrent_info.hpp	/^		file_iterator file_at_offset(std::int64_t offset) const$/;"	f	class:libtorrent::torrent_info
file_at_offset	torrent/src/file_storage.cpp	/^	file_storage::iterator file_storage::file_at_offset(std::int64_t offset) const$/;"	f	class:libtorrent::file_storage
file_at_offset_deprecated	torrent/src/file_storage.cpp	/^	file_storage::iterator file_storage::file_at_offset_deprecated(std::int64_t offset) const$/;"	f	class:libtorrent::file_storage
file_checks_delay_per_block	torrent/include/libtorrent/settings_pack.hpp	/^			file_checks_delay_per_block TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
file_collision	torrent/include/libtorrent/error_code.hpp	/^			file_collision,$/;"	e	enum:libtorrent::errors::error_code_enum
file_completed_alert	torrent/src/alert.cpp	/^	file_completed_alert::file_completed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::file_completed_alert
file_copy	torrent/include/libtorrent/operations.hpp	/^		file_copy,$/;"	m	class:libtorrent::operation_t
file_entry	torrent/include/libtorrent/file_storage.hpp	/^	struct TORRENT_DEPRECATED_EXPORT file_entry$/;"	s	namespace:libtorrent
file_entry	torrent/src/file_storage.cpp	/^	file_entry::file_entry(): offset(0), size(0)$/;"	f	class:libtorrent::file_entry
file_error	torrent/include/libtorrent/stat_cache.hpp	/^			file_error = -2 \/\/ (first index in m_errors)$/;"	e	enum:libtorrent::stat_cache::__anon13
file_error_alert	torrent/src/alert.cpp	/^	file_error_alert::file_error_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::file_error_alert
file_fallocate	torrent/include/libtorrent/operations.hpp	/^		file_fallocate,$/;"	m	class:libtorrent::operation_t
file_filter	torrent/bak/make_torrent.cpp	/^bool file_filter(std::string const& f)$/;"	f
file_flags	torrent/src/file_storage.cpp	/^	file_flags_t file_storage::file_flags(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
file_flags_for_job	torrent/src/disk_io_thread.cpp	/^	open_mode_t file_flags_for_job(disk_io_job* j$/;"	f	namespace:libtorrent::__anon122
file_hard_link	torrent/include/libtorrent/operations.hpp	/^		file_hard_link,$/;"	m	class:libtorrent::operation_t
file_idx	torrent/include/libtorrent/error_code.hpp	/^		std::int32_t file_idx:24;$/;"	m	struct:libtorrent::storage_error
file_idx	torrent/include/libtorrent/resolve_links.hpp	/^			file_index_t file_idx;$/;"	m	struct:libtorrent::resolve_links::link_t
file_index	torrent/include/libtorrent/disk_interface.hpp	/^		file_index_t file_index;$/;"	m	struct:libtorrent::open_file_state
file_index	torrent/include/libtorrent/disk_io_job.hpp	/^			file_index_t file_index;$/;"	m	union:libtorrent::disk_io_job::__anon30
file_index	torrent/include/libtorrent/file_storage.hpp	/^		file_index_t file_index;$/;"	m	struct:libtorrent::file_slice
file_index	torrent/include/libtorrent/web_peer_connection.hpp	/^			file_index_t file_index;$/;"	m	struct:libtorrent::web_peer_connection::file_request_t
file_index	torrent/src/file_storage.cpp	/^	int file_storage::file_index(internal_file_entry const& fe) const$/;"	f	class:libtorrent::file_storage
file_index_at_offset	torrent/src/file_storage.cpp	/^	file_index_t file_storage::file_index_at_offset(std::int64_t const offset) const$/;"	f	class:libtorrent::file_storage
file_name	include/torrent.h	/^	char file_name[128];$/;"	m	struct:torrent_task
file_name	include/torrent.h	/^    char file_name[36];$/;"	m	struct:progress_info
file_name	torrent/src/file_storage.cpp	/^	std::string file_storage::file_name(internal_file_entry const& fe) const$/;"	f	class:libtorrent::file_storage
file_name	torrent/src/file_storage.cpp	/^	string_view file_storage::file_name(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
file_name	virt-p2v/src/conversion.c	/^    char file_name[36];$/;"	m	struct:progress_info	file:
file_name_len	torrent/src/file_storage.cpp	/^	int file_storage::file_name_len(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
file_name_ptr	torrent/src/file_storage.cpp	/^	char const* file_storage::file_name_ptr(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
file_needs_update	virt-p2v/include/p2v-config.h	/^  bool file_needs_update;$/;"	m	struct:identity_config
file_offset	torrent/src/file_storage.cpp	/^	std::int64_t file_storage::file_offset(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
file_offset	torrent/src/file_storage.cpp	/^	std::int64_t file_storage::file_offset(internal_file_entry const& fe) const$/;"	f	class:libtorrent::file_storage
file_open	torrent/include/libtorrent/operations.hpp	/^		file_open,$/;"	m	class:libtorrent::operation_t
file_open_mode	torrent/include/libtorrent/disk_interface.hpp	/^	namespace file_open_mode$/;"	n	namespace:libtorrent
file_path	torrent/src/alert.cpp	/^	char const* fastresume_rejected_alert::file_path() const$/;"	f	class:libtorrent::fastresume_rejected_alert
file_path	torrent/src/alert.cpp	/^	char const* storage_moved_failed_alert::file_path() const$/;"	f	class:libtorrent::storage_moved_failed_alert
file_path	torrent/src/file_storage.cpp	/^	std::string file_storage::file_path(file_index_t const index, std::string const& save_path) const$/;"	f	class:libtorrent::file_storage
file_path	torrent/src/file_storage.cpp	/^	std::string file_storage::file_path(internal_file_entry const& fe$/;"	f	class:libtorrent::file_storage
file_path_hash	torrent/src/file_storage.cpp	/^	std::uint32_t file_storage::file_path_hash(file_index_t const index$/;"	f	class:libtorrent::file_storage
file_piece_range_exclusive	torrent/src/file_storage.cpp	/^	file_piece_range_exclusive(file_storage const& fs, file_index_t const file)$/;"	f	namespace:libtorrent::aux
file_piece_range_inclusive	torrent/src/file_storage.cpp	/^	file_piece_range_inclusive(file_storage const& fs, file_index_t const file)$/;"	f	namespace:libtorrent::aux
file_pool	torrent/include/libtorrent/file_pool.hpp	/^	struct TORRENT_EXPORT file_pool : boost::noncopyable$/;"	s	namespace:libtorrent
file_pool	torrent/src/file_pool.cpp	/^	file_pool::file_pool(int size) : m_size(size) {}$/;"	f	class:libtorrent::file_pool
file_pool_size	torrent/include/libtorrent/settings_pack.hpp	/^			file_pool_size,$/;"	e	enum:libtorrent::settings_pack::int_types
file_priorities	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<download_priority_t>> file_priorities;$/;"	m	struct:libtorrent::add_torrent_params
file_priorities	torrent/src/torrent.cpp	/^	void torrent::file_priorities(aux::vector<download_priority_t, file_index_t>* files) const$/;"	f	class:libtorrent::torrent
file_priorities	torrent/src/torrent_handle.cpp	/^	std::vector<int> torrent_handle::file_priorities() const$/;"	f	class:libtorrent::torrent_handle
file_priority	torrent/include/libtorrent/disk_io_job.hpp	/^		, file_priority$/;"	m	class:libtorrent::job_action_t
file_priority	torrent/src/torrent.cpp	/^	download_priority_t torrent::file_priority(file_index_t const index) const$/;"	f	class:libtorrent::torrent
file_priority	torrent/src/torrent_handle.cpp	/^	download_priority_t torrent_handle::file_priority(file_index_t index) const$/;"	f	class:libtorrent::torrent_handle
file_priority	torrent/src/torrent_handle.cpp	/^	void torrent_handle::file_priority(file_index_t index, download_priority_t priority) const$/;"	f	class:libtorrent::torrent_handle
file_progress	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t file_progress = 21_bit;$/;"	m	namespace:libtorrent::alert_category
file_progress	torrent/include/libtorrent/aux_/file_progress.hpp	/^	struct TORRENT_EXTRA_EXPORT file_progress$/;"	s	namespace:libtorrent::aux
file_progress	torrent/src/torrent.cpp	/^	void torrent::file_progress(aux::vector<std::int64_t, file_index_t>& fp, int const flags)$/;"	f	class:libtorrent::torrent
file_progress	torrent/src/torrent_handle.cpp	/^	void torrent_handle::file_progress(std::vector<float>& progress) const$/;"	f	class:libtorrent::torrent_handle
file_progress	torrent/src/torrent_handle.cpp	/^	void torrent_handle::file_progress(std::vector<std::int64_t>& progress, int flags) const$/;"	f	class:libtorrent::torrent_handle
file_progress_flags_t	torrent/include/libtorrent/torrent_handle.hpp	/^		enum file_progress_flags_t$/;"	g	struct:libtorrent::torrent_handle
file_progress_float	torrent/src/torrent.cpp	/^	void torrent::file_progress_float(aux::vector<float, file_index_t>& fp)$/;"	f	class:libtorrent::torrent
file_progress_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t file_progress_notification = 21_bit;$/;"	m	class:libtorrent::alert
file_progress_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::file_progress_notification;$/;"	m	class:libtorrent::alert	file:
file_ptr	torrent/include/libtorrent/file_pool.hpp	/^			file_handle file_ptr;$/;"	m	struct:libtorrent::file_pool::lru_file_entry
file_read	torrent/include/libtorrent/operations.hpp	/^		file_read,$/;"	m	class:libtorrent::operation_t
file_remove	torrent/include/libtorrent/operations.hpp	/^		file_remove,$/;"	m	class:libtorrent::operation_t
file_rename	torrent/include/libtorrent/operations.hpp	/^		file_rename,$/;"	m	class:libtorrent::operation_t
file_rename_failed_alert	torrent/src/alert.cpp	/^	file_rename_failed_alert::file_rename_failed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::file_rename_failed_alert
file_renamed_alert	torrent/src/alert.cpp	/^	file_renamed_alert::file_renamed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::file_renamed_alert
file_request_t	torrent/include/libtorrent/web_peer_connection.hpp	/^		struct file_request_t$/;"	s	class:libtorrent::web_peer_connection
file_size	include/packet.h	/^	unsigned long long file_size;$/;"	m	struct:yzy_torrent
file_size	include/torrent.h	/^	unsigned long long file_size;$/;"	m	struct:progress_info
file_size	qt_pro/global.h	/^    unsigned long long file_size;$/;"	m	struct:progress_info
file_size	torrent/include/libtorrent/aux_/path.hpp	/^		std::int64_t file_size = 0;$/;"	m	struct:libtorrent::file_status
file_size	torrent/include/libtorrent/stat_cache.hpp	/^			std::int64_t file_size;$/;"	m	struct:libtorrent::stat_cache::stat_cache_t
file_size	torrent/src/file_storage.cpp	/^	std::int64_t file_storage::file_size(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
file_size	torrent/src/file_storage.cpp	/^	std::int64_t file_storage::file_size(internal_file_entry const& fe) const$/;"	f	class:libtorrent::file_storage
file_size	torrent/src/path.cpp	/^	std::int64_t file_size(std::string const& f)$/;"	f	namespace:libtorrent
file_size	virt-p2v/src/conversion.c	/^    unsigned long long file_size;$/;"	m	struct:progress_info	file:
file_slice	torrent/include/libtorrent/file_storage.hpp	/^	struct TORRENT_EXPORT file_slice$/;"	s	namespace:libtorrent
file_stat	torrent/include/libtorrent/operations.hpp	/^		file_stat,$/;"	m	class:libtorrent::operation_t
file_status	torrent/include/libtorrent/aux_/path.hpp	/^	struct file_status$/;"	s	namespace:libtorrent
file_status	torrent/src/torrent_handle.cpp	/^	std::vector<open_file_state> torrent_handle::file_status() const$/;"	f	class:libtorrent::torrent_handle
file_status	torrent/src/torrent_handle.cpp	/^	void torrent_handle::file_status(std::vector<open_file_state>& status) const$/;"	f	class:libtorrent::torrent_handle
file_storage	torrent/include/libtorrent/file_storage.hpp	/^	class TORRENT_EXPORT file_storage$/;"	c	namespace:libtorrent
file_storage	torrent/src/file_storage.cpp	/^	file_storage::file_storage()$/;"	f	class:libtorrent::file_storage
file_time_to_posix	torrent/src/path.cpp	/^	time_t file_time_to_posix(FILETIME f)$/;"	f	namespace:libtorrent::__anon136
file_too_short	torrent/include/libtorrent/error_code.hpp	/^			file_too_short,$/;"	e	enum:libtorrent::errors::error_code_enum
file_write	torrent/include/libtorrent/operations.hpp	/^		file_write,$/;"	m	class:libtorrent::operation_t
filehash	torrent/include/libtorrent/file_storage.hpp	/^		sha1_hash filehash;$/;"	m	struct:libtorrent::file_entry
filename	qt_pro/global.h	/^    char filename[36];$/;"	m	struct:progress_info
filename	torrent/src/alert.cpp	/^	char const* file_error_alert::filename() const$/;"	f	class:libtorrent::file_error_alert
filename	torrent/src/alert.cpp	/^	char const* torrent_error_alert::filename() const$/;"	f	class:libtorrent::torrent_error_alert
filename	torrent/src/file_storage.cpp	/^	string_view internal_file_entry::filename() const$/;"	f	class:libtorrent::internal_file_entry
filename	torrent/src/path.cpp	/^	std::string filename(std::string const& f)$/;"	f	namespace:libtorrent
files	torrent/include/libtorrent/create_torrent.hpp	/^		file_storage const& files() const { return m_files; }$/;"	f	struct:libtorrent::create_torrent
files	torrent/include/libtorrent/storage.hpp	/^		file_storage const& files() const { return m_files; }$/;"	f	struct:libtorrent::storage_interface
files	torrent/include/libtorrent/storage.hpp	/^		file_storage const& files() const$/;"	f	class:libtorrent::default_storage
files	torrent/include/libtorrent/storage_defs.hpp	/^		file_storage const& files;$/;"	m	struct:libtorrent::storage_params
files	torrent/include/libtorrent/torrent_info.hpp	/^		file_storage const& files() const { return m_files; }$/;"	f	class:libtorrent::torrent_info
files_checked	torrent/src/torrent.cpp	/^	void torrent::files_checked()$/;"	f	class:libtorrent::torrent
fill_from_replacements	torrent/kademlia/routing_table.cpp	/^void routing_table::fill_from_replacements(table_t::iterator bucket)$/;"	f	class:libtorrent::dht::routing_table
fill_send_buffer	torrent/src/peer_connection.cpp	/^	void peer_connection::fill_send_buffer()$/;"	f	class:libtorrent::peer_connection
filter	torrent/bak/torrent_view.cpp	/^int torrent_view::filter() const$/;"	f	class:torrent_view
filter	torrent/include/libtorrent/tracker_manager.hpp	/^		std::shared_ptr<const ip_filter> filter;$/;"	m	struct:libtorrent::tracker_request
filter_impl	torrent/include/libtorrent/ip_filter.hpp	/^		filter_impl()$/;"	f	class:libtorrent::detail::filter_impl
filter_impl	torrent/include/libtorrent/ip_filter.hpp	/^	class filter_impl$/;"	c	namespace:libtorrent::detail
filter_path_character	torrent/src/torrent_info.cpp	/^	bool filter_path_character(std::int32_t const c)$/;"	f	namespace:libtorrent::__anon86
filter_priority	torrent/include/libtorrent/piece_picker.hpp	/^			static constexpr std::uint32_t filter_priority = 0;$/;"	m	struct:libtorrent::piece_picker::piece_pos
filter_web_seed_type	torrent/src/torrent_info.cpp	/^			explicit filter_web_seed_type(web_seed_entry::type_t t_) : t(t_) {}$/;"	f	struct:libtorrent::__anon89::filter_web_seed_type
filter_web_seed_type	torrent/src/torrent_info.cpp	/^		struct filter_web_seed_type$/;"	s	namespace:libtorrent::__anon89	file:
filtered	torrent/include/libtorrent/extensions.hpp	/^		static constexpr add_peer_flags_t filtered = 2_bit;$/;"	m	struct:libtorrent::torrent_plugin
filtered	torrent/include/libtorrent/piece_picker.hpp	/^			bool filtered() const { return piece_priority == filter_priority; }$/;"	f	struct:libtorrent::piece_picker::piece_pos
filtered	torrent/src/session.cpp	/^constexpr add_peer_flags_t torrent_plugin::filtered;$/;"	m	class:libtorrent::torrent_plugin	file:
fin_resends	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int fin_resends() const { return m_sett.get_int(settings_pack::utp_fin_resends); }$/;"	f	struct:libtorrent::utp_socket_manager
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_DEPRECATED_EXPORT torrent_added_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT block_downloading_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT block_finished_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT block_timeout_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT dht_reply_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT external_ip_alert final : alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT file_completed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT file_error_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT file_rename_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT file_renamed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT hash_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT invalid_request_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT listen_failed_alert final : alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT listen_succeeded_alert final : alert$/;"	s
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT metadata_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT metadata_received_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_ban_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_connect_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_disconnected_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_error_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_snubbed_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_unsnubbed_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT performance_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT piece_finished_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT read_piece_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT request_dropped_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT save_resume_data_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT save_resume_data_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT scrape_failed_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT scrape_reply_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT state_changed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT storage_moved_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT storage_moved_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_checked_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_delete_failed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_deleted_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_finished_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_paused_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_removed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_resumed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_announce_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_error_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_reply_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_warning_alert final : tracker_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT udp_error_alert final : alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT unwanted_block_alert final : peer_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT url_seed_alert final : torrent_alert$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/aux_/session_impl.hpp	/^		struct TORRENT_EXTRA_EXPORT session_impl final$/;"	s	namespace:libtorrent::aux
final	torrent/include/libtorrent/disk_io_thread.hpp	/^	struct TORRENT_EXTRA_EXPORT disk_io_thread final$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^	struct TORRENT_EXTRA_EXPORT dht_tracker final$/;"	s	namespace:libtorrent::dht
final	torrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^class sample_infohashes final : public traversal_algorithm$/;"	c	namespace:libtorrent::dht
final	torrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^class sample_infohashes_observer final : public traversal_observer$/;"	c	namespace:libtorrent::dht
final	torrent/include/libtorrent/peer_connection.hpp	/^		bool should_log(peer_log_alert::direction_t direction) const final;$/;"	m	class:libtorrent::peer_connection
final	torrent/include/libtorrent/resolver.hpp	/^struct TORRENT_EXTRA_EXPORT resolver final : resolver_interface$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^	struct TORRENT_EXTRA_EXPORT torrent_peer_allocator final$/;"	s	namespace:libtorrent
final	torrent/include/libtorrent/tracker_manager.hpp	/^	class TORRENT_EXTRA_EXPORT tracker_manager final$/;"	c	namespace:libtorrent
final	torrent/include/libtorrent/upnp.hpp	/^struct TORRENT_EXTRA_EXPORT upnp final$/;"	s	namespace:libtorrent
final	torrent/kademlia/dht_storage.cpp	/^	class dht_default_storage final : public dht_storage_interface$/;"	c	namespace:libtorrent::dht::__anon153	file:
final	torrent/src/bdecode.cpp	/^	struct bdecode_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent	file:
final	torrent/src/error_code.cpp	/^	struct http_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent	file:
final	torrent/src/error_code.cpp	/^	struct libtorrent_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent	file:
final	torrent/src/gzip.cpp	/^	struct gzip_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent	file:
final	torrent/src/hasher.cpp	/^	sha1_hash hasher::final()$/;"	f	class:libtorrent::hasher
final	torrent/src/hasher512.cpp	/^	sha512_hash hasher512::final()$/;"	f	class:libtorrent::hasher512
final	torrent/src/i2p_stream.cpp	/^	struct i2p_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent	file:
final	torrent/src/ip_notifier.cpp	/^struct ip_change_notifier_impl final : ip_change_notifier$/;"	s	namespace:libtorrent::aux::__anon43	file:
final	torrent/src/natpmp.cpp	/^struct pcp_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent	file:
final	torrent/src/smart_ban.cpp	/^	struct smart_ban_plugin final$/;"	s	namespace:libtorrent::__anon85	file:
final	torrent/src/socks5_stream.cpp	/^	struct socks_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent	file:
final	torrent/src/storage.cpp	/^		class disabled_storage final : public storage_interface$/;"	c	namespace:libtorrent::__anon67	file:
final	torrent/src/storage.cpp	/^		struct zero_storage final : storage_interface$/;"	s	namespace:libtorrent::__anon68	file:
final	torrent/src/upnp.cpp	/^struct upnp_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent	file:
final	torrent/src/ut_metadata.cpp	/^	struct ut_metadata_peer_plugin final$/;"	s	namespace:libtorrent::__anon72	file:
final	torrent/src/ut_metadata.cpp	/^	struct ut_metadata_plugin final$/;"	s	namespace:libtorrent::__anon72	file:
final	torrent/src/ut_pex.cpp	/^	struct ut_pex_peer_plugin final$/;"	s	namespace:libtorrent::__anon35	file:
final	torrent/src/ut_pex.cpp	/^	struct ut_pex_plugin final$/;"	s	namespace:libtorrent::__anon35	file:
final	torrent/src/utf8.cpp	/^		struct utf8_error_category final : boost::system::error_category$/;"	s	namespace:libtorrent::__anon126	file:
find	torrent/include/libtorrent/bloom_filter.hpp	/^		bool find(sha1_hash const& k) const$/;"	f	struct:libtorrent::bloom_filter
find	torrent/src/escape_string.cpp	/^	string_view::size_type find(string_view haystack, string_view needle, string_view::size_type pos)$/;"	f	namespace:libtorrent
find_all_disks	src/device.c	/^static void find_all_disks()$/;"	f	file:
find_all_disks	virt-p2v/src/p2v.c	/^find_all_disks (void)$/;"	f	file:
find_all_disks	virt-p2v/src/p2v_transform.c	/^find_all_disks (void)$/;"	f	file:
find_all_interfaces	virt-p2v/src/p2v.c	/^find_all_interfaces (void)$/;"	f	file:
find_all_interfaces	virt-p2v/src/p2v_transform.c	/^find_all_interfaces (void)$/;"	f	file:
find_all_netcards	src/device.c	/^void find_all_netcards()$/;"	f
find_bucket	torrent/kademlia/routing_table.cpp	/^routing_table::table_t::iterator routing_table::find_bucket(node_id const& id)$/;"	f	class:libtorrent::dht::routing_table
find_char	torrent/src/lazy_bdecode.cpp	/^	char const* find_char(char const* start, char const* end, char delimiter)$/;"	f	namespace:libtorrent::__anon75
find_collection	torrent/src/session_impl.cpp	/^	std::vector<std::shared_ptr<torrent>> session_impl::find_collection($/;"	f	class:libtorrent::aux::session_impl
find_connect_candidates	torrent/src/peer_list.cpp	/^	void peer_list::find_connect_candidates(std::vector<torrent_peer*>& peers$/;"	f	class:libtorrent::peer_list
find_control_url	torrent/src/upnp.cpp	/^void find_control_url(int const type, string_view str, parse_state& state)$/;"	f	namespace:libtorrent
find_data	torrent/include/libtorrent/kademlia/find_data.hpp	/^struct find_data : traversal_algorithm$/;"	s	namespace:libtorrent::dht
find_data	torrent/kademlia/find_data.cpp	/^find_data::find_data($/;"	f	class:libtorrent::dht::find_data
find_data_observer	torrent/include/libtorrent/kademlia/find_data.hpp	/^	find_data_observer($/;"	f	struct:libtorrent::dht::find_data_observer
find_data_observer	torrent/include/libtorrent/kademlia/find_data.hpp	/^struct find_data_observer : traversal_observer$/;"	s	namespace:libtorrent::dht
find_disconnect_candidate_torrent	torrent/src/session_impl.cpp	/^	std::weak_ptr<torrent> session_impl::find_disconnect_candidate_torrent() const$/;"	f	class:libtorrent::aux::session_impl
find_dl_piece	torrent/src/piece_picker.cpp	/^	std::vector<piece_picker::downloading_piece>::const_iterator piece_picker::find_dl_piece($/;"	f	class:libtorrent::piece_picker
find_dl_piece	torrent/src/piece_picker.cpp	/^	std::vector<piece_picker::downloading_piece>::iterator piece_picker::find_dl_piece($/;"	f	class:libtorrent::piece_picker
find_encrypted_torrent	torrent/src/session_impl.cpp	/^	torrent const* session_impl::find_encrypted_torrent(sha1_hash const& info_hash$/;"	f	class:libtorrent::aux::session_impl
find_endpoint	torrent/src/announce_entry.cpp	/^	announce_endpoint* announce_entry::find_endpoint(aux::listen_socket_handle const& s)$/;"	f	class:libtorrent::announce_entry
find_error_code	torrent/src/upnp.cpp	/^void find_error_code(int const type, string_view string, error_code_parse_state& state)$/;"	f	namespace:libtorrent
find_first_of	torrent/include/libtorrent/string_view.hpp	/^inline string_view::size_type find_first_of(string_view const v, char const c$/;"	f	namespace:libtorrent
find_first_of	torrent/include/libtorrent/string_view.hpp	/^inline string_view::size_type find_first_of(string_view const v, char const* c$/;"	f	namespace:libtorrent
find_introducer	torrent/src/torrent.cpp	/^	bt_peer_connection* torrent::find_introducer(tcp::endpoint const& ep) const$/;"	f	class:libtorrent::torrent
find_ip_address	torrent/src/upnp.cpp	/^void find_ip_address(int const type, string_view string, ip_address_parse_state& state)$/;"	f	namespace:libtorrent
find_key	torrent/src/entry.cpp	/^	entry const* entry::find_key(string_view key) const$/;"	f	class:libtorrent::entry
find_key	torrent/src/entry.cpp	/^	entry* entry::find_key(string_view key)$/;"	f	class:libtorrent::entry
find_lowest_ranking_peer	torrent/src/torrent.cpp	/^	peer_connection* torrent::find_lowest_ranking_peer() const$/;"	f	class:libtorrent::torrent
find_metric_idx	torrent/src/session_stats.cpp	/^	int find_metric_idx(string_view name)$/;"	f	namespace:libtorrent
find_node	torrent/kademlia/routing_table.cpp	/^routing_table::find_node(udp::endpoint const& ep)$/;"	f	class:libtorrent::dht::routing_table
find_node	torrent/kademlia/routing_table.cpp	/^void routing_table::find_node(node_id const& target$/;"	f	class:libtorrent::dht::routing_table
find_peer	torrent/src/torrent.cpp	/^	bt_peer_connection* torrent::find_peer(tcp::endpoint const& ep) const$/;"	f	class:libtorrent::torrent
find_peer	torrent/src/torrent.cpp	/^	peer_connection* torrent::find_peer(peer_id const& pid)$/;"	f	class:libtorrent::torrent
find_peers	torrent/include/libtorrent/peer_list.hpp	/^		std::pair<const_iterator, const_iterator> find_peers(address const& a) const$/;"	f	struct:libtorrent::peer_list
find_peers	torrent/include/libtorrent/peer_list.hpp	/^		std::pair<iterator, iterator> find_peers(address const& a)$/;"	f	struct:libtorrent::peer_list
find_peers	torrent/src/torrent.cpp	/^	std::pair<peer_list::iterator, peer_list::iterator> torrent::find_peers(address const& a)$/;"	f	class:libtorrent::torrent
find_piece	torrent/src/block_cache.cpp	/^cached_piece_entry* block_cache::find_piece(disk_io_job const* j)$/;"	f	class:libtorrent::block_cache
find_piece	torrent/src/block_cache.cpp	/^cached_piece_entry* block_cache::find_piece(storage_interface* st, piece_index_t const piece)$/;"	f	class:libtorrent::block_cache
find_plugin	torrent/src/peer_connection.cpp	/^	peer_plugin const* peer_connection::find_plugin(string_view type)$/;"	f	class:libtorrent::peer_connection
find_plugin	torrent/src/peer_connection_handle.cpp	/^peer_plugin const* peer_connection_handle::find_plugin(string_view type) const$/;"	f	class:libtorrent::peer_connection_handle
find_string	torrent/src/identify_client.cpp	/^	bool find_string(char const* id, char const* search)$/;"	f	namespace:__anon59
find_tcp_port_mapping	torrent/src/session_impl.cpp	/^		bool find_tcp_port_mapping(portmap_transport const transport$/;"	f	namespace:libtorrent::aux::__anon51
find_torrent	torrent/src/session_handle.cpp	/^	torrent_handle session_handle::find_torrent(sha1_hash const& info_hash) const$/;"	f	class:libtorrent::session_handle
find_torrent	torrent/src/session_impl.cpp	/^	std::weak_ptr<torrent> session_impl::find_torrent(sha1_hash const& info_hash) const$/;"	f	class:libtorrent::aux::session_impl
find_torrent	torrent/src/session_impl.cpp	/^	std::weak_ptr<torrent> session_impl::find_torrent(std::string const& uuid) const$/;"	f	class:libtorrent::aux::session_impl
find_torrent_handle	torrent/src/session_impl.cpp	/^	torrent_handle session_impl::find_torrent_handle(sha1_hash const& info_hash)$/;"	f	class:libtorrent::aux::session_impl
find_tracker	torrent/src/torrent.cpp	/^	announce_entry* torrent::find_tracker(std::string const& url)$/;"	f	class:libtorrent::torrent
find_udp_port_mapping	torrent/src/session_impl.cpp	/^		bool find_udp_port_mapping(portmap_transport const transport$/;"	f	namespace:libtorrent::aux::__anon51
fingerprint	torrent/include/libtorrent/fingerprint.hpp	/^	struct TORRENT_DEPRECATED_EXPORT fingerprint$/;"	s	namespace:libtorrent
fingerprint	torrent/src/fingerprint.cpp	/^	fingerprint::fingerprint(const char* id_string, int major, int minor$/;"	f	class:libtorrent::fingerprint
finished	torrent/include/libtorrent/http_parser.hpp	/^		bool finished() const { return m_finished; }$/;"	f	class:libtorrent::http_parser
finished	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t finished:15;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
finished	torrent/include/libtorrent/torrent_handle.hpp	/^			finished$/;"	e	enum:libtorrent::block_info::block_state_t
finished	torrent/include/libtorrent/torrent_handle.hpp	/^		int finished;$/;"	m	struct:libtorrent::partial_piece_info
finished	torrent/include/libtorrent/torrent_status.hpp	/^			finished,$/;"	e	enum:libtorrent::torrent_status::state_t
finished	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::finished(observer_ptr o)$/;"	f	class:libtorrent::dht::traversal_algorithm
finished	torrent/src/torrent.cpp	/^	void torrent::finished()$/;"	f	class:libtorrent::torrent
finished_duration	torrent/include/libtorrent/torrent_status.hpp	/^		seconds finished_duration;$/;"	m	struct:libtorrent::torrent_status
finished_time	torrent/include/libtorrent/add_torrent_params.hpp	/^		int finished_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
finished_time	torrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER finished_time = 0;$/;"	m	struct:libtorrent::torrent_status
finished_time	torrent/src/torrent.cpp	/^	seconds32 torrent::finished_time() const$/;"	f	class:libtorrent::torrent
first	torrent/include/libtorrent/ip_filter.hpp	/^	Addr first;$/;"	m	struct:libtorrent::ip_range
first	torrent/include/libtorrent/span.hpp	/^		span<T> first(difference_type const n) const$/;"	f	struct:libtorrent::span
first	torrent/include/libtorrent/tailqueue.hpp	/^		T* first() const { TORRENT_ASSERT(m_size > 0); return m_first; }$/;"	f	struct:libtorrent::tailqueue
firstByteMark	cJSON/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
firstByteMark	src/cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
firstByteMark	torrent/src/ConvertUTF.cpp	/^static const UTF8 firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
first_requested	torrent/include/libtorrent/torrent.hpp	/^		time_point first_requested;$/;"	m	struct:libtorrent::time_critical_piece
first_seen	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	time_point first_seen = aux::time_now();$/;"	m	struct:libtorrent::dht::node_entry
first_thread_id	torrent/src/disk_io_thread_pool.cpp	/^	std::thread::id disk_io_thread_pool::first_thread_id()$/;"	f	class:libtorrent::disk_io_thread_pool
first_time	torrent/include/libtorrent/extensions.hpp	/^		static constexpr add_peer_flags_t first_time = 1_bit;$/;"	m	struct:libtorrent::torrent_plugin
first_time_seen	torrent/include/libtorrent/peer_list.hpp	/^		bool first_time_seen = false;$/;"	m	struct:libtorrent::torrent_state
first_usable_lba	include/gpt.h	/^    uint64_t  first_usable_lba;$/;"	m	struct:__anon6
fix_priorities	torrent/src/torrent.cpp	/^		aux::vector<download_priority_t, file_index_t> fix_priorities($/;"	f	namespace:libtorrent::__anon106
fixed	torrent/src/puff.cpp	/^local int fixed(struct state *s)$/;"	f
flag	include/StoreConfig.h	/^	uint8_t 	flag;$/;"	m	struct:_YZY_QCOW_ENTRY
flag_alive	torrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_alive = 6_bit;$/;"	m	struct:libtorrent::dht::observer
flag_alive	torrent/kademlia/rpc_manager.cpp	/^constexpr observer_flags_t observer::flag_alive;$/;"	m	class:libtorrent::dht::observer	file:
flag_broadcast	torrent/include/libtorrent/broadcast_socket.hpp	/^		enum flags_t { flag_broadcast = 1 };$/;"	e	enum:libtorrent::broadcast_socket::flags_t
flag_done	torrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_done = 7_bit;$/;"	m	struct:libtorrent::dht::observer
flag_done	torrent/kademlia/rpc_manager.cpp	/^constexpr observer_flags_t observer::flag_done;$/;"	m	class:libtorrent::dht::observer	file:
flag_executable	torrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t flag_executable = 2_bit;$/;"	m	class:libtorrent::file_storage
flag_executable	torrent/src/file_storage.cpp	/^	constexpr file_flags_t file_storage::flag_executable;$/;"	m	class:libtorrent::file_storage	file:
flag_failed	torrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_failed = 4_bit;$/;"	m	struct:libtorrent::dht::observer
flag_failed	torrent/kademlia/rpc_manager.cpp	/^constexpr observer_flags_t observer::flag_failed;$/;"	m	class:libtorrent::dht::observer	file:
flag_hidden	torrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t flag_hidden = 1_bit;$/;"	m	class:libtorrent::file_storage
flag_hidden	torrent/src/file_storage.cpp	/^	constexpr file_flags_t file_storage::flag_hidden;$/;"	m	class:libtorrent::file_storage	file:
flag_initial	torrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_initial = 1_bit;$/;"	m	struct:libtorrent::dht::observer
flag_initial	torrent/kademlia/rpc_manager.cpp	/^constexpr observer_flags_t observer::flag_initial;$/;"	m	class:libtorrent::dht::observer	file:
flag_ipv6_address	torrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_ipv6_address = 5_bit;$/;"	m	struct:libtorrent::dht::observer
flag_ipv6_address	torrent/kademlia/rpc_manager.cpp	/^constexpr observer_flags_t observer::flag_ipv6_address;$/;"	m	class:libtorrent::dht::observer	file:
flag_no_id	torrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_no_id = 2_bit;$/;"	m	struct:libtorrent::dht::observer
flag_no_id	torrent/kademlia/rpc_manager.cpp	/^constexpr observer_flags_t observer::flag_no_id;$/;"	m	class:libtorrent::dht::observer	file:
flag_pad_file	torrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t flag_pad_file = 0_bit;$/;"	m	class:libtorrent::file_storage
flag_pad_file	torrent/src/file_storage.cpp	/^	constexpr file_flags_t file_storage::flag_pad_file;$/;"	m	class:libtorrent::file_storage	file:
flag_queried	torrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_queried = 0_bit;$/;"	m	struct:libtorrent::dht::observer
flag_queried	torrent/kademlia/rpc_manager.cpp	/^constexpr observer_flags_t observer::flag_queried;$/;"	m	class:libtorrent::dht::observer	file:
flag_short_timeout	torrent/include/libtorrent/kademlia/observer.hpp	/^	static constexpr observer_flags_t flag_short_timeout = 3_bit;$/;"	m	struct:libtorrent::dht::observer
flag_short_timeout	torrent/kademlia/rpc_manager.cpp	/^constexpr observer_flags_t observer::flag_short_timeout;$/;"	m	class:libtorrent::dht::observer	file:
flag_symlink	torrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t flag_symlink = 3_bit;$/;"	m	class:libtorrent::file_storage
flag_symlink	torrent/src/file_storage.cpp	/^	constexpr file_flags_t file_storage::flag_symlink;$/;"	m	class:libtorrent::file_storage	file:
flags	include/gpt.h	/^    int flags;$/;"	m	struct:_DiskDriver
flags	include/gpt.h	/^    uint8_t   flags;$/;"	m	struct:__anon4
flags	torrent/include/libtorrent/add_torrent_params.hpp	/^		torrent_flags_t flags = torrent_flags::default_flags;$/;"	m	struct:libtorrent::add_torrent_params
flags	torrent/include/libtorrent/aux_/session_impl.hpp	/^			listen_socket_flags_t flags;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
flags	torrent/include/libtorrent/aux_/session_impl.hpp	/^		listen_socket_flags_t flags = accept_incoming;$/;"	m	struct:libtorrent::aux::listen_socket_t
flags	torrent/include/libtorrent/disk_io_job.hpp	/^		disk_job_flags_t flags = disk_job_flags_t{};$/;"	m	struct:libtorrent::disk_io_job
flags	torrent/include/libtorrent/flags.hpp	/^namespace flags {$/;"	n	namespace:libtorrent
flags	torrent/include/libtorrent/ip_filter.hpp	/^	std::uint32_t flags;$/;"	m	struct:libtorrent::ip_range
flags	torrent/include/libtorrent/kademlia/msg.hpp	/^	int flags;$/;"	m	struct:libtorrent::dht::key_desc_t
flags	torrent/include/libtorrent/peer_info.hpp	/^		int flags;$/;"	m	struct:libtorrent::peer_list_entry
flags	torrent/include/libtorrent/peer_info.hpp	/^		peer_flags_t flags;$/;"	m	struct:libtorrent::peer_info
flags	torrent/include/libtorrent/torrent.hpp	/^		deadline_flags_t flags;$/;"	m	struct:libtorrent::time_critical_piece
flags	torrent/src/torrent.cpp	/^	torrent_flags_t torrent::flags() const$/;"	f	class:libtorrent::torrent
flags	torrent/src/torrent_handle.cpp	/^	torrent_flags_t torrent_handle::flags() const$/;"	f	class:libtorrent::torrent_handle
flags_t	torrent/include/libtorrent/broadcast_socket.hpp	/^		enum flags_t { flag_broadcast = 1 };$/;"	g	class:libtorrent::broadcast_socket
flags_t	torrent/include/libtorrent/http_parser.hpp	/^		enum flags_t { dont_parse_chunks = 1 };$/;"	g	class:libtorrent::http_parser
flags_t	torrent/include/libtorrent/peer_info.hpp	/^		enum flags_t$/;"	g	struct:libtorrent::peer_list_entry
flush_cache	torrent/src/torrent.cpp	/^	void torrent::flush_cache()$/;"	f	class:libtorrent::torrent
flush_cache	torrent/src/torrent_handle.cpp	/^	void torrent_handle::flush_cache() const$/;"	f	class:libtorrent::torrent_handle
flush_delete_cache	torrent/include/libtorrent/disk_io_thread.hpp	/^			flush_delete_cache = 4,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::
flush_disk_cache	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr resume_data_flags_t flush_disk_cache = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
flush_disk_cache	torrent/src/torrent_handle.cpp	/^	constexpr resume_data_flags_t torrent_handle::flush_disk_cache;$/;"	m	class:libtorrent::torrent_handle	file:
flush_expect_clear	torrent/include/libtorrent/disk_io_thread.hpp	/^			flush_expect_clear = 8$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::
flush_expired	torrent/include/libtorrent/block_cache.hpp	/^			flush_expired,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
flush_hashed	torrent/include/libtorrent/disk_io_job.hpp	/^		, flush_hashed$/;"	m	class:libtorrent::job_action_t
flush_metadata	torrent/src/part_file.cpp	/^	void part_file::flush_metadata(error_code& ec)$/;"	f	class:libtorrent::part_file
flush_metadata_impl	torrent/src/part_file.cpp	/^	void part_file::flush_metadata_impl(error_code& ec)$/;"	f	class:libtorrent::part_file
flush_piece	torrent/include/libtorrent/disk_io_job.hpp	/^		, flush_piece$/;"	m	class:libtorrent::job_action_t
flush_range	torrent/include/libtorrent/block_cache.hpp	/^			flush_range,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
flush_storage	torrent/include/libtorrent/disk_io_job.hpp	/^		, flush_storage$/;"	m	class:libtorrent::job_action_t
flush_write_cache	torrent/include/libtorrent/disk_io_thread.hpp	/^			flush_write_cache = 2,$/;"	m	struct:libtorrent::final	typeref:enum:libtorrent::final::
flushing	torrent/include/libtorrent/block_cache.hpp	/^			flushing = static_cast<int>(job_action_t::num_job_ids), \/\/ 20$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
flushing_count	torrent/include/libtorrent/block_cache.hpp	/^		int flushing_count = 0;$/;"	m	struct:libtorrent::cached_block_entry
fopen	virt-p2v/include/gnulib/stdio.h	785;"	d
for_each_node	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	void for_each_node(std::function<void(node_entry const&)> f) const$/;"	f	class:libtorrent::dht::routing_table
for_each_node	torrent/kademlia/routing_table.cpp	/^void routing_table::for_each_node(std::function<void(node_entry const&)> live_cb$/;"	f	class:libtorrent::dht::routing_table
forbidden	torrent/include/libtorrent/error_code.hpp	/^			forbidden = 403,$/;"	e	enum:libtorrent::errors::http_errors
force_colour	virt-p2v/src/p2v.c	/^int force_colour = 0;$/;"	v
force_colour	virt-p2v/src/p2v_transform.c	/^int force_colour = 0;$/;"	v
force_copy	torrent/include/libtorrent/disk_interface.hpp	/^		static constexpr disk_job_flags_t force_copy = 0_bit;$/;"	m	struct:libtorrent::disk_interface
force_dht_announce	torrent/src/torrent_handle.cpp	/^	void torrent_handle::force_dht_announce() const$/;"	f	class:libtorrent::torrent_handle
force_erase	torrent/include/libtorrent/peer_list.hpp	/^		static constexpr erase_peer_flags_t force_erase = 1_bit;$/;"	m	struct:libtorrent::peer_list
force_erase	torrent/src/peer_list.cpp	/^	constexpr erase_peer_flags_t peer_list::force_erase;$/;"	m	class:libtorrent::peer_list	file:
force_proxy	torrent/include/libtorrent/settings_pack.hpp	/^			force_proxy TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
force_reannounce	torrent/src/torrent_handle.cpp	/^	void torrent_handle::force_reannounce($/;"	f	class:libtorrent::torrent_handle
force_reannounce	torrent/src/torrent_handle.cpp	/^	void torrent_handle::force_reannounce(int s, int idx, reannounce_flags_t const flags) const$/;"	f	class:libtorrent::torrent_handle
force_recheck	torrent/src/torrent.cpp	/^	void torrent::force_recheck()$/;"	f	class:libtorrent::torrent
force_recheck	torrent/src/torrent_handle.cpp	/^	void torrent_handle::force_recheck() const$/;"	f	class:libtorrent::torrent_handle
force_tracker_request	torrent/src/torrent.cpp	/^	void torrent::force_tracker_request(time_point const t, int const tracker_idx$/;"	f	class:libtorrent::torrent
forced	torrent/include/libtorrent/session_settings.hpp	/^			forced,$/;"	e	enum:libtorrent::pe_settings::enc_policy
format	qt_pro/QRoundProgressBar.h	/^    QString	format() const { return m_format; }$/;"	f	class:QRoundProgressBar
format	virt-p2v/include/p2v-config.h	/^  char *format;$/;"	m	struct:output_config
format_disk	src/device.c	/^int format_disk(const char *path)$/;"	f
format_string	torrent/src/stack_allocator.cpp	/^	allocation_slot stack_allocator::format_string(char const* fmt, va_list v)$/;"	f	class:libtorrent::aux::stack_allocator
found_working	torrent/src/torrent.cpp	/^			bool found_working = false;$/;"	m	struct:libtorrent::__anon112::timer_state	file:
fp_err	src/log.c	/^FILE *fp_err = NULL;$/;"	v
fp_log	src/log.c	/^FILE *fp_log = NULL;$/;"	v
fprintf	virt-p2v/include/gnulib/stdio.h	817;"	d
fpurge	virt-p2v/include/gnulib/stdio.h	846;"	d
fputc	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (fputc);$/;"	v
fputs	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (fputs);$/;"	v
fread	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (fread);$/;"	v
free_block	torrent/src/block_cache.cpp	/^void block_cache::free_block(cached_piece_entry* pe, int block)$/;"	f	class:libtorrent::block_cache
free_buffer	torrent/src/disk_buffer_pool.cpp	/^	void disk_buffer_pool::free_buffer(char* buf)$/;"	f	class:libtorrent::disk_buffer_pool
free_buffer_impl	torrent/src/disk_buffer_pool.cpp	/^	void disk_buffer_pool::free_buffer_impl(char* buf, std::unique_lock<std::mutex>& l)$/;"	f	class:libtorrent::disk_buffer_pool
free_config	virt-p2v/src/p2v_config.c	/^free_config (struct config *c)$/;"	f
free_cpu_config	virt-p2v/src/cpuid.c	/^free_cpu_config (struct cpu_config *cpu)$/;"	f	file:
free_deleter	torrent/include/libtorrent/heterogeneous_queue.hpp	/^	struct free_deleter$/;"	s	namespace:libtorrent::aux
free_fn	cJSON/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
free_fn	include/cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
free_function	torrent/src/path.cpp	/^	struct free_function$/;"	s	namespace:libtorrent::__anon136	file:
free_iovec	torrent/src/disk_buffer_pool.cpp	/^	void disk_buffer_pool::free_iovec(span<iovec_t const> iov)$/;"	f	class:libtorrent::disk_buffer_pool
free_job	torrent/src/disk_job_pool.cpp	/^	void disk_job_pool::free_job(disk_io_job* j)$/;"	f	class:libtorrent::disk_job_pool
free_jobs	torrent/src/disk_job_pool.cpp	/^	void disk_job_pool::free_jobs(disk_io_job** j, int const num)$/;"	f	class:libtorrent::disk_job_pool
free_multiple_buffers	torrent/src/disk_buffer_pool.cpp	/^	void disk_buffer_pool::free_multiple_buffers(span<char*> bufvec)$/;"	f	class:libtorrent::disk_buffer_pool
free_observer	torrent/kademlia/rpc_manager.cpp	/^void rpc_manager::free_observer(void* ptr)$/;"	f	class:libtorrent::dht::rpc_manager
free_peer_entry	torrent/src/torrent_peer_allocator.cpp	/^	void torrent_peer_allocator::free_peer_entry(torrent_peer* p)$/;"	f	class:libtorrent::torrent_peer_allocator
free_piece	torrent/src/part_file.cpp	/^	void part_file::free_piece(piece_index_t const piece)$/;"	f	class:libtorrent::part_file
free_regexps	virt-p2v/src/ssh.c	/^free_regexps (void)$/;"	f	file:
free_upload_slots	torrent/include/libtorrent/torrent.hpp	/^		bool free_upload_slots() const$/;"	f	class:libtorrent::torrent
freopen	virt-p2v/include/gnulib/stdio.h	922;"	d
from	torrent/include/libtorrent/udp_socket.hpp	/^			udp::endpoint from;$/;"	m	struct:libtorrent::udp_socket::packet
from_hex	torrent/include/libtorrent/hex.hpp	/^	inline bool from_hex(char const *in, int len, char* out)$/;"	f	namespace:libtorrent
from_hex	torrent/src/hex.cpp	/^	bool from_hex(span<char const> in, char* out)$/;"	f	namespace:libtorrent::aux
from_result_code	torrent/src/natpmp.cpp	/^error_code natpmp::from_result_code(int const version, int result)$/;"	f	class:libtorrent::natpmp
from_span	torrent/src/torrent_info.cpp	/^	TORRENT_EXPORT from_span_t from_span;$/;"	m	namespace:libtorrent	file:
from_span_t	torrent/include/libtorrent/torrent_info.hpp	/^	class from_span_t {};$/;"	c	namespace:libtorrent
from_string	torrent/include/libtorrent/bloom_filter.hpp	/^		void from_string(char const* str)$/;"	f	struct:libtorrent::bloom_filter
front	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		T* front()$/;"	f	struct:libtorrent::heterogeneous_queue
front	torrent/include/libtorrent/linked_list.hpp	/^		T const* front() const { return m_first; }$/;"	f	struct:libtorrent::linked_list
front	torrent/include/libtorrent/linked_list.hpp	/^		T* front() { return m_first; }$/;"	f	struct:libtorrent::linked_list
fscanf	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (fscanf);$/;"	v
fseek	virt-p2v/include/gnulib/stdio.h	1025;"	d
fseeko	virt-p2v/include/gnulib/stdio.h	1026;"	d
fsync	virt-p2v/include/gnulib/unistd.h	1108;"	d
ftell	virt-p2v/include/gnulib/stdio.h	1086;"	d
ftello	virt-p2v/include/gnulib/stdio.h	1087;"	d
ftruncate	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (ftruncate);$/;"	v
ftruncate	virt-p2v/include/gnulib/unistd.h	1136;"	d
full_block_bytes	torrent/include/libtorrent/piece_block_progress.hpp	/^		int full_block_bytes;$/;"	m	struct:libtorrent::piece_block_progress
full_queue	src/queue.c	/^unsigned char full_queue(QUEUE *pQueue)$/;"	f
fun	torrent/src/settings_pack.cpp	/^		void (aux::session_impl::*fun)();$/;"	m	struct:libtorrent::bool_setting_entry_t	file:
fun	torrent/src/settings_pack.cpp	/^		void (aux::session_impl::*fun)();$/;"	m	struct:libtorrent::int_setting_entry_t	file:
fun	torrent/src/settings_pack.cpp	/^		void (aux::session_impl::*fun)();$/;"	m	struct:libtorrent::str_setting_entry_t	file:
fwrite	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (fwrite);$/;"	v
fwrite	virt-p2v/include/gnulib/stdio.h	1128;"	d
fwrite	virt-p2v/include/gnulib/stdio.h	1138;"	d
fwrite_unlocked	virt-p2v/include/gnulib/stdio.h	1129;"	d
fwrite_unlocked	virt-p2v/include/gnulib/stdio.h	1139;"	d
gStoreBuf	src/StoreConfig.c	/^uint8_t gStoreBuf[YZY_MAX_STORE_BUFF_LEN];$/;"	v
gStoreBufLen	src/StoreConfig.c	/^uint32_t gStoreBufLen = YZY_MAX_STORE_BUFF_LEN;$/;"	v
g_blocking_calls	torrent/src/session_call.cpp	/^static std::unordered_map<std::string, int> g_blocking_calls;$/;"	m	namespace:libtorrent::aux	file:
g_calls_mutex	torrent/src/session_call.cpp	/^static std::mutex g_calls_mutex;$/;"	m	namespace:libtorrent::aux	file:
gain_factor	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int gain_factor() const { return m_sett.get_int(settings_pack::utp_gain_factor); }$/;"	f	struct:libtorrent::utp_socket_manager
gateway	include/StoreConfig.h	/^    uint64_t            gateway;$/;"	m	struct:_YZY_STORE_CONFIG
gateway	include/config.h	/^    char gateway[32];$/;"	m	struct:netcard_param
gateway	qt_pro/external.h	/^    char gateway[32];$/;"	m	struct:netcard_param
gateway	torrent/include/libtorrent/enum_net.hpp	/^		address gateway;$/;"	m	struct:libtorrent::ip_route
gather_copy	torrent/src/file.cpp	/^	void gather_copy(span<iovec_t const> bufs, char* dst)$/;"	f	namespace:libtorrent::__anon81
gcrypt_global_constructor	torrent/src/session_impl.cpp	/^	} gcrypt_global_constructor;$/;"	m	namespace:__anon44	typeref:struct:__anon44::gcrypt_setup	file:
gcrypt_setup	torrent/src/session_impl.cpp	/^		gcrypt_setup()$/;"	f	struct:__anon44::gcrypt_setup
gcrypt_setup	torrent/src/session_impl.cpp	/^	struct gcrypt_setup$/;"	s	namespace:__anon44	file:
gdk_event_get_button	virt-p2v/include/gui-gtk3-compat.h	/^gdk_event_get_button (const GdkEvent *event, guint *button)$/;"	f
gdk_event_get_event_type	virt-p2v/include/gui-gtk3-compat.h	98;"	d
ge_add	torrent/ed25519/ge.cpp	/^void ge_add(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {$/;"	f
ge_cached	torrent/ed25519/ge.h	/^} ge_cached;$/;"	t	typeref:struct:__anon141
ge_double_scalarmult_vartime	torrent/ed25519/ge.cpp	/^void ge_double_scalarmult_vartime(ge_p2 *r, const unsigned char *a, const ge_p3 *A, const unsigned char *b) {$/;"	f
ge_frombytes_negate_vartime	torrent/ed25519/ge.cpp	/^int ge_frombytes_negate_vartime(ge_p3 *h, const unsigned char *s) {$/;"	f
ge_madd	torrent/ed25519/ge.cpp	/^void ge_madd(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {$/;"	f
ge_msub	torrent/ed25519/ge.cpp	/^void ge_msub(ge_p1p1 *r, const ge_p3 *p, const ge_precomp *q) {$/;"	f
ge_p1p1	torrent/ed25519/ge.h	/^} ge_p1p1;$/;"	t	typeref:struct:__anon139
ge_p1p1_to_p2	torrent/ed25519/ge.cpp	/^void ge_p1p1_to_p2(ge_p2 *r, const ge_p1p1 *p) {$/;"	f
ge_p1p1_to_p3	torrent/ed25519/ge.cpp	/^void ge_p1p1_to_p3(ge_p3 *r, const ge_p1p1 *p) {$/;"	f
ge_p2	torrent/ed25519/ge.h	/^} ge_p2;$/;"	t	typeref:struct:__anon137
ge_p2_0	torrent/ed25519/ge.cpp	/^void ge_p2_0(ge_p2 *h) {$/;"	f
ge_p2_dbl	torrent/ed25519/ge.cpp	/^void ge_p2_dbl(ge_p1p1 *r, const ge_p2 *p) {$/;"	f
ge_p3	torrent/ed25519/ge.h	/^} ge_p3;$/;"	t	typeref:struct:__anon138
ge_p3_0	torrent/ed25519/ge.cpp	/^void ge_p3_0(ge_p3 *h) {$/;"	f
ge_p3_dbl	torrent/ed25519/ge.cpp	/^void ge_p3_dbl(ge_p1p1 *r, const ge_p3 *p) {$/;"	f
ge_p3_to_cached	torrent/ed25519/ge.cpp	/^void ge_p3_to_cached(ge_cached *r, const ge_p3 *p) {$/;"	f
ge_p3_to_p2	torrent/ed25519/ge.cpp	/^void ge_p3_to_p2(ge_p2 *r, const ge_p3 *p) {$/;"	f
ge_p3_tobytes	torrent/ed25519/ge.cpp	/^void ge_p3_tobytes(unsigned char *s, const ge_p3 *h) {$/;"	f
ge_precomp	torrent/ed25519/ge.h	/^} ge_precomp;$/;"	t	typeref:struct:__anon140
ge_scalarmult_base	torrent/ed25519/ge.cpp	/^void ge_scalarmult_base(ge_p3 *h, const unsigned char *a) {$/;"	f
ge_sub	torrent/ed25519/ge.cpp	/^void ge_sub(ge_p1p1 *r, const ge_p3 *p, const ge_cached *q) {$/;"	f
ge_tobytes	torrent/ed25519/ge.cpp	/^void ge_tobytes(unsigned char *s, const ge_p2 *h) {$/;"	f
general_failure	torrent/include/libtorrent/socks5_stream.hpp	/^		general_failure,$/;"	e	enum:libtorrent::socks_error::socks_error_code
generate	torrent/src/create_torrent.cpp	/^	entry create_torrent::generate() const$/;"	f	class:libtorrent::create_torrent
generate_block	torrent/bak/connection_tester.cpp	/^void generate_block(span<std::uint32_t> buffer, piece_index_t const piece$/;"	f
generate_data	torrent/bak/connection_tester.cpp	/^void generate_data(char const* path, torrent_info const& ti)$/;"	f
generate_fingerprint	torrent/src/fingerprint.cpp	/^	std::string generate_fingerprint(std::string name, int const major$/;"	f	namespace:libtorrent
generate_id	torrent/kademlia/node_id.cpp	/^node_id generate_id(address const& ip)$/;"	f	namespace:libtorrent::dht
generate_id_impl	torrent/kademlia/node_id.cpp	/^node_id generate_id_impl(address const& ip_, std::uint32_t r)$/;"	f	namespace:libtorrent::dht
generate_name	virt-p2v/src/conversion.c	/^generate_name (struct config *config, const char *filename)$/;"	f	file:
generate_p2v_version_file	virt-p2v/src/conversion.c	/^generate_p2v_version_file (const char *p2v_version_file)$/;"	f	file:
generate_peer_id	torrent/src/generate_peer_id.cpp	/^peer_id generate_peer_id(session_settings const& sett)$/;"	f	namespace:libtorrent::aux
generate_physical_xml	virt-p2v/src/physical-xml.c	/^generate_physical_xml (struct config *config, struct data_conn *data_conns,$/;"	f
generate_prefix_mask	torrent/kademlia/node_id.cpp	/^node_id generate_prefix_mask(int const bits)$/;"	f	namespace:libtorrent::dht
generate_random_id	torrent/kademlia/node_id.cpp	/^node_id generate_random_id()$/;"	f	namespace:libtorrent::dht
generate_secret_id	torrent/kademlia/node_id.cpp	/^node_id generate_secret_id()$/;"	f	namespace:libtorrent::dht
generate_system_data	virt-p2v/src/conversion.c	/^generate_system_data (const char *dmesg_file,$/;"	f	file:
generate_token	torrent/kademlia/node.cpp	/^std::string node::generate_token(udp::endpoint const& addr$/;"	f	class:libtorrent::dht::node
generate_torrent	torrent/bak/connection_tester.cpp	/^void generate_torrent(std::vector<char>& buf, int num_pieces, int num_files$/;"	f
generate_wrapper_script	virt-p2v/src/conversion.c	/^generate_wrapper_script (struct config *config, const char *remote_dir,$/;"	f	file:
generation_id	torrent/include/libtorrent/aux_/route.h	/^	uint32_t generation_id;		\/* route generation id *\/$/;"	m	struct:rtentry
generic_map_entry	torrent/src/identify_client.cpp	/^	struct generic_map_entry$/;"	s	namespace:__anon59	file:
generic_mappings	torrent/src/identify_client.cpp	/^	const generic_map_entry generic_mappings[] =$/;"	m	namespace:__anon59	file:
get	torrent/include/libtorrent/aux_/session_settings.hpp	/^		T get(Container const& c, int const name, int const type) const$/;"	f	struct:libtorrent::aux::session_settings_single_thread
get	torrent/include/libtorrent/aux_/socket_type.hpp	/^		template <class S> S const* get() const$/;"	f	struct:libtorrent::aux::socket_type
get	torrent/include/libtorrent/aux_/socket_type.hpp	/^		template <class S> S* get()$/;"	f	struct:libtorrent::aux::socket_type
get	torrent/include/libtorrent/linked_list.hpp	/^		T const* get() const { return m_current; }$/;"	f	struct:libtorrent::list_iterator
get	torrent/include/libtorrent/linked_list.hpp	/^		T* get() { return m_current; }$/;"	f	struct:libtorrent::list_iterator
get	torrent/include/libtorrent/tailqueue.hpp	/^		T* get() const { return m_current; }$/;"	f	struct:libtorrent::tailqueue_iterator
get	torrent/src/http_connection.cpp	/^void http_connection::get(std::string const& url, time_duration timeout, int prio$/;"	f	class:libtorrent::http_connection
get	torrent/src/listen_socket_handle.cpp	/^	listen_socket_t* listen_socket_handle::get() const$/;"	f	class:libtorrent::aux::listen_socket_handle
get	torrent/src/receive_buffer.cpp	/^span<char const> crypto_receive_buffer::get() const$/;"	f	class:libtorrent::crypto_receive_buffer
get	torrent/src/receive_buffer.cpp	/^span<char const> receive_buffer::get() const$/;"	f	class:libtorrent::receive_buffer
getDiskSizeLba	include/StoreConfig.h	/^    uint64_t (*getDiskSizeLba)(PYZYGUID diskName);$/;"	m	struct:_StoreDriver
getGlobal	qt_pro/global.cpp	/^Global *Global::getGlobal()$/;"	f	class:Global
getQcowLba	include/StoreConfig.h	/^    uint64_t (*getQcowLba)(PYZY_QCOW_ENTRY pQe); \/\/æ¬èç¹å®éèµ·å§ä½ç½®$/;"	m	struct:_StoreDriver
get_acpi	virt-p2v/src/cpuid.c	/^get_acpi (struct cpu_config *cpu)$/;"	f	file:
get_active_handle	torrent/bak/torrent_view.cpp	/^lt::torrent_handle torrent_view::get_active_handle() const$/;"	f	class:torrent_view
get_active_torrent	torrent/bak/torrent_view.cpp	/^lt::torrent_status const& torrent_view::get_active_torrent() const$/;"	f	class:lt::torrent_view
get_alert_mask	torrent/src/session_handle.cpp	/^	std::uint32_t session_handle::get_alert_mask() const$/;"	f	class:libtorrent::session_handle
get_all	torrent/include/libtorrent/linked_list.hpp	/^		T* get_all()$/;"	f	struct:libtorrent::linked_list
get_all	torrent/include/libtorrent/tailqueue.hpp	/^		T* get_all()$/;"	f	struct:libtorrent::tailqueue
get_all	torrent/src/alert_manager.cpp	/^	void alert_manager::get_all(std::vector<alert*>& alerts)$/;"	f	class:libtorrent::alert_manager
get_availability	torrent/src/piece_picker.cpp	/^	int piece_picker::get_availability(piece_index_t const piece) const$/;"	f	class:libtorrent::piece_picker
get_availability	torrent/src/piece_picker.cpp	/^	void piece_picker::get_availability(aux::vector<int, piece_index_t>& avail) const$/;"	f	class:libtorrent::piece_picker
get_bandwidth_manager	torrent/src/session_impl.cpp	/^	bandwidth_manager* session_impl::get_bandwidth_manager(int channel)$/;"	f	class:libtorrent::aux::session_impl
get_bdecode_category	torrent/include/libtorrent/bdecode.hpp	/^inline boost::system::error_category& get_bdecode_category()$/;"	f	namespace:libtorrent
get_bit	torrent/include/libtorrent/bitfield.hpp	/^		bool get_bit(IndexType const index) const$/;"	f	namespace:libtorrent
get_bitfield	torrent/src/peer_connection.cpp	/^	typed_bitfield<piece_index_t> const& peer_connection::get_bitfield() const$/;"	f	class:libtorrent::peer_connection
get_blockdev_model	virt-p2v/src/utils.c	/^get_blockdev_model (const char *dev)$/;"	f
get_blockdev_serial	virt-p2v/src/utils.c	/^get_blockdev_serial (const char *dev)$/;"	f
get_blockdev_size	virt-p2v/src/utils.c	/^get_blockdev_size (const char *dev)$/;"	f
get_body	torrent/src/http_parser.cpp	/^	span<char const> http_parser::get_body() const$/;"	f	class:libtorrent::http_parser
get_bool	torrent/include/libtorrent/aux_/session_settings.hpp	/^		bool get_bool(int name) const$/;"	f	struct:libtorrent::aux::session_settings
get_bool	torrent/include/libtorrent/aux_/session_settings.hpp	/^		bool get_bool(int name) const$/;"	f	struct:libtorrent::aux::session_settings_single_thread
get_bool	torrent/src/settings_pack.cpp	/^	bool settings_pack::get_bool(int name) const$/;"	f	class:libtorrent::settings_pack
get_cache_info	torrent/src/session_handle.cpp	/^	void session_handle::get_cache_info(cache_status* ret$/;"	f	class:libtorrent::session_handle
get_cache_info	torrent/src/session_handle.cpp	/^	void session_handle::get_cache_info(sha1_hash const& ih$/;"	f	class:libtorrent::session_handle
get_cache_info	torrent/src/session_impl.cpp	/^	void session_impl::get_cache_info(torrent_handle h, cache_status* ret, int flags) const$/;"	f	class:libtorrent::aux::session_impl
get_cache_status	torrent/src/session_handle.cpp	/^	cache_status session_handle::get_cache_status() const$/;"	f	class:libtorrent::session_handle
get_close_reason	torrent/src/socket_type.cpp	/^	close_reason_t socket_type::get_close_reason()$/;"	f	class:libtorrent::aux::socket_type
get_close_reason	torrent/src/utp_stream.cpp	/^close_reason_t utp_stream::get_close_reason()$/;"	f	class:libtorrent::utp_stream
get_cmdline_key	virt-p2v/src/kernel-cmdline.c	/^get_cmdline_key (char **argv, const char *key)$/;"	f
get_commonlog_time	src/tools.c	/^char *get_commonlog_time(void)$/;"	f
get_conversion_error	virt-p2v/src/conversion.c	/^get_conversion_error (void)$/;"	f
get_cpu_config	virt-p2v/src/cpuid.c	/^get_cpu_config (struct cpu_config *cpu)$/;"	f
get_dht_settings	torrent/include/libtorrent/aux_/session_impl.hpp	/^			dht::dht_settings const& get_dht_settings() const { return m_dht_settings; }$/;"	f	class:libtorrent::aux::final::dht
get_dht_settings	torrent/src/session_handle.cpp	/^	dht::dht_settings session_handle::get_dht_settings() const$/;"	f	class:libtorrent::session_handle
get_download_queue	torrent/src/piece_picker.cpp	/^	std::vector<piece_picker::downloading_piece> piece_picker::get_download_queue() const$/;"	f	class:libtorrent::piece_picker
get_download_queue	torrent/src/torrent.cpp	/^	void torrent::get_download_queue(std::vector<partial_piece_info>* queue) const$/;"	f	class:libtorrent::torrent
get_download_queue	torrent/src/torrent_handle.cpp	/^	void torrent_handle::get_download_queue(std::vector<partial_piece_info>& queue) const$/;"	f	class:libtorrent::torrent_handle
get_download_queue_size	torrent/src/piece_picker.cpp	/^	int piece_picker::get_download_queue_size() const$/;"	f	class:libtorrent::piece_picker
get_download_queue_sizes	torrent/src/piece_picker.cpp	/^	void piece_picker::get_download_queue_sizes(int* partial$/;"	f	class:libtorrent::piece_picker
get_downloader	torrent/src/piece_picker.cpp	/^	torrent_peer* piece_picker::get_downloader(piece_block const block) const$/;"	f	class:libtorrent::piece_picker
get_downloaders	torrent/src/piece_picker.cpp	/^	void piece_picker::get_downloaders(std::vector<torrent_peer*>& d$/;"	f	class:libtorrent::piece_picker
get_executor	torrent/include/libtorrent/proxy_base.hpp	/^	executor_type get_executor() { return m_sock.get_executor(); }$/;"	f	class:libtorrent::proxy_base
get_executor	torrent/include/libtorrent/ssl_stream.hpp	/^	executor_type get_executor() { return m_sock.get_executor(); }$/;"	f	class:libtorrent::ssl_stream
get_executor	torrent/include/libtorrent/utp_stream.hpp	/^	executor_type get_executor() { return m_io_service.get_executor(); }$/;"	f	struct:libtorrent::utp_stream
get_ext_priority	torrent/src/session_impl.cpp	/^			uint64_t get_ext_priority(opt_unchoke_candidate const& peer) const$/;"	f	struct:libtorrent::aux::__anon49::last_optimistic_unchoke_cmp
get_external_address	torrent/src/listen_socket_handle.cpp	/^	address listen_socket_handle::get_external_address() const$/;"	f	class:libtorrent::aux::listen_socket_handle
get_field	virt-p2v/src/cpuid.c	/^get_field (char **lscpu, const char *key)$/;"	f	file:
get_file_attributes	torrent/src/create_torrent.cpp	/^	file_flags_t get_file_attributes(std::string const& p)$/;"	f	namespace:libtorrent::aux
get_file_attributes	torrent/src/torrent_info.cpp	/^	file_flags_t get_file_attributes(bdecode_node const& dict)$/;"	f	namespace:libtorrent::__anon87
get_file_priorities	torrent/src/torrent_handle.cpp	/^	std::vector<download_priority_t> torrent_handle::get_file_priorities() const$/;"	f	class:libtorrent::torrent_handle
get_filesize	torrent/src/stat_cache.cpp	/^	std::int64_t stat_cache::get_filesize(file_index_t const i, file_storage const& fs$/;"	f	class:libtorrent::stat_cache
get_flags	virt-p2v/src/cpuid.c	/^get_flags (char **lscpu, struct cpu_config *cpu)$/;"	f	file:
get_full_peer_list	torrent/src/torrent.cpp	/^	void torrent::get_full_peer_list(std::vector<peer_list_entry>* v) const$/;"	f	class:libtorrent::torrent
get_full_peer_list	torrent/src/torrent_handle.cpp	/^	void torrent_handle::get_full_peer_list(std::vector<peer_list_entry>& v) const$/;"	f	class:libtorrent::torrent_handle
get_gateway	torrent/src/enum_net.cpp	/^	boost::optional<address> get_gateway(ip_interface const& iface, span<ip_route const> routes)$/;"	f	namespace:libtorrent
get_gzip_category	torrent/include/libtorrent/gzip.hpp	/^	inline boost::system::error_category& get_gzip_category()$/;"	f	namespace:libtorrent
get_handle	torrent/src/torrent.cpp	/^	torrent_handle torrent::get_handle()$/;"	f	class:libtorrent::torrent
get_hash	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		void get_hash(char *digest, std::size_t digest_size)$/;"	f	struct:libtorrent::aux::crypt_hash
get_hash_xor_mask	torrent/include/libtorrent/pe_crypto.hpp	/^		sha1_hash const& get_hash_xor_mask() const { return m_xor_mask; }$/;"	f	class:libtorrent::dh_key_exchange
get_hotplug_sock	src/tools.c	/^int get_hotplug_sock(void)$/;"	f
get_http_category	torrent/include/libtorrent/error_code.hpp	/^	inline boost::system::error_category& get_http_category()$/;"	f	namespace:libtorrent
get_i2p_category	torrent/include/libtorrent/i2p_stream.hpp	/^	inline boost::system::error_category& get_i2p_category()$/;"	f	namespace:libtorrent
get_if_addr	virt-p2v/src/utils.c	/^get_if_addr (const char *if_name)$/;"	f
get_if_vendor	virt-p2v/src/utils.c	/^get_if_vendor (const char *if_name, int truncate)$/;"	f
get_immutable_callback	torrent/src/session_impl.cpp	/^	void session_impl::get_immutable_callback(sha1_hash target$/;"	f	class:libtorrent::aux::session_impl
get_immutable_item_callback	torrent/kademlia/dht_tracker.cpp	/^	void get_immutable_item_callback(item const& it$/;"	f	namespace:libtorrent::dht::__anon151
get_immutable_item_ctx	torrent/kademlia/dht_tracker.cpp	/^		explicit get_immutable_item_ctx(int traversals)$/;"	f	struct:libtorrent::dht::__anon151::get_immutable_item_ctx
get_immutable_item_ctx	torrent/kademlia/dht_tracker.cpp	/^	struct get_immutable_item_ctx$/;"	s	namespace:libtorrent::dht::__anon151	file:
get_impl	torrent/src/utp_stream.cpp	/^utp_socket_impl* utp_stream::get_impl()$/;"	f	class:libtorrent::utp_stream
get_info	torrent/src/peer_class.cpp	/^	void peer_class::get_info(peer_class_info* pci) const$/;"	f	class:libtorrent::peer_class
get_int	torrent/include/libtorrent/aux_/session_settings.hpp	/^		int get_int(int name) const$/;"	f	struct:libtorrent::aux::session_settings
get_int	torrent/include/libtorrent/aux_/session_settings.hpp	/^		int get_int(int name) const$/;"	f	struct:libtorrent::aux::session_settings_single_thread
get_int	torrent/src/settings_pack.cpp	/^	int settings_pack::get_int(int name) const$/;"	f	class:libtorrent::settings_pack
get_int_setting	torrent/src/session_impl.cpp	/^	int session_impl::get_int_setting(int n) const$/;"	f	class:libtorrent::aux::session_impl
get_interface	torrent/include/libtorrent/operations.hpp	/^		get_interface,$/;"	m	class:libtorrent::operation_t
get_io_service	torrent/include/libtorrent/io_service_fwd.hpp	/^io_service& get_io_service(T& o) { return static_cast<io_service&>(o.get_executor().context()); }$/;"	f	namespace:libtorrent
get_io_service	torrent/include/libtorrent/peer_connection.hpp	/^		io_service& get_io_service() { return m_ios; }$/;"	f	class:libtorrent::peer_connection
get_io_service	torrent/include/libtorrent/proxy_base.hpp	/^	io_service& get_io_service()$/;"	f	class:libtorrent::proxy_base
get_io_service	torrent/include/libtorrent/ssl_stream.hpp	/^	io_service& get_io_service()$/;"	f	class:libtorrent::ssl_stream
get_io_service	torrent/include/libtorrent/tracker_manager.hpp	/^		io_service& get_io_service() { return lt::get_io_service(m_timeout); }$/;"	f	struct:libtorrent::timeout_handler
get_io_service	torrent/include/libtorrent/udp_socket.hpp	/^		io_service& get_io_service() { return lt::get_io_service(m_socket); }$/;"	f	class:libtorrent::udp_socket
get_io_service	torrent/include/libtorrent/utp_stream.hpp	/^	io_service& get_io_service() { return m_io_service; }$/;"	f	struct:libtorrent::utp_stream
get_io_service	torrent/src/session_handle.cpp	/^	io_service& session_handle::get_io_service()$/;"	f	class:libtorrent::session_handle
get_io_service	torrent/src/socket_type.cpp	/^	io_service& socket_type::get_io_service() const$/;"	f	class:libtorrent::aux::socket_type
get_ip_address	torrent/src/upnp.cpp	/^void upnp::get_ip_address(rootdevice& d)$/;"	f	class:libtorrent::upnp
get_ip_filter	torrent/include/libtorrent/torrent.hpp	/^		ip_filter const* get_ip_filter() { return m_ip_filter.get(); }$/;"	f	class:libtorrent::torrent
get_ip_filter	torrent/src/session_handle.cpp	/^	ip_filter session_handle::get_ip_filter() const$/;"	f	class:libtorrent::session_handle
get_ip_filter	torrent/src/session_impl.cpp	/^	ip_filter const& session_impl::get_ip_filter()$/;"	f	class:libtorrent::aux::session_impl
get_item	torrent/include/libtorrent/kademlia/get_item.hpp	/^class get_item : public find_data$/;"	c	namespace:libtorrent::dht
get_item	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::get_item(public_key const& key$/;"	f	class:libtorrent::dht::dht_tracker
get_item	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::get_item(sha1_hash const& target$/;"	f	class:libtorrent::dht::dht_tracker
get_item	torrent/kademlia/get_item.cpp	/^get_item::get_item($/;"	f	class:libtorrent::dht::get_item
get_item	torrent/kademlia/node.cpp	/^void node::get_item(public_key const& pk, std::string const& salt$/;"	f	class:libtorrent::dht::node
get_item	torrent/kademlia/node.cpp	/^void node::get_item(sha1_hash const& target$/;"	f	class:libtorrent::dht::node
get_item_observer	torrent/include/libtorrent/kademlia/get_item.hpp	/^	get_item_observer($/;"	f	class:libtorrent::dht::get_item_observer
get_item_observer	torrent/include/libtorrent/kademlia/get_item.hpp	/^class get_item_observer : public find_data_observer$/;"	c	namespace:libtorrent::dht
get_library_handle	torrent/include/libtorrent/aux_/win_util.hpp	/^	HMODULE get_library_handle()$/;"	f	namespace:libtorrent::aux
get_library_procedure	torrent/include/libtorrent/aux_/win_util.hpp	/^	Signature get_library_procedure(LPCSTR name)$/;"	f	namespace:libtorrent::aux
get_libtorrent_category	torrent/include/libtorrent/error_code.hpp	/^	inline boost::system::error_category& get_libtorrent_category()$/;"	f	namespace:libtorrent
get_links	torrent/include/libtorrent/resolve_links.hpp	/^		aux::vector<link_t, file_index_t> const& get_links() const$/;"	f	class:libtorrent::resolve_links::aux
get_listen_port	torrent/src/session_impl.cpp	/^	int session_impl::get_listen_port(transport const ssl, aux::listen_socket_handle const& s)$/;"	f	class:libtorrent::aux::session_impl
get_local_endpoint	torrent/src/listen_socket_handle.cpp	/^	tcp::endpoint listen_socket_handle::get_local_endpoint() const$/;"	f	class:libtorrent::aux::listen_socket_handle
get_local_key	torrent/include/libtorrent/pe_crypto.hpp	/^		key_t const& get_local_key() const { return m_dh_local_key; }$/;"	f	class:libtorrent::dh_key_exchange
get_local_port	virt-p2v/src/nbd.c	/^get_local_port (void)$/;"	f	file:
get_lscpu	virt-p2v/src/cpuid.c	/^get_lscpu (void)$/;"	f	file:
get_mapping	torrent/src/natpmp.cpp	/^bool natpmp::get_mapping(port_mapping_t const index, int& local_port$/;"	f	class:libtorrent::natpmp
get_mapping	torrent/src/upnp.cpp	/^bool upnp::get_mapping(port_mapping_t const index$/;"	f	class:libtorrent::upnp
get_max_diff_qcow2	src/qcow2.c	/^int get_max_diff_qcow2(char *name)$/;"	f
get_memory_from_conv_dlg	virt-p2v/src/gui.c	/^get_memory_from_conv_dlg (void)$/;"	f	file:
get_metadata_size	torrent/src/ut_metadata.cpp	/^		int get_metadata_size() const$/;"	f	struct:libtorrent::__anon72::final
get_minor_max_diff_qcow2	src/qcow2.c	/^int get_minor_max_diff_qcow2(char *name, uint32_t diff)$/;"	f
get_mutable_callback	torrent/src/session_impl.cpp	/^	void session_impl::get_mutable_callback(dht::item const& i$/;"	f	class:libtorrent::aux::session_impl
get_mutable_item_callback	torrent/kademlia/dht_tracker.cpp	/^	void get_mutable_item_callback(item const& it, bool authoritative$/;"	f	namespace:libtorrent::dht::__anon151
get_mutable_item_ctx	torrent/kademlia/dht_tracker.cpp	/^		explicit get_mutable_item_ctx(int traversals) : active_traversals(traversals) {}$/;"	f	struct:libtorrent::dht::__anon151::get_mutable_item_ctx
get_mutable_item_ctx	torrent/kademlia/dht_tracker.cpp	/^	struct get_mutable_item_ctx$/;"	s	namespace:libtorrent::dht::__anon151	file:
get_nbd_error	virt-p2v/src/nbd.c	/^get_nbd_error (void)$/;"	f
get_netcard_info	src/tools.c	/^int get_netcard_info(struct netcard_param **card)$/;"	f
get_netcard_state	src/tools.c	/^int get_netcard_state()$/;"	f
get_node	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	node& get_node() const { return m_node; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
get_node	torrent/kademlia/dht_tracker.cpp	/^	node* dht_tracker::get_node(node_id const& id, std::string const& family_name)$/;"	f	class:libtorrent::dht::dht_tracker
get_observer	torrent/kademlia/rpc_manager.cpp	/^dht_observer* observer::get_observer() const$/;"	f	class:libtorrent::dht::observer
get_option	torrent/include/libtorrent/aux_/socket_type.hpp	/^		error_code get_option(GettableSocketOption& opt, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
get_option	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void get_option(GettableSocketOption& opt)$/;"	f	struct:libtorrent::aux::socket_type
get_option	torrent/include/libtorrent/proxy_base.hpp	/^	error_code get_option(GettableSocketOption& opt, error_code& ec)$/;"	f	class:libtorrent::proxy_base
get_option	torrent/include/libtorrent/proxy_base.hpp	/^	void get_option(GettableSocketOption& opt)$/;"	f	class:libtorrent::proxy_base
get_option	torrent/include/libtorrent/ssl_stream.hpp	/^	error_code get_option(GettableSocketOption& opt, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
get_option	torrent/include/libtorrent/ssl_stream.hpp	/^	void get_option(GettableSocketOption& opt)$/;"	f	class:libtorrent::ssl_stream
get_option	torrent/include/libtorrent/udp_socket.hpp	/^		void get_option(SocketOption const& opt, error_code& ec)$/;"	f	class:libtorrent::udp_socket
get_option	torrent/include/libtorrent/udp_socket.hpp	/^		void get_option(SocketOption& opt, error_code& ec)$/;"	f	class:libtorrent::udp_socket
get_option	torrent/include/libtorrent/utp_stream.hpp	/^	error_code get_option(GettableSocketOption&, error_code& ec)$/;"	f	struct:libtorrent::utp_stream
get_option	torrent/include/libtorrent/utp_stream.hpp	/^	void get_option(GettableSocketOption&) {}$/;"	f	struct:libtorrent::utp_stream
get_or_add_path	torrent/src/file_storage.cpp	/^	int file_storage::get_or_add_path(string_view const path)$/;"	f	class:libtorrent::file_storage
get_pe_settings	torrent/src/session_handle.cpp	/^	pe_settings session_handle::get_pe_settings() const$/;"	f	class:libtorrent::session_handle
get_peer_class	torrent/src/session_handle.cpp	/^	peer_class_info session_handle::get_peer_class(peer_class_t cid) const$/;"	f	class:libtorrent::session_handle
get_peer_class	torrent/src/session_impl.cpp	/^	peer_class_info session_impl::get_peer_class(peer_class_t const cid) const$/;"	f	class:libtorrent::aux::session_impl
get_peer_class_filter	torrent/src/session_handle.cpp	/^	ip_filter session_handle::get_peer_class_filter() const$/;"	f	class:libtorrent::session_handle
get_peer_class_filter	torrent/src/session_impl.cpp	/^	ip_filter const& session_impl::get_peer_class_filter() const$/;"	f	class:libtorrent::aux::session_impl
get_peer_class_type_filter	torrent/src/session_handle.cpp	/^	peer_class_type_filter session_handle::get_peer_class_type_filter() const$/;"	f	class:libtorrent::session_handle
get_peer_class_type_filter	torrent/src/session_impl.cpp	/^	peer_class_type_filter session_impl::get_peer_class_type_filter()$/;"	f	class:libtorrent::aux::session_impl
get_peer_download_limit	torrent/src/torrent_handle.cpp	/^	int torrent_handle::get_peer_download_limit(tcp::endpoint) const { return -1; }$/;"	f	class:libtorrent::torrent_handle
get_peer_info	torrent/src/peer_connection.cpp	/^	void peer_connection::get_peer_info(peer_info& p) const$/;"	f	class:libtorrent::peer_connection
get_peer_info	torrent/src/peer_connection_handle.cpp	/^void peer_connection_handle::get_peer_info(peer_info& p) const$/;"	f	class:libtorrent::peer_connection_handle
get_peer_info	torrent/src/torrent.cpp	/^	void torrent::get_peer_info(std::vector<peer_info>* v)$/;"	f	class:libtorrent::torrent
get_peer_info	torrent/src/torrent_handle.cpp	/^	void torrent_handle::get_peer_info(std::vector<peer_info>& v) const$/;"	f	class:libtorrent::torrent_handle
get_peer_list_state	torrent/src/torrent.cpp	/^	torrent_state torrent::get_peer_list_state()$/;"	f	class:libtorrent::torrent
get_peer_name	torrent/src/web_peer_connection.cpp	/^	std::string get_peer_name(http_parser const& p, std::string const& host)$/;"	f	namespace:libtorrent::__anon130
get_peer_upload_limit	torrent/src/torrent_handle.cpp	/^	int torrent_handle::get_peer_upload_limit(tcp::endpoint) const { return -1; }$/;"	f	class:libtorrent::torrent_handle
get_peers	torrent/include/libtorrent/kademlia/get_peers.hpp	/^struct get_peers : find_data$/;"	s	namespace:libtorrent::dht
get_peers	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::get_peers(sha1_hash const& ih$/;"	f	class:libtorrent::dht::dht_tracker
get_peers	torrent/kademlia/get_peers.cpp	/^get_peers::get_peers($/;"	f	class:libtorrent::dht::get_peers
get_peers	torrent/kademlia/node.cpp	/^void node::get_peers(sha1_hash const& info_hash$/;"	f	class:libtorrent::dht::node
get_peers	torrent/src/session_impl.cpp	/^	void session_impl::get_peers(sha1_hash const& ih)$/;"	f	class:libtorrent::aux::session_impl
get_peers_observer	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	get_peers_observer($/;"	f	struct:libtorrent::dht::get_peers_observer
get_peers_observer	torrent/include/libtorrent/kademlia/get_peers.hpp	/^struct get_peers_observer : find_data_observer$/;"	s	namespace:libtorrent::dht
get_piece	torrent/bak/print.cpp	/^int get_piece(lt::bitfield const& p, int index)$/;"	f
get_piece	torrent/include/libtorrent/block_cache.hpp	/^		piece_index_t get_piece() const { return piece; }$/;"	f	struct:libtorrent::cached_piece_entry
get_piece_priorities	torrent/src/torrent_handle.cpp	/^	std::vector<download_priority_t> torrent_handle::get_piece_priorities() const$/;"	f	class:libtorrent::torrent_handle
get_piece_to_super_seed	torrent/src/torrent.cpp	/^	piece_index_t torrent::get_piece_to_super_seed(typed_bitfield<piece_index_t> const& bits)$/;"	f	class:libtorrent::torrent
get_pieces	torrent/include/libtorrent/aux_/suggest_piece.hpp	/^	int get_pieces(std::vector<piece_index_t>& p$/;"	f	struct:libtorrent::aux::suggest_piece
get_pointers	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		void get_pointers(std::vector<T*>& out)$/;"	f	struct:libtorrent::heterogeneous_queue
get_port_filter	torrent/src/session_impl.cpp	/^	port_filter const& session_impl::get_port_filter() const$/;"	f	class:libtorrent::aux::session_impl
get_priority	torrent/src/peer_connection.cpp	/^	int peer_connection::get_priority(int const channel) const$/;"	f	class:libtorrent::peer_connection
get_provider	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		HCRYPTPROV get_provider()$/;"	f	struct:libtorrent::aux::crypt_hash
get_proxy_settings	torrent/include/libtorrent/udp_socket.hpp	/^		aux::proxy_settings const& get_proxy_settings() { return m_proxy_settings; }$/;"	f	class:libtorrent::udp_socket::aux
get_ptr	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		std::weak_ptr<listen_socket_t> get_ptr() const { return m_sock; }$/;"	f	struct:libtorrent::aux::listen_socket_handle
get_range	torrent/src/web_peer_connection.cpp	/^	std::tuple<std::int64_t, std::int64_t> get_range($/;"	f	namespace:libtorrent::__anon130
get_response_data	virt-p2v/include/gui-gtk2-compat.h	/^get_response_data (GtkWidget *widget, gboolean create)$/;"	f
get_rtc_config	virt-p2v/src/rtc.c	/^get_rtc_config (struct rtc_config *rtc)$/;"	f
get_secret	torrent/include/libtorrent/pe_crypto.hpp	/^		key_t const& get_secret() const { return m_dh_shared_secret; }$/;"	f	class:libtorrent::dh_key_exchange
get_send_barrier	torrent/include/libtorrent/peer_connection.hpp	/^		int get_send_barrier() const { return m_send_barrier; }$/;"	f	class:libtorrent::peer_connection
get_settings	torrent/src/session_handle.cpp	/^	settings_pack session_handle::get_settings() const$/;"	f	class:libtorrent::session_handle
get_settings	torrent/src/session_impl.cpp	/^	settings_pack session_impl::get_settings() const$/;"	f	class:libtorrent::aux::session_impl
get_size	torrent/src/file.cpp	/^	std::int64_t file::get_size(error_code& ec) const$/;"	f	class:libtorrent::file
get_socket	torrent/include/libtorrent/peer_connection.hpp	/^		std::shared_ptr<aux::socket_type> get_socket() const { return m_socket; }$/;"	f	class:libtorrent::peer_connection
get_socket_name	torrent/include/libtorrent/alert_types.hpp	/^			get_socket_name TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
get_socks_category	torrent/include/libtorrent/socks5_stream.hpp	/^inline boost::system::error_category& get_socks_category()$/;"	f	namespace:libtorrent
get_specific_peer_info	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::get_specific_peer_info(peer_info& p) const$/;"	f	class:libtorrent::bt_peer_connection
get_specific_peer_info	torrent/src/http_seed_connection.cpp	/^	void http_seed_connection::get_specific_peer_info(peer_info& p) const$/;"	f	class:libtorrent::http_seed_connection
get_specific_peer_info	torrent/src/web_connection_base.cpp	/^	void web_connection_base::get_specific_peer_info(peer_info& p) const$/;"	f	class:libtorrent::web_connection_base
get_specific_peer_info	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::get_specific_peer_info(peer_info& p) const$/;"	f	class:libtorrent::web_peer_connection
get_ssh_error	virt-p2v/src/ssh.c	/^get_ssh_error (void)$/;"	f
get_stats	torrent/src/block_cache.cpp	/^void block_cache::get_stats(cache_status* ret) const$/;"	f	class:libtorrent::block_cache
get_stats_counters	torrent/kademlia/node.cpp	/^std::tuple<int, int, int> node::get_stats_counters() const$/;"	f	class:libtorrent::dht::node
get_status	torrent/src/disk_io_thread.cpp	/^	std::vector<open_file_state> disk_io_thread::get_status(storage_index_t const st) const$/;"	f	class:disk_io_thread
get_status	torrent/src/file_pool.cpp	/^	std::vector<open_file_state> file_pool::get_status(storage_index_t const st) const$/;"	f	class:libtorrent::file_pool
get_storage	torrent/include/libtorrent/block_cache.hpp	/^		void* get_storage() const { return storage.get(); }$/;"	f	struct:libtorrent::cached_piece_entry
get_storage_impl	torrent/src/torrent.cpp	/^	storage_interface* torrent::get_storage_impl() const$/;"	f	class:libtorrent::torrent
get_storage_impl	torrent/src/torrent_handle.cpp	/^	storage_interface* torrent_handle::get_storage_impl() const$/;"	f	class:libtorrent::torrent_handle
get_str	torrent/include/libtorrent/aux_/session_settings.hpp	/^		std::string const& get_str(int name) const$/;"	f	class:libtorrent::aux::session_settings::std
get_str	torrent/include/libtorrent/aux_/session_settings.hpp	/^		std::string const& get_str(int name) const$/;"	f	class:libtorrent::aux::session_settings_single_thread::std
get_str	torrent/src/settings_pack.cpp	/^	std::string const& settings_pack::get_str(int name) const$/;"	f	class:libtorrent::std::settings_pack
get_suggest_pieces	torrent/include/libtorrent/torrent.hpp	/^		int get_suggest_pieces(std::vector<piece_index_t>& p$/;"	f	class:libtorrent::torrent
get_symlink_path	torrent/src/create_torrent.cpp	/^	std::string get_symlink_path(std::string const& p)$/;"	f	namespace:libtorrent::aux
get_symlink_path_impl	torrent/src/create_torrent.cpp	/^	std::string get_symlink_path_impl(char const* path)$/;"	f	namespace:libtorrent::__anon134
get_topology	virt-p2v/src/cpuid.c	/^get_topology (char **lscpu, struct cpu_config *cpu)$/;"	f	file:
get_torrent	torrent/src/disk_io_thread.cpp	/^	storage_interface* disk_io_thread::get_torrent(storage_index_t const storage)$/;"	f	class:disk_io_thread
get_torrent_copy	torrent/src/torrent.cpp	/^	std::shared_ptr<const torrent_info> torrent::get_torrent_copy()$/;"	f	class:libtorrent::torrent
get_torrent_info	torrent/src/torrent_handle.cpp	/^	torrent_info const& torrent_handle::get_torrent_info() const$/;"	f	class:libtorrent::torrent_handle
get_torrent_status	torrent/src/session_handle.cpp	/^	std::vector<torrent_status> session_handle::get_torrent_status($/;"	f	class:libtorrent::session_handle
get_torrent_status	torrent/src/session_handle.cpp	/^	void session_handle::get_torrent_status(std::vector<torrent_status>* ret$/;"	f	class:libtorrent::session_handle
get_torrent_status	torrent/src/session_impl.cpp	/^	void session_impl::get_torrent_status(std::vector<torrent_status>* ret$/;"	f	class:libtorrent::aux::session_impl
get_torrents	torrent/src/session_handle.cpp	/^	std::vector<torrent_handle> session_handle::get_torrents() const$/;"	f	class:libtorrent::session_handle
get_torrents	torrent/src/session_impl.cpp	/^	std::vector<torrent_handle> session_impl::get_torrents() const$/;"	f	class:libtorrent::aux::session_impl
get_type	torrent/include/libtorrent/utp_stream.hpp	/^	int get_type() const { return type_ver >> 4; }$/;"	f	struct:libtorrent::utp_header
get_unchoke_priority	torrent/include/libtorrent/extensions.hpp	/^		virtual uint64_t get_unchoke_priority(peer_connection_handle const& \/* peer *\/)$/;"	f	struct:libtorrent::plugin
get_upnp_category	torrent/include/libtorrent/upnp.hpp	/^	inline boost::system::error_category& get_upnp_category()$/;"	f	namespace:libtorrent
get_usb_info	src/tools.c	/^void get_usb_info(int usb_number)$/;"	f
get_ut_pex_msg	torrent/src/ut_pex.cpp	/^		std::vector<char>& get_ut_pex_msg()$/;"	f	struct:libtorrent::__anon35::final
get_vcpus_from_conv_dlg	virt-p2v/src/gui.c	/^get_vcpus_from_conv_dlg (void)$/;"	f	file:
get_vendor	virt-p2v/src/cpuid.c	/^get_vendor (char **lscpu, struct cpu_config *cpu)$/;"	f	file:
get_version	torrent/include/libtorrent/utp_stream.hpp	/^	int get_version() const { return type_ver & 0xf; }$/;"	f	struct:libtorrent::utp_header
getbuffer	torrent/bak/udp_tracker.cpp	/^	const char * getbuffer(){return buffer;}$/;"	f	class:CDataStream
getc	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (getc);$/;"	v
getchar	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (getchar);$/;"	v
getcurrentpos	torrent/bak/udp_tracker.cpp	/^	char * getcurrentpos()$/;"	f	class:CDataStream
getcwd	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (getcwd);$/;"	v
getcwd	virt-p2v/include/gnulib/unistd.h	1168;"	d
getcwd_	torrent/bak/make_torrent.cpp	263;"	d	file:
getcwd_	torrent/bak/make_torrent.cpp	275;"	d	file:
getdelim	virt-p2v/include/gnulib/stdio.h	1211;"	d
getdomainname	virt-p2v/include/gnulib/unistd.h	1204;"	d
getdtablesize	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (getdtablesize);$/;"	v
getdtablesize	virt-p2v/include/gnulib/unistd.h	1232;"	d
getgroups	virt-p2v/include/gnulib/unistd.h	1261;"	d
gethostname	virt-p2v/include/gnulib/unistd.h	1297;"	d
gethostname	virt-p2v/include/gnulib/unistd.h	1298;"	d
gethostname	virt-p2v/include/gnulib/unistd.h	1300;"	d
getline	virt-p2v/include/gnulib/stdio.h	1248;"	d
getloadavg	virt-p2v/include/gnulib/stdlib.h	740;"	d
getlogin	virt-p2v/include/gnulib/unistd.h	1325;"	d
getlogin_r	virt-p2v/include/gnulib/unistd.h	1366;"	d
getname	torrent/include/libtorrent/operations.hpp	/^		getname,$/;"	m	class:libtorrent::operation_t
getpagesize	virt-p2v/include/gnulib/unistd.h	1453;"	d
getpass	virt-p2v/include/gnulib/unistd.h	1483;"	d
getpeername	torrent/include/libtorrent/operations.hpp	/^		getpeername,$/;"	m	class:libtorrent::operation_t
gets	virt-p2v/include/gnulib/stdio.h	1258;"	d
getsubopt	virt-p2v/include/gnulib/stdlib.h	768;"	d
getusershell	virt-p2v/include/gnulib/unistd.h	1500;"	d
ghost_hit_lru1	torrent/include/libtorrent/block_cache.hpp	/^			ghost_hit_lru1,$/;"	e	enum:libtorrent::block_cache::cache_op_t
ghost_hit_lru2	torrent/include/libtorrent/block_cache.hpp	/^			ghost_hit_lru2$/;"	e	enum:libtorrent::block_cache::cache_op_t
gl_int16_t	virt-p2v/include/gnulib/stdint.h	/^typedef short int gl_int16_t;$/;"	t
gl_int32_t	virt-p2v/include/gnulib/stdint.h	/^typedef int gl_int32_t;$/;"	t
gl_int64_t	virt-p2v/include/gnulib/stdint.h	/^typedef __int64 gl_int64_t;$/;"	t
gl_int64_t	virt-p2v/include/gnulib/stdint.h	/^typedef long int gl_int64_t;$/;"	t
gl_int64_t	virt-p2v/include/gnulib/stdint.h	/^typedef long long int gl_int64_t;$/;"	t
gl_int8_t	virt-p2v/include/gnulib/stdint.h	/^typedef signed char gl_int8_t;$/;"	t
gl_int_fast16_t	virt-p2v/include/gnulib/stdint.h	/^typedef gl_int_fast32_t gl_int_fast16_t;$/;"	t
gl_int_fast32_t	virt-p2v/include/gnulib/stdint.h	/^typedef int gl_int_fast32_t;$/;"	t
gl_int_fast32_t	virt-p2v/include/gnulib/stdint.h	/^typedef long int gl_int_fast32_t;$/;"	t
gl_int_fast8_t	virt-p2v/include/gnulib/stdint.h	/^typedef signed char gl_int_fast8_t;$/;"	t
gl_intmax_t	virt-p2v/include/gnulib/stdint.h	/^typedef long int gl_intmax_t;$/;"	t
gl_intmax_t	virt-p2v/include/gnulib/stdint.h	/^typedef long long int gl_intmax_t;$/;"	t
gl_intptr_t	virt-p2v/include/gnulib/stdint.h	/^typedef long int gl_intptr_t;$/;"	t
gl_intptr_t	virt-p2v/include/gnulib/stdint.h	/^typedef long long int gl_intptr_t;$/;"	t
gl_msvc_inval_per_thread	virt-p2v/include/gnulib/msvc-inval.h	/^struct gl_msvc_inval_per_thread$/;"	s
gl_uint16_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned short int gl_uint16_t;$/;"	t
gl_uint32_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned int gl_uint32_t;$/;"	t
gl_uint64_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned __int64 gl_uint64_t;$/;"	t
gl_uint64_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned long int gl_uint64_t;$/;"	t
gl_uint64_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned long long int gl_uint64_t;$/;"	t
gl_uint8_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned char gl_uint8_t;$/;"	t
gl_uint_fast16_t	virt-p2v/include/gnulib/stdint.h	/^typedef gl_uint_fast32_t gl_uint_fast16_t;$/;"	t
gl_uint_fast32_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned int gl_uint_fast32_t;$/;"	t
gl_uint_fast32_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned long int gl_uint_fast32_t;$/;"	t
gl_uint_fast8_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned char gl_uint_fast8_t;$/;"	t
gl_uintmax_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned long int gl_uintmax_t;$/;"	t
gl_uintmax_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned long long int gl_uintmax_t;$/;"	t
gl_uintptr_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned long int gl_uintptr_t;$/;"	t
gl_uintptr_t	virt-p2v/include/gnulib/stdint.h	/^typedef unsigned long long int gl_uintptr_t;$/;"	t
global_mapping_t	torrent/include/libtorrent/upnp.hpp	/^	struct global_mapping_t$/;"	s	struct:libtorrent::final
global_peer_class_id	torrent/src/session_handle.cpp	/^	constexpr peer_class_t session_handle::global_peer_class_id;$/;"	m	class:libtorrent::session_handle	file:
glwthread_carray_waitqueue_t	virt-p2v/include/gnulib/windows-rwlock.h	/^        glwthread_carray_waitqueue_t;$/;"	t	typeref:struct:__anon163
glwthread_initguard_t	virt-p2v/include/gnulib/windows-initguard.h	/^        glwthread_initguard_t;$/;"	t	typeref:struct:__anon159
glwthread_mutex_t	virt-p2v/include/gnulib/windows-mutex.h	/^        glwthread_mutex_t;$/;"	t	typeref:struct:__anon161
glwthread_once_t	virt-p2v/include/gnulib/windows-once.h	/^        glwthread_once_t;$/;"	t	typeref:struct:__anon157
glwthread_recmutex_t	virt-p2v/include/gnulib/windows-recmutex.h	/^        glwthread_recmutex_t;$/;"	t	typeref:struct:__anon158
glwthread_rwlock_t	virt-p2v/include/gnulib/windows-rwlock.h	/^        glwthread_rwlock_t;$/;"	t	typeref:struct:__anon164
glwthread_tls_key_t	virt-p2v/include/gnulib/windows-tls.h	/^typedef DWORD glwthread_tls_key_t;$/;"	t
good	torrent/include/libtorrent/pe_crypto.hpp	/^		bool good() const { return true; }$/;"	f	class:libtorrent::dh_key_exchange
got_data	torrent/kademlia/get_item.cpp	/^void get_item::got_data(bdecode_node const& v,$/;"	f	class:libtorrent::dht::get_item
got_peers	torrent/kademlia/get_peers.cpp	/^void get_peers::got_peers(std::vector<tcp::endpoint> const& peers)$/;"	f	class:libtorrent::dht::get_peers
got_samples	torrent/kademlia/sample_infohashes.cpp	/^void sample_infohashes::got_samples(time_duration interval$/;"	f	class:libtorrent::dht::sample_infohashes
got_write_token	torrent/kademlia/find_data.cpp	/^void find_data::got_write_token(node_id const& n, std::string write_token)$/;"	f	class:libtorrent::dht::find_data
gplv2plus	virt-p2v/src/gui.c	/^static const char gplv2plus[] =$/;"	v	file:
gpt_dummy_type	src/gpt.c	/^GPT_PARTTYPE    gpt_dummy_type =$/;"	v
gpt_entry	include/gpt.h	/^    GPT_ENTRY    gpt_entry;$/;"	m	struct:__anon9
gpt_part_count	include/gpt.h	/^    uint32_t             gpt_part_count;$/;"	m	struct:_DiskDriver
gpt_parts	include/gpt.h	/^    PARTITION_INFO gpt_parts[18]; \/\/128 ä¸éè¦è¿ä¹å¤$/;"	m	struct:_DiskDriver
gpt_parttype	include/gpt.h	/^    GPT_PARTTYPE *gpt_parttype;$/;"	m	struct:__anon9
gpt_parttype	src/gpt.c	/^GPT_PARTTYPE * gpt_parttype(uint8_t *type_guid)$/;"	f
gpt_types	src/gpt.c	/^GPT_PARTTYPE    gpt_types[] = {$/;"	v
graceful_pause	torrent/include/libtorrent/torrent.hpp	/^		bool graceful_pause() const { return m_graceful_pause_mode; }$/;"	f	class:libtorrent::torrent
graceful_pause	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr pause_flags_t graceful_pause = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
graceful_pause	torrent/src/torrent_handle.cpp	/^	constexpr pause_flags_t torrent_handle::graceful_pause;$/;"	m	class:libtorrent::torrent_handle	file:
grantpt	virt-p2v/include/gnulib/stdlib.h	784;"	d
group_btn	qt_pro/configwindow.h	/^    QButtonGroup *group_btn;$/;"	m	class:ConfigWindow
group_btn	qt_pro/dialogwindow.h	/^    QButtonGroup *group_btn;$/;"	m	class:DialogWindow
group_member	virt-p2v/include/gnulib/unistd.h	1547;"	d
grow	torrent/src/receive_buffer.cpp	/^void receive_buffer::grow(int const limit)$/;"	f	class:libtorrent::receive_buffer
grow_capacity	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		void grow_capacity(int const size)$/;"	f	struct:libtorrent::heterogeneous_queue
growth_factor	virt-p2v/include/gnulib/hash.h	/^    float growth_factor;        \/* ratio of new bigger size to original size *\/$/;"	m	struct:hash_tuning
growth_threshold	virt-p2v/include/gnulib/hash.h	/^    float growth_threshold;     \/* ratio of used buckets to trigger a growth *\/$/;"	m	struct:hash_tuning
gtk_cell_renderer_set_alignment	virt-p2v/include/gui-gtk2-compat.h	/^gtk_cell_renderer_set_alignment (GtkCellRenderer *cell,$/;"	f
gtk_combo_box_text_append_text	virt-p2v/include/gui-gtk2-compat.h	22;"	d
gtk_combo_box_text_get_active_text	virt-p2v/include/gui-gtk2-compat.h	24;"	d
gtk_combo_box_text_new	virt-p2v/include/gui-gtk2-compat.h	21;"	d
gtk_dialog_get_content_area	virt-p2v/include/gui-gtk2-compat.h	33;"	d
gtk_dialog_get_widget_for_response	virt-p2v/include/gui-gtk2-compat.h	/^gtk_dialog_get_widget_for_response (GtkDialog *dialog, gint response_id)$/;"	f
gtk_image_new_from_stock	virt-p2v/include/gui-gtk3-compat.h	104;"	d
gtk_widget_set_tooltip_markup	virt-p2v/include/gui-gtk2-compat.h	29;"	d
guard	virt-p2v/include/gnulib/windows-mutex.h	/^          glwthread_initguard_t guard; \/* protects the initialization *\/$/;"	m	struct:__anon161
guard	virt-p2v/include/gnulib/windows-recmutex.h	/^          glwthread_initguard_t guard; \/* protects the initialization *\/$/;"	m	struct:__anon158
guard	virt-p2v/include/gnulib/windows-rwlock.h	/^          glwthread_initguard_t guard; \/* protects the initialization *\/$/;"	m	struct:__anon164
guestfs_int_cleanup_fclose	virt-p2v/libguestfs/cleanups.c	/^guestfs_int_cleanup_fclose (void *ptr)$/;"	f
guestfs_int_cleanup_free	virt-p2v/libguestfs/cleanups.c	/^guestfs_int_cleanup_free (void *ptr)$/;"	f
guestfs_int_cleanup_free_string_list	virt-p2v/libguestfs/cleanups.c	/^guestfs_int_cleanup_free_string_list (char ***ptr)$/;"	f
guestfs_int_cleanup_pclose	virt-p2v/libguestfs/cleanups.c	/^guestfs_int_cleanup_pclose (void *ptr)$/;"	f
guestfs_int_cleanup_xmlBufferFree	virt-p2v/libguestfs/libxml2-cleanups.c	/^guestfs_int_cleanup_xmlBufferFree (void *ptr)$/;"	f
guestfs_int_cleanup_xmlFree	virt-p2v/libguestfs/libxml2-cleanups.c	/^guestfs_int_cleanup_xmlFree (void *ptr)$/;"	f
guestfs_int_cleanup_xmlFreeDoc	virt-p2v/libguestfs/libxml2-cleanups.c	/^guestfs_int_cleanup_xmlFreeDoc (void *ptr)$/;"	f
guestfs_int_cleanup_xmlFreeTextWriter	virt-p2v/libguestfs/libxml2-cleanups.c	/^guestfs_int_cleanup_xmlFreeTextWriter (void *ptr)$/;"	f
guestfs_int_cleanup_xmlFreeURI	virt-p2v/libguestfs/libxml2-cleanups.c	/^guestfs_int_cleanup_xmlFreeURI (void *ptr)$/;"	f
guestfs_int_cleanup_xmlXPathFreeContext	virt-p2v/libguestfs/libxml2-cleanups.c	/^guestfs_int_cleanup_xmlXPathFreeContext (void *ptr)$/;"	f
guestfs_int_cleanup_xmlXPathFreeObject	virt-p2v/libguestfs/libxml2-cleanups.c	/^guestfs_int_cleanup_xmlXPathFreeObject (void *ptr)$/;"	f
guestfs_int_copy_string_list	virt-p2v/libguestfs/guestfs-utils.c	/^guestfs_int_copy_string_list (char *const *argv)$/;"	f
guestfs_int_count_strings	virt-p2v/libguestfs/guestfs-utils.c	/^guestfs_int_count_strings (char *const *argv)$/;"	f
guestfs_int_drive_name	virt-p2v/libguestfs/guestfs-utils.c	/^guestfs_int_drive_name (size_t index, char *ret)$/;"	f
guestfs_int_free_string_list	virt-p2v/libguestfs/guestfs-utils.c	/^guestfs_int_free_string_list (char **argv)$/;"	f
guestfs_int_is_true	virt-p2v/libguestfs/guestfs-utils.c	/^guestfs_int_is_true (const char *str)$/;"	f
guestfs_int_random_string	virt-p2v/libguestfs/guestfs-utils.c	/^guestfs_int_random_string (char *ret, size_t len)$/;"	f
guestfs_int_split_string	virt-p2v/libguestfs/guestfs-utils.c	/^guestfs_int_split_string (char sep, const char *str)$/;"	f
guestname	virt-p2v/include/p2v-config.h	/^  char *guestname;$/;"	m	struct:config
guestname_entry	virt-p2v/src/gui.c	/^  *guestname_entry, *vcpus_entry, *memory_entry,$/;"	v	file:
gui_conversion	virt-p2v/src/gui.c	/^gui_conversion (struct config *config)$/;"	f
guid	include/gpt.h	/^    uint8_t   guid[16];$/;"	m	struct:__anon8
guided_read_cache	torrent/include/libtorrent/settings_pack.hpp	/^			guided_read_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
guids_are_equal	include/gpt.h	21;"	d
gzip_category	torrent/src/gzip.cpp	/^	boost::system::error_category& gzip_category()$/;"	f	namespace:libtorrent
gzip_errors	torrent/include/libtorrent/gzip.hpp	/^	namespace gzip_errors$/;"	n	namespace:libtorrent
gzip_errors	torrent/src/gzip.cpp	/^	namespace gzip_errors$/;"	n	namespace:libtorrent	file:
gzip_header	torrent/src/gzip.cpp	/^	int gzip_header(span<char const> const in)$/;"	f	namespace:libtorrent::__anon97
h	torrent/include/libtorrent/block_cache.hpp	/^		hasher h;$/;"	m	struct:libtorrent::partial_hash
h	torrent/src/socket_type.cpp	/^		std::shared_ptr<void> h;$/;"	m	struct:libtorrent::aux::socket_closer	file:
h	virt-p2v/include/p2v.h	/^  mexp_h *h;                \/* miniexpect handle to ssh *\/$/;"	m	struct:data_conn
halfBase	torrent/src/ConvertUTF.cpp	/^static const UTF32 halfBase = 0x0010000UL;$/;"	v	file:
halfMask	torrent/src/ConvertUTF.cpp	/^static const UTF32 halfMask = 0x3FFUL;$/;"	v	file:
halfShift	torrent/src/ConvertUTF.cpp	/^static const int halfShift  = 10; \/* used for shifting by 10 bits *\/$/;"	v	file:
half_open_limit	torrent/include/libtorrent/settings_pack.hpp	/^			half_open_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
handle	torrent/include/libtorrent/alert_types.hpp	/^		torrent_handle handle;$/;"	m	struct:libtorrent::torrent_alert
handle	torrent/include/libtorrent/torrent_status.hpp	/^		torrent_handle handle;$/;"	m	struct:libtorrent::torrent_status
handle_alert	torrent/bak/client_test.cpp	/^bool handle_alert(torrent_view& view, session_view& ses_view$/;"	f
handle_alter	src/torrent.cpp	/^bool handle_alter(lt::session& ses, lt::alert* a, lt::torrent_handle &th)$/;"	f
handle_alter	torrent/src/client.cpp	/^bool handle_alter(lt::session& ses, lt::alert* a, lt::torrent_handle &th)$/;"	f
handle_backwards_compatible_resume_data	torrent/src/session_handle.cpp	/^	void handle_backwards_compatible_resume_data(add_torrent_params& atp)$/;"	f	namespace:libtorrent::__anon55
handle_disk_error	torrent/src/torrent.cpp	/^	void torrent::handle_disk_error(string_view job_name$/;"	f	class:libtorrent::torrent
handle_error	torrent/src/proxy_base.cpp	/^	bool proxy_base::handle_error(error_code const& e, handler_type const& h)$/;"	f	class:libtorrent::proxy_base
handle_error	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::handle_error(int const bytes_left)$/;"	f	class:libtorrent::web_peer_connection
handle_exception	torrent/src/torrent.cpp	/^	void torrent::handle_exception()$/;"	f	class:libtorrent::torrent
handle_padfile	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::handle_padfile()$/;"	f	class:libtorrent::web_peer_connection
handle_redirect	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::handle_redirect(int const bytes_left)$/;"	f	class:libtorrent::web_peer_connection
handler	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		Handler handler;$/;"	m	struct:libtorrent::aux::allocating_handler
handler_storage	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		handler_storage()$/;"	f	struct:libtorrent::aux::handler_storage
handler_storage	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^	struct handler_storage$/;"	s	namespace:libtorrent::aux
handler_wrapper	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^	handler_wrapper(bool& in_flight, Handler&& h)$/;"	f	struct:libtorrent::aux::handler_wrapper
handler_wrapper	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^struct handler_wrapper$/;"	s	namespace:libtorrent::aux
handshake	torrent/include/libtorrent/operations.hpp	/^		handshake,$/;"	m	class:libtorrent::operation_t
handshake	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t handshake = 6_bit;$/;"	m	struct:libtorrent::peer_info
handshake	torrent/include/libtorrent/ssl_stream.hpp	/^	void handshake(error_code const& e, std::shared_ptr<handler_type> h)$/;"	f	class:libtorrent::ssl_stream
handshake	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::handshake;$/;"	m	class:libtorrent::peer_info	file:
handshake1	torrent/src/http_stream.cpp	/^	void http_stream::handshake1(error_code const& e, handler_type& h)$/;"	f	class:libtorrent::http_stream
handshake1	torrent/src/socks5_stream.cpp	/^	void socks5_stream::handshake1(error_code const& e, handler_type h)$/;"	f	class:libtorrent::socks5_stream
handshake1	torrent/src/udp_socket.cpp	/^void socks5::handshake1(error_code const& e)$/;"	f	class:libtorrent::socks5
handshake2	torrent/src/http_stream.cpp	/^	void http_stream::handshake2(error_code const& e, handler_type& h)$/;"	f	class:libtorrent::http_stream
handshake2	torrent/src/socks5_stream.cpp	/^	void socks5_stream::handshake2(error_code const& e, handler_type h)$/;"	f	class:libtorrent::socks5_stream
handshake2	torrent/src/udp_socket.cpp	/^void socks5::handshake2(error_code const& e)$/;"	f	class:libtorrent::socks5
handshake3	torrent/src/socks5_stream.cpp	/^	void socks5_stream::handshake3(error_code const& e$/;"	f	class:libtorrent::socks5_stream
handshake3	torrent/src/udp_socket.cpp	/^void socks5::handshake3(error_code const& e)$/;"	f	class:libtorrent::socks5
handshake4	torrent/src/socks5_stream.cpp	/^	void socks5_stream::handshake4(error_code const& e$/;"	f	class:libtorrent::socks5_stream
handshake4	torrent/src/udp_socket.cpp	/^void socks5::handshake4(error_code const& e)$/;"	f	class:libtorrent::socks5
handshake_client_version	torrent/include/libtorrent/settings_pack.hpp	/^			handshake_client_version,$/;"	e	enum:libtorrent::settings_pack::string_types
handshake_len	torrent/src/bt_peer_connection.cpp	/^	constexpr std::size_t handshake_len = 68;$/;"	m	namespace:libtorrent::__anon118	file:
handshake_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			handshake_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
handshaking	torrent/bak/connection_tester.cpp	/^		handshaking,$/;"	e	enum:peer_conn::state_t	file:
hard_link	torrent/src/path.cpp	/^	void hard_link(std::string const& file, std::string const& link$/;"	f	namespace:libtorrent
hasHeightForWidth	qt_pro/QRoundProgressBar.h	/^    virtual bool hasHeightForWidth() const { return true; }$/;"	f	class:QRoundProgressBar
has_any_file	torrent/src/storage.cpp	/^	bool default_storage::has_any_file(storage_error& ec)$/;"	f	class:libtorrent::default_storage
has_any_file	torrent/src/storage_utils.cpp	/^	bool has_any_file($/;"	f	namespace:libtorrent::aux
has_bits	torrent/src/bloom_filter.cpp	/^	bool has_bits(std::uint8_t const* k, std::uint8_t const* bits, int const len)$/;"	f	namespace:libtorrent
has_block	torrent/include/libtorrent/aux_/has_block.hpp	/^		explicit has_block(piece_block const& b): block(b) {}$/;"	f	struct:libtorrent::aux::has_block
has_block	torrent/include/libtorrent/aux_/has_block.hpp	/^	struct has_block$/;"	s	namespace:libtorrent::aux
has_class	torrent/src/peer_class_set.cpp	/^	bool peer_class_set::has_class(peer_class_t c) const$/;"	f	class:libtorrent::peer_class_set
has_connection	torrent/src/peer_list.cpp	/^	bool peer_list::has_connection(const peer_connection_interface* c)$/;"	f	class:libtorrent::peer_list
has_connection	torrent/src/session_impl.cpp	/^	bool session_impl::has_connection(peer_connection* p) const$/;"	f	class:libtorrent::aux::session_impl
has_default_route	torrent/src/enum_net.cpp	/^	bool has_default_route(char const* device, int const fam, span<ip_route const> routes)$/;"	f	namespace:libtorrent
has_dht	torrent/src/session_impl.cpp	/^	bool session_impl::has_dht() const$/;"	f	class:libtorrent::aux::session_impl
has_error	torrent/include/libtorrent/torrent.hpp	/^		bool has_error() const { return !!m_error; }$/;"	f	class:libtorrent::torrent
has_fence	torrent/src/disk_job_fence.cpp	/^	bool disk_job_fence::has_fence() const$/;"	f	class:libtorrent::aux::disk_job_fence
has_incoming	torrent/include/libtorrent/torrent_status.hpp	/^		bool has_incoming = false;$/;"	m	struct:libtorrent::torrent_status
has_incoming_connections	torrent/include/libtorrent/performance_counters.hpp	/^			has_incoming_connections,$/;"	e	enum:libtorrent::counters::stats_gauge_t
has_incoming_connections	torrent/include/libtorrent/session_status.hpp	/^		bool has_incoming_connections;$/;"	m	struct:libtorrent::session_status
has_index	torrent/include/libtorrent/piece_picker.hpp	/^			explicit has_index(piece_index_t const i) : index(i)$/;"	f	struct:libtorrent::piece_picker::has_index
has_index	torrent/include/libtorrent/piece_picker.hpp	/^		struct has_index$/;"	s	class:libtorrent::piece_picker
has_lsd	torrent/src/session_impl.cpp	/^	bool session_impl::has_lsd() const$/;"	f	class:libtorrent::aux::session_impl
has_metadata	torrent/include/libtorrent/peer_connection.hpp	/^		bool has_metadata() const { return m_has_metadata; }$/;"	f	class:libtorrent::peer_connection
has_metadata	torrent/include/libtorrent/torrent_status.hpp	/^		bool has_metadata = false;$/;"	m	struct:libtorrent::torrent_status
has_metadata	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::has_metadata() const$/;"	f	class:libtorrent::peer_connection_handle
has_metadata	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::has_metadata() const$/;"	f	class:libtorrent::torrent_handle
has_metadata	torrent/src/ut_metadata.cpp	/^		bool has_metadata() const$/;"	f	struct:libtorrent::__anon72::final
has_outstanding_async	torrent/include/libtorrent/debug.hpp	/^	inline bool has_outstanding_async(char const* name)$/;"	f	namespace:libtorrent
has_parent_path	torrent/src/path.cpp	/^	bool has_parent_path(std::string const& f)$/;"	f	namespace:libtorrent
has_peer	torrent/include/libtorrent/torrent.hpp	/^		bool has_peer(peer_connection const* p) const$/;"	f	class:libtorrent::torrent
has_peer	torrent/src/peer_list.cpp	/^	bool peer_list::has_peer(torrent_peer const* p) const$/;"	f	class:libtorrent::peer_list
has_peer	torrent/src/session_impl.cpp	/^	bool session_impl::has_peer(peer_connection const* p) const$/;"	f	class:libtorrent::aux::session_impl
has_peer_choked	torrent/include/libtorrent/peer_connection.hpp	/^		bool has_peer_choked() const { return m_peer_choked; }$/;"	f	class:libtorrent::peer_connection
has_peer_choked	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::has_peer_choked() const$/;"	f	class:libtorrent::peer_connection_handle
has_picker	torrent/include/libtorrent/torrent.hpp	/^		bool has_picker() const$/;"	f	class:libtorrent::torrent
has_piece	torrent/src/peer_connection.cpp	/^	bool peer_connection::has_piece(piece_index_t const i) const$/;"	f	class:libtorrent::peer_connection
has_piece	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::has_piece(piece_index_t i) const$/;"	f	class:libtorrent::peer_connection_handle
has_piece_passed	torrent/include/libtorrent/torrent.hpp	/^		bool has_piece_passed(piece_index_t index) const$/;"	f	class:libtorrent::torrent
has_piece_passed	torrent/src/piece_picker.cpp	/^	bool piece_picker::has_piece_passed(piece_index_t const index) const$/;"	f	class:libtorrent::piece_picker
has_quota	torrent/kademlia/dht_tracker.cpp	/^	bool dht_tracker::has_quota()$/;"	f	class:libtorrent::dht::dht_tracker
has_read_head	include/client.h	/^    int has_read_head ;$/;"	m	struct:client
has_short_timeout	torrent/include/libtorrent/kademlia/observer.hpp	/^	bool has_short_timeout() const { return bool(flags & flag_short_timeout); }$/;"	f	struct:libtorrent::dht::observer
has_soft_error	torrent/src/bdecode.cpp	/^	bool bdecode_node::has_soft_error(span<char> error) const$/;"	f	class:libtorrent::bdecode_node
has_storage	torrent/include/libtorrent/torrent.hpp	/^		bool has_storage() const { return bool(m_storage); }$/;"	f	class:libtorrent::torrent
has_val	torrent/src/settings_pack.cpp	/^	bool settings_pack::has_val(int const name) const$/;"	f	class:libtorrent::settings_pack
hash	torrent/include/libtorrent/block_cache.hpp	/^		std::unique_ptr<partial_hash> hash;$/;"	m	struct:libtorrent::cached_piece_entry
hash	torrent/include/libtorrent/disk_io_job.hpp	/^		, hash$/;"	m	class:libtorrent::job_action_t
hash	torrent/include/libtorrent/sha1_hash.hpp	/^	struct hash<libtorrent::sha1_hash>$/;"	s	namespace:std
hash	torrent/include/libtorrent/torrent_handle.hpp	/^	struct hash<libtorrent::torrent_handle>$/;"	s	namespace:std
hash	torrent/include/libtorrent/torrent_status.hpp	/^	struct hash<libtorrent::torrent_status>$/;"	s	namespace:std
hash	torrent/include/libtorrent/units.hpp	/^	struct hash<libtorrent::aux::strong_typedef<UnderlyingType, Tag>> : std::hash<UnderlyingType>$/;"	s	namespace:std
hash	torrent/src/file_storage.cpp	/^	sha1_hash file_storage::hash(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
hash	torrent/src/file_storage.cpp	/^	sha1_hash file_storage::hash(internal_file_entry const& fe) const$/;"	f	class:libtorrent::file_storage
hash_address	torrent/src/socket_io.cpp	/^	sha1_hash hash_address(address const& ip)$/;"	f	namespace:libtorrent
hash_fail_piece_picks	torrent/include/libtorrent/performance_counters.hpp	/^			hash_fail_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
hash_failed_alert	torrent/src/alert.cpp	/^	hash_failed_alert::hash_failed_alert($/;"	f	class:libtorrent::hash_failed_alert
hash_for_piece	torrent/src/torrent_info.cpp	/^	sha1_hash torrent_info::hash_for_piece(piece_index_t const index) const$/;"	f	class:libtorrent::torrent_info
hash_for_piece_ptr	torrent/include/libtorrent/torrent_info.hpp	/^		char const* hash_for_piece_ptr(piece_index_t const index) const$/;"	f	class:libtorrent::torrent_info
hash_passes	torrent/include/libtorrent/block_cache.hpp	/^		int hash_passes = 0;$/;"	m	struct:libtorrent::cached_piece_entry
hash_state	torrent/src/create_torrent.cpp	/^	struct hash_state$/;"	s	namespace:libtorrent::__anon134	file:
hash_tuning	virt-p2v/include/gnulib/hash.h	/^struct hash_tuning$/;"	s
hash_value	torrent/include/libtorrent/block_cache.hpp	/^		struct hash_value$/;"	s	struct:libtorrent::block_cache
hash_value	torrent/src/torrent_handle.cpp	/^	std::size_t hash_value(torrent_handle const& th)$/;"	f	namespace:libtorrent
hasher	torrent/include/libtorrent/hasher.hpp	/^	class TORRENT_EXPORT hasher$/;"	c	namespace:libtorrent
hasher	torrent/src/hasher.cpp	/^	hasher::hasher()$/;"	f	class:libtorrent::hasher
hasher	torrent/src/hasher.cpp	/^	hasher::hasher(char const* data, int len)$/;"	f	class:libtorrent::hasher
hasher	torrent/src/hasher.cpp	/^	hasher::hasher(hasher const& h)$/;"	f	class:libtorrent::hasher
hasher	torrent/src/hasher.cpp	/^	hasher::hasher(span<char const> data)$/;"	f	class:libtorrent::hasher
hasher512	torrent/include/libtorrent/hasher512.hpp	/^	class TORRENT_EXPORT hasher512$/;"	c	namespace:libtorrent
hasher512	torrent/src/hasher512.cpp	/^	hasher512::hasher512()$/;"	f	class:libtorrent::hasher512
hasher512	torrent/src/hasher512.cpp	/^	hasher512::hasher512(hasher512 const& h)$/;"	f	class:libtorrent::hasher512
hasher512	torrent/src/hasher512.cpp	/^	hasher512::hasher512(span<char const> data)$/;"	f	class:libtorrent::hasher512
hasher_thread	torrent/bak/connection_tester.cpp	/^void hasher_thread(lt::create_torrent* t, piece_index_t const start_piece$/;"	f
hasher_thread_divisor	torrent/include/libtorrent/disk_io_thread.hpp	/^			hasher_thread_divisor = 4$/;"	e	enum:libtorrent::final::__anon24
hashfails	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint8_t hashfails;$/;"	m	struct:libtorrent::torrent_peer
hashing	torrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t hashing:1;$/;"	m	struct:libtorrent::cached_piece_entry
hashing_count	torrent/include/libtorrent/block_cache.hpp	/^		int hashing_count = 0;$/;"	m	struct:libtorrent::cached_block_entry
hashing_done	torrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t hashing_done:1;$/;"	m	struct:libtorrent::cached_piece_entry
hashing_threads	torrent/include/libtorrent/settings_pack.hpp	/^			hashing_threads TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
have	torrent/include/libtorrent/piece_picker.hpp	/^			bool have() const { return index == we_have_index; }$/;"	f	struct:libtorrent::piece_picker::piece_pos
have	torrent/include/libtorrent/piece_picker.hpp	/^			bool have;$/;"	m	struct:libtorrent::piece_picker::piece_stats_t
have	torrent/src/piece_picker.cpp	/^	piece_count piece_picker::have() const$/;"	f	class:libtorrent::piece_picker
have_files	torrent/include/libtorrent/torrent.hpp	/^		typed_bitfield<file_index_t> have_files;$/;"	m	struct:libtorrent::web_seed_t
have_peers	torrent/include/libtorrent/piece_picker.hpp	/^			std::set<const torrent_peer*> have_peers;$/;"	m	struct:libtorrent::piece_picker::piece_pos
have_piece	torrent/include/libtorrent/torrent.hpp	/^		bool have_piece(piece_index_t index) const$/;"	f	class:libtorrent::torrent
have_piece	torrent/src/piece_picker.cpp	/^	bool piece_picker::have_piece(piece_index_t const index) const$/;"	f	class:libtorrent::piece_picker
have_piece	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::have_piece(piece_index_t piece) const$/;"	f	class:libtorrent::torrent_handle
have_pieces	torrent/include/libtorrent/add_torrent_params.hpp	/^		typed_bitfield<piece_index_t> have_pieces;$/;"	m	struct:libtorrent::add_torrent_params
have_table	src/StoreConfig.c	/^int have_table = 0;$/;"	v
have_want	torrent/src/piece_picker.cpp	/^	piece_count piece_picker::have_want() const$/;"	f	class:libtorrent::piece_picker
hbox_new	virt-p2v/include/gui-gtk3-compat.h	32;"	d
hbox_new	virt-p2v/include/gui-gtk3-compat.h	45;"	d
hcenSpace	qt_pro/ui_downloadwindow.h	/^    QSpacerItem *hcenSpace;$/;"	m	class:Ui_DownloadWindow
hd	include/gpt.h	/^    void* hd;$/;"	m	struct:_DiskDriver
hd_geometry	src/linux.c	/^struct hd_geometry {$/;"	s	file:
head_buf	include/client.h	/^    unsigned char *head_buf;$/;"	m	struct:client
header	torrent/src/http_parser.cpp	/^	std::string const& http_parser::header(string_view const key) const$/;"	f	class:libtorrent::std::http_parser
header_crc32	include/gpt.h	/^    uint32_t  header_crc32;$/;"	m	struct:__anon6
header_duration	torrent/src/http_parser.cpp	/^	boost::optional<seconds32> http_parser::header_duration(string_view const key) const$/;"	f	class:libtorrent::http_parser
header_finished	torrent/include/libtorrent/http_parser.hpp	/^		bool header_finished() const { return m_state == read_body; }$/;"	f	class:libtorrent::http_parser
header_lba	include/gpt.h	/^    uint64_t  header_lba;$/;"	m	struct:__anon6
header_size	include/gpt.h	/^    uint32_t  header_size;$/;"	m	struct:__anon6
header_size	torrent/bak/torrent_view.cpp	/^const int header_size = 2;$/;"	v
header_size	torrent/include/libtorrent/packet_pool.hpp	/^		std::uint16_t header_size;$/;"	m	struct:libtorrent::packet
header_t	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		struct header_t$/;"	s	struct:libtorrent::heterogeneous_queue
headers	torrent/include/libtorrent/http_parser.hpp	/^		std::multimap<std::string, std::string> const& headers() const { return m_header; }$/;"	f	class:libtorrent::http_parser::std
heads	include/device.h	/^    int heads;$/;"	m	struct:_PedCHSGeometry
heads	src/linux.c	/^        unsigned char heads;$/;"	m	struct:hd_geometry	file:
heard_about	torrent/kademlia/routing_table.cpp	/^void routing_table::heard_about(node_id const& id, udp::endpoint const& ep)$/;"	f	class:libtorrent::dht::routing_table
height	torrent/bak/session_view.cpp	/^int session_view::height() const$/;"	f	class:session_view
height	torrent/bak/torrent_view.cpp	/^int torrent_view::height() const$/;"	f	class:torrent_view
heightForWidth	qt_pro/QRoundProgressBar.h	/^    virtual int heightForWidth(int w) const { return w; }$/;"	f	class:QRoundProgressBar
helper_getauxval	torrent/src/cpuid.cpp	/^unsigned long int helper_getauxval(unsigned long int type)$/;"	f	namespace:__anon127
heterogeneous_queue	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		heterogeneous_queue() : m_storage(nullptr, aux::free_deleter()) {}$/;"	f	struct:libtorrent::heterogeneous_queue
heterogeneous_queue	torrent/include/libtorrent/heterogeneous_queue.hpp	/^	struct heterogeneous_queue$/;"	s	namespace:libtorrent
hex_chars	torrent/src/hex.cpp	/^	char const hex_chars[] = "0123456789abcdef";$/;"	m	namespace:libtorrent::aux	file:
hex_to_int	torrent/src/hex.cpp	/^	int hex_to_int(char in)$/;"	f	namespace:libtorrent::aux
hidden_attribute	torrent/include/libtorrent/file_storage.hpp	/^		bool hidden_attribute:1;$/;"	m	struct:libtorrent::file_entry
hidden_attribute	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t hidden_attribute:1;$/;"	m	struct:libtorrent::internal_file_entry
hideAll	qt_pro/dialogwindow.cpp	/^void DialogWindow::hideAll()$/;"	f	class:DialogWindow
high_performance_seed	torrent/include/libtorrent/session.hpp	/^	inline void high_performance_seed(settings_pack& set)$/;"	f	namespace:libtorrent
high_performance_seed	torrent/src/session.cpp	/^	settings_pack high_performance_seed()$/;"	f	namespace:libtorrent
history_size	torrent/include/libtorrent/timestamp_history.hpp	/^	static constexpr int history_size = 20;$/;"	m	struct:libtorrent::timestamp_history
hit_send_barrier	torrent/include/libtorrent/peer_connection.hpp	/^		hit_send_barrier(span<span<char>> \/* iovec *\/)$/;"	f	class:libtorrent::peer_connection
hit_send_barrier	torrent/src/bt_peer_connection.cpp	/^	bt_peer_connection::hit_send_barrier($/;"	f	class:libtorrent::bt_peer_connection
hleft_space	qt_pro/ui_downloadwindow.h	/^    QSpacerItem *hleft_space;$/;"	m	class:Ui_DownloadWindow
holder	torrent/include/libtorrent/chained_buffer.hpp	/^			aux::aligned_storage<32>::type holder;$/;"	m	struct:libtorrent::chained_buffer
holepunch_msg	torrent/include/libtorrent/bt_peer_connection.hpp	/^			holepunch_msg = 4,$/;"	e	enum:libtorrent::bt_peer_connection::__anon16
holepunched	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t holepunched = 15_bit;$/;"	m	struct:libtorrent::peer_info
holepunched	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::holepunched;$/;"	m	class:libtorrent::peer_info	file:
horizontalLayout	qt_pro/ui_downloadwindow.h	/^    QHBoxLayout *horizontalLayout;$/;"	m	class:Ui_DownloadWindow
horizontalLayout_2	qt_pro/ui_downloadwindow.h	/^    QHBoxLayout *horizontalLayout_2;$/;"	m	class:Ui_DownloadWindow
horizontalLayout_3	qt_pro/ui_downloadwindow.h	/^    QHBoxLayout *horizontalLayout_3;$/;"	m	class:Ui_DownloadWindow
horizontalLayout_4	qt_pro/ui_downloadwindow.h	/^    QHBoxLayout *horizontalLayout_4;$/;"	m	class:Ui_DownloadWindow
host	include/device.h	/^    short host, did;$/;"	m	struct:_PedDevice
host	torrent/include/libtorrent/Makefile	/^host = x86_64-pc-linux-gnu$/;"	m
host_alias	torrent/include/libtorrent/Makefile	/^host_alias = $/;"	m
host_cpu	torrent/include/libtorrent/Makefile	/^host_cpu = x86_64$/;"	m
host_cpu	virt-p2v/include/config.h	1058;"	d
host_os	torrent/include/libtorrent/Makefile	/^host_os = linux-gnu$/;"	m
host_resolver	torrent/include/libtorrent/tracker_manager.hpp	/^		resolver_interface& host_resolver() { return m_host_resolver; }$/;"	f	class:libtorrent::final
host_to_network	torrent/include/libtorrent/aux_/byteswap.hpp	/^inline std::uint16_t host_to_network(std::uint16_t x)$/;"	f	namespace:libtorrent::aux
host_to_network	torrent/include/libtorrent/aux_/byteswap.hpp	/^inline std::uint32_t host_to_network(std::uint32_t x)$/;"	f	namespace:libtorrent::aux
host_triplet	torrent/include/libtorrent/Makefile	/^host_triplet = x86_64-pc-linux-gnu$/;"	m
host_vendor	torrent/include/libtorrent/Makefile	/^host_vendor = pc$/;"	m
hostname	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^		std::string hostname;$/;"	m	struct:libtorrent::aux::proxy_settings
hostname	torrent/include/libtorrent/peer.hpp	/^		std::string hostname;$/;"	m	struct:libtorrent::peer_entry
hostname	torrent/include/libtorrent/upnp.hpp	/^		std::string hostname;$/;"	m	struct:libtorrent::final::rootdevice
hostname_lookup	torrent/include/libtorrent/operations.hpp	/^		hostname_lookup,$/;"	m	class:libtorrent::operation_t
hp_error	torrent/include/libtorrent/bt_peer_connection.hpp	/^		enum class hp_error$/;"	c	class:libtorrent::bt_peer_connection::hp_message
hp_message	torrent/include/libtorrent/bt_peer_connection.hpp	/^		enum class hp_message : std::uint8_t$/;"	c	class:libtorrent::bt_peer_connection
hright_space	qt_pro/ui_downloadwindow.h	/^    QSpacerItem *hright_space;$/;"	m	class:Ui_DownloadWindow
htmldir	torrent/include/libtorrent/Makefile	/^htmldir = ${docdir}$/;"	m
http_category	torrent/src/error_code.cpp	/^	boost::system::error_category& http_category()$/;"	f	namespace:libtorrent
http_connection	torrent/include/libtorrent/http_connection.hpp	/^struct TORRENT_EXTRA_EXPORT http_connection$/;"	s	namespace:libtorrent
http_connection	torrent/src/http_connection.cpp	/^http_connection::http_connection(io_service& ios$/;"	f	class:libtorrent::http_connection
http_error	torrent/include/libtorrent/error_code.hpp	/^			http_error,$/;"	e	enum:libtorrent::errors::error_code_enum
http_errors	torrent/include/libtorrent/error_code.hpp	/^		enum http_errors$/;"	g	namespace:libtorrent::errors
http_failed_decompress	torrent/include/libtorrent/error_code.hpp	/^			http_failed_decompress,$/;"	e	enum:libtorrent::errors::error_code_enum
http_missing_location	torrent/include/libtorrent/error_code.hpp	/^			http_missing_location,$/;"	e	enum:libtorrent::errors::error_code_enum
http_parse_error	torrent/include/libtorrent/error_code.hpp	/^			http_parse_error = 150,$/;"	e	enum:libtorrent::errors::error_code_enum
http_parser	torrent/include/libtorrent/http_parser.hpp	/^	class TORRENT_EXTRA_EXPORT http_parser$/;"	c	namespace:libtorrent
http_parser	torrent/src/http_parser.cpp	/^	http_parser::http_parser(int const flags) : m_flags(flags) {}$/;"	f	class:libtorrent::http_parser
http_seed	torrent/include/libtorrent/peer_info.hpp	/^			http_seed = 2$/;"	e	enum:libtorrent::peer_info::connection_type_t
http_seed	torrent/include/libtorrent/torrent_info.hpp	/^		enum type_t { url_seed, http_seed };$/;"	e	enum:libtorrent::web_seed_entry::type_t
http_seed_connection	torrent/include/libtorrent/http_seed_connection.hpp	/^	class TORRENT_EXTRA_EXPORT http_seed_connection$/;"	c	namespace:libtorrent
http_seed_connection	torrent/src/http_seed_connection.cpp	/^	http_seed_connection::http_seed_connection(peer_connection_args const& pack$/;"	f	class:libtorrent::http_seed_connection
http_seeds	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<std::string>> http_seeds;$/;"	m	struct:libtorrent::add_torrent_params
http_seeds	torrent/src/torrent_handle.cpp	/^	std::set<std::string> torrent_handle::http_seeds() const$/;"	f	class:libtorrent::torrent_handle
http_seeds	torrent/src/torrent_info.cpp	/^	std::vector<std::string> torrent_info::http_seeds() const$/;"	f	class:libtorrent::torrent_info
http_stream	torrent/include/libtorrent/http_stream.hpp	/^	explicit http_stream(io_service& io_service)$/;"	f	class:libtorrent::http_stream
http_stream	torrent/include/libtorrent/http_stream.hpp	/^class http_stream : public proxy_base$/;"	c	namespace:libtorrent
http_tracker_connection	torrent/include/libtorrent/http_tracker_connection.hpp	/^	class TORRENT_EXTRA_EXPORT http_tracker_connection$/;"	c	namespace:libtorrent
http_tracker_connection	torrent/src/http_tracker_connection.cpp	/^	http_tracker_connection::http_tracker_connection($/;"	f	class:libtorrent::http_tracker_connection
huffman	torrent/src/puff.cpp	/^struct huffman {$/;"	s	file:
hung_up	torrent/src/udp_socket.cpp	/^void socks5::hung_up(error_code const& e)$/;"	f	class:libtorrent::socks5
hw_geom	include/device.h	/^    PedCHSGeometry hw_geom;$/;"	m	struct:_PedDevice
hwinfo	qt_pro/global.h	/^struct hwinfo$/;"	s
i2p	torrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
i2p	torrent/include/libtorrent/aux_/escape_string.hpp	/^		constexpr encode_string_flags_t i2p = lowercase | no_padding;$/;"	m	namespace:libtorrent::string
i2p	torrent/include/libtorrent/tracker_manager.hpp	/^			i2p = 2$/;"	e	enum:libtorrent::tracker_request::kind_t
i2p_alert	torrent/src/alert.cpp	/^	i2p_alert::i2p_alert(aux::stack_allocator&, error_code const& ec)$/;"	f	class:libtorrent::i2p_alert
i2p_category	torrent/src/i2p_stream.cpp	/^	boost::system::error_category& i2p_category()$/;"	f	namespace:libtorrent
i2p_connection	torrent/include/libtorrent/i2p_stream.hpp	/^class i2p_connection$/;"	c	namespace:libtorrent
i2p_connection	torrent/src/i2p_stream.cpp	/^	i2p_connection::i2p_connection(io_service& ios)$/;"	f	class:libtorrent::i2p_connection
i2p_error	torrent/include/libtorrent/i2p_stream.hpp	/^			i2p_error,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
i2p_error	torrent/include/libtorrent/i2p_stream.hpp	/^	namespace i2p_error {$/;"	n	namespace:libtorrent
i2p_error	torrent/src/i2p_stream.cpp	/^	namespace i2p_error$/;"	n	namespace:libtorrent	file:
i2p_error_code	torrent/include/libtorrent/i2p_stream.hpp	/^		enum i2p_error_code$/;"	g	namespace:libtorrent::i2p_error
i2p_hostname	torrent/include/libtorrent/settings_pack.hpp	/^			i2p_hostname,$/;"	e	enum:libtorrent::settings_pack::string_types
i2p_peer	torrent/include/libtorrent/torrent_peer.hpp	/^	struct TORRENT_EXTRA_EXPORT i2p_peer : torrent_peer$/;"	s	namespace:libtorrent
i2p_peer	torrent/src/torrent_peer.cpp	/^	i2p_peer::i2p_peer(string_view dest, bool connectable_$/;"	f	class:libtorrent::i2p_peer
i2p_peer_type	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^			i2p_peer_type$/;"	e	enum:libtorrent::torrent_peer_allocator_interface::peer_type_t
i2p_port	torrent/include/libtorrent/settings_pack.hpp	/^			i2p_port,$/;"	e	enum:libtorrent::settings_pack::int_types
i2p_proxy	torrent/src/session_handle.cpp	/^	proxy_settings session_handle::i2p_proxy() const$/;"	f	class:libtorrent::session_handle
i2p_proxy	torrent/src/session_impl.cpp	/^	proxy_settings session_impl::i2p_proxy() const$/;"	f	class:libtorrent::aux::session_impl
i2p_socket	torrent/include/libtorrent/peer_class_type_filter.hpp	/^			i2p_socket,$/;"	m	struct:libtorrent::peer_class_type_filter	typeref:enum:libtorrent::peer_class_type_filter::
i2p_socket	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t i2p_socket = 16_bit;$/;"	m	struct:libtorrent::peer_info
i2p_socket	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::i2p_socket;$/;"	m	class:libtorrent::peer_info	file:
i2p_stream	torrent/include/libtorrent/i2p_stream.hpp	/^class i2p_stream : public proxy_base$/;"	c	namespace:libtorrent
i2p_stream	torrent/src/i2p_stream.cpp	/^	i2p_stream::i2p_stream(io_service& io_service)$/;"	f	class:libtorrent::i2p_stream
i2pconn	torrent/include/libtorrent/tracker_manager.hpp	/^		i2p_connection* i2pconn = nullptr;$/;"	m	struct:libtorrent::tracker_request
i32	torrent/ed25519/fixedint.h	/^typedef std::int32_t i32;$/;"	t
i64	torrent/ed25519/fixedint.h	/^typedef std::int64_t i64;$/;"	t
i_cpu_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_cpu_label;$/;"	m	class:Ui_DownloadWindow
i_cpu_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_cpu_t_label;$/;"	m	class:Ui_DownloadWindow
i_disk_info_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_disk_info_label;$/;"	m	class:Ui_DownloadWindow
i_disk_info_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_disk_info_t_label;$/;"	m	class:Ui_DownloadWindow
i_ip_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_ip_label;$/;"	m	class:Ui_DownloadWindow
i_ip_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_ip_t_label;$/;"	m	class:Ui_DownloadWindow
i_mac_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_mac_label;$/;"	m	class:Ui_DownloadWindow
i_mac_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_mac_t_label;$/;"	m	class:Ui_DownloadWindow
i_memory_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_memory_label;$/;"	m	class:Ui_DownloadWindow
i_memory_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_memory_t_label;$/;"	m	class:Ui_DownloadWindow
i_netcard_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_netcard_label;$/;"	m	class:Ui_DownloadWindow
i_netcard_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_netcard_t_label;$/;"	m	class:Ui_DownloadWindow
i_num_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_num_label;$/;"	m	class:Ui_DownloadWindow
i_num_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_num_t_label;$/;"	m	class:Ui_DownloadWindow
i_progress_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_progress_label;$/;"	m	class:Ui_DownloadWindow
i_progress_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_progress_t_label;$/;"	m	class:Ui_DownloadWindow
i_rangbar	qt_pro/ui_downloadwindow.h	/^    QWidget *i_rangbar;$/;"	m	class:Ui_DownloadWindow
i_remain_time_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_remain_time_label;$/;"	m	class:Ui_DownloadWindow
i_remain_time_t_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_remain_time_t_label;$/;"	m	class:Ui_DownloadWindow
i_status_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_status_label;$/;"	m	class:Ui_DownloadWindow
i_termal_info_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_termal_info_label;$/;"	m	class:Ui_DownloadWindow
i_title_label	qt_pro/ui_downloadwindow.h	/^    QLabel *i_title_label;$/;"	m	class:Ui_DownloadWindow
iconv_convert_impl	torrent/src/escape_string.cpp	/^	std::string iconv_convert_impl(std::string const& s, iconv_t h)$/;"	f	namespace:libtorrent::__anon38
id	include/config.h	/^    unsigned int id;$/;"	m	struct:terminal_info
id	qt_pro/external.h	/^    unsigned int id;$/;"	m	struct:terminal_info
id	torrent/include/libtorrent/kademlia/io.hpp	/^		node_id id;$/;"	m	struct:libtorrent::dht::node_endpoint
id	torrent/include/libtorrent/kademlia/observer.hpp	/^	node_id const& id() const { return m_id; }$/;"	f	struct:libtorrent::dht::observer
id	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	node_id const& id() const$/;"	f	class:libtorrent::dht::routing_table
id	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::uint32_t id() const { return m_id; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
id	torrent/include/libtorrent/torrent_handle.hpp	/^		std::uint32_t id() const$/;"	f	struct:libtorrent::torrent_handle
id	torrent/src/identify_client.cpp	/^		char const* id;$/;"	m	struct:__anon59::generic_map_entry	file:
id	torrent/src/identify_client.cpp	/^		char const* id;$/;"	m	struct:__anon59::map_entry	file:
id	torrent/src/session_handle.cpp	/^	peer_id session_handle::id() const$/;"	f	class:libtorrent::session_handle
identd_error	torrent/include/libtorrent/socks5_stream.hpp	/^		identd_error,$/;"	e	enum:libtorrent::socks_error::socks_error_code
identify_client	torrent/src/identify_client.cpp	/^	std::string identify_client(peer_id const& p)$/;"	f	namespace:libtorrent
identify_client_impl	torrent/src/identify_client.cpp	/^	std::string identify_client_impl(peer_id const& p)$/;"	f	namespace:libtorrent::aux
identity	virt-p2v/include/p2v-config.h	/^  struct identity_config identity;$/;"	m	struct:auth_config	typeref:struct:auth_config::identity_config
identity_config	virt-p2v/include/p2v-config.h	/^struct identity_config {$/;"	s
identity_entry	virt-p2v/src/gui.c	/^  *username_entry, *password_entry, *identity_entry, *sudo_button,$/;"	v	file:
idx	torrent/src/torrent_info.cpp	/^		file_index_t idx;$/;"	m	struct:libtorrent::__anon88::name_entry	file:
iface_from_ifaddrs	torrent/src/enum_net.cpp	/^	bool iface_from_ifaddrs(ifaddrs *ifa, ip_interface &rv)$/;"	f	namespace:libtorrent::__anon102
ignore_dark_internet	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool ignore_dark_internet = true;$/;"	m	struct:libtorrent::dht::dht_settings
ignore_error	torrent/src/upnp.cpp	/^static error_code ignore_error;$/;"	m	namespace:libtorrent	file:
ignore_limits_on_local_network	torrent/include/libtorrent/settings_pack.hpp	/^			ignore_limits_on_local_network TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
ignore_min_interval	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr reannounce_flags_t ignore_min_interval = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
ignore_min_interval	torrent/src/torrent_handle.cpp	/^	constexpr reannounce_flags_t torrent_handle::ignore_min_interval;$/;"	m	class:libtorrent::torrent_handle	file:
ignore_resume_timestamps	torrent/include/libtorrent/settings_pack.hpp	/^			ignore_resume_timestamps TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
ignore_stats	torrent/include/libtorrent/peer_connection.hpp	/^		bool ignore_stats() const { return m_ignore_stats; }$/;"	f	class:libtorrent::peer_connection
ignore_stats	torrent/include/libtorrent/peer_connection.hpp	/^		void ignore_stats(bool b) { m_ignore_stats = b; }$/;"	f	class:libtorrent::peer_connection
ignore_subdir	torrent/src/create_torrent.cpp	/^	bool ignore_subdir(std::string const& leaf)$/;"	f	namespace:libtorrent::__anon134
ignore_unchoke_slots	torrent/include/libtorrent/peer_class.hpp	/^		bool ignore_unchoke_slots;$/;"	m	struct:libtorrent::peer_class
ignore_unchoke_slots	torrent/include/libtorrent/peer_class.hpp	/^		bool ignore_unchoke_slots;$/;"	m	struct:libtorrent::peer_class_info
ignore_unchoke_slots	torrent/src/peer_connection.cpp	/^	bool peer_connection::ignore_unchoke_slots() const$/;"	f	class:libtorrent::peer_connection
ignore_unchoke_slots	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::ignore_unchoke_slots() const$/;"	f	class:libtorrent::peer_connection_handle
ignore_unchoke_slots_set	torrent/src/session_impl.cpp	/^	bool session_impl::ignore_unchoke_slots_set(peer_class_set const& set) const$/;"	f	class:libtorrent::aux::session_impl
ignore_value	virt-p2v/include/gnulib/ignore-value.h	44;"	d
ignore_value	virt-p2v/include/gnulib/ignore-value.h	47;"	d
ignore_value	virt-p2v/include/ignore-value.h	44;"	d
ignore_value	virt-p2v/include/ignore-value.h	47;"	d
image_name	include/task.h	/^    char image_name[128];$/;"	m	struct:p2v_task
image_name	include/torrent.h	/^	char image_name[128];$/;"	m	struct:progress_info
image_name	qt_pro/global.h	/^    char image_name[36];$/;"	m	struct:progress_info
image_name	virt-p2v/src/conversion.c	/^    char image_name[128];$/;"	m	struct:progress_info	file:
imaxabs	virt-p2v/include/gnulib/inttypes.h	1536;"	d
imaxdiv	virt-p2v/include/gnulib/inttypes.h	1554;"	d
imaxdiv	virt-p2v/include/gnulib/inttypes.in.h	1080;"	d
imaxdiv_t	virt-p2v/include/gnulib/inttypes.in.h	/^typedef struct { intmax_t quot; intmax_t rem; } imaxdiv_t;$/;"	t	typeref:struct:__anon160
immutable_data	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^		std::int32_t immutable_data = 0;$/;"	m	struct:libtorrent::dht::dht_storage_counters
immutable_item_comparator	torrent/kademlia/dht_storage.cpp	/^		explicit immutable_item_comparator(std::vector<node_id> const& node_ids) : m_node_ids(node_ids) {}$/;"	f	struct:libtorrent::dht::__anon153::immutable_item_comparator
immutable_item_comparator	torrent/kademlia/dht_storage.cpp	/^	struct immutable_item_comparator$/;"	s	namespace:libtorrent::dht::__anon153	file:
implemented_features	torrent/include/libtorrent/extensions.hpp	/^		virtual feature_flags_t implemented_features() { return {}; }$/;"	f	struct:libtorrent::plugin
implied_port	torrent/include/libtorrent/kademlia/announce_flags.hpp	/^constexpr announce_flags_t implied_port = 1_bit;$/;"	m	namespace:libtorrent::dht::announce
import_bits	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         import_bits($/;"	f	namespace:boost::multiprecision
import_bits_fast	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^            import_bits_fast($/;"	f	namespace:boost::multiprecision::detail
import_bits_generic	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^            import_bits_generic($/;"	f	namespace:boost::multiprecision::detail
in	torrent/src/escape_string.cpp	/^		, iconv_t cd, char const** in, size_t* insize, char** out, size_t* outsize)$/;"	m	namespace:libtorrent::__anon38	file:
in	torrent/src/puff.cpp	/^    const unsigned char *in;    \/* input buffer *\/$/;"	m	struct:state	file:
in_enc_policy	torrent/include/libtorrent/session_settings.hpp	/^		std::uint8_t in_enc_policy;$/;"	m	struct:libtorrent::pe_settings
in_enc_policy	torrent/include/libtorrent/settings_pack.hpp	/^			in_enc_policy,$/;"	e	enum:libtorrent::settings_pack::int_types
in_error_code	torrent/include/libtorrent/upnp.hpp	/^	bool in_error_code = false;$/;"	m	struct:libtorrent::error_code_parse_state
in_handshake	torrent/src/bt_peer_connection.cpp	/^	bool bt_peer_connection::in_handshake() const$/;"	f	class:libtorrent::bt_peer_connection
in_handshake	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::in_handshake() const$/;"	f	class:libtorrent::peer_connection_handle
in_handshake	torrent/src/web_connection_base.cpp	/^	bool web_connection_base::in_handshake() const$/;"	f	class:libtorrent::web_connection_base
in_ip_address	torrent/include/libtorrent/upnp.hpp	/^	bool in_ip_address = false;$/;"	m	struct:libtorrent::ip_address_parse_state
in_list	torrent/include/libtorrent/link.hpp	/^		bool in_list() const { return index >= 0; }$/;"	f	struct:libtorrent::link
in_progress	torrent/include/libtorrent/disk_io_job.hpp	/^		static constexpr disk_job_flags_t in_progress = 2_bit;$/;"	m	struct:libtorrent::disk_io_job
in_progress	torrent/src/disk_io_job.cpp	/^	constexpr disk_job_flags_t disk_io_job::in_progress;$/;"	m	class:libtorrent::disk_io_job	file:
in_service	torrent/include/libtorrent/upnp.hpp	/^	bool in_service = false;$/;"	m	struct:libtorrent::parse_state
in_storage	torrent/include/libtorrent/block_cache.hpp	/^		bool in_storage = false;$/;"	m	struct:libtorrent::cached_piece_entry
in_use	torrent/include/libtorrent/block_cache.hpp	/^		bool in_use = true;$/;"	m	struct:libtorrent::cached_piece_entry
in_use	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		int in_use() const$/;"	f	struct:libtorrent::disk_buffer_pool
in_use	torrent/include/libtorrent/disk_io_job.hpp	/^		bool in_use = false;$/;"	m	struct:libtorrent::disk_io_job
in_use	torrent/include/libtorrent/peer_class.hpp	/^		bool in_use;$/;"	m	struct:libtorrent::peer_class
in_use	torrent/include/libtorrent/torrent_peer.hpp	/^		bool in_use = true;$/;"	m	struct:libtorrent::torrent_peer
inactive_down_rate	torrent/include/libtorrent/settings_pack.hpp	/^			inactive_down_rate,$/;"	e	enum:libtorrent::settings_pack::int_types
inactive_up_rate	torrent/include/libtorrent/settings_pack.hpp	/^			inactive_up_rate,$/;"	e	enum:libtorrent::settings_pack::int_types
inactivity_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			inactivity_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
inaddr6_to_address	torrent/src/enum_net.cpp	/^	address_v6 inaddr6_to_address(void const* ina6, int const len = 16)$/;"	f	namespace:libtorrent::__anon102
inaddr_to_address	torrent/src/enum_net.cpp	/^	address_v4 inaddr_to_address(void const* ina, int const len = 4)$/;"	f	namespace:libtorrent::__anon102
inc	torrent/include/libtorrent/bitfield.hpp	/^			void inc()$/;"	f	struct:libtorrent::bitfield::const_iterator
inc_block_refcount	torrent/src/block_cache.cpp	/^bool block_cache::inc_block_refcount(cached_piece_entry* pe, int const block, int const reason)$/;"	f	class:libtorrent::block_cache
inc_failcount	torrent/src/peer_list.cpp	/^	void peer_list::inc_failcount(torrent_peer* p)$/;"	f	class:libtorrent::peer_list
inc_num_connecting	torrent/include/libtorrent/torrent.hpp	/^		void inc_num_connecting(torrent_peer* pp)$/;"	f	class:libtorrent::torrent
inc_refcount	torrent/include/libtorrent/storage.hpp	/^		void inc_refcount() { ++m_references; }$/;"	f	struct:libtorrent::storage_interface
inc_refcount	torrent/src/piece_picker.cpp	/^	void piece_picker::inc_refcount(piece_index_t const index$/;"	f	class:libtorrent::piece_picker
inc_refcount	torrent/src/piece_picker.cpp	/^	void piece_picker::inc_refcount(typed_bitfield<piece_index_t> const& bitmask$/;"	f	class:libtorrent::piece_picker
inc_refcount_all	torrent/src/piece_picker.cpp	/^	void piece_picker::inc_refcount_all(const torrent_peer* peer)$/;"	f	class:libtorrent::piece_picker
inc_stats_counter	torrent/src/torrent.cpp	/^	void torrent::inc_stats_counter(int c, int value)$/;"	f	class:libtorrent::torrent
inc_stats_counter	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::inc_stats_counter(int counter, int delta)$/;"	f	class:libtorrent::utp_socket_manager
include_failed	torrent/include/libtorrent/kademlia/routing_table.hpp	/^		include_failed = 1$/;"	e	enum:libtorrent::dht::routing_table::__anon29
includedir	torrent/include/libtorrent/Makefile	/^includedir = ${prefix}\/include\/libtorrent$/;"	m
incnt	torrent/src/puff.cpp	/^    unsigned long incnt;        \/* bytes read so far *\/$/;"	m	struct:state	file:
incoming	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t incoming = 5_bit;$/;"	m	struct:libtorrent::peer_info
incoming	torrent/kademlia/dos_blocker.cpp	/^	bool dos_blocker::incoming(address const& addr, time_point const now, dht_logger* logger)$/;"	f	class:libtorrent::dht::dos_blocker
incoming	torrent/kademlia/node.cpp	/^void node::incoming(aux::listen_socket_handle const& s, msg const& m)$/;"	f	class:libtorrent::dht::node
incoming	torrent/kademlia/rpc_manager.cpp	/^bool rpc_manager::incoming(msg const& m, node_id* id)$/;"	f	class:libtorrent::dht::rpc_manager
incoming	torrent/src/http_parser.cpp	/^	std::tuple<int, int> http_parser::incoming($/;"	f	class:libtorrent::http_parser
incoming	torrent/src/peer_info.cpp	/^	constexpr peer_source_flags_t peer_info::incoming;$/;"	m	class:libtorrent::peer_info	file:
incoming	torrent/src/utp_stream.cpp	/^void utp_socket_impl::incoming(std::uint8_t const* buf, int size, packet_ptr p$/;"	f	class:libtorrent::utp_socket_impl
incoming_allowed_fast	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_allowed_fast(piece_index_t const index)$/;"	f	class:libtorrent::peer_connection
incoming_bitfield	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_bitfield(typed_bitfield<piece_index_t> const& bits)$/;"	f	class:libtorrent::peer_connection
incoming_cancel	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_cancel(peer_request const& r)$/;"	f	class:libtorrent::peer_connection
incoming_choke	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_choke()$/;"	f	class:libtorrent::peer_connection
incoming_connection	torrent/include/libtorrent/aux_/session_impl.hpp	/^		bool incoming_connection = false;$/;"	m	struct:libtorrent::aux::listen_socket_t
incoming_connection	torrent/src/session_impl.cpp	/^	void session_impl::incoming_connection(std::shared_ptr<socket_type> const& s)$/;"	f	class:libtorrent::aux::session_impl
incoming_connection_alert	torrent/src/alert.cpp	/^	incoming_connection_alert::incoming_connection_alert(aux::stack_allocator&, int t$/;"	f	class:libtorrent::incoming_connection_alert
incoming_connections	torrent/include/libtorrent/performance_counters.hpp	/^			incoming_connections,$/;"	e	enum:libtorrent::counters::stats_counter_t
incoming_dht_port	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_dht_port(int const listen_port)$/;"	f	class:libtorrent::peer_connection
incoming_dont_have	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_dont_have(piece_index_t const index)$/;"	f	class:libtorrent::peer_connection
incoming_error	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::incoming_error(error_code const& ec, udp::endpoint const& ep)$/;"	f	class:libtorrent::dht::dht_tracker
incoming_error	torrent/kademlia/node.cpp	/^void incoming_error(entry& e, char const* msg, int error_code = 203)$/;"	f	namespace:libtorrent::dht::__anon147
incoming_error	torrent/src/tracker_manager.cpp	/^	void tracker_manager::incoming_error(error_code const&$/;"	f	class:libtorrent::tracker_manager
incoming_have	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_have(piece_index_t const index)$/;"	f	class:libtorrent::peer_connection
incoming_have_all	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_have_all()$/;"	f	class:libtorrent::peer_connection
incoming_have_none	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_have_none()$/;"	f	class:libtorrent::peer_connection
incoming_interested	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_interested()$/;"	f	class:libtorrent::peer_connection
incoming_keepalive	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_keepalive()$/;"	f	class:libtorrent::peer_connection
incoming_message	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^			incoming_message,$/;"	e	enum:libtorrent::dht::dht_logger::message_direction_t
incoming_not_interested	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_not_interested()$/;"	f	class:libtorrent::peer_connection
incoming_packet	torrent/kademlia/dht_tracker.cpp	/^	bool dht_tracker::incoming_packet(aux::listen_socket_handle const& s$/;"	f	class:libtorrent::dht::dht_tracker
incoming_packet	torrent/src/tracker_manager.cpp	/^	bool tracker_manager::incoming_packet(char const* hostname$/;"	f	class:libtorrent::tracker_manager
incoming_packet	torrent/src/tracker_manager.cpp	/^	bool tracker_manager::incoming_packet(udp::endpoint const& ep$/;"	f	class:libtorrent::tracker_manager
incoming_packet	torrent/src/utp_socket_manager.cpp	/^	bool utp_socket_manager::incoming_packet(std::weak_ptr<utp_socket_interface> socket$/;"	f	class:libtorrent::utp_socket_manager
incoming_packet	torrent/src/utp_stream.cpp	/^bool utp_socket_impl::incoming_packet(span<std::uint8_t const> buf$/;"	f	class:libtorrent::utp_socket_impl
incoming_payload	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::incoming_payload(char const* buf, int len)$/;"	f	class:libtorrent::web_peer_connection
incoming_piece	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_piece(peer_request const& p, char const* data)$/;"	f	class:libtorrent::peer_connection
incoming_piece_fragment	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_piece_fragment(int const bytes)$/;"	f	class:libtorrent::peer_connection
incoming_piece_picks	torrent/include/libtorrent/performance_counters.hpp	/^			incoming_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
incoming_redundant_piece_picks	torrent/include/libtorrent/performance_counters.hpp	/^			incoming_redundant_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
incoming_reject_request	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_reject_request(peer_request const& r)$/;"	f	class:libtorrent::peer_connection
incoming_request	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t incoming_request = 16_bit;$/;"	m	namespace:libtorrent::alert_category
incoming_request	torrent/kademlia/node.cpp	/^void node::incoming_request(msg const& m, entry& e)$/;"	f	class:libtorrent::dht::node
incoming_request	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_request(peer_request const& r)$/;"	f	class:libtorrent::peer_connection
incoming_request_alert	torrent/src/alert.cpp	/^	incoming_request_alert::incoming_request_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::incoming_request_alert
incoming_request_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t incoming_request_notification = 16_bit;$/;"	m	class:libtorrent::alert
incoming_request_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::incoming_request_notification;$/;"	m	class:libtorrent::alert	file:
incoming_starts_queued_torrents	torrent/include/libtorrent/settings_pack.hpp	/^			incoming_starts_queued_torrents,$/;"	e	enum:libtorrent::settings_pack::bool_types
incoming_suggest	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_suggest(piece_index_t const index)$/;"	f	class:libtorrent::peer_connection
incoming_unchoke	torrent/src/peer_connection.cpp	/^	void peer_connection::incoming_unchoke()$/;"	f	class:libtorrent::peer_connection
incoming_zeroes	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::incoming_zeroes(int len)$/;"	f	class:libtorrent::web_peer_connection
incomplete	torrent/include/libtorrent/alert_types.hpp	/^		int const incomplete;$/;"	m	struct:libtorrent::final
incomplete	torrent/include/libtorrent/tracker_manager.hpp	/^		int incomplete;$/;"	m	struct:libtorrent::tracker_response
increase_est_reciprocation_rate	torrent/include/libtorrent/settings_pack.hpp	/^			increase_est_reciprocation_rate TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
increase_est_reciprocation_rate	torrent/src/peer_connection.cpp	/^	void peer_connection::increase_est_reciprocation_rate()$/;"	f	class:libtorrent::peer_connection
incref	torrent/src/peer_class.cpp	/^	void peer_class_pool::incref(peer_class_t c)$/;"	f	class:libtorrent::peer_class_pool
increment_guard	torrent/include/libtorrent/debug.hpp	/^		explicit increment_guard(int& c) : m_cnt(c) { TORRENT_ASSERT(m_cnt >= 0); ++m_cnt; }$/;"	f	struct:libtorrent::increment_guard
increment_guard	torrent/include/libtorrent/debug.hpp	/^	struct increment_guard$/;"	s	namespace:libtorrent
index	include/gpt.h	/^    uint32_t    index;$/;"	m	struct:__anon9
index	torrent/include/libtorrent/alert_types.hpp	/^		file_index_t const index;$/;"	m	struct:libtorrent::final
index	torrent/include/libtorrent/link.hpp	/^		int index;$/;"	m	struct:libtorrent::link
index	torrent/include/libtorrent/piece_picker.hpp	/^			piece_index_t const index;$/;"	m	struct:libtorrent::piece_picker::has_index
index	torrent/include/libtorrent/piece_picker.hpp	/^			prio_index_t index;$/;"	m	struct:libtorrent::piece_picker::piece_pos
index	torrent/src/torrent.cpp	/^		int index;$/;"	m	struct:libtorrent::__anon114::busy_block_t	file:
index_iter	torrent/include/libtorrent/index_range.hpp	/^	explicit index_iter(Index i) : m_idx(i) {}$/;"	f	struct:libtorrent::index_iter
index_iter	torrent/include/libtorrent/index_range.hpp	/^struct index_iter$/;"	s	namespace:libtorrent
index_mask	torrent/include/libtorrent/settings_pack.hpp	/^			index_mask =       0x3fff$/;"	e	enum:libtorrent::settings_pack::type_bases
index_range	torrent/include/libtorrent/index_range.hpp	/^struct index_range$/;"	s	namespace:libtorrent
inf	torrent/include/libtorrent/bandwidth_limit.hpp	/^	static constexpr int inf = (std::numeric_limits<std::int32_t>::max)();$/;"	m	struct:libtorrent::bandwidth_channel
inflate_gzip	torrent/src/gzip.cpp	/^	void inflate_gzip(span<char const> in$/;"	f	namespace:libtorrent
inflated_data_too_large	torrent/include/libtorrent/gzip.hpp	/^			inflated_data_too_large,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
info	src/torrent.cpp	/^progress_info info;$/;"	v
info	torrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
info	torrent/src/torrent_info.cpp	/^	bdecode_node torrent_info::info(char const* key) const$/;"	f	class:libtorrent::torrent_info
info_hash	torrent/bak/connection_tester.cpp	/^	char const* info_hash;$/;"	m	struct:peer_conn	file:
info_hash	torrent/include/libtorrent/add_torrent_params.hpp	/^		sha1_hash info_hash;$/;"	m	struct:libtorrent::add_torrent_params
info_hash	torrent/include/libtorrent/alert_types.hpp	/^		sha1_hash info_hash;$/;"	m	struct:libtorrent::final
info_hash	torrent/include/libtorrent/storage_defs.hpp	/^		sha1_hash const& info_hash;$/;"	m	struct:libtorrent::storage_params
info_hash	torrent/include/libtorrent/torrent.hpp	/^		sha1_hash const& info_hash() const { return m_info_hash; }$/;"	f	class:libtorrent::torrent
info_hash	torrent/include/libtorrent/torrent_info.hpp	/^		const sha1_hash& info_hash() const { return m_info_hash; }$/;"	f	class:libtorrent::torrent_info
info_hash	torrent/include/libtorrent/torrent_status.hpp	/^		sha1_hash info_hash;$/;"	m	struct:libtorrent::torrent_status
info_hash	torrent/include/libtorrent/tracker_manager.hpp	/^		sha1_hash info_hash;$/;"	m	struct:libtorrent::tracker_request
info_hash	torrent/src/torrent_handle.cpp	/^	sha1_hash torrent_handle::info_hash() const$/;"	f	class:libtorrent::torrent_handle
info_label	virt-p2v/src/gui.c	/^  *info_label,$/;"	v	file:
infodir	torrent/include/libtorrent/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infohashes_sample	torrent/kademlia/dht_storage.cpp	/^	struct infohashes_sample$/;"	s	namespace:libtorrent::dht::__anon153	file:
infohashes_sample_count_max	torrent/kademlia/dht_storage.cpp	/^	constexpr int infohashes_sample_count_max = 20;$/;"	m	namespace:libtorrent::dht::__anon153	file:
inhibit_power_saving	virt-p2v/src/inhibit.c	/^inhibit_power_saving (void)$/;"	f
init	include/StoreConfig.h	/^    int (*init)();$/;"	m	struct:_StoreDriver
init	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::init()$/;"	f	class:libtorrent::dht::traversal_algorithm
init	torrent/src/file_progress.cpp	/^	void file_progress::init(piece_picker const& picker, file_storage const& fs)$/;"	f	class:libtorrent::aux::file_progress
init	torrent/src/peer_connection.cpp	/^	void peer_connection::init()$/;"	f	class:libtorrent::peer_connection
init	torrent/src/proxy_settings.cpp	/^void init(proxy_settings& p, Settings const& sett)$/;"	f	namespace:libtorrent::aux::__anon64
init	torrent/src/session_impl.cpp	/^	void session_impl::init()$/;"	f	class:libtorrent::aux::session_impl
init	torrent/src/torrent.cpp	/^	void torrent::init()$/;"	f	class:libtorrent::torrent
init_buffer_entry	torrent/include/libtorrent/chained_buffer.hpp	/^		void init_buffer_entry(buffer_t& b, Holder buf, int used_size)$/;"	f	namespace:libtorrent
init_client	src/client.c	/^int init_client()$/;"	f
init_config	src/config.c	/^void init_config()$/;"	f
init_config	test/test.c	/^void init_config()$/;"	f
init_device	src/device.c	/^void init_device()$/;"	f
init_logs	src/log.c	/^void init_logs()$/;"	f
init_mtu	torrent/src/utp_stream.cpp	/^void utp_socket_impl::init_mtu(int const link_mtu, int utp_mtu)$/;"	f	class:libtorrent::utp_socket_impl
init_pe_rc4_handler	torrent/src/bt_peer_connection.cpp	/^	std::shared_ptr<rc4_handler> init_pe_rc4_handler(key_t const& secret$/;"	f	namespace:libtorrent::__anon118
init_peer_class_filter	torrent/src/session_impl.cpp	/^	void session_impl::init_peer_class_filter(bool unlimited_local)$/;"	f	class:libtorrent::aux::session_impl
init_pipe	src/main.c	/^int init_pipe()$/;"	f
init_pipe	test/test.c	/^int init_pipe()$/;"	f
init_qcow2	src/qcow2.c	/^int init_qcow2(PedDevice *dev, int flag)$/;"	f
init_queue	src/queue.c	/^void init_queue(QUEUE *pQueue,unsigned char *pucBuf,unsigned int uiMaxBufSize)$/;"	f
init_ssl	torrent/src/torrent.cpp	/^	void torrent::init_ssl(string_view cert)$/;"	f	class:libtorrent::torrent
inited	virt-p2v/include/gnulib/windows-once.h	/^          volatile int inited;$/;"	m	struct:__anon157
initial_picker_threshold	torrent/include/libtorrent/settings_pack.hpp	/^			initial_picker_threshold,$/;"	e	enum:libtorrent::settings_pack::int_types
initialize	torrent/src/storage.cpp	/^	void default_storage::initialize(storage_error& ec)$/;"	f	class:libtorrent::default_storage
initialize_default_settings	torrent/src/settings_pack.cpp	/^	void initialize_default_settings(aux::session_settings_single_thread& s)$/;"	f	namespace:libtorrent
initialized	torrent/include/libtorrent/timestamp_history.hpp	/^	bool initialized() const { return m_num_samples != not_initialized; }$/;"	f	struct:libtorrent::timestamp_history
initstate	virt-p2v/include/gnulib/stdlib.h	1178;"	d
initstate_r	virt-p2v/include/gnulib/stdlib.h	1293;"	d
inlen	torrent/src/puff.cpp	/^    unsigned long inlen;        \/* available input at in *\/$/;"	m	struct:state	file:
innerOuterRate	qt_pro/QRoundProgressBar.cpp	/^float QRoundProgressBar::innerOuterRate() const$/;"	f	class:QRoundProgressBar
input_drivers	virt-p2v/src/ssh.c	/^char **input_drivers = NULL;$/;"	v
insert	torrent/include/libtorrent/link.hpp	/^		void insert(aux::vector<T*>& list, T* self)$/;"	f	struct:libtorrent::link
insert	torrent/kademlia/routing_table.cpp	/^void ip_set::insert(address const& addr)$/;"	f	class:libtorrent::dht::ip_set
insert	torrent/src/packet_buffer.cpp	/^	packet_ptr packet_buffer::insert(index_type idx, packet_ptr value)$/;"	f	class:libtorrent::packet_buffer
insert_blocks	torrent/src/block_cache.cpp	/^void block_cache::insert_blocks(cached_piece_entry* pe, int block, span<iovec_t const> iov$/;"	f	class:libtorrent::block_cache
insert_peer	torrent/src/peer_list.cpp	/^	bool peer_list::insert_peer(torrent_peer* p, iterator iter$/;"	f	class:libtorrent::peer_list
insert_peer	torrent/src/session_impl.cpp	/^	void session_impl::insert_peer(std::shared_ptr<peer_connection> const& c)$/;"	f	class:libtorrent::aux::session_impl
insert_torrent	torrent/src/session_impl.cpp	/^	void session_impl::insert_torrent(sha1_hash const& ih, std::shared_ptr<torrent> const& t$/;"	f	class:libtorrent::aux::session_impl
insize	torrent/src/escape_string.cpp	/^		, iconv_t cd, char const** in, size_t* insize, char** out, size_t* outsize)$/;"	m	namespace:libtorrent::__anon38	file:
insort_replace	torrent/src/settings_pack.cpp	/^	void insort_replace(std::vector<std::pair<std::uint16_t, T>>& c, std::pair<std::uint16_t, T> v)$/;"	f	namespace:__anon93
install_cacel_btn	qt_pro/dialogwindow.h	/^    QPushButton  *install_cacel_btn;$/;"	m	class:DialogWindow
install_cacenl_clicked	qt_pro/configwindow.cpp	/^void ConfigWindow::install_cacenl_clicked()$/;"	f	class:ConfigWindow
install_confirm_btn	qt_pro/configwindow.cpp	/^void ConfigWindow::install_confirm_btn()$/;"	f	class:ConfigWindow
install_confirm_btn	qt_pro/dialogwindow.h	/^    QPushButton  *install_confirm_btn;$/;"	m	class:DialogWindow
install_flag	include/config.h	/^    int install_flag;$/;"	m	struct:config
install_flag	qt_pro/external.h	/^    int install_flag;$/;"	m	struct:config
install_flag	qt_pro/global.h	/^	int install_flag;$/;"	m	class:Global
install_programe	src/device.c	/^int install_programe()$/;"	f
install_sh	src/shell.c	/^char install_sh[] = {"#!\/bin\/sh \\n"$/;"	v
install_sh	torrent/include/libtorrent/Makefile	/^install_sh = ${SHELL} \/home\/ysr\/project\/libtorrent\/build-aux\/install-sh$/;"	m
install_sh_DATA	torrent/include/libtorrent/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	torrent/include/libtorrent/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	torrent/include/libtorrent/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_widget	qt_pro/ui_downloadwindow.h	/^    QWidget *install_widget;$/;"	m	class:Ui_DownloadWindow
instantiate	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void instantiate(io_service& ios, void* userdata = nullptr)$/;"	f	struct:libtorrent::aux::socket_type
instantiate_connection	torrent/src/instantiate_connection.cpp	/^	bool instantiate_connection(io_service& ios$/;"	f	namespace:libtorrent::aux
int16_t	virt-p2v/include/gnulib/stdint.h	157;"	d
int16_t	virt-p2v/include/gnulib/stdint.h	161;"	d
int32_t	virt-p2v/include/gnulib/stdint.h	164;"	d
int32_t	virt-p2v/include/gnulib/stdint.h	168;"	d
int64_t	virt-p2v/include/gnulib/stdint.h	183;"	d
int64_t	virt-p2v/include/gnulib/stdint.h	185;"	d
int64_t	virt-p2v/include/gnulib/stdint.h	188;"	d
int64_t	virt-p2v/include/gnulib/stdint.h	190;"	d
int64_t	virt-p2v/include/gnulib/stdint.h	193;"	d
int64_t	virt-p2v/include/gnulib/stdint.h	195;"	d
int8_t	virt-p2v/include/gnulib/stdint.h	150;"	d
int8_t	virt-p2v/include/gnulib/stdint.h	154;"	d
int_fast16_t	virt-p2v/include/gnulib/stdint.h	267;"	d
int_fast16_t	virt-p2v/include/gnulib/stdint.h	290;"	d
int_fast32_t	virt-p2v/include/gnulib/stdint.h	269;"	d
int_fast32_t	virt-p2v/include/gnulib/stdint.h	292;"	d
int_fast64_t	virt-p2v/include/gnulib/stdint.h	271;"	d
int_fast64_t	virt-p2v/include/gnulib/stdint.h	295;"	d
int_fast8_t	virt-p2v/include/gnulib/stdint.h	265;"	d
int_fast8_t	virt-p2v/include/gnulib/stdint.h	288;"	d
int_least16_t	virt-p2v/include/gnulib/stdint.h	235;"	d
int_least16_t	virt-p2v/include/gnulib/stdint.h	243;"	d
int_least32_t	virt-p2v/include/gnulib/stdint.h	237;"	d
int_least32_t	virt-p2v/include/gnulib/stdint.h	245;"	d
int_least64_t	virt-p2v/include/gnulib/stdint.h	239;"	d
int_least64_t	virt-p2v/include/gnulib/stdint.h	248;"	d
int_least8_t	virt-p2v/include/gnulib/stdint.h	233;"	d
int_least8_t	virt-p2v/include/gnulib/stdint.h	241;"	d
int_setting_entry_t	torrent/src/settings_pack.cpp	/^	struct int_setting_entry_t$/;"	s	namespace:libtorrent	file:
int_t	torrent/include/libtorrent/bdecode.hpp	/^		int_t$/;"	e	enum:bdecode_node::type_t
int_t	torrent/include/libtorrent/entry.hpp	/^			int_t,$/;"	e	enum:libtorrent::entry::data_type
int_t	torrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
int_type_base	torrent/include/libtorrent/settings_pack.hpp	/^			int_type_base =    0x4000,$/;"	e	enum:libtorrent::settings_pack::type_bases
int_types	torrent/include/libtorrent/settings_pack.hpp	/^		enum int_types$/;"	g	struct:libtorrent::settings_pack
int_value	torrent/src/bdecode.cpp	/^	std::int64_t bdecode_node::int_value() const$/;"	f	class:libtorrent::bdecode_node
int_value	torrent/src/lazy_bdecode.cpp	/^	std::int64_t lazy_entry::int_value() const$/;"	f	class:libtorrent::lazy_entry
integer	torrent/include/libtorrent/bdecode.hpp	/^	{ none, dict, list, string, integer, end };$/;"	m	struct:libtorrent::detail::bdecode_token	typeref:enum:libtorrent::detail::bdecode_token::
integer	torrent/src/entry.cpp	/^	entry::integer_type const& entry::integer() const$/;"	f	class:libtorrent::entry::entry
integer	torrent/src/entry.cpp	/^	entry::integer_type& entry::integer()$/;"	f	class:libtorrent::entry
integer_to_str	torrent/src/entry.cpp	/^	string_view integer_to_str(span<char> buf$/;"	f	namespace:libtorrent::detail
interesting	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t interesting = 0_bit;$/;"	m	struct:libtorrent::peer_info
interesting	torrent/include/libtorrent/torrent.hpp	/^		bool interesting = true;$/;"	m	struct:libtorrent::web_seed_t
interesting	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::interesting;$/;"	m	class:libtorrent::peer_info	file:
interesting_piece_picks	torrent/include/libtorrent/performance_counters.hpp	/^			interesting_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
interface_address	torrent/include/libtorrent/enum_net.hpp	/^		address interface_address;$/;"	m	struct:libtorrent::ip_interface
interface_num	src/tools.c	/^int interface_num = 0;$/;"	v
interface_to_endpoints	torrent/src/session_impl.cpp	/^	void interface_to_endpoints(listen_interface_t const& iface$/;"	f	namespace:libtorrent::aux
interfaces	virt-p2v/include/p2v-config.h	/^  char **interfaces;$/;"	m	struct:config
interfaces_list	virt-p2v/src/gui.c	/^  *disks_list, *removable_list, *interfaces_list,$/;"	v	file:
internal_at	torrent/src/file_storage.cpp	/^	internal_file_entry const& file_storage::internal_at(int const index) const$/;"	f	class:libtorrent::file_storage
internal_file_entry	torrent/include/libtorrent/file_storage.hpp	/^	struct internal_file_entry$/;"	s	namespace:libtorrent
internal_file_entry	torrent/src/file_storage.cpp	/^	internal_file_entry::internal_file_entry()$/;"	f	class:libtorrent::internal_file_entry
internal_file_entry	torrent/src/file_storage.cpp	/^	internal_file_entry::internal_file_entry(internal_file_entry const& fe)$/;"	f	class:libtorrent::internal_file_entry
internal_file_path	torrent/src/file_storage.cpp	/^	std::string file_storage::internal_file_path(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
internal_port_must_match_external	torrent/include/libtorrent/upnp.hpp	/^			internal_port_must_match_external = 724,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
internal_resume_data_error	torrent/include/libtorrent/add_torrent_params.hpp	/^		error_code internal_resume_data_error;$/;"	m	struct:libtorrent::add_torrent_params
internal_server_error	torrent/include/libtorrent/error_code.hpp	/^			internal_server_error = 500,$/;"	e	enum:libtorrent::errors::http_errors
internal_set_comment	torrent/src/torrent_info.cpp	/^	void torrent_info::internal_set_comment(string_view const s)$/;"	f	class:libtorrent::torrent_info
internal_set_creation_date	torrent/src/torrent_info.cpp	/^	void torrent_info::internal_set_creation_date(std::time_t const t)$/;"	f	class:libtorrent::torrent_info
internal_set_creator	torrent/src/torrent_info.cpp	/^	void torrent_info::internal_set_creator(string_view const c)$/;"	f	class:libtorrent::torrent_info
internal_update	torrent/src/sha1.cpp	/^	void internal_update(sha1_ctx* context, u8 const* data, size_t len)$/;"	f	namespace:libtorrent::__anon103
interval	torrent/include/libtorrent/tracker_manager.hpp	/^		seconds32 interval;$/;"	m	struct:libtorrent::tracker_response
intmax_t	virt-p2v/include/gnulib/stdint.h	336;"	d
intmax_t	virt-p2v/include/gnulib/stdint.h	339;"	d
intmax_t	virt-p2v/include/gnulib/stdint.h	341;"	d
intmax_t	virt-p2v/include/gnulib/stdint.h	344;"	d
intptr_t	virt-p2v/include/gnulib/stdint.h	312;"	d
intptr_t	virt-p2v/include/gnulib/stdint.h	321;"	d
invalid	torrent/include/libtorrent/piece_block.hpp	/^		static const piece_block invalid;$/;"	m	struct:libtorrent::piece_block
invalid_allow_fast	torrent/include/libtorrent/error_code.hpp	/^			invalid_allow_fast,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_allow_fast_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_allow_fast_message,$/;"	m	class:libtorrent::close_reason_t
invalid_arg_peers	torrent/include/libtorrent/performance_counters.hpp	/^			invalid_arg_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
invalid_argument	torrent/include/libtorrent/upnp.hpp	/^			invalid_argument = 402,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
invalid_bencoding	torrent/include/libtorrent/error_code.hpp	/^			invalid_bencoding,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_bitfield_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_bitfield_message,$/;"	m	class:libtorrent::close_reason_t
invalid_bitfield_size	torrent/include/libtorrent/error_code.hpp	/^			invalid_bitfield_size,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_block_type	torrent/include/libtorrent/gzip.hpp	/^			invalid_block_type,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_blocks_per_piece	torrent/include/libtorrent/error_code.hpp	/^			invalid_blocks_per_piece,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_cancel	torrent/include/libtorrent/error_code.hpp	/^			invalid_cancel,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_cancel_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_cancel_message,$/;"	m	class:libtorrent::close_reason_t
invalid_choke	torrent/include/libtorrent/error_code.hpp	/^			invalid_choke,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_choke_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_choke_message,$/;"	m	class:libtorrent::close_reason_t
invalid_dht_port	torrent/include/libtorrent/error_code.hpp	/^			invalid_dht_port,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_dht_port_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_dht_port_message,$/;"	m	class:libtorrent::close_reason_t
invalid_distance_code_lengths	torrent/include/libtorrent/gzip.hpp	/^			invalid_distance_code_lengths,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_dont_have	torrent/include/libtorrent/error_code.hpp	/^			invalid_dont_have,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_dont_have_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_dont_have_message,$/;"	m	class:libtorrent::close_reason_t
invalid_encrypt_handshake	torrent/include/libtorrent/error_code.hpp	/^			invalid_encrypt_handshake,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_encryption_constant	torrent/include/libtorrent/error_code.hpp	/^			invalid_encryption_constant,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_entry_type	torrent/include/libtorrent/error_code.hpp	/^			invalid_entry_type,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_escaped_string	torrent/include/libtorrent/error_code.hpp	/^			invalid_escaped_string,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_extended	torrent/include/libtorrent/error_code.hpp	/^			invalid_extended,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_extended_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_extended_message,$/;"	m	class:libtorrent::close_reason_t
invalid_file_tag	torrent/include/libtorrent/error_code.hpp	/^			invalid_file_tag,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_files_entry	torrent/include/libtorrent/error_code.hpp	/^			invalid_files_entry,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_gzip_header	torrent/include/libtorrent/gzip.hpp	/^			invalid_gzip_header,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_hash_entry	torrent/include/libtorrent/error_code.hpp	/^			invalid_hash_entry,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_hash_list	torrent/include/libtorrent/error_code.hpp	/^			invalid_hash_list,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_hash_piece	torrent/include/libtorrent/error_code.hpp	/^			invalid_hash_piece,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_have	torrent/include/libtorrent/error_code.hpp	/^			invalid_have,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_have_all	torrent/include/libtorrent/error_code.hpp	/^			invalid_have_all,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_have_all_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_have_all_message,$/;"	m	class:libtorrent::close_reason_t
invalid_have_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_have_message,$/;"	m	class:libtorrent::close_reason_t
invalid_have_none	torrent/include/libtorrent/error_code.hpp	/^			invalid_have_none,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_have_none_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_have_none_message,$/;"	m	class:libtorrent::close_reason_t
invalid_hostname	torrent/include/libtorrent/error_code.hpp	/^			invalid_hostname,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_id	torrent/include/libtorrent/i2p_stream.hpp	/^			invalid_id,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
invalid_info_hash	torrent/include/libtorrent/close_reason.hpp	/^		invalid_info_hash,$/;"	m	class:libtorrent::close_reason_t
invalid_info_hash	torrent/include/libtorrent/error_code.hpp	/^			invalid_info_hash,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_interested	torrent/include/libtorrent/error_code.hpp	/^			invalid_interested,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_interested_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_interested_message,$/;"	m	class:libtorrent::close_reason_t
invalid_key	torrent/include/libtorrent/i2p_stream.hpp	/^			invalid_key,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
invalid_listen_socket	torrent/include/libtorrent/error_code.hpp	/^			invalid_listen_socket,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_literal_code_in_block	torrent/include/libtorrent/gzip.hpp	/^			invalid_literal_code_in_block,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_literal_length_code_lengths	torrent/include/libtorrent/gzip.hpp	/^			invalid_literal_length_code_lengths,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_lt_tracker_message	torrent/include/libtorrent/error_code.hpp	/^			invalid_lt_tracker_message,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_message,$/;"	m	class:libtorrent::close_reason_t
invalid_message	torrent/include/libtorrent/error_code.hpp	/^			invalid_message,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_message_id	torrent/include/libtorrent/close_reason.hpp	/^		invalid_message_id,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata	torrent/include/libtorrent/close_reason.hpp	/^		invalid_metadata,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_metadata_message,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata_message	torrent/include/libtorrent/error_code.hpp	/^			invalid_metadata_message,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_metadata_offset	torrent/include/libtorrent/close_reason.hpp	/^		invalid_metadata_offset,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata_offset	torrent/include/libtorrent/error_code.hpp	/^			invalid_metadata_offset,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_metadata_request	torrent/include/libtorrent/error_code.hpp	/^			invalid_metadata_request,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_metadata_request_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_metadata_request_message,$/;"	m	class:libtorrent::close_reason_t
invalid_metadata_size	torrent/include/libtorrent/error_code.hpp	/^			invalid_metadata_size,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_not_interested	torrent/include/libtorrent/error_code.hpp	/^			invalid_not_interested,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_not_interested_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_not_interested_message,$/;"	m	class:libtorrent::close_reason_t
invalid_pad_size	torrent/include/libtorrent/error_code.hpp	/^			invalid_pad_size,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_peer_dict	torrent/include/libtorrent/error_code.hpp	/^			invalid_peer_dict,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_peers_entry	torrent/include/libtorrent/error_code.hpp	/^			invalid_peers_entry,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_pex_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_pex_message,$/;"	m	class:libtorrent::close_reason_t
invalid_pex_message	torrent/include/libtorrent/error_code.hpp	/^			invalid_pex_message,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_piece	torrent/include/libtorrent/error_code.hpp	/^			invalid_piece,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_piece_index	torrent/include/libtorrent/error_code.hpp	/^			invalid_piece_index,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_piece_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_piece_message,$/;"	m	class:libtorrent::close_reason_t
invalid_piece_requests	torrent/include/libtorrent/performance_counters.hpp	/^			invalid_piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
invalid_piece_size	torrent/include/libtorrent/error_code.hpp	/^			invalid_piece_size,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_pkts_in	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t invalid_pkts_in;$/;"	m	struct:libtorrent::utp_status
invalid_port	torrent/include/libtorrent/error_code.hpp	/^			invalid_port,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_range	torrent/include/libtorrent/error_code.hpp	/^			invalid_range,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_redirection	torrent/include/libtorrent/error_code.hpp	/^			invalid_redirection,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_reject	torrent/include/libtorrent/error_code.hpp	/^			invalid_reject,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_reject_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_reject_message,$/;"	m	class:libtorrent::close_reason_t
invalid_request	torrent/include/libtorrent/error_code.hpp	/^			invalid_request,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_request_alert	torrent/src/alert.cpp	/^	invalid_request_alert::invalid_request_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::invalid_request_alert
invalid_request_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_request_message,$/;"	m	class:libtorrent::close_reason_t
invalid_session_handle	torrent/include/libtorrent/error_code.hpp	/^			invalid_session_handle,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_slot_list	torrent/include/libtorrent/error_code.hpp	/^			invalid_slot_list,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_ssl_cert	torrent/include/libtorrent/error_code.hpp	/^			invalid_ssl_cert,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_stored_block_length	torrent/include/libtorrent/gzip.hpp	/^			invalid_stored_block_length,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
invalid_suggest	torrent/include/libtorrent/error_code.hpp	/^			invalid_suggest,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_suggest_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_suggest_message,$/;"	m	class:libtorrent::close_reason_t
invalid_swarm_metadata	torrent/include/libtorrent/error_code.hpp	/^			invalid_swarm_metadata,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_torrent_handle	torrent/include/libtorrent/error_code.hpp	/^			invalid_torrent_handle,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_tracker_action	torrent/include/libtorrent/error_code.hpp	/^			invalid_tracker_action,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_tracker_response	torrent/include/libtorrent/error_code.hpp	/^			invalid_tracker_response,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_tracker_response_length	torrent/include/libtorrent/error_code.hpp	/^			invalid_tracker_response_length,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_tracker_transaction_id	torrent/include/libtorrent/error_code.hpp	/^			invalid_tracker_transaction_id,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_unchoke	torrent/include/libtorrent/error_code.hpp	/^			invalid_unchoke,$/;"	e	enum:libtorrent::errors::error_code_enum
invalid_unchoke_message	torrent/include/libtorrent/close_reason.hpp	/^		invalid_unchoke_message,$/;"	m	class:libtorrent::close_reason_t
invariant_access	torrent/include/libtorrent/invariant_check.hpp	/^	class invariant_access$/;"	c	namespace:libtorrent
invariant_checker	torrent/include/libtorrent/invariant_check.hpp	/^	struct invariant_checker {};$/;"	s	namespace:libtorrent
invariant_checker_impl	torrent/include/libtorrent/invariant_check.hpp	/^		explicit invariant_checker_impl(T const& self_)$/;"	f	struct:libtorrent::invariant_checker_impl
invariant_checker_impl	torrent/include/libtorrent/invariant_check.hpp	/^		invariant_checker_impl(invariant_checker_impl const& rhs)$/;"	f	struct:libtorrent::invariant_checker_impl
invariant_checker_impl	torrent/include/libtorrent/invariant_check.hpp	/^	struct invariant_checker_impl : invariant_checker$/;"	s	namespace:libtorrent
invoke	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	virtual bool invoke(observer_ptr) { return false; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
invoke	torrent/kademlia/get_item.cpp	/^bool get_item::invoke(observer_ptr o)$/;"	f	class:libtorrent::dht::get_item
invoke	torrent/kademlia/get_peers.cpp	/^bool get_peers::invoke(observer_ptr o)$/;"	f	class:libtorrent::dht::get_peers
invoke	torrent/kademlia/get_peers.cpp	/^bool obfuscated_get_peers::invoke(observer_ptr o)$/;"	f	class:libtorrent::dht::obfuscated_get_peers
invoke	torrent/kademlia/put_data.cpp	/^bool put_data::invoke(observer_ptr o)$/;"	f	class:libtorrent::dht::put_data
invoke	torrent/kademlia/refresh.cpp	/^bool bootstrap::invoke(observer_ptr o)$/;"	f	class:libtorrent::dht::bootstrap
invoke	torrent/kademlia/rpc_manager.cpp	/^bool rpc_manager::invoke(entry& e, udp::endpoint const& target_addr$/;"	f	class:libtorrent::dht::rpc_manager
invoke_cb	torrent/include/libtorrent/kademlia/direct_request.hpp	/^	void invoke_cb(msg const& m)$/;"	f	struct:libtorrent::dht::direct_traversal
invoke_count	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int invoke_count() const { TORRENT_ASSERT(m_invoke_count >= 0); return m_invoke_count; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
io	torrent/include/libtorrent/disk_io_job.hpp	/^			} io;$/;"	m	union:libtorrent::disk_io_job::un	typeref:struct:libtorrent::disk_io_job::un::io_args
io_args	torrent/include/libtorrent/disk_io_job.hpp	/^			struct io_args$/;"	s	union:libtorrent::disk_io_job::un
io_control	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void io_control(IO_Control_Command& ioc)$/;"	f	struct:libtorrent::aux::socket_type
io_control	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void io_control(IO_Control_Command& ioc, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
io_control	torrent/include/libtorrent/proxy_base.hpp	/^	void io_control(IO_Control_Command& ioc)$/;"	f	class:libtorrent::proxy_base
io_control	torrent/include/libtorrent/proxy_base.hpp	/^	void io_control(IO_Control_Command& ioc, error_code& ec)$/;"	f	class:libtorrent::proxy_base
io_control	torrent/include/libtorrent/ssl_stream.hpp	/^	void io_control(IO_Control_Command& ioc)$/;"	f	class:libtorrent::ssl_stream
io_control	torrent/include/libtorrent/ssl_stream.hpp	/^	void io_control(IO_Control_Command& ioc, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
io_control	torrent/include/libtorrent/utp_stream.hpp	/^	void io_control(IO_Control_Command&) {}$/;"	f	struct:libtorrent::utp_stream
io_control	torrent/include/libtorrent/utp_stream.hpp	/^	void io_control(IO_Control_Command&, error_code&) {}$/;"	f	struct:libtorrent::utp_stream
io_thread	torrent/bak/connection_tester.cpp	/^void io_thread(io_service* ios)$/;"	f
ioc	torrent/include/libtorrent/aux_/socket_type.hpp	53;"	d
iocontrol	torrent/include/libtorrent/operations.hpp	/^		iocontrol,$/;"	m	class:libtorrent::operation_t
ios	torrent/include/libtorrent/aux_/session_impl.hpp	/^				boost::asio::io_service ios;$/;"	m	struct:libtorrent::aux::final::work_thread_t
ios	torrent/include/libtorrent/peer_connection.hpp	/^		io_service* ios;$/;"	m	struct:libtorrent::peer_connection_args
iothread	torrent/src/create_torrent.cpp	/^		disk_io_thread& iothread;$/;"	m	struct:libtorrent::__anon134::hash_state	file:
iov	torrent/src/file.cpp	/^	std::int64_t iov(Fun f, handle_type fd, std::int64_t file_offset$/;"	f	namespace:libtorrent::__anon81
iov_base	torrent/src/file.cpp	/^	void* iov_base;$/;"	m	struct:__anon79::iovec	file:
iov_len	torrent/src/file.cpp	/^	std::size_t iov_len;$/;"	m	struct:__anon79::iovec	file:
iovec	torrent/src/file.cpp	/^struct iovec$/;"	s	namespace:__anon79	file:
iovec_t	torrent/src/utp_stream.cpp	/^		iovec_t(void* b, std::size_t l): buf(b), len(l) {}$/;"	f	struct:libtorrent::utp_socket_impl::iovec_t
iovec_t	torrent/src/utp_stream.cpp	/^	struct iovec_t$/;"	s	struct:libtorrent::utp_socket_impl	file:
ip	include/client.h	/^    char ip[IPADDR_LEN];$/;"	m	struct:client
ip	include/config.h	/^    char ip[32];$/;"	m	struct:netcard_param
ip	include/config.h	/^    char ip[32];$/;"	m	struct:server_info
ip	qt_pro/external.h	/^    char ip[32];$/;"	m	struct:netcard_param
ip	qt_pro/external.h	/^    char ip[32];$/;"	m	struct:server_info
ip	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> TORRENT_DEPRECATED_MEMBER ip;$/;"	m	struct:libtorrent::peer_alert
ip	torrent/include/libtorrent/peer.hpp	/^		address_v4::bytes_type ip;$/;"	m	struct:libtorrent::ipv4_peer_entry
ip	torrent/include/libtorrent/peer.hpp	/^		address_v6::bytes_type ip;$/;"	m	struct:libtorrent::ipv6_peer_entry
ip	torrent/include/libtorrent/peer_info.hpp	/^		tcp::endpoint ip;$/;"	m	struct:libtorrent::peer_info
ip	torrent/include/libtorrent/peer_info.hpp	/^		tcp::endpoint ip;$/;"	m	struct:libtorrent::peer_list_entry
ip	torrent/include/libtorrent/peer_list.hpp	/^		external_ip ip;$/;"	m	struct:libtorrent::torrent_state
ip	torrent/include/libtorrent/torrent_peer.hpp	/^		tcp::endpoint ip() const { return tcp::endpoint(address(), port); }$/;"	f	struct:libtorrent::torrent_peer
ip6_count	torrent/include/libtorrent/aux_/route.h	/^	int	ip6_count;$/;"	m	struct:route_cb
ipWidget	qt_pro/ui_downloadwindow.h	/^    QWidget *ipWidget;$/;"	m	class:Ui_DownloadWindow
ip_address	torrent/include/libtorrent/upnp.hpp	/^	std::string ip_address;$/;"	m	struct:libtorrent::ip_address_parse_state
ip_address_parse_state	torrent/include/libtorrent/upnp.hpp	/^struct ip_address_parse_state: error_code_parse_state$/;"	s	namespace:libtorrent
ip_block	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t ip_block = 8_bit;$/;"	m	namespace:libtorrent::alert_category
ip_block_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t ip_block_notification = 8_bit;$/;"	m	class:libtorrent::alert
ip_block_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::ip_block_notification;$/;"	m	class:libtorrent::alert	file:
ip_change_notifier	torrent/include/libtorrent/aux_/ip_notifier.hpp	/^	struct TORRENT_EXTRA_EXPORT ip_change_notifier$/;"	s	namespace:libtorrent::aux
ip_change_notifier_impl	torrent/src/ip_notifier.cpp	/^	explicit ip_change_notifier_impl(io_service& ios)$/;"	f	struct:libtorrent::aux::__anon43::final
ip_count	torrent/include/libtorrent/aux_/route.h	/^	int	ip_count;$/;"	m	struct:route_cb
ip_filter	torrent/include/libtorrent/ip_filter.hpp	/^struct TORRENT_EXPORT ip_filter$/;"	s	namespace:libtorrent
ip_filter_applies	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER ip_filter_applies = false;$/;"	m	struct:libtorrent::torrent_status
ip_filter_updated	torrent/src/torrent.cpp	/^	void torrent::ip_filter_updated()$/;"	f	class:libtorrent::torrent
ip_interface	torrent/include/libtorrent/enum_net.hpp	/^	struct ip_interface$/;"	s	namespace:libtorrent
ip_label	qt_pro/downloadwindow.h	/^   QLabel *ip_label;$/;"	m	class:DownloadWindow
ip_label	qt_pro/mainwindow.h	/^    QLabel *ip_label;$/;"	m	class:MainWindow
ip_label	qt_pro/oswindow.h	/^    QLabel *ip_label;$/;"	m	class:OSWindow
ip_label	qt_pro/ui_downloadwindow.h	/^    QLabel *ip_label;$/;"	m	class:Ui_DownloadWindow
ip_label	qt_pro/uploadwindow.h	/^    QLabel *ip_label;$/;"	m	class:Uploadwindow
ip_overhead_download_rate	torrent/include/libtorrent/session_status.hpp	/^		int ip_overhead_download_rate;$/;"	m	struct:libtorrent::session_status
ip_overhead_upload_rate	torrent/include/libtorrent/session_status.hpp	/^		int ip_overhead_upload_rate;$/;"	m	struct:libtorrent::session_status
ip_range	torrent/include/libtorrent/ip_filter.hpp	/^struct ip_range$/;"	s	namespace:libtorrent
ip_route	torrent/include/libtorrent/enum_net.hpp	/^	struct ip_route$/;"	s	namespace:libtorrent
ip_set	torrent/include/libtorrent/kademlia/routing_table.hpp	/^struct TORRENT_EXTRA_EXPORT ip_set$/;"	s	namespace:libtorrent::dht
ip_voter	torrent/include/libtorrent/ip_voter.hpp	/^	struct TORRENT_EXTRA_EXPORT ip_voter$/;"	s	namespace:libtorrent
ip_voter	torrent/src/ip_voter.cpp	/^	ip_voter::ip_voter()$/;"	f	class:libtorrent::ip_voter
iphlpapi	torrent/include/libtorrent/aux_/win_util.hpp	/^	struct iphlpapi {$/;"	s	namespace:libtorrent::aux
ips	torrent/kademlia/dht_storage.cpp	/^		bloom_filter<128> ips;$/;"	m	struct:libtorrent::dht::__anon153::dht_immutable_item	file:
ipv4	torrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<address_v4> ipv4;$/;"	m	struct:libtorrent::tracker_request
ipv4_hash	torrent/include/libtorrent/kademlia/routing_table.hpp	/^struct ipv4_hash$/;"	s	namespace:libtorrent::dht
ipv4_peer	torrent/include/libtorrent/torrent_peer.hpp	/^	struct TORRENT_EXTRA_EXPORT ipv4_peer : torrent_peer$/;"	s	namespace:libtorrent
ipv4_peer	torrent/src/torrent_peer.cpp	/^	ipv4_peer::ipv4_peer(tcp::endpoint const& ep, bool c$/;"	f	class:libtorrent::ipv4_peer
ipv4_peer_entry	torrent/include/libtorrent/peer.hpp	/^	struct ipv4_peer_entry$/;"	s	namespace:libtorrent
ipv4_peer_type	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^			ipv4_peer_type,$/;"	e	enum:libtorrent::torrent_peer_allocator_interface::peer_type_t
ipv6	torrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<address_v6> ipv6;$/;"	m	struct:libtorrent::tracker_request
ipv6_hash	torrent/include/libtorrent/kademlia/routing_table.hpp	/^struct ipv6_hash$/;"	s	namespace:libtorrent::dht
ipv6_peer	torrent/include/libtorrent/torrent_peer.hpp	/^	struct TORRENT_EXTRA_EXPORT ipv6_peer : torrent_peer$/;"	s	namespace:libtorrent
ipv6_peer	torrent/src/torrent_peer.cpp	/^	ipv6_peer::ipv6_peer(tcp::endpoint const& ep, bool c$/;"	f	class:libtorrent::ipv6_peer
ipv6_peer_entry	torrent/include/libtorrent/peer.hpp	/^	struct ipv6_peer_entry$/;"	s	namespace:libtorrent
ipv6_peer_type	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^			ipv6_peer_type,$/;"	e	enum:libtorrent::torrent_peer_allocator_interface::peer_type_t
ipx_count	torrent/include/libtorrent/aux_/route.h	/^	int	ipx_count;$/;"	m	struct:route_cb
isDel	include/StoreConfig.h	/^    uint8_t     isDel; \/\/å é¤æ å¿ï¼è¿åæ¨¡å¼è®°å¾åå»ºå³å é¤$/;"	m	struct:_YZY_QCOW_ENTRY
isEditMode	include/StoreConfig.h	/^    uint8_t             isEditMode;  \/\/æ¯å¦ä¸ºç¼è¾æ¨¡å¼$/;"	m	struct:_YZY_STORE_CONFIG
isIPvalidate	qt_pro/configwindow.cpp	/^bool isIPvalidate(const QString &strIP)$/;"	f
isLegalUTF8	torrent/src/ConvertUTF.cpp	/^Boolean isLegalUTF8(const UTF8 *source, int length) {$/;"	f
isLegalUTF8Sequence	torrent/src/ConvertUTF.cpp	/^Boolean isLegalUTF8Sequence(const UTF8 *source, const UTF8 *sourceEnd) {$/;"	f
isReduction	include/StoreConfig.h	/^    uint8_t     isReduction;$/;"	m	struct:_YZY_QCOW_ENTRY
is_aborted	torrent/include/libtorrent/torrent.hpp	/^		bool is_aborted() const { return m_abort; }$/;"	f	class:libtorrent::torrent
is_absolute_path	torrent/bak/client_test.cpp	/^bool is_absolute_path(std::string const& f)$/;"	f
is_alpha	torrent/src/string_util.cpp	/^	bool is_alpha(char c)$/;"	f	namespace:libtorrent
is_any	torrent/src/broadcast_socket.cpp	/^	bool is_any(address const& addr)$/;"	f	namespace:libtorrent
is_auto_managed	torrent/include/libtorrent/torrent.hpp	/^		bool is_auto_managed() const { return m_auto_managed; }$/;"	f	class:libtorrent::torrent
is_auto_managed	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::is_auto_managed() const$/;"	f	class:libtorrent::torrent_handle
is_big_endian	torrent/src/sha1.cpp	/^	bool is_big_endian()$/;"	f	namespace:libtorrent::__anon103
is_binary	torrent/src/entry.cpp	/^	bool is_binary(std::string const& str)$/;"	f	namespace:libtorrent::__anon63
is_blocked	torrent/src/disk_job_fence.cpp	/^	bool disk_job_fence::is_blocked(disk_io_job* j)$/;"	f	class:libtorrent::aux::disk_job_fence
is_cancel_requested	virt-p2v/src/conversion.c	/^is_cancel_requested (void)$/;"	f	file:
is_choked	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::is_choked() const$/;"	f	class:libtorrent::peer_connection_handle
is_closed	torrent/include/libtorrent/udp_socket.hpp	/^		bool is_closed() const { return m_abort; }$/;"	f	class:libtorrent::udp_socket
is_complete	torrent/src/path.cpp	/^	bool is_complete(string_view f)$/;"	f	namespace:libtorrent
is_connect_candidate	torrent/src/peer_list.cpp	/^	bool peer_list::is_connect_candidate(torrent_peer const& p) const$/;"	f	class:libtorrent::peer_list
is_connecting	torrent/include/libtorrent/peer_connection.hpp	/^		bool is_connecting() const { return m_connecting; }$/;"	f	class:libtorrent::peer_connection
is_connecting	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::is_connecting() const$/;"	f	class:libtorrent::peer_connection_handle
is_deleted	torrent/include/libtorrent/torrent.hpp	/^		bool is_deleted() const { return m_deleted; }$/;"	f	class:libtorrent::torrent
is_dhcp	include/config.h	/^    char is_dhcp;                   \/\/0 ä¸å¯å¨ 1 å¯å¨$/;"	m	struct:netcard_param
is_dhcp	qt_pro/external.h	/^    char is_dhcp;                   \/\/0 ä¸å¯å¨ 1 å¯å¨$/;"	m	struct:netcard_param
is_dht_running	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool is_dht_running() const { return (m_dht.get() != nullptr); }$/;"	f	struct:libtorrent::aux::final
is_dht_running	torrent/src/session_handle.cpp	/^	bool session_handle::is_dht_running() const$/;"	f	class:libtorrent::session_handle
is_digit	torrent/include/libtorrent/string_util.hpp	/^	inline bool is_digit(char c)$/;"	f	namespace:libtorrent
is_directory	torrent/src/path.cpp	/^	bool is_directory(std::string const& f, error_code& ec)$/;"	f	namespace:libtorrent
is_disconnecting	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::is_disconnecting() const$/;"	f	class:libtorrent::peer_connection_handle
is_disk_buffer	torrent/src/disk_buffer_pool.cpp	/^	bool disk_buffer_pool::is_disk_buffer(char* buffer$/;"	f	class:libtorrent::disk_buffer_pool
is_disk_buffer	torrent/src/disk_buffer_pool.cpp	/^	bool disk_buffer_pool::is_disk_buffer(char* buffer) const$/;"	f	class:libtorrent::disk_buffer_pool
is_downloaded	torrent/src/piece_picker.cpp	/^	bool piece_picker::is_downloaded(piece_block const block) const$/;"	f	class:libtorrent::piece_picker
is_downloading	torrent/include/libtorrent/piece_picker.hpp	/^		bool is_downloading(piece_index_t index) const$/;"	f	class:libtorrent::piece_picker
is_downloading_state	torrent/src/torrent.cpp	/^bool is_downloading_state(int const st)$/;"	f	namespace:libtorrent::__anon104
is_erase_candidate	torrent/src/peer_list.cpp	/^	bool peer_list::is_erase_candidate(torrent_peer const& pe) const$/;"	f	class:libtorrent::peer_list
is_error_code_enum	torrent/include/libtorrent/bdecode.hpp	/^	template<> struct is_error_code_enum<libtorrent::bdecode_errors::error_code_enum>$/;"	s	namespace:boost::system
is_error_code_enum	torrent/include/libtorrent/error_code.hpp	/^	template<> struct is_error_code_enum<libtorrent::errors::error_code_enum>$/;"	s	namespace:boost::system
is_error_code_enum	torrent/include/libtorrent/error_code.hpp	/^	template<> struct is_error_code_enum<libtorrent::errors::http_errors>$/;"	s	namespace:boost::system
is_error_code_enum	torrent/include/libtorrent/gzip.hpp	/^struct is_error_code_enum<libtorrent::gzip_errors::error_code_enum>$/;"	s	namespace:boost::system
is_error_code_enum	torrent/include/libtorrent/i2p_stream.hpp	/^struct is_error_code_enum<libtorrent::i2p_error::i2p_error_code>$/;"	s	namespace:boost::system
is_error_code_enum	torrent/include/libtorrent/natpmp.hpp	/^	template<> struct is_error_code_enum<libtorrent::errors::pcp_errors>$/;"	s	namespace:boost::system
is_error_code_enum	torrent/include/libtorrent/socks5_stream.hpp	/^	template<> struct is_error_code_enum<libtorrent::socks_error::socks_error_code>$/;"	s	namespace:boost::system
is_error_code_enum	torrent/include/libtorrent/upnp.hpp	/^	template<> struct is_error_code_enum<libtorrent::upnp_errors::error_code_enum>$/;"	s	namespace:boost::system
is_error_condition_enum	torrent/include/libtorrent/gzip.hpp	/^struct is_error_condition_enum<libtorrent::gzip_errors::error_code_enum>$/;"	s	namespace:boost::system
is_finished	torrent/include/libtorrent/peer_list.hpp	/^		bool is_finished = false;$/;"	m	struct:libtorrent::torrent_state
is_finished	torrent/include/libtorrent/piece_picker.hpp	/^		bool is_finished() const$/;"	f	class:libtorrent::piece_picker
is_finished	torrent/include/libtorrent/torrent_status.hpp	/^		bool is_finished = false;$/;"	m	struct:libtorrent::torrent_status
is_finished	torrent/src/piece_picker.cpp	/^	bool piece_picker::is_finished(piece_block const block) const$/;"	f	class:libtorrent::piece_picker
is_finished	torrent/src/torrent.cpp	/^	bool torrent::is_finished() const$/;"	f	class:libtorrent::torrent
is_finished	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::is_finished() const$/;"	f	class:libtorrent::torrent_handle
is_force_erase_candidate	torrent/src/peer_list.cpp	/^	bool peer_list::is_force_erase_candidate(torrent_peer const& pe) const$/;"	f	class:libtorrent::peer_list
is_full	torrent/kademlia/routing_table.cpp	/^bool routing_table::is_full(int const bucket) const$/;"	f	class:libtorrent::dht::routing_table
is_global	torrent/src/broadcast_socket.cpp	/^	bool is_global(address const& a)$/;"	f	namespace:libtorrent
is_hex	torrent/src/hex.cpp	/^	bool is_hex(span<char const> in)$/;"	f	namespace:libtorrent::aux
is_i2p	torrent/include/libtorrent/torrent.hpp	/^		bool is_i2p() const { return m_torrent_file && m_torrent_file->is_i2p(); }$/;"	f	class:libtorrent::torrent
is_i2p	torrent/include/libtorrent/torrent_info.hpp	/^		bool is_i2p() const { return (m_flags & i2p) != 0; }$/;"	f	class:libtorrent::torrent_info
is_i2p	torrent/src/socket_type.cpp	/^	bool is_i2p(socket_type const& s)$/;"	f	namespace:libtorrent::aux
is_i2p_addr	torrent/include/libtorrent/torrent_peer.hpp	/^		bool is_i2p_addr:1;$/;"	m	struct:libtorrent::torrent_peer
is_i2p_url	torrent/src/string_util.cpp	/^	bool is_i2p_url(std::string const& url)$/;"	f	namespace:libtorrent
is_inactive	torrent/src/torrent.cpp	/^	bool torrent::is_inactive() const$/;"	f	class:libtorrent::torrent
is_inactive_internal	torrent/src/torrent.cpp	/^	bool torrent::is_inactive_internal() const$/;"	f	class:libtorrent::torrent
is_interesting	torrent/include/libtorrent/peer_connection.hpp	/^		bool is_interesting() const { return m_interesting; }$/;"	f	class:libtorrent::peer_connection
is_interesting	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::is_interesting() const$/;"	f	class:libtorrent::peer_connection_handle
is_ip_address	torrent/src/broadcast_socket.cpp	/^	bool is_ip_address(std::string const& host)$/;"	f	namespace:libtorrent
is_iso_environment	virt-p2v/src/p2v.c	/^int is_iso_environment = 0;$/;"	v
is_iso_environment	virt-p2v/src/p2v_transform.c	/^int is_iso_environment = 0;$/;"	v
is_link_local	torrent/src/broadcast_socket.cpp	/^	bool is_link_local(address const& a)$/;"	f	namespace:libtorrent
is_listening	torrent/src/session_handle.cpp	/^	bool session_handle::is_listening() const$/;"	f	class:libtorrent::session_handle
is_listening	torrent/src/session_impl.cpp	/^	bool session_impl::is_listening() const$/;"	f	class:libtorrent::aux::session_impl
is_loaded	torrent/include/libtorrent/torrent_info.hpp	/^		bool is_loaded() const { return m_piece_hashes || !m_merkle_tree.empty(); }$/;"	f	class:libtorrent::torrent_info
is_loaded	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER is_loaded = false;$/;"	m	struct:libtorrent::torrent_status
is_local	torrent/src/broadcast_socket.cpp	/^	bool is_local(address const& a)$/;"	f	namespace:libtorrent
is_loopback	torrent/src/broadcast_socket.cpp	/^	bool is_loopback(address const& addr)$/;"	f	namespace:libtorrent
is_merkle_torrent	torrent/include/libtorrent/torrent_info.hpp	/^		bool is_merkle_torrent() const { return !m_merkle_tree.empty(); }$/;"	f	class:libtorrent::torrent_info
is_mutable	torrent/include/libtorrent/kademlia/item.hpp	/^	bool is_mutable() const { return m_mutable; }$/;"	f	class:libtorrent::dht::item
is_n_buckets	virt-p2v/include/gnulib/hash.h	/^    bool is_n_buckets;          \/* if CANDIDATE really means table size *\/$/;"	m	struct:hash_tuning
is_not_thread	torrent/include/libtorrent/debug.hpp	/^		bool is_not_thread() const$/;"	f	struct:libtorrent::single_threaded
is_ok_status	torrent/src/http_parser.cpp	/^	bool is_ok_status(int http_status)$/;"	f	namespace:libtorrent
is_online	include/client.h	/^    char is_online;$/;"	m	struct:client
is_open	torrent/include/libtorrent/i2p_stream.hpp	/^	bool is_open() const$/;"	f	class:libtorrent::i2p_connection
is_open	torrent/include/libtorrent/proxy_base.hpp	/^	bool is_open() const { return m_sock.is_open(); }$/;"	f	class:libtorrent::proxy_base
is_open	torrent/include/libtorrent/ssl_stream.hpp	/^	bool is_open() const$/;"	f	class:libtorrent::ssl_stream
is_open	torrent/include/libtorrent/udp_socket.hpp	/^		bool is_open() const { return m_abort == false; }$/;"	f	class:libtorrent::udp_socket
is_open	torrent/include/libtorrent/utp_stream.hpp	/^	bool is_open() const { return m_open; }$/;"	f	struct:libtorrent::utp_stream
is_open	torrent/src/file.cpp	/^	bool file::is_open() const$/;"	f	class:libtorrent::file
is_open	torrent/src/socket_type.cpp	/^	bool socket_type::is_open() const$/;"	f	class:libtorrent::aux::socket_type
is_outgoing	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::is_outgoing() const$/;"	f	class:libtorrent::peer_connection_handle
is_paused	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool is_paused() const { return m_paused; }$/;"	f	struct:libtorrent::aux::final
is_paused	torrent/include/libtorrent/peer_list.hpp	/^		bool is_paused = false;$/;"	m	struct:libtorrent::torrent_state
is_paused	torrent/src/session_handle.cpp	/^	bool session_handle::is_paused() const$/;"	f	class:libtorrent::session_handle
is_paused	torrent/src/torrent.cpp	/^	bool torrent::is_paused() const$/;"	f	class:libtorrent::torrent
is_paused	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::is_paused() const$/;"	f	class:libtorrent::torrent_handle
is_peer_interested	torrent/include/libtorrent/peer_connection.hpp	/^		bool is_peer_interested() const { return m_peer_interested; }$/;"	f	class:libtorrent::peer_connection
is_peer_interested	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::is_peer_interested() const$/;"	f	class:libtorrent::peer_connection_handle
is_physical_drive	torrent/include/libtorrent/file.hpp	/^		bool is_physical_drive;$/;"	m	struct:libtorrent::file
is_piece_finished	torrent/src/piece_picker.cpp	/^	bool piece_picker::is_piece_finished(piece_index_t const index) const$/;"	f	class:libtorrent::piece_picker
is_piece_free	torrent/src/piece_picker.cpp	/^	bool piece_picker::is_piece_free(piece_index_t const piece$/;"	f	class:libtorrent::piece_picker
is_predictive_piece	torrent/include/libtorrent/torrent.hpp	/^		bool is_predictive_piece(piece_index_t index) const$/;"	f	class:libtorrent::torrent
is_print	torrent/src/string_util.cpp	/^	bool is_print(char c)$/;"	f	namespace:libtorrent
is_queued	torrent/src/bandwidth_manager.cpp	/^	bool bandwidth_manager::is_queued(bandwidth_socket const* peer) const$/;"	f	class:libtorrent::bandwidth_manager
is_recv_plaintext	torrent/include/libtorrent/pe_crypto.hpp	/^		bool is_recv_plaintext() const$/;"	f	struct:libtorrent::encryption_handler
is_redirect	torrent/src/http_parser.cpp	/^	bool is_redirect(int http_status)$/;"	f	namespace:libtorrent
is_requested	torrent/src/piece_picker.cpp	/^	bool piece_picker::is_requested(piece_block const block) const$/;"	f	class:libtorrent::piece_picker
is_resume_file	torrent/bak/client_test.cpp	/^bool is_resume_file(std::string const& s)$/;"	f
is_root_path	torrent/src/path.cpp	/^	bool is_root_path(std::string const& f)$/;"	f	namespace:libtorrent
is_running	virt-p2v/src/conversion.c	/^is_running (void)$/;"	f	file:
is_seed	torrent/src/peer_connection.cpp	/^	bool peer_connection::is_seed() const$/;"	f	class:libtorrent::peer_connection
is_seed	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::is_seed() const$/;"	f	class:libtorrent::peer_connection_handle
is_seed	torrent/src/torrent.cpp	/^	bool torrent::is_seed() const$/;"	f	class:libtorrent::torrent
is_seed	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::is_seed() const$/;"	f	class:libtorrent::torrent_handle
is_seeding	torrent/include/libtorrent/piece_picker.hpp	/^		bool is_seeding() const { return m_num_have == num_pieces(); }$/;"	f	class:libtorrent::piece_picker
is_seeding	torrent/include/libtorrent/torrent_status.hpp	/^		bool is_seeding = false;$/;"	m	struct:libtorrent::torrent_status
is_self_connection	torrent/src/torrent.cpp	/^	bool torrent::is_self_connection(peer_id const& pid) const$/;"	f	class:libtorrent::torrent
is_send_plaintext	torrent/include/libtorrent/pe_crypto.hpp	/^		bool is_send_plaintext() const$/;"	f	struct:libtorrent::encryption_handler
is_sequential_download	torrent/include/libtorrent/torrent.hpp	/^		bool is_sequential_download() const$/;"	f	class:libtorrent::torrent
is_sequential_download	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::is_sequential_download() const$/;"	f	class:libtorrent::torrent_handle
is_single_thread	torrent/include/libtorrent/debug.hpp	/^		bool is_single_thread() const$/;"	f	struct:libtorrent::single_threaded
is_single_thread	torrent/include/libtorrent/torrent.hpp	/^		bool is_single_thread() const { return single_threaded::is_single_thread(); }$/;"	f	class:libtorrent::torrent
is_single_thread	torrent/src/peer_connection.cpp	/^	bool peer_connection::is_single_thread() const$/;"	f	class:libtorrent::peer_connection
is_sorted	torrent/kademlia/traversal_algorithm.cpp	/^bool is_sorted(It b, It e, Cmp cmp)$/;"	f	namespace:libtorrent::dht
is_space	torrent/src/string_util.cpp	/^	bool is_space(char c)$/;"	f	namespace:libtorrent
is_sparse	torrent/src/file.cpp	/^	bool is_sparse(HANDLE file)$/;"	f	namespace:libtorrent
is_ssl	torrent/src/listen_socket_handle.cpp	/^	bool listen_socket_handle::is_ssl() const$/;"	f	class:libtorrent::aux::listen_socket_handle
is_ssl	torrent/src/socket_type.cpp	/^	bool is_ssl(socket_type const& s)$/;"	f	namespace:libtorrent::aux
is_ssl_torrent	torrent/include/libtorrent/torrent.hpp	/^		bool is_ssl_torrent() const { return m_ssl_torrent; }$/;"	f	class:libtorrent::torrent
is_teredo	torrent/src/broadcast_socket.cpp	/^	bool is_teredo(address const& addr)$/;"	f	namespace:libtorrent
is_torrent_paused	torrent/include/libtorrent/torrent.hpp	/^		bool is_torrent_paused() const { return m_paused; }$/;"	f	class:libtorrent::torrent
is_upload_only	torrent/include/libtorrent/torrent.hpp	/^		bool is_upload_only() const { return is_finished() || upload_mode(); }$/;"	f	class:libtorrent::torrent
is_utp	torrent/src/socket_type.cpp	/^	bool is_utp(socket_type const& s)$/;"	f	namespace:libtorrent::aux
is_utp_stream_logging	torrent/src/utp_stream.cpp	/^bool is_utp_stream_logging() {$/;"	f	namespace:libtorrent
is_v4	torrent/include/libtorrent/broadcast_socket.hpp	/^	bool is_v4(Endpoint const& ep)$/;"	f	namespace:libtorrent
is_v6	torrent/include/libtorrent/broadcast_socket.hpp	/^	bool is_v6(Endpoint const& ep)$/;"	f	namespace:libtorrent
is_v6_addr	torrent/include/libtorrent/torrent_handle.hpp	/^		bool is_v6_addr:1;$/;"	m	struct:libtorrent::block_info
is_v6_addr	torrent/include/libtorrent/torrent_peer.hpp	/^		bool is_v6_addr:1;$/;"	m	struct:libtorrent::torrent_peer
is_valid	torrent/include/libtorrent/file_storage.hpp	/^		bool is_valid() const { return m_piece_length > 0; }$/;"	f	class:libtorrent::file_storage
is_valid	torrent/include/libtorrent/session_handle.hpp	/^		bool is_valid() const { return !m_impl.expired(); }$/;"	f	struct:libtorrent::session_handle
is_valid	torrent/include/libtorrent/torrent_info.hpp	/^		bool is_valid() const { return m_files.is_valid(); }$/;"	f	class:libtorrent::torrent_info
is_valid	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::is_valid() const$/;"	f	class:libtorrent::torrent_handle
is_working	torrent/include/libtorrent/announce_entry.hpp	/^		bool is_working() const { return fails == 0; }$/;"	f	struct:libtorrent::announce_endpoint
is_working	torrent/src/announce_entry.cpp	/^	bool announce_entry::is_working() const$/;"	f	class:libtorrent::announce_entry
isatty	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (isatty);$/;"	v
isatty	virt-p2v/include/gnulib/unistd.h	1568;"	d
iso_count	torrent/include/libtorrent/aux_/route.h	/^	int	iso_count;$/;"	m	struct:route_cb
isright_brace	src/inirw.c	/^static int isright_brace(char c )$/;"	f	file:
issue_read	torrent/src/utp_stream.cpp	/^void utp_stream::issue_read()$/;"	f	class:libtorrent::utp_stream
issue_write	torrent/src/utp_stream.cpp	/^void utp_stream::issue_write()$/;"	f	class:libtorrent::utp_stream
it	torrent/kademlia/dht_tracker.cpp	/^		item it;$/;"	m	struct:libtorrent::dht::__anon151::get_mutable_item_ctx	file:
item	torrent/include/libtorrent/kademlia/item.hpp	/^	item() {}$/;"	f	class:libtorrent::dht::item
item	torrent/include/libtorrent/kademlia/item.hpp	/^class TORRENT_EXTRA_EXPORT item$/;"	c	namespace:libtorrent::dht
item	torrent/kademlia/item.cpp	/^item::item(bdecode_node const& v)$/;"	f	class:libtorrent::dht::item
item	torrent/kademlia/item.cpp	/^item::item(entry v)$/;"	f	class:libtorrent::dht::item
item	torrent/kademlia/item.cpp	/^item::item(entry v, span<char const> salt$/;"	f	class:libtorrent::dht::item
item	torrent/kademlia/item.cpp	/^item::item(public_key const& pk, span<char const> salt)$/;"	f	class:libtorrent::dht::item
item_lifetime	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int item_lifetime = 0;$/;"	m	struct:libtorrent::dht::dht_settings
item_posted	torrent/kademlia/dht_tracker.cpp	/^		bool item_posted;$/;"	m	struct:libtorrent::dht::__anon151::get_immutable_item_ctx	file:
item_target_id	torrent/kademlia/item.cpp	/^sha1_hash item_target_id(span<char const> salt$/;"	f	namespace:libtorrent::dht
item_target_id	torrent/kademlia/item.cpp	/^sha1_hash item_target_id(span<char const> v)$/;"	f	namespace:libtorrent::dht
iterate	torrent/include/libtorrent/linked_list.hpp	/^		list_iterator<T> iterate() const$/;"	f	struct:libtorrent::linked_list
iterate	torrent/include/libtorrent/tailqueue.hpp	/^		tailqueue_iterator<T> iterate()$/;"	f	struct:libtorrent::tailqueue
iterate	torrent/include/libtorrent/tailqueue.hpp	/^		tailqueue_iterator<const T> iterate() const$/;"	f	struct:libtorrent::tailqueue
iterator_range	torrent/include/libtorrent/aux_/range.hpp	/^	struct iterator_range$/;"	s	namespace:libtorrent::aux
job	torrent/include/libtorrent/block_cache.hpp	/^		job_action_t job;$/;"	m	struct:libtorrent::piece_log_t
job_action_name	torrent/src/block_cache.cpp	/^std::array<const char*, 15> const job_action_name =$/;"	m	class:libtorrent::std	file:
job_action_t	torrent/include/libtorrent/disk_io_job.hpp	/^	enum class job_action_t : std::uint8_t$/;"	c	namespace:libtorrent
job_complete	torrent/src/disk_job_fence.cpp	/^	int disk_job_fence::job_complete(disk_io_job* j, tailqueue<disk_io_job>& jobs)$/;"	f	class:libtorrent::aux::disk_job_fence
job_name	torrent/src/block_cache.cpp	/^	char const* job_name(job_action_t const job)$/;"	f	namespace:libtorrent
job_names	torrent/include/libtorrent/block_cache.hpp	/^		static std::array<char const*, 7> const job_names;$/;"	m	class:libtorrent::piece_log_t::std
job_names	torrent/src/block_cache.cpp	/^	std::array<char const*, 7> const piece_log_t::job_names =$/;"	m	class:libtorrent::std::piece_log_t	file:
job_posted	torrent/include/libtorrent/disk_io_job.hpp	/^		mutable bool job_posted = false;$/;"	m	struct:libtorrent::disk_io_job
job_queue	torrent/include/libtorrent/disk_io_thread.hpp	/^			explicit job_queue(disk_io_thread& owner) : m_owner(owner) {}$/;"	f	struct:libtorrent::final::job_queue
job_queue	torrent/include/libtorrent/disk_io_thread.hpp	/^		struct job_queue : pool_thread_interface$/;"	s	struct:libtorrent::final
job_queued	torrent/src/disk_io_thread_pool.cpp	/^	void disk_io_thread_pool::job_queued(int const queue_size)$/;"	f	class:libtorrent::disk_io_thread_pool
jobs	torrent/include/libtorrent/block_cache.hpp	/^		tailqueue<disk_io_job> jobs;$/;"	m	struct:libtorrent::cached_piece_entry
jobs_in_use	torrent/include/libtorrent/disk_job_pool.hpp	/^		int jobs_in_use() const { return m_jobs_in_use; }$/;"	f	struct:libtorrent::disk_job_pool
keep_alive	torrent/src/peer_connection.cpp	/^	void peer_connection::keep_alive()$/;"	f	class:libtorrent::peer_connection
kernel32	torrent/include/libtorrent/aux_/win_util.hpp	/^	struct kernel32 {$/;"	s	namespace:libtorrent::aux
kernel_conversion	virt-p2v/src/kernel.c	/^kernel_conversion (struct config *config, char **cmdline, int cmdline_source)$/;"	f
key	torrent/include/libtorrent/tracker_manager.hpp	/^		std::uint32_t key;$/;"	m	struct:libtorrent::tracker_request
keyPressEvent	qt_pro/configwindow.cpp	/^void ConfigWindow::keyPressEvent(QKeyEvent *event)$/;"	f	class:ConfigWindow
keyPressEvent	qt_pro/mainwindow.cpp	/^void MainWindow::keyPressEvent(QKeyEvent *event)$/;"	f	class:MainWindow
keyPressEvent	qt_pro/oswindow.cpp	/^void OSWindow::keyPressEvent(QKeyEvent *event)$/;"	f	class:OSWindow
keyPressEvent	qt_pro/uploadwindow.cpp	/^void Uploadwindow::keyPressEvent(QKeyEvent *event)$/;"	f	class:Uploadwindow
key_desc_t	torrent/include/libtorrent/kademlia/msg.hpp	/^struct key_desc_t$/;"	s	namespace:libtorrent::dht
key_not_found	torrent/include/libtorrent/i2p_stream.hpp	/^			key_not_found,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
key_refresh	torrent/kademlia/dht_tracker.cpp	/^	auto const key_refresh$/;"	m	namespace:libtorrent::dht::__anon150	file:
kind	include/gpt.h	/^    uint32_t   kind;$/;"	m	struct:__anon8
kind	torrent/include/libtorrent/disk_io_thread.hpp	/^		kind_t kind;$/;"	m	struct:libtorrent::cached_piece_info
kind	torrent/include/libtorrent/tracker_manager.hpp	/^		std::uint8_t kind;$/;"	m	struct:libtorrent::tracker_request
kind_t	torrent/include/libtorrent/disk_io_thread.hpp	/^		enum kind_t { read_cache = 0, write_cache = 1, volatile_read_cache = 2 };$/;"	g	struct:libtorrent::cached_piece_info
kind_t	torrent/include/libtorrent/tracker_manager.hpp	/^		enum kind_t$/;"	g	struct:libtorrent::tracker_request
l	torrent/src/sha1.cpp	/^		u32 l[16];$/;"	m	union:libtorrent::__anon103::CHAR64LONG16	file:
l1_size	include/qcow2.h	/^    uint32_t l1_size; \/* XXX: save number of clusters instead ? *\/$/;"	m	struct:_QCowHeader
l1_size	test/check.c	/^    uint32_t l1_size; \/* XXX: save number of clusters instead ? *\/$/;"	m	struct:_QCowHeader	file:
l1_table_offset	include/qcow2.h	/^    uint64_t l1_table_offset;$/;"	m	struct:_QCowHeader
l1_table_offset	test/check.c	/^    uint64_t l1_table_offset;$/;"	m	struct:_QCowHeader	file:
label	qt_pro/ui_downloadwindow.h	/^    QLabel *label;$/;"	m	class:Ui_DownloadWindow
label	torrent/include/libtorrent/peer_class.hpp	/^		std::string label;$/;"	m	struct:libtorrent::peer_class
label	torrent/include/libtorrent/peer_class.hpp	/^		std::string label;$/;"	m	struct:libtorrent::peer_class_info
label_81	qt_pro/ui_errodialog.h	/^    QLabel *label_81;$/;"	m	class:Ui_ErroDialog
label_82	qt_pro/ui_errodialog.h	/^    QLabel *label_82;$/;"	m	class:Ui_ErroDialog
last	torrent/include/libtorrent/ip_filter.hpp	/^	Addr last;$/;"	m	struct:libtorrent::ip_range
last	torrent/include/libtorrent/span.hpp	/^		span<T> last(difference_type const n) const$/;"	f	struct:libtorrent::span
last	torrent/include/libtorrent/tailqueue.hpp	/^		T* last() const { TORRENT_ASSERT(m_size > 0); return m_last; }$/;"	f	struct:libtorrent::tailqueue
last_active	torrent/include/libtorrent/alert_types.hpp	/^		int last_active;$/;"	m	struct:libtorrent::dht_routing_bucket
last_active	torrent/include/libtorrent/peer_info.hpp	/^		time_duration last_active;$/;"	m	struct:libtorrent::peer_info
last_child	torrent/include/libtorrent/kademlia/msg.hpp	/^		last_child = 4,$/;"	e	enum:libtorrent::dht::key_desc_t::__anon28
last_connected	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint16_t last_connected;$/;"	m	struct:libtorrent::torrent_peer
last_download	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t last_download = 0;$/;"	m	struct:libtorrent::add_torrent_params
last_download	torrent/include/libtorrent/torrent_status.hpp	/^		time_point last_download;$/;"	m	struct:libtorrent::torrent_status
last_error	torrent/include/libtorrent/announce_entry.hpp	/^		error_code last_error;$/;"	m	struct:libtorrent::announce_endpoint
last_job	torrent/include/libtorrent/block_cache.hpp	/^			last_job$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
last_optimistic_unchoke_cmp	torrent/src/session_impl.cpp	/^			explicit last_optimistic_unchoke_cmp(std::vector<std::shared_ptr<plugin>>& ps)$/;"	f	struct:libtorrent::aux::__anon49::last_optimistic_unchoke_cmp
last_optimistic_unchoke_cmp	torrent/src/session_impl.cpp	/^		struct last_optimistic_unchoke_cmp$/;"	s	namespace:libtorrent::aux::__anon49	file:
last_optimistically_unchoked	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint16_t last_optimistically_unchoked;$/;"	m	struct:libtorrent::torrent_peer
last_payload_downloaded	torrent/include/libtorrent/stat.hpp	/^		int last_payload_downloaded() const$/;"	f	class:libtorrent::stat
last_payload_uploaded	torrent/include/libtorrent/stat.hpp	/^		int last_payload_uploaded() const$/;"	f	class:libtorrent::stat
last_piece	torrent/include/libtorrent/file_storage.hpp	/^		piece_index_t last_piece() const$/;"	f	class:libtorrent::file_storage
last_piece	torrent/include/libtorrent/piece_picker.hpp	/^		bool last_piece;$/;"	m	struct:libtorrent::piece_count
last_piece	torrent/include/libtorrent/torrent_info.hpp	/^		piece_index_t last_piece() const { return m_files.last_piece(); }$/;"	f	class:libtorrent::torrent_info
last_protocol_downloaded	torrent/include/libtorrent/stat.hpp	/^		int last_protocol_downloaded() const$/;"	f	class:libtorrent::stat
last_protocol_uploaded	torrent/include/libtorrent/stat.hpp	/^		int last_protocol_uploaded() const$/;"	f	class:libtorrent::stat
last_queried	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	time_point last_queried = min_time();$/;"	m	struct:libtorrent::dht::node_entry
last_received	torrent/include/libtorrent/peer_connection.hpp	/^		time_point last_received() const { return m_last_receive; }$/;"	f	class:libtorrent::peer_connection
last_request	torrent/include/libtorrent/peer_info.hpp	/^		time_duration last_request;$/;"	m	struct:libtorrent::peer_info
last_request	torrent/src/ut_metadata.cpp	/^			time_point last_request;$/;"	m	struct:libtorrent::__anon72::final::metadata_piece	file:
last_requested	torrent/include/libtorrent/torrent.hpp	/^		time_point last_requested;$/;"	m	struct:libtorrent::time_critical_piece
last_scrape	torrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER last_scrape = 0;$/;"	m	struct:libtorrent::torrent_status
last_seen	torrent/include/libtorrent/resolver.hpp	/^		time_point last_seen;$/;"	m	struct:libtorrent::final::dns_cache_entry
last_seen	torrent/kademlia/dht_storage.cpp	/^		time_point last_seen;$/;"	m	struct:libtorrent::dht::__anon153::dht_immutable_item	file:
last_seen_complete	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t last_seen_complete = 0;$/;"	m	struct:libtorrent::add_torrent_params
last_seen_complete	torrent/include/libtorrent/peer_connection.hpp	/^		std::time_t last_seen_complete() const { return m_last_seen_complete; }$/;"	f	class:libtorrent::peer_connection
last_seen_complete	torrent/include/libtorrent/torrent.hpp	/^		time_t last_seen_complete() const { return m_last_seen_complete; }$/;"	f	class:libtorrent::torrent
last_seen_complete	torrent/include/libtorrent/torrent_status.hpp	/^		std::time_t last_seen_complete = 0;$/;"	m	struct:libtorrent::torrent_status
last_seen_complete	torrent/src/peer_connection_handle.cpp	/^std::time_t peer_connection_handle::last_seen_complete() const$/;"	f	class:libtorrent::peer_connection_handle
last_time	include/client.h	/^    time_t last_time;$/;"	m	struct:client
last_time	src/torrent.cpp	/^time_t last_time;$/;"	v
last_time	torrent/src/client.cpp	/^time_t current_time, last_time;$/;"	v
last_upload	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::time_t last_upload = 0;$/;"	m	struct:libtorrent::add_torrent_params
last_upload	torrent/include/libtorrent/torrent_status.hpp	/^		time_point last_upload;$/;"	m	struct:libtorrent::torrent_status
last_usable_lba	include/gpt.h	/^    uint64_t  last_usable_lba;$/;"	m	struct:__anon6
last_use	torrent/include/libtorrent/disk_interface.hpp	/^		time_point last_use;$/;"	m	struct:libtorrent::open_file_state
last_use	torrent/include/libtorrent/disk_io_thread.hpp	/^		time_point last_use;$/;"	m	struct:libtorrent::cached_piece_info
lazy_bdecode	torrent/src/lazy_bdecode.cpp	/^	int lazy_bdecode(char const* start, char const* end$/;"	f	namespace:libtorrent
lazy_bdecode	torrent/src/lazy_bdecode.cpp	/^	int lazy_bdecode(char const* start, char const* end, lazy_entry& ret$/;"	f	namespace:libtorrent
lazy_bitfields	torrent/include/libtorrent/settings_pack.hpp	/^			lazy_bitfields TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
lazy_dict_entry	torrent/include/libtorrent/lazy_entry.hpp	/^	struct TORRENT_DEPRECATED lazy_dict_entry$/;"	s	namespace:libtorrent
lazy_entry	torrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry() : m_size(0), m_type(none_t)$/;"	f	struct:libtorrent::lazy_entry
lazy_entry	torrent/include/libtorrent/lazy_entry.hpp	/^	struct TORRENT_DEPRECATED_EXPORT lazy_entry$/;"	s	namespace:libtorrent
lazy_entry	torrent/src/lazy_bdecode.cpp	/^	lazy_entry::lazy_entry(lazy_entry&& other)$/;"	f	class:libtorrent::lazy_entry
lazy_entry_dict_init	torrent/src/lazy_bdecode.cpp	/^	const int lazy_entry_dict_init = 5;$/;"	m	namespace:__anon74	file:
lazy_entry_grow_factor	torrent/src/lazy_bdecode.cpp	/^	const int lazy_entry_grow_factor = 150; \/\/ percent$/;"	m	namespace:__anon74	file:
lazy_entry_list_init	torrent/src/lazy_bdecode.cpp	/^	const int lazy_entry_list_init = 5;$/;"	m	namespace:__anon74	file:
lchown	virt-p2v/include/gnulib/unistd.h	1599;"	d
leaf_path	torrent/bak/connection_tester.cpp	/^std::string leaf_path(std::string f)$/;"	f
lease_duration	torrent/src/upnp.cpp	/^int upnp::lease_duration(rootdevice const& d) const$/;"	f	class:libtorrent::upnp
leave_seed_mode	torrent/src/torrent.cpp	/^	void torrent::leave_seed_mode(seed_mode_t const checking)$/;"	f	class:libtorrent::torrent
left	torrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t left;$/;"	m	struct:libtorrent::tracker_request
left_barce	src/inirw.c	/^static int left_barce(char c)$/;"	f	file:
len	torrent/include/libtorrent/heterogeneous_queue.hpp	/^			std::uint16_t len;$/;"	m	struct:libtorrent::heterogeneous_queue::header_t
len	torrent/include/libtorrent/kademlia/types.hpp	/^		static constexpr int len = 32;$/;"	m	struct:libtorrent::dht::public_key
len	torrent/include/libtorrent/kademlia/types.hpp	/^		static constexpr int len = 64;$/;"	m	struct:libtorrent::dht::secret_key
len	torrent/include/libtorrent/kademlia/types.hpp	/^		static constexpr int len = 64;$/;"	m	struct:libtorrent::dht::signature
len	torrent/include/libtorrent/lazy_entry.hpp	/^		int len;$/;"	m	struct:libtorrent::pascal_string
len	torrent/src/utp_stream.cpp	/^		std::size_t len;$/;"	m	struct:libtorrent::utp_socket_impl::iovec_t	file:
len	virt-p2v/include/miniexpect.h	/^  size_t len;$/;"	m	struct:mexp_h
len	virt-p2v/miniexpect/miniexpect.h	/^  size_t len;$/;"	m	struct:mexp_h
length	include/device.h	/^    PedSector length;           \/\/device length (LBA) $/;"	m	struct:_PedDevice
length	torrent/include/libtorrent/peer_request.hpp	/^		int length;$/;"	m	struct:libtorrent::peer_request
length	torrent/include/libtorrent/sha512.hpp	/^		std::uint64_t length;$/;"	m	struct:libtorrent::sha512_ctx
length	torrent/include/libtorrent/web_peer_connection.hpp	/^			int length;$/;"	m	struct:libtorrent::web_peer_connection::file_request_t
length	torrent/src/torrent_info.cpp	/^		int length;$/;"	m	struct:libtorrent::__anon88::name_entry	file:
lenientConversion	torrent/include/libtorrent/ConvertUTF.h	/^	lenientConversion$/;"	e	enum:__anon18
level	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^		int level(Protocol const&) const { return SOL_SOCKET; }$/;"	f	struct:libtorrent::aux::bind_to_device
level	torrent/include/libtorrent/aux_/keepalive.hpp	/^		int level(Protocol const&) const { return IPPROTO_TCP; }$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
level	torrent/include/libtorrent/aux_/keepalive.hpp	/^		int level(Protocol const&) const { return IPPROTO_TCP; }$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
level	torrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_IP; }$/;"	f	struct:libtorrent::dont_fragment
level	torrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_IP; }$/;"	f	struct:libtorrent::type_of_service
level	torrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_IPV6; }$/;"	f	struct:libtorrent::traffic_class
level	torrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_IPV6; }$/;"	f	struct:libtorrent::v6_protection_level
level	torrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return IPPROTO_TCP; }$/;"	f	struct:libtorrent::tcp_notsent_lowat
level	torrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return SOL_NETLINK; }$/;"	f	struct:libtorrent::no_enobufs
level	torrent/include/libtorrent/socket.hpp	/^		int level(Protocol const&) const { return SOL_SOCKET; }$/;"	f	struct:libtorrent::exclusive_address_use
lexically_relative	torrent/src/path.cpp	/^	std::string lexically_relative(string_view base, string_view target)$/;"	f	namespace:libtorrent
libdir	Makefile	/^libdir := $(TOP_DIR)\/lib$/;"	m
libdir	torrent/include/libtorrent/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	torrent/include/libtorrent/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libobj	Makefile	/^libobj = $/;"	m
libobj	torrent/Makefile	/^libobj = libtorrent.so$/;"	m
library_name	torrent/include/libtorrent/aux_/win_util.hpp	/^		static constexpr char const* library_name = "advapi32.dll";$/;"	m	struct:libtorrent::aux::advapi32
library_name	torrent/include/libtorrent/aux_/win_util.hpp	/^		static constexpr char const* library_name = "iphlpapi.dll";$/;"	m	struct:libtorrent::aux::iphlpapi
library_name	torrent/include/libtorrent/aux_/win_util.hpp	/^		static constexpr char const* library_name = "kernel32.dll";$/;"	m	struct:libtorrent::aux::kernel32
libtorrent	torrent/ed25519/add_scalar.cpp	/^namespace libtorrent$/;"	n	file:
libtorrent	torrent/ed25519/key_exchange.cpp	/^namespace libtorrent$/;"	n	file:
libtorrent	torrent/ed25519/keypair.cpp	/^namespace libtorrent$/;"	n	file:
libtorrent	torrent/ed25519/sign.cpp	/^namespace libtorrent$/;"	n	file:
libtorrent	torrent/ed25519/verify.cpp	/^namespace libtorrent$/;"	n	file:
libtorrent	torrent/include/libtorrent/add_torrent_params.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/address.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/alert.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/alert_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/alert_types.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/announce_entry.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/assert.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/aligned_storage.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/aligned_union.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/alloca.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/array.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/block_cache_reference.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/byteswap.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/cpuid.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/deque.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/dev_random.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/escape_string.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/ffs.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/file_progress.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/generate_peer_id.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/has_block.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/instantiate_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/io.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/ip_notifier.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/keepalive.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/lsd.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/merkle.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/noexcept_movable.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/numeric_cast.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/openssl.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/path.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/portmap.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/range.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/scope_end.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/session_call.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/session_impl.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/session_interface.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/session_settings.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/set_socket_buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/socket_type.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/storage_piece_set.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/storage_utils.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/string_ptr.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/suggest_piece.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/throw.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/time.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/torrent_impl.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/unique_ptr.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/vector.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/aux_/win_util.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/bandwidth_limit.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/bandwidth_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/bandwidth_queue_entry.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/bandwidth_socket.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/bdecode.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/bencode.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/bitfield.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/block_cache.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/bloom_filter.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/broadcast_socket.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/bt_peer_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/chained_buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/choker.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/close_reason.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/config.hpp	/^namespace libtorrent {}$/;"	n
libtorrent	torrent/include/libtorrent/copy_ptr.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/crc32c.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/create_torrent.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/deadline_timer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/debug.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/disk_buffer_holder.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/disk_buffer_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/disk_interface.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/disk_io_job.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/disk_io_thread.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/disk_job_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/disk_observer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/download_priority.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/ed25519.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/entry.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/enum_net.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/error.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/error_code.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/extensions.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/extensions/smart_ban.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/extensions/ut_metadata.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/extensions/ut_pex.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/file.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/file_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/file_storage.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/fingerprint.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/flags.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/fwd.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/gzip.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/hasher.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/hasher512.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/heterogeneous_queue.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/hex.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/http_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/http_parser.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/http_seed_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/http_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/http_tracker_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/i2p_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/identify_client.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/index_range.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/invariant_check.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/io.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/io_service.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/io_service_fwd.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/ip_filter.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/ip_voter.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/announce_flags.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dht_state.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dht_state.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/direct_request.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/ed25519.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/find_data.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/get_item.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/get_peers.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/io.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/item.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/msg.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/node.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/node.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/node_entry.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/node_id.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/observer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/put_data.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/refresh.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/routing_table.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^namespace libtorrent { class entry; }$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^namespace libtorrent { namespace dht$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/kademlia/types.hpp	/^namespace libtorrent { namespace dht {$/;"	n
libtorrent	torrent/include/libtorrent/lazy_entry.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/link.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/linked_list.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/lsd.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/magnet_uri.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/natpmp.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/netlink.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/operations.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/optional.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/packet_buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/packet_pool.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/parse_url.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/part_file.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/pe_crypto.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_class.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_class_set.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_class_type_filter.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_connection_handle.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_connection_interface.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_id.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_info.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_list.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/peer_request.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/performance_counters.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/pex_flags.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/piece_block.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/piece_block_progress.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/piece_picker.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/platform_util.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/portmap.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/proxy_base.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/random.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/read_resume_data.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/receive_buffer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/request_blocks.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/resolve_links.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/resolver.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/resolver_interface.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/session.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/session_handle.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/session_settings.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/session_stats.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/session_status.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/session_types.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/settings_pack.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/sha1.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/sha1_hash.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/sha512.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/sliding_average.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/socket.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/socket_io.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/socks5_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/span.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/ssl_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/stack_allocator.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/stat.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/stat_cache.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/storage.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/storage_defs.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/string_util.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/string_view.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/tailqueue.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/time.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/timestamp_history.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/torrent.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/torrent_flags.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/torrent_handle.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/torrent_info.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/torrent_peer.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/torrent_status.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/tracker_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/udp_socket.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/udp_tracker_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/union_endpoint.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/units.hpp	/^namespace libtorrent { namespace aux {$/;"	n
libtorrent	torrent/include/libtorrent/upnp.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/utf8.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/utp_socket_manager.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/utp_stream.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/vector_utils.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/version.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/web_connection_base.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/web_peer_connection.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/write_resume_data.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/include/libtorrent/xml_parse.hpp	/^namespace libtorrent {$/;"	n
libtorrent	torrent/kademlia/dht_settings.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/kademlia/dht_state.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/dht_storage.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/dht_tracker.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/dos_blocker.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/ed25519.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/find_data.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/get_item.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/get_peers.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/item.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/msg.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/node.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/node_entry.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/node_id.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/put_data.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/refresh.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/routing_table.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/rpc_manager.cpp	/^namespace libtorrent { namespace dht {$/;"	n	file:
libtorrent	torrent/kademlia/sample_infohashes.cpp	/^namespace libtorrent { namespace dht$/;"	n	file:
libtorrent	torrent/kademlia/traversal_algorithm.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/add_torrent_params.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/alert.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/alert_manager.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/announce_entry.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/assert.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/assert.cpp	/^namespace libtorrent {$/;"	n	namespace:libtorrent	file:
libtorrent	torrent/src/bandwidth_limit.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/bandwidth_manager.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/bandwidth_queue_entry.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/bdecode.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/bitfield.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/block_cache.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/bloom_filter.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/broadcast_socket.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/bt_peer_connection.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/chained_buffer.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/choker.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/close_reason.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/cpuid.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/crc32c.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/create_torrent.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/disk_buffer_holder.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/disk_buffer_pool.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/disk_io_job.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/disk_io_thread.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/disk_io_thread_pool.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/disk_job_fence.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/disk_job_pool.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/entry.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/enum_net.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/error_code.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/escape_string.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/ffs.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/file.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/file_pool.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/file_progress.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/file_storage.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/fingerprint.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/generate_peer_id.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/gzip.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/hasher.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/hasher512.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/hex.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/http_connection.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/http_parser.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/http_seed_connection.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/http_stream.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/http_tracker_connection.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/i2p_stream.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/identify_client.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/instantiate_connection.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/ip_filter.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/ip_notifier.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/ip_voter.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/lazy_bdecode.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/listen_socket_handle.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/lsd.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/magnet_uri.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/merkle.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/natpmp.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/openssl.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/packet_buffer.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/parse_url.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/part_file.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/path.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/pe_crypto.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/peer_class.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/peer_class_set.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/peer_connection.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/peer_connection_handle.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/peer_info.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/peer_list.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/performance_counters.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/piece_picker.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/platform_util.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/proxy_base.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/proxy_settings.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/random.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/read_resume_data.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/receive_buffer.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/request_blocks.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/resolve_links.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/resolver.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/session.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/session_call.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/session_handle.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/session_impl.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/session_settings.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/session_stats.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/settings_pack.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/sha1.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/sha1_hash.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/sha512.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/smart_ban.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/socket_io.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/socket_type.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/socks5_stream.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/stack_allocator.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/stat.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/stat_cache.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/storage.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/storage_piece_set.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/storage_utils.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/string_util.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/time.cpp	/^namespace libtorrent { namespace aux {$/;"	n	file:
libtorrent	torrent/src/timestamp_history.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/torrent.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/torrent_handle.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/torrent_info.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/torrent_peer.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/torrent_peer_allocator.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/torrent_status.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/tracker_manager.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/udp_socket.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/udp_tracker_connection.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/upnp.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/ut_metadata.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/ut_metadata.cpp	/^namespace libtorrent {namespace {$/;"	n	file:
libtorrent	torrent/src/ut_pex.cpp	/^namespace libtorrent { namespace {$/;"	n	file:
libtorrent	torrent/src/ut_pex.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/utf8.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/utp_socket_manager.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/utp_stream.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/version.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/web_connection_base.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/web_peer_connection.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/write_resume_data.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent	torrent/src/xml_parse.cpp	/^namespace libtorrent {$/;"	n	file:
libtorrent_category	torrent/src/error_code.cpp	/^	boost::system::error_category& libtorrent_category()$/;"	f	namespace:libtorrent
limit	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^			time_point limit;$/;"	m	struct:libtorrent::dht::dos_blocker::node_ban_entry
limit_exceeded	torrent/include/libtorrent/bdecode.hpp	/^		limit_exceeded,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
limit_exceeded	torrent/include/libtorrent/error_code.hpp	/^			limit_exceeded,$/;"	e	enum:libtorrent::errors::error_code_enum
limit_impl	torrent/src/torrent.cpp	/^	int torrent::limit_impl(int const channel) const$/;"	f	class:libtorrent::torrent
limiter_down_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			limiter_down_bytes,$/;"	e	enum:libtorrent::counters::stats_gauge_t
limiter_down_queue	torrent/include/libtorrent/performance_counters.hpp	/^			limiter_down_queue,$/;"	e	enum:libtorrent::counters::stats_gauge_t
limiter_up_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			limiter_up_bytes,$/;"	e	enum:libtorrent::counters::stats_gauge_t
limiter_up_queue	torrent/include/libtorrent/performance_counters.hpp	/^			limiter_up_queue,$/;"	e	enum:libtorrent::counters::stats_gauge_t
limits_t	torrent/include/libtorrent/bdecode.hpp	/^	enum limits_t$/;"	g	namespace:libtorrent::detail
lineLabel	qt_pro/ui_downloadwindow.h	/^    QLabel *lineLabel;$/;"	m	class:Ui_DownloadWindow
line_longer_than	torrent/src/bdecode.cpp	/^	int line_longer_than(bdecode_node const& e, int limit)$/;"	f	namespace:libtorrent::__anon41
line_longer_than	torrent/src/lazy_bdecode.cpp	/^	int line_longer_than(lazy_entry const& e, int limit)$/;"	f	namespace:libtorrent::__anon78
link	torrent/include/libtorrent/link.hpp	/^		link() : index(-1) {}$/;"	f	struct:libtorrent::link
link	torrent/include/libtorrent/link.hpp	/^	struct link$/;"	s	namespace:libtorrent
link	virt-p2v/include/gnulib/unistd.h	1628;"	d
link_t	torrent/include/libtorrent/resolve_links.hpp	/^		struct TORRENT_EXTRA_EXPORT link_t$/;"	s	struct:libtorrent::resolve_links
linkat	virt-p2v/include/gnulib/unistd.h	1665;"	d
linked_list	torrent/include/libtorrent/linked_list.hpp	/^		linked_list(): m_first(nullptr), m_last(nullptr), m_size(0) {}$/;"	f	struct:libtorrent::linked_list
linked_list	torrent/include/libtorrent/linked_list.hpp	/^	struct linked_list$/;"	s	namespace:libtorrent
links	torrent/include/libtorrent/disk_io_job.hpp	/^			aux::vector<std::string, file_index_t>* links;$/;"	m	union:libtorrent::disk_io_job::un
lint	virt-p2v/include/config.h	1077;"	d
linux_close	src/linux.c	/^int linux_close(PedDevice *dev)$/;"	f
linux_destroy	src/linux.c	/^void linux_destroy(PedDevice *dev)$/;"	f
linux_is_busy	src/linux.c	/^int linux_is_busy(PedDevice *dev)$/;"	f
linux_new	src/linux.c	/^PedDevice *linux_new(const char *path)$/;"	f
linux_open	src/linux.c	/^int linux_open(PedDevice *dev)$/;"	f
linux_read	src/linux.c	/^int linux_read(const PedDevice *dev, void *buffer, PedSector start, PedSector count)$/;"	f
linux_write	src/linux.c	/^int linux_write(PedDevice *dev, const void *buffer, PedSector start, PedSector count)$/;"	f
list	torrent/include/libtorrent/bdecode.hpp	/^	{ none, dict, list, string, integer, end };$/;"	m	struct:libtorrent::detail::bdecode_token	typeref:enum:libtorrent::detail::bdecode_token::
list	torrent/include/libtorrent/lazy_entry.hpp	/^			lazy_entry* list;$/;"	m	union:libtorrent::lazy_entry::data_t
list	torrent/src/entry.cpp	/^	entry::list_type const& entry::list() const$/;"	f	class:libtorrent::entry::entry
list	torrent/src/entry.cpp	/^	entry::list_type& entry::list()$/;"	f	class:libtorrent::entry
list_append	torrent/src/lazy_bdecode.cpp	/^	lazy_entry* lazy_entry::list_append()$/;"	f	class:libtorrent::lazy_entry
list_at	torrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry const* list_at(int i) const$/;"	f	struct:libtorrent::lazy_entry
list_at	torrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry* list_at(int i)$/;"	f	struct:libtorrent::lazy_entry
list_at	torrent/src/bdecode.cpp	/^	bdecode_node bdecode_node::list_at(int i) const$/;"	f	class:libtorrent::bdecode_node
list_dir	torrent/bak/client_test.cpp	/^std::vector<std::string> list_dir(std::string path$/;"	f
list_int_value_at	torrent/src/bdecode.cpp	/^	std::int64_t bdecode_node::list_int_value_at(int i$/;"	f	class:libtorrent::bdecode_node
list_int_value_at	torrent/src/lazy_bdecode.cpp	/^	std::int64_t lazy_entry::list_int_value_at(int i, std::int64_t default_val) const$/;"	f	class:libtorrent::lazy_entry
list_iterator	torrent/include/libtorrent/linked_list.hpp	/^		explicit list_iterator(T* cur)$/;"	f	struct:libtorrent::list_iterator
list_iterator	torrent/include/libtorrent/linked_list.hpp	/^	struct list_iterator$/;"	s	namespace:libtorrent
list_name	torrent/src/torrent.cpp	/^	char const* list_name(torrent_list_index_t const idx)$/;"	f	namespace:libtorrent::__anon109
list_node	torrent/include/libtorrent/linked_list.hpp	/^		list_node() : prev(nullptr), next(nullptr) {}$/;"	f	struct:libtorrent::list_node
list_node	torrent/include/libtorrent/linked_list.hpp	/^	struct list_node$/;"	s	namespace:libtorrent
list_peers	torrent/include/libtorrent/torrent_status.hpp	/^		int list_peers = 0;$/;"	m	struct:libtorrent::torrent_status
list_pstr_at	torrent/src/lazy_bdecode.cpp	/^	pascal_string lazy_entry::list_pstr_at(int i) const$/;"	f	class:libtorrent::lazy_entry
list_seeds	torrent/include/libtorrent/torrent_status.hpp	/^		int list_seeds = 0;$/;"	m	struct:libtorrent::torrent_status
list_size	torrent/include/libtorrent/lazy_entry.hpp	/^		int list_size() const$/;"	f	struct:libtorrent::lazy_entry
list_size	torrent/src/bdecode.cpp	/^	int bdecode_node::list_size() const$/;"	f	class:libtorrent::bdecode_node
list_string_value_at	torrent/src/bdecode.cpp	/^	string_view bdecode_node::list_string_value_at(int i$/;"	f	class:libtorrent::bdecode_node
list_string_value_at	torrent/src/lazy_bdecode.cpp	/^	std::string lazy_entry::list_string_value_at(int i) const$/;"	f	class:libtorrent::lazy_entry
list_t	torrent/include/libtorrent/bdecode.hpp	/^		list_t,$/;"	e	enum:bdecode_node::type_t
list_t	torrent/include/libtorrent/entry.hpp	/^			list_t,$/;"	e	enum:libtorrent::entry::data_type
list_t	torrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
listen	torrent/include/libtorrent/alert_types.hpp	/^			listen TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
listen_endpoint_t	torrent/include/libtorrent/aux_/session_impl.hpp	/^			listen_endpoint_t(address const& adr, int p, std::string dev, transport s$/;"	f	struct:libtorrent::aux::listen_endpoint_t
listen_endpoint_t	torrent/include/libtorrent/aux_/session_impl.hpp	/^		struct TORRENT_EXTRA_EXPORT listen_endpoint_t$/;"	s	namespace:libtorrent::aux
listen_failed_alert	torrent/src/alert.cpp	/^	listen_failed_alert::listen_failed_alert($/;"	f	class:libtorrent::listen_failed_alert
listen_interface	torrent/src/alert.cpp	/^	char const* listen_failed_alert::listen_interface() const$/;"	f	class:libtorrent::listen_failed_alert
listen_interface_t	torrent/include/libtorrent/string_util.hpp	/^	struct listen_interface_t$/;"	s	namespace:libtorrent
listen_interfaces	torrent/include/libtorrent/settings_pack.hpp	/^			listen_interfaces,$/;"	e	enum:libtorrent::settings_pack::string_types
listen_no_system_port	torrent/include/libtorrent/session_handle.hpp	/^			listen_no_system_port TORRENT_DEPRECATED_ENUM = 0x02$/;"	e	enum:libtorrent::session_handle::listen_on_flags_t
listen_on	torrent/src/session_handle.cpp	/^	void session_handle::listen_on($/;"	f	class:libtorrent::session_handle
listen_on_flags_t	torrent/include/libtorrent/session_handle.hpp	/^		enum listen_on_flags_t$/;"	g	struct:libtorrent::session_handle
listen_port	torrent/include/libtorrent/tracker_manager.hpp	/^		std::uint16_t listen_port;$/;"	m	struct:libtorrent::tracker_request
listen_port	torrent/src/session_handle.cpp	/^	unsigned short session_handle::listen_port() const$/;"	f	class:libtorrent::session_handle
listen_port	torrent/src/session_impl.cpp	/^	int session_impl::listen_port(transport const ssl, address const& local_addr)$/;"	f	class:libtorrent::aux::session_impl
listen_port	torrent/src/session_impl.cpp	/^	std::uint16_t session_impl::listen_port() const$/;"	f	class:libtorrent::aux::session_impl
listen_port	torrent/src/session_impl.cpp	/^	std::uint16_t session_impl::listen_port(listen_socket_t* sock) const$/;"	f	class:libtorrent::aux::session_impl
listen_port_mapping	torrent/include/libtorrent/aux_/session_impl.hpp	/^	struct listen_port_mapping$/;"	s	namespace:libtorrent::aux
listen_queue_size	torrent/include/libtorrent/settings_pack.hpp	/^			listen_queue_size,$/;"	e	enum:libtorrent::settings_pack::int_types
listen_reuse_address	torrent/include/libtorrent/session_handle.hpp	/^			listen_reuse_address TORRENT_DEPRECATED_ENUM = 0x01,$/;"	e	enum:libtorrent::session_handle::listen_on_flags_t
listen_socket_handle	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		listen_socket_handle(std::shared_ptr<listen_socket_t> s) \/\/ NOLINT$/;"	f	struct:libtorrent::aux::listen_socket_handle
listen_socket_handle	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^	struct TORRENT_EXTRA_EXPORT listen_socket_handle$/;"	s	namespace:libtorrent::aux
listen_socket_t	torrent/include/libtorrent/aux_/session_impl.hpp	/^	struct TORRENT_EXTRA_EXPORT listen_socket_t : utp_socket_interface$/;"	s	namespace:libtorrent::aux
listen_succeeded_alert	torrent/src/alert.cpp	/^	listen_succeeded_alert::listen_succeeded_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::listen_succeeded_alert
listen_succeeded_alert	torrent/src/alert.cpp	/^	listen_succeeded_alert::listen_succeeded_alert(aux::stack_allocator&$/;"	f	class:libtorrent::listen_succeeded_alert
listen_system_port_fallback	torrent/include/libtorrent/settings_pack.hpp	/^			listen_system_port_fallback,$/;"	e	enum:libtorrent::settings_pack::bool_types
literals	torrent/include/libtorrent/string_view.hpp	/^inline namespace literals {$/;"	n	namespace:libtorrent
little_endian_blk0	torrent/src/sha1.cpp	/^	struct little_endian_blk0$/;"	s	namespace:libtorrent::__anon103	file:
live_allocations	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		int live_allocations() const { return m_live_allocations; }$/;"	f	struct:libtorrent::final
live_bytes	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		int live_bytes() const { return m_live_bytes; }$/;"	f	struct:libtorrent::final
live_nodes	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	bucket_t live_nodes;$/;"	m	struct:libtorrent::dht::routing_table_node
live_nodes	torrent/kademlia/dht_tracker.cpp	/^	std::vector<std::pair<node_id, udp::endpoint>> dht_tracker::live_nodes(node_id const& nid)$/;"	f	class:libtorrent::dht::dht_tracker
load	include/StoreConfig.h	/^    int (*load)(yzy_file_t hd); \/\/å è½½å¤±è´¥åéè¦init$/;"	m	struct:_StoreDriver
load	torrent/include/libtorrent/torrent_info.hpp	/^		void load(char const*, int, error_code&) {}$/;"	f	class:libtorrent::torrent_info
loadFont	qt_pro/mainwindow.cpp	/^void loadFont(QString fontFileName)$/;"	f
load_3	torrent/ed25519/fe.cpp	/^static u64 load_3(const unsigned char *in) {$/;"	f	file:
load_3	torrent/ed25519/sc.cpp	/^static u64 load_3(const unsigned char *in) {$/;"	f	file:
load_4	torrent/ed25519/fe.cpp	/^static u64 load_4(const unsigned char *in) {$/;"	f	file:
load_4	torrent/ed25519/sc.cpp	/^static u64 load_4(const unsigned char *in) {$/;"	f	file:
load_asnum_db	torrent/src/session_handle.cpp	/^	void session_handle::load_asnum_db(char const*) {}$/;"	f	class:libtorrent::session_handle
load_asnum_db	torrent/src/session_handle.cpp	/^	void session_handle::load_asnum_db(wchar_t const*) {}$/;"	f	class:libtorrent::session_handle
load_balancing	torrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER std::int64_t load_balancing;$/;"	m	struct:libtorrent::peer_info
load_country_db	torrent/src/session_handle.cpp	/^	void session_handle::load_country_db(char const*) {}$/;"	f	class:libtorrent::session_handle
load_country_db	torrent/src/session_handle.cpp	/^	void session_handle::load_country_db(wchar_t const*) {}$/;"	f	class:libtorrent::session_handle
load_file	torrent/bak/client_test.cpp	/^bool load_file(std::string const& filename, std::vector<char>& v$/;"	f
load_file	torrent/bak/dump_torrent.cpp	/^std::vector<char> load_file(std::string const& filename)$/;"	f
load_file	torrent/bak/make_torrent.cpp	/^std::vector<char> load_file(std::string const& filename)$/;"	f
load_file	torrent/src/torrent_info.cpp	/^	int load_file(std::string const& filename, std::vector<char>& v$/;"	f	namespace:libtorrent::__anon87
load_ini_file	src/inirw.c	/^static int load_ini_file(const char *file, char *buf,int *file_size)$/;"	f	file:
load_pack_from_dict	torrent/src/settings_pack.cpp	/^	settings_pack load_pack_from_dict(bdecode_node const& settings)$/;"	f	namespace:libtorrent
load_state	torrent/include/libtorrent/extensions.hpp	/^		virtual void load_state(bdecode_node const&) {}$/;"	f	struct:libtorrent::plugin
load_state	torrent/src/session_handle.cpp	/^	void session_handle::load_state(bdecode_node const& e$/;"	f	class:libtorrent::session_handle
load_state	torrent/src/session_handle.cpp	/^	void session_handle::load_state(entry const& ses_state$/;"	f	class:libtorrent::session_handle
load_state	torrent/src/session_handle.cpp	/^	void session_handle::load_state(lazy_entry const& ses_state$/;"	f	class:libtorrent::session_handle
load_state	torrent/src/session_impl.cpp	/^	void session_impl::load_state(bdecode_node const* e$/;"	f	class:libtorrent::aux::session_impl
load_torrent_limits	torrent/include/libtorrent/torrent_info.hpp	/^	struct load_torrent_limits$/;"	s	namespace:libtorrent
local	torrent/include/libtorrent/string_util.hpp	/^		bool local;$/;"	m	struct:libtorrent::listen_interface_t
local	torrent/src/puff.cpp	89;"	d	file:
local_bind	torrent/bak/connection_tester.cpp	/^bool local_bind = false;$/;"	v
local_connection	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t local_connection = 5_bit;$/;"	m	struct:libtorrent::peer_info
local_connection	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::local_connection;$/;"	m	class:libtorrent::peer_info	file:
local_download_rate_limit	torrent/include/libtorrent/settings_pack.hpp	/^			local_download_rate_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
local_download_rate_limit	torrent/src/session_handle.cpp	/^	int session_handle::local_download_rate_limit() const$/;"	f	class:libtorrent::session_handle
local_download_rate_limit	torrent/src/session_impl.cpp	/^	int session_impl::local_download_rate_limit() const$/;"	f	class:libtorrent::aux::session_impl
local_endpoint	torrent/include/libtorrent/alert_types.hpp	/^		aux::noexcept_movable<tcp::endpoint> local_endpoint;$/;"	m	struct:libtorrent::tracker_alert
local_endpoint	torrent/include/libtorrent/announce_entry.hpp	/^		tcp::endpoint local_endpoint;$/;"	m	struct:libtorrent::announce_endpoint
local_endpoint	torrent/include/libtorrent/aux_/session_impl.hpp	/^		tcp::endpoint local_endpoint;$/;"	m	struct:libtorrent::aux::listen_socket_t
local_endpoint	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		udp::endpoint local_endpoint() { return sock.local_endpoint(); }$/;"	f	struct:libtorrent::aux::session_udp_socket
local_endpoint	torrent/include/libtorrent/i2p_stream.hpp	/^	std::string const& local_endpoint() const { return m_i2p_local_endpoint; }$/;"	f	class:libtorrent::i2p_connection::std
local_endpoint	torrent/include/libtorrent/peer_info.hpp	/^		tcp::endpoint local_endpoint;$/;"	m	struct:libtorrent::peer_info
local_endpoint	torrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type local_endpoint() const$/;"	f	class:libtorrent::proxy_base
local_endpoint	torrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type local_endpoint(error_code& ec) const$/;"	f	class:libtorrent::proxy_base
local_endpoint	torrent/include/libtorrent/ssl_stream.hpp	/^	endpoint_type local_endpoint() const$/;"	f	class:libtorrent::ssl_stream
local_endpoint	torrent/include/libtorrent/ssl_stream.hpp	/^	endpoint_type local_endpoint(error_code& ec) const$/;"	f	class:libtorrent::ssl_stream
local_endpoint	torrent/include/libtorrent/udp_socket.hpp	/^		udp::endpoint local_endpoint() const$/;"	f	class:libtorrent::udp_socket
local_endpoint	torrent/include/libtorrent/udp_socket.hpp	/^		udp::endpoint local_endpoint(error_code& ec) const$/;"	f	class:libtorrent::udp_socket
local_endpoint	torrent/include/libtorrent/utp_stream.hpp	/^	endpoint_type local_endpoint() const$/;"	f	struct:libtorrent::utp_stream
local_endpoint	torrent/src/peer_connection_handle.cpp	/^tcp::endpoint peer_connection_handle::local_endpoint() const$/;"	f	class:libtorrent::peer_connection_handle
local_endpoint	torrent/src/socket_type.cpp	/^	socket_type::endpoint_type socket_type::local_endpoint() const$/;"	f	class:libtorrent::aux::socket_type
local_endpoint	torrent/src/socket_type.cpp	/^	socket_type::endpoint_type socket_type::local_endpoint(error_code& ec) const$/;"	f	class:libtorrent::aux::socket_type
local_endpoint	torrent/src/utp_stream.cpp	/^utp_stream::endpoint_type utp_stream::local_endpoint(error_code& ec) const$/;"	f	class:libtorrent::utp_stream
local_ep	torrent/include/libtorrent/upnp.hpp	/^		tcp::endpoint local_ep;$/;"	m	struct:libtorrent::final::global_mapping_t
local_ep	torrent/include/libtorrent/upnp.hpp	/^		tcp::endpoint local_ep;$/;"	m	struct:libtorrent::final::mapping_t
local_if_counter	torrent/bak/connection_tester.cpp	/^int local_if_counter = 0;$/;"	v
local_network	torrent/include/libtorrent/aux_/session_impl.hpp	/^		static constexpr listen_socket_flags_t local_network = 1_bit;$/;"	m	struct:libtorrent::aux::listen_socket_t
local_network	torrent/src/session_impl.cpp	/^	constexpr listen_socket_flags_t listen_socket_t::local_network;$/;"	m	class:libtorrent::aux::listen_socket_t	file:
local_peer_class_id	torrent/src/session_handle.cpp	/^	constexpr peer_class_t session_handle::local_peer_class_id;$/;"	m	class:libtorrent::session_handle	file:
local_port	torrent/include/libtorrent/natpmp.hpp	/^		int local_port = 0;$/;"	m	struct:libtorrent::natpmp::mapping_t
local_port	torrent/include/libtorrent/udp_socket.hpp	/^		int local_port() const { return m_bind_port; }$/;"	f	class:libtorrent::udp_socket
local_service_announce_interval	torrent/include/libtorrent/settings_pack.hpp	/^			local_service_announce_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
local_upload_rate_limit	torrent/include/libtorrent/settings_pack.hpp	/^			local_upload_rate_limit TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
local_upload_rate_limit	torrent/src/session_handle.cpp	/^	int session_handle::local_upload_rate_limit() const$/;"	f	class:libtorrent::session_handle
local_upload_rate_limit	torrent/src/session_impl.cpp	/^	int session_impl::local_upload_rate_limit() const$/;"	f	class:libtorrent::aux::session_impl
localedir	torrent/include/libtorrent/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	torrent/include/libtorrent/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lock	virt-p2v/include/gnulib/windows-mutex.h	/^          CRITICAL_SECTION lock;$/;"	m	struct:__anon161
lock	virt-p2v/include/gnulib/windows-once.h	/^          CRITICAL_SECTION lock;$/;"	m	struct:__anon157
lock	virt-p2v/include/gnulib/windows-recmutex.h	/^          CRITICAL_SECTION lock;$/;"	m	struct:__anon158
lock	virt-p2v/include/gnulib/windows-rwlock.h	/^          CRITICAL_SECTION lock; \/* protects the remaining fields *\/$/;"	m	struct:__anon164
lock_disk_cache	torrent/include/libtorrent/settings_pack.hpp	/^			lock_disk_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
lock_files	torrent/include/libtorrent/settings_pack.hpp	/^			lock_files TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
lock_piece	torrent/src/piece_picker.cpp	/^	void piece_picker::lock_piece(piece_index_t const piece)$/;"	f	class:libtorrent::piece_picker
locked	torrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t TORRENT_DEPRECATED locked = 6_bit;$/;"	m	namespace:libtorrent::file_open_mode
locked	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t locked:1;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
log	torrent/src/natpmp.cpp	/^void natpmp::log(char const* fmt, ...) const$/;"	f	class:libtorrent::natpmp
log	torrent/src/session_impl.cpp	/^	void session_impl::log(module_t m, char const* fmt, ...)$/;"	f	class:libtorrent::aux::session_impl
log	torrent/src/upnp.cpp	/^void upnp::log(char const* fmt, ...) const$/;"	f	class:libtorrent::upnp
log2p1	torrent/src/ffs.cpp	/^	int log2p1(std::uint32_t v)$/;"	f	namespace:libtorrent::aux
log_alert	torrent/src/alert.cpp	/^	log_alert::log_alert(aux::stack_allocator& alloc, char const* fmt, va_list v)$/;"	f	class:libtorrent::log_alert
log_alert	torrent/src/alert.cpp	/^	log_alert::log_alert(aux::stack_allocator& alloc, char const* log)$/;"	f	class:libtorrent::log_alert
log_async	torrent/include/libtorrent/debug.hpp	/^	inline int log_async()$/;"	f	namespace:libtorrent
log_file_holder	torrent/src/utp_stream.cpp	/^} log_file_holder;$/;"	m	namespace:libtorrent	typeref:struct:libtorrent::utp_logger	file:
log_label	virt-p2v/src/gui.c	/^  *v2v_output_sw, *v2v_output, *log_label, *status_label,$/;"	v	file:
log_lsd	torrent/src/session_impl.cpp	/^	void session_impl::log_lsd(char const* msg) const$/;"	f	class:libtorrent::aux::session_impl
log_message	torrent/src/alert.cpp	/^	char const* dht_log_alert::log_message() const$/;"	f	class:libtorrent::dht_log_alert
log_message	torrent/src/alert.cpp	/^	char const* log_alert::log_message() const$/;"	f	class:libtorrent::log_alert
log_message	torrent/src/alert.cpp	/^	char const* peer_log_alert::log_message() const$/;"	f	class:libtorrent::peer_log_alert
log_message	torrent/src/alert.cpp	/^	char const* portmap_log_alert::log_message() const$/;"	f	class:libtorrent::portmap_log_alert
log_message	torrent/src/alert.cpp	/^	char const* torrent_log_alert::log_message() const$/;"	f	class:libtorrent::torrent_log_alert
log_msg	src/log.c	/^void log_msg(const char *fmt, ...)$/;"	f
log_node_failed	torrent/kademlia/routing_table.cpp	/^void routing_table::log_node_failed(node_id const& nid, node_entry const& ne) const$/;"	f	class:libtorrent::dht::routing_table
log_packet	torrent/src/session_impl.cpp	/^	void session_impl::log_packet(message_direction_t dir, span<char const> pkt$/;"	f	class:libtorrent::aux::session_impl
log_peers	torrent/kademlia/get_peers.cpp	/^void get_peers_observer::log_peers(msg const& m, bdecode_node const& r, int const size) const$/;"	f	class:libtorrent::dht::get_peers_observer
log_portmap	torrent/src/session_impl.cpp	/^	void session_impl::log_portmap(portmap_transport transport, char const* msg) const$/;"	f	class:libtorrent::aux::session_impl
log_refcounts	torrent/src/block_cache.cpp	/^void log_refcounts(cached_piece_entry const* pe)$/;"	f	namespace:libtorrent
log_timeout	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::log_timeout(observer_ptr const& o, char const* prefix) const$/;"	f	class:libtorrent::dht::traversal_algorithm
log_to_all_peers	torrent/src/torrent.cpp	/^	void torrent::log_to_all_peers(char const* message)$/;"	f	class:libtorrent::torrent
login_flag	include/client.h	/^    int login_flag;$/;"	m	struct:client
logo_label	qt_pro/ui_downloadwindow.h	/^    QLabel *logo_label;$/;"	m	class:Ui_DownloadWindow
logo_widget	qt_pro/ui_downloadwindow.h	/^    QWidget *logo_widget;$/;"	m	class:Ui_DownloadWindow
long_options	virt-p2v/src/p2v.c	/^static const struct option long_options[] = {$/;"	v	typeref:struct:option	file:
long_options	virt-p2v/src/p2v_transform.c	/^static const struct option long_options[] = {$/;"	v	typeref:struct:option	file:
look_for_nodes	torrent/kademlia/traversal_algorithm.cpp	/^void look_for_nodes(char const* nodes_key, udp const& protocol, bdecode_node const& r, std::function<void(const node_endpoint&)> f)$/;"	f	namespace:libtorrent::dht
lookup	torrent/src/identify_client.cpp	/^	std::string lookup(fingerprint const& f)$/;"	f	namespace:__anon59
lookup_peers	torrent/kademlia/node.cpp	/^bool node::lookup_peers(sha1_hash const& info_hash, entry& reply$/;"	f	class:libtorrent::dht::node
loop_counter	torrent/include/libtorrent/peer_list.hpp	/^		int loop_counter = 0;$/;"	m	struct:libtorrent::torrent_state
loss_multiplier	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int loss_multiplier() const { return m_sett.get_int(settings_pack::utp_loss_multiplier); }$/;"	f	struct:libtorrent::utp_socket_manager
low_pass_download_rate	torrent/include/libtorrent/stat.hpp	/^		int low_pass_download_rate() const$/;"	f	class:libtorrent::stat
low_pass_rate	torrent/include/libtorrent/stat.hpp	/^		std::int32_t low_pass_rate() const { return m_5_sec_average; }$/;"	f	class:libtorrent::stat_channel
low_pass_upload_rate	torrent/include/libtorrent/stat.hpp	/^		int low_pass_upload_rate() const$/;"	f	class:libtorrent::stat
low_prio_disk	torrent/include/libtorrent/settings_pack.hpp	/^			low_prio_disk TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
lowercase	torrent/include/libtorrent/aux_/escape_string.hpp	/^		constexpr encode_string_flags_t lowercase = 0_bit;$/;"	m	namespace:libtorrent::string
lowest_layer	torrent/include/libtorrent/proxy_base.hpp	/^	lowest_layer_type& lowest_layer()$/;"	f	class:libtorrent::proxy_base
lowest_layer	torrent/include/libtorrent/ssl_stream.hpp	/^	lowest_layer_type& lowest_layer()$/;"	f	class:libtorrent::ssl_stream
lowest_layer	torrent/include/libtorrent/utp_stream.hpp	/^	lowest_layer_type& lowest_layer() { return *this; }$/;"	f	struct:libtorrent::utp_stream
lru_file_entry	torrent/include/libtorrent/file_pool.hpp	/^		struct lru_file_entry$/;"	s	struct:libtorrent::file_pool
lsd	torrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<struct lsd> lsd;$/;"	m	struct:libtorrent::aux::listen_socket_t
lsd	torrent/include/libtorrent/lsd.hpp	/^struct lsd : std::enable_shared_from_this<lsd>$/;"	s	namespace:libtorrent
lsd	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t lsd = 3_bit;$/;"	m	struct:libtorrent::peer_info
lsd	torrent/src/lsd.cpp	/^lsd::lsd(io_service& ios, aux::lsd_callback& cb$/;"	f	class:libtorrent::lsd
lsd	torrent/src/peer_info.cpp	/^	constexpr peer_source_flags_t peer_info::lsd;$/;"	m	class:libtorrent::peer_info	file:
lsd_announce	torrent/src/torrent.cpp	/^	void torrent::lsd_announce()$/;"	f	class:libtorrent::torrent
lsd_callback	torrent/include/libtorrent/aux_/lsd.hpp	/^	struct TORRENT_EXTRA_EXPORT lsd_callback$/;"	s	namespace:libtorrent::aux
lsd_error_alert	torrent/src/alert.cpp	/^	lsd_error_alert::lsd_error_alert(aux::stack_allocator&, error_code const& ec)$/;"	f	class:libtorrent::lsd_error_alert
lsd_multicast_addr4	torrent/src/lsd.cpp	/^	address_v4 const lsd_multicast_addr4 = make_address_v4("239.192.152.143");$/;"	m	namespace:libtorrent::__anon132	file:
lsd_multicast_addr6	torrent/src/lsd.cpp	/^	address_v6 const lsd_multicast_addr6 = make_address_v6("ff15::efc0:988f");$/;"	m	namespace:libtorrent::__anon132	file:
lsd_peer_alert	torrent/src/alert.cpp	/^	lsd_peer_alert::lsd_peer_alert(aux::stack_allocator& alloc, torrent_handle const& h$/;"	f	class:libtorrent::lsd_peer_alert
lsd_port	torrent/src/lsd.cpp	/^	int const lsd_port = 6771;$/;"	m	namespace:libtorrent::__anon132	file:
lseek	virt-p2v/include/gnulib/unistd.h	1689;"	d
lsplit_path	torrent/src/path.cpp	/^	std::pair<string_view, string_view> lsplit_path(string_view p)$/;"	f	namespace:libtorrent
lsplit_path	torrent/src/path.cpp	/^	std::pair<string_view, string_view> lsplit_path(string_view p, std::size_t pos)$/;"	f	namespace:libtorrent
lt	torrent/include/libtorrent/peer_connection_handle.hpp	/^	bool lt(std::weak_ptr<peer_connection> const& a$/;"	f	struct:libtorrent::peer_connection_handle
mGlobal	qt_pro/global.cpp	/^Global *Global::mGlobal = NULL;$/;"	m	class:Global	file:
mGlobal	qt_pro/global.h	/^    static Global *mGlobal;$/;"	m	class:Global
mHomePageFlag	qt_pro/operatetimeouttimer.h	/^    bool mHomePageFlag;$/;"	m	class:OperateTimeOutTimer
mOperateTimeOutTimer	qt_pro/operatetimeouttimer.h	/^    static OperateTimeOutTimer *mOperateTimeOutTimer;$/;"	m	class:OperateTimeOutTimer
mSecondTimer	qt_pro/operatetimeouttimer.h	/^    QTimer *mSecondTimer;$/;"	m	class:OperateTimeOutTimer
mTimeoutSecond	qt_pro/operatetimeouttimer.h	/^    int mTimeoutSecond;$/;"	m	class:OperateTimeOutTimer
m_5_sec_average	torrent/include/libtorrent/stat.hpp	/^		std::int32_t m_5_sec_average;$/;"	m	class:libtorrent::stat_channel
m_abort	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_abort = false;$/;"	m	struct:libtorrent::aux::final
m_abort	torrent/include/libtorrent/bandwidth_manager.hpp	/^	bool m_abort;$/;"	m	struct:libtorrent::bandwidth_manager
m_abort	torrent/include/libtorrent/broadcast_socket.hpp	/^		bool m_abort;$/;"	m	class:libtorrent::broadcast_socket
m_abort	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		bool m_abort;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_abort	torrent/include/libtorrent/http_connection.hpp	/^	bool m_abort;$/;"	m	struct:libtorrent::http_connection
m_abort	torrent/include/libtorrent/natpmp.hpp	/^	bool m_abort = false;$/;"	m	struct:libtorrent::natpmp
m_abort	torrent/include/libtorrent/torrent.hpp	/^		bool m_abort:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_abort	torrent/include/libtorrent/tracker_manager.hpp	/^		bool m_abort = false;$/;"	m	class:libtorrent::final
m_abort	torrent/include/libtorrent/tracker_manager.hpp	/^		bool m_abort = false;$/;"	m	struct:libtorrent::timeout_handler
m_abort	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		bool m_abort;$/;"	m	class:libtorrent::udp_tracker_connection
m_abort	torrent/src/udp_socket.cpp	/^	bool m_abort = false;$/;"	m	struct:libtorrent::socks5	file:
m_abort_handler_storage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::handler_storage<100> m_abort_handler_storage;$/;"	m	struct:libtorrent::aux::final
m_abort_handler_storage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::handler_storage<56> m_abort_handler_storage;$/;"	m	struct:libtorrent::aux::final
m_abort_handler_storage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::handler_storage<88> m_abort_handler_storage;$/;"	m	struct:libtorrent::aux::final
m_accept_fast	torrent/include/libtorrent/peer_connection.hpp	/^		std::vector<piece_index_t> m_accept_fast;$/;"	m	class:libtorrent::peer_connection
m_accept_fast_piece_cnt	torrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<std::uint16_t> m_accept_fast_piece_cnt;$/;"	m	class:libtorrent::peer_connection
m_access_list	torrent/include/libtorrent/ip_filter.hpp	/^		std::set<range> m_access_list;$/;"	m	class:libtorrent::detail::filter_impl
m_ack_nr	torrent/src/utp_stream.cpp	/^	std::uint16_t m_ack_nr = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_acked_seq_nr	torrent/src/utp_stream.cpp	/^	std::uint16_t m_acked_seq_nr = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_active	torrent/src/udp_socket.cpp	/^	bool m_active = false;$/;"	m	struct:libtorrent::socks5	file:
m_active_torrent	torrent/bak/torrent_view.hpp	/^	mutable int m_active_torrent; \/\/ index into m_filtered_handles$/;"	m	struct:torrent_view
m_add_torrent_params	torrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<add_torrent_params> m_add_torrent_params;$/;"	m	class:libtorrent::torrent
m_added_time	torrent/include/libtorrent/torrent.hpp	/^		std::time_t m_added_time;$/;"	m	class:libtorrent::torrent
m_addr	torrent/include/libtorrent/kademlia/observer.hpp	/^	} m_addr;$/;"	m	struct:libtorrent::dht::observer	typeref:union:libtorrent::dht::observer::addr_t
m_addr	torrent/src/peer_list.cpp	/^		address const& m_addr;$/;"	m	struct:__anon56::match_peer_endpoint	file:
m_addresses	torrent/include/libtorrent/ip_voter.hpp	/^		address m_addresses[2][2];$/;"	m	struct:libtorrent::external_ip
m_adv_wnd	torrent/src/utp_stream.cpp	/^	std::uint32_t m_adv_wnd = TORRENT_ETHERNET_MTU;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_alert_mask	torrent/include/libtorrent/alert_manager.hpp	/^		std::atomic<alert_category_t> m_alert_mask;$/;"	m	class:libtorrent::alert_manager
m_alert_pointer_pos	torrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable int m_alert_pointer_pos = 0;$/;"	m	struct:libtorrent::aux::final
m_alert_pointers	torrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable aux::vector<alert*> m_alert_pointers;$/;"	m	struct:libtorrent::aux::final
m_alerts	torrent/include/libtorrent/alert_manager.hpp	/^		aux::array<heterogeneous_queue<alert>, 2> m_alerts;$/;"	m	class:libtorrent::alert_manager
m_alerts	torrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable alert_manager m_alerts;$/;"	m	struct:libtorrent::aux::final
m_alerts	torrent/src/udp_socket.cpp	/^	alert_manager& m_alerts;$/;"	m	struct:libtorrent::socks5	file:
m_algorithm	torrent/include/libtorrent/kademlia/observer.hpp	/^	std::shared_ptr<traversal_algorithm> const m_algorithm;$/;"	m	class:libtorrent::dht::observer::std
m_all_handles	torrent/bak/torrent_view.hpp	/^	std::unordered_map<lt::torrent_handle, lt::torrent_status> m_all_handles;$/;"	m	struct:torrent_view
m_alloc	torrent/include/libtorrent/alert_types.hpp	/^		std::reference_wrapper<aux::stack_allocator const> m_alloc;$/;"	m	namespace:libtorrent
m_alloc	torrent/include/libtorrent/alert_types.hpp	/^		std::reference_wrapper<aux::stack_allocator const> m_alloc;$/;"	m	struct:libtorrent::torrent_alert
m_allocate_files	torrent/include/libtorrent/storage.hpp	/^		bool m_allocate_files;$/;"	m	class:libtorrent::default_storage
m_allocations	torrent/include/libtorrent/alert_manager.hpp	/^		aux::array<aux::stack_allocator, 2> m_allocations;$/;"	m	class:libtorrent::alert_manager
m_allocator	torrent/include/libtorrent/disk_buffer_holder.hpp	/^		buffer_allocator_interface* m_allocator;$/;"	m	struct:libtorrent::disk_buffer_holder
m_allowed_fast	torrent/include/libtorrent/peer_connection.hpp	/^		std::vector<piece_index_t> m_allowed_fast;$/;"	m	class:libtorrent::peer_connection
m_armed	torrent/include/libtorrent/aux_/scope_end.hpp	/^		bool m_armed = true;$/;"	m	struct:libtorrent::aux::scope_end_impl
m_attached	torrent/src/utp_stream.cpp	/^	bool m_attached:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_attempts	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		int m_attempts;$/;"	m	class:libtorrent::udp_tracker_connection
m_auth	torrent/include/libtorrent/http_connection.hpp	/^	std::string m_auth;$/;"	m	struct:libtorrent::http_connection
m_auto_manage_time_scaler	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_auto_manage_time_scaler = 0;$/;"	m	struct:libtorrent::aux::final
m_auto_scrape_time_scaler	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_auto_scrape_time_scaler = 180;$/;"	m	struct:libtorrent::aux::final
m_availability	torrent/include/libtorrent/aux_/suggest_piece.hpp	/^	sliding_average<int, 30> m_availability;$/;"	m	struct:libtorrent::aux::suggest_piece
m_average_deviation	torrent/include/libtorrent/sliding_average.hpp	/^	Int m_average_deviation = 0;$/;"	m	struct:libtorrent::sliding_average
m_average_piece_time	torrent/include/libtorrent/torrent.hpp	/^		std::int32_t m_average_piece_time = 0;$/;"	m	class:libtorrent::torrent
m_ban_nodes	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		node_ban_entry m_ban_nodes[num_ban_nodes];$/;"	m	struct:libtorrent::dht::dos_blocker
m_barStyle	qt_pro/QRoundProgressBar.h	/^    BarStyle m_barStyle;$/;"	m	class:QRoundProgressBar
m_base	torrent/include/libtorrent/timestamp_history.hpp	/^	std::uint32_t m_base = 0;$/;"	m	struct:libtorrent::timestamp_history
m_basic_auth	torrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_basic_auth;$/;"	m	class:libtorrent::web_connection_base
m_became_finished	torrent/include/libtorrent/torrent.hpp	/^		time_point32 m_became_finished = aux::time_now32();$/;"	m	class:libtorrent::torrent
m_became_seed	torrent/include/libtorrent/torrent.hpp	/^		time_point32 m_became_seed = aux::time_now32();$/;"	m	class:libtorrent::torrent
m_became_uninterested	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_became_uninterested = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_became_uninteresting	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_became_uninteresting = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_begin	torrent/include/libtorrent/buffer.hpp	/^	char* m_begin = nullptr;$/;"	m	class:libtorrent::buffer
m_begin	torrent/include/libtorrent/lazy_entry.hpp	/^		char const* m_begin = nullptr;$/;"	m	struct:libtorrent::lazy_entry
m_bind_addr	torrent/include/libtorrent/http_connection.hpp	/^	boost::optional<address> m_bind_addr;$/;"	m	struct:libtorrent::http_connection
m_bind_port	torrent/include/libtorrent/udp_socket.hpp	/^		std::uint16_t m_bind_port;$/;"	m	class:libtorrent::udp_socket
m_bit_idx	torrent/include/libtorrent/flags.hpp	/^	int m_bit_idx;$/;"	m	struct:libtorrent::bit_t
m_block_hashes	torrent/src/smart_ban.cpp	/^		std::map<piece_block, block_entry> m_block_hashes;$/;"	m	struct:libtorrent::__anon85::final	file:
m_block_info	torrent/include/libtorrent/piece_picker.hpp	/^		aux::vector<block_info> m_block_info;$/;"	m	class:libtorrent::piece_picker
m_block_info_storage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<block_info> m_block_info_storage;$/;"	m	struct:libtorrent::aux::final
m_block_timeout	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		int m_block_timeout;$/;"	m	struct:libtorrent::dht::dos_blocker
m_blocked_jobs	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		tailqueue<disk_io_job> m_blocked_jobs;$/;"	m	struct:libtorrent::aux::disk_job_fence
m_blocker	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dos_blocker m_blocker;$/;"	m	struct:libtorrent::dht::final
m_blocks_in_last_piece	torrent/include/libtorrent/piece_picker.hpp	/^		std::uint16_t m_blocks_in_last_piece = 0;$/;"	m	class:libtorrent::piece_picker
m_blocks_in_use_idx	torrent/bak/session_view.hpp	/^	int const m_blocks_in_use_idx = lt::find_metric_idx("disk.disk_blocks_in_use");$/;"	m	struct:session_view
m_blocks_per_piece	torrent/include/libtorrent/piece_picker.hpp	/^		std::uint16_t m_blocks_per_piece = 0;$/;"	m	class:libtorrent::piece_picker
m_blocks_written_idx	torrent/bak/session_view.hpp	/^	int const m_blocks_written_idx = lt::find_metric_idx("disk.num_blocks_written");$/;"	m	struct:session_view
m_body_start	torrent/include/libtorrent/web_connection_base.hpp	/^		int m_body_start;$/;"	m	class:libtorrent::web_connection_base
m_body_start_pos	torrent/include/libtorrent/http_parser.hpp	/^		int m_body_start_pos = 0;$/;"	m	class:libtorrent::http_parser
m_bools	torrent/include/libtorrent/aux_/session_settings.hpp	/^		std::bitset<settings_pack::num_bool_settings> m_bools;$/;"	m	struct:libtorrent::aux::session_settings_single_thread
m_bools	torrent/include/libtorrent/settings_pack.hpp	/^		std::vector<std::pair<std::uint16_t, bool>> m_bools;$/;"	m	namespace:libtorrent
m_boost_connections	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_boost_connections = 0;$/;"	m	struct:libtorrent::aux::final
m_bottled	torrent/include/libtorrent/http_connection.hpp	/^	bool m_bottled;$/;"	m	struct:libtorrent::http_connection
m_branch_factor	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int8_t m_branch_factor = 3;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_broadcast_timer	torrent/include/libtorrent/lsd.hpp	/^	deadline_timer m_broadcast_timer;$/;"	m	struct:libtorrent::lsd
m_broadcast_timer	torrent/include/libtorrent/upnp.hpp	/^	deadline_timer m_broadcast_timer;$/;"	m	struct:libtorrent::final
m_bucket_size	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	int const m_bucket_size;$/;"	m	class:libtorrent::dht::routing_table
m_buckets	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	table_t m_buckets;$/;"	m	class:libtorrent::dht::routing_table
m_buf	torrent/include/libtorrent/bitfield.hpp	/^		aux::unique_ptr<std::uint32_t[]> m_buf;$/;"	m	struct:libtorrent::bitfield
m_buf	torrent/include/libtorrent/disk_buffer_holder.hpp	/^		char* m_buf;$/;"	m	struct:libtorrent::disk_buffer_holder
m_buffer	torrent/include/libtorrent/bdecode.hpp	/^	char const* m_buffer = nullptr;$/;"	m	struct:bdecode_node
m_buffer	torrent/include/libtorrent/http_stream.hpp	/^	std::vector<char> m_buffer;$/;"	m	class:libtorrent::http_stream
m_buffer	torrent/include/libtorrent/i2p_stream.hpp	/^	aux::vector<char> m_buffer;$/;"	m	class:libtorrent::i2p_stream
m_buffer	torrent/include/libtorrent/socks5_stream.hpp	/^	std::vector<char> m_buffer;$/;"	m	class:libtorrent::socks5_stream
m_buffer_size	torrent/include/libtorrent/bdecode.hpp	/^	int m_buffer_size = 0;$/;"	m	struct:bdecode_node
m_buffered_incoming_bytes	torrent/src/utp_stream.cpp	/^	std::int32_t m_buffered_incoming_bytes = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_buffers_in_use	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		std::set<char*> m_buffers_in_use;$/;"	m	struct:libtorrent::disk_buffer_pool
m_bytes_in_flight	torrent/src/utp_stream.cpp	/^	std::int32_t m_bytes_in_flight = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_cache	torrent/include/libtorrent/resolver.hpp	/^	std::unordered_map<std::string, dns_cache_entry> m_cache;$/;"	m	struct:libtorrent::final
m_cache_check_state	torrent/include/libtorrent/disk_io_thread.hpp	/^		int m_cache_check_state = cache_check_idle;$/;"	m	struct:libtorrent::final
m_cache_hit_idx	torrent/bak/session_view.hpp	/^	int const m_cache_hit_idx = lt::find_metric_idx("disk.num_blocks_cache_hits");$/;"	m	struct:session_view
m_cache_mutex	torrent/include/libtorrent/disk_io_thread.hpp	/^		mutable std::mutex m_cache_mutex;$/;"	m	struct:libtorrent::final
m_cache_mutex	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		static std::mutex m_cache_mutex;$/;"	m	class:libtorrent::udp_tracker_connection
m_cache_mutex	torrent/src/udp_tracker_connection.cpp	/^	std::mutex udp_tracker_connection::m_cache_mutex;$/;"	m	class:libtorrent::udp_tracker_connection	file:
m_cached_pieces	torrent/include/libtorrent/aux_/storage_piece_set.hpp	/^		list_t m_cached_pieces;$/;"	m	struct:libtorrent::aux::storage_piece_set
m_callback	torrent/include/libtorrent/lsd.hpp	/^	aux::lsd_callback& m_callback;$/;"	m	struct:libtorrent::lsd
m_callback	torrent/include/libtorrent/natpmp.hpp	/^	aux::portmap_callback& m_callback;$/;"	m	struct:libtorrent::natpmp
m_callback	torrent/include/libtorrent/upnp.hpp	/^	aux::portmap_callback& m_callback;$/;"	m	struct:libtorrent::final
m_called	torrent/include/libtorrent/http_connection.hpp	/^	bool m_called;$/;"	m	struct:libtorrent::http_connection
m_candidate_cache	torrent/include/libtorrent/peer_list.hpp	/^		std::vector<torrent_peer*> m_candidate_cache;$/;"	m	struct:libtorrent::peer_list
m_capacity	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		int m_capacity = 0;$/;"	m	struct:libtorrent::heterogeneous_queue
m_capacity	torrent/include/libtorrent/packet_buffer.hpp	/^		std::uint32_t m_capacity = 0;$/;"	m	class:libtorrent::packet_buffer
m_cb	torrent/include/libtorrent/kademlia/direct_request.hpp	/^	message_callback m_cb;$/;"	m	struct:libtorrent::dht::direct_traversal
m_cb	torrent/include/libtorrent/utp_socket_manager.hpp	/^		incoming_utp_callback_t m_cb;$/;"	m	struct:libtorrent::utp_socket_manager
m_channel	torrent/include/libtorrent/bandwidth_manager.hpp	/^	int m_channel;$/;"	m	struct:libtorrent::bandwidth_manager
m_channel_state	torrent/include/libtorrent/peer_connection.hpp	/^		bandwidth_state_flags_t m_channel_state[2];$/;"	m	class:libtorrent::peer_connection
m_choked	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_choked:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_chunk_header_size	torrent/include/libtorrent/http_parser.hpp	/^		int m_chunk_header_size = 0;$/;"	m	class:libtorrent::http_parser
m_chunk_pos	torrent/include/libtorrent/http_seed_connection.hpp	/^		std::int64_t m_chunk_pos;$/;"	m	class:libtorrent::http_seed_connection
m_chunk_pos	torrent/include/libtorrent/web_peer_connection.hpp	/^		int m_chunk_pos;$/;"	m	class:libtorrent::web_peer_connection
m_chunked_encoding	torrent/include/libtorrent/http_parser.hpp	/^		bool m_chunked_encoding = false;$/;"	m	class:libtorrent::http_parser
m_chunked_ranges	torrent/include/libtorrent/http_parser.hpp	/^		std::vector<std::pair<std::int64_t, std::int64_t>> m_chunked_ranges;$/;"	m	class:libtorrent::http_parser
m_class	torrent/include/libtorrent/peer_class_set.hpp	/^		aux::array<peer_class_t, 15> m_class;$/;"	m	struct:libtorrent::peer_class_set
m_classes	torrent/include/libtorrent/aux_/session_impl.hpp	/^			peer_class_pool m_classes;$/;"	m	struct:libtorrent::aux::final
m_client	src/client.c	/^struct client m_client;$/;"	v	typeref:struct:client
m_close_file_timer	torrent/include/libtorrent/aux_/session_impl.hpp	/^			deadline_timer m_close_file_timer;$/;"	m	struct:libtorrent::aux::final
m_close_reason	torrent/src/utp_stream.cpp	/^	close_reason_t m_close_reason = close_reason_t::none;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_closing	torrent/include/libtorrent/upnp.hpp	/^	bool m_closing = false;$/;"	m	struct:libtorrent::final
m_cnt	torrent/bak/session_view.hpp	/^	std::vector<std::int64_t> m_cnt[2];$/;"	m	struct:session_view
m_cnt	torrent/include/libtorrent/debug.hpp	/^		int& m_cnt;$/;"	m	struct:libtorrent::increment_guard
m_collections	torrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::string> m_collections;$/;"	m	struct:libtorrent::create_torrent
m_collections	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<std::pair<char const*, int>> m_collections;$/;"	m	class:libtorrent::torrent_info
m_command	torrent/include/libtorrent/i2p_stream.hpp	/^	command_t m_command;$/;"	m	class:libtorrent::i2p_stream
m_command	torrent/include/libtorrent/socks5_stream.hpp	/^	int m_command;$/;"	m	class:libtorrent::socks5_stream
m_comment	torrent/include/libtorrent/create_torrent.hpp	/^		std::string m_comment;$/;"	m	struct:libtorrent::create_torrent
m_comment	torrent/include/libtorrent/torrent_info.hpp	/^		std::string m_comment;$/;"	m	class:libtorrent::torrent_info
m_complete	torrent/include/libtorrent/torrent.hpp	/^		std::uint32_t m_complete:24;$/;"	m	struct:libtorrent::torrent_hot_members
m_completed_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		jobqueue_t m_completed_jobs;$/;"	m	struct:libtorrent::final
m_completed_jobs_mutex	torrent/include/libtorrent/disk_io_thread.hpp	/^		std::mutex m_completed_jobs_mutex;$/;"	m	struct:libtorrent::final
m_completed_time	torrent/include/libtorrent/torrent.hpp	/^		std::time_t m_completed_time;$/;"	m	class:libtorrent::torrent
m_completion_timeout	torrent/include/libtorrent/http_connection.hpp	/^	time_duration m_completion_timeout;$/;"	m	struct:libtorrent::http_connection
m_completion_timeout	torrent/include/libtorrent/tracker_manager.hpp	/^		int m_completion_timeout = 0;$/;"	m	struct:libtorrent::timeout_handler
m_condition	torrent/include/libtorrent/alert_manager.hpp	/^		std::condition_variable_any m_condition;$/;"	m	class:libtorrent::alert_manager
m_confirmed	torrent/src/utp_stream.cpp	/^	bool m_confirmed:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_connect	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_connect = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_connect_boost_counter	torrent/include/libtorrent/torrent.hpp	/^		std::uint8_t m_connect_boost_counter;$/;"	m	class:libtorrent::torrent
m_connect_handler	torrent/include/libtorrent/http_connection.hpp	/^	http_connect_handler m_connect_handler;$/;"	m	struct:libtorrent::http_connection
m_connect_handler	torrent/include/libtorrent/utp_stream.hpp	/^	std::function<void(error_code const&)> m_connect_handler;$/;"	m	struct:libtorrent::utp_stream
m_connect_handler	torrent/src/utp_stream.cpp	/^	bool m_connect_handler = false;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_connecting	torrent/include/libtorrent/http_connection.hpp	/^	bool m_connecting;$/;"	m	struct:libtorrent::http_connection
m_connecting	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_connecting:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_connecting	torrent/src/http_connection.cpp	/^	, m_connecting(false)$/;"	f	namespace:libtorrent
m_connection	torrent/include/libtorrent/peer_connection_handle.hpp	/^	std::weak_ptr<peer_connection> m_connection;$/;"	m	struct:libtorrent::peer_connection_handle
m_connection_buffer	torrent/include/libtorrent/receive_buffer.hpp	/^	receive_buffer& m_connection_buffer;$/;"	m	struct:libtorrent::crypto_receive_buffer
m_connection_cache	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		static std::map<address, connection_cache_entry> m_connection_cache;$/;"	m	class:libtorrent::udp_tracker_connection
m_connection_cache	torrent/src/udp_tracker_connection.cpp	/^		udp_tracker_connection::m_connection_cache;$/;"	m	class:libtorrent::udp_tracker_connection	file:
m_connection_close	torrent/include/libtorrent/http_parser.hpp	/^		bool m_connection_close = false;$/;"	m	class:libtorrent::http_parser
m_connections	torrent/include/libtorrent/aux_/session_impl.hpp	/^			connection_map m_connections;$/;"	m	struct:libtorrent::aux::final
m_connections	torrent/include/libtorrent/torrent.hpp	/^		aux::vector<peer_connection*> m_connections;$/;"	m	struct:libtorrent::torrent_hot_members
m_connections_initialized	torrent/include/libtorrent/torrent.hpp	/^		bool m_connections_initialized:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_content_length	torrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_content_length = -1;$/;"	m	class:libtorrent::http_parser
m_context	torrent/include/libtorrent/hasher.hpp	/^		CC_SHA1_CTX m_context;$/;"	m	class:libtorrent::hasher
m_context	torrent/include/libtorrent/hasher.hpp	/^		SHA_CTX m_context;$/;"	m	class:libtorrent::hasher
m_context	torrent/include/libtorrent/hasher.hpp	/^		aux::crypt_hash<CALG_SHA1, PROV_RSA_FULL> m_context;$/;"	m	class:libtorrent::hasher
m_context	torrent/include/libtorrent/hasher.hpp	/^		gcry_md_hd_t m_context;$/;"	m	class:libtorrent::hasher
m_context	torrent/include/libtorrent/hasher.hpp	/^		sha1_ctx m_context;$/;"	m	class:libtorrent::hasher
m_context	torrent/include/libtorrent/hasher512.hpp	/^		CC_SHA512_CTX m_context;$/;"	m	class:libtorrent::hasher512
m_context	torrent/include/libtorrent/hasher512.hpp	/^		SHA512_CTX m_context;$/;"	m	class:libtorrent::hasher512
m_context	torrent/include/libtorrent/hasher512.hpp	/^		aux::crypt_hash<CALG_SHA_512, PROV_RSA_AES> m_context;$/;"	m	class:libtorrent::hasher512
m_context	torrent/include/libtorrent/hasher512.hpp	/^		gcry_md_hd_t m_context;$/;"	m	class:libtorrent::hasher512
m_context	torrent/include/libtorrent/hasher512.hpp	/^		sha512_ctx m_context;$/;"	m	class:libtorrent::hasher512
m_cookie	torrent/include/libtorrent/lsd.hpp	/^	int m_cookie;$/;"	m	struct:libtorrent::lsd
m_counter	torrent/include/libtorrent/stat.hpp	/^		std::int32_t m_counter;$/;"	m	class:libtorrent::stat_channel
m_counters	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		counters& m_counters;$/;"	m	struct:libtorrent::dht::final
m_counters	torrent/include/libtorrent/kademlia/node.hpp	/^	counters& m_counters;$/;"	m	class:libtorrent::dht::node
m_counters	torrent/include/libtorrent/peer_connection.hpp	/^		counters& m_counters;$/;"	m	class:libtorrent::peer_connection
m_counters	torrent/include/libtorrent/utp_socket_manager.hpp	/^		counters& m_counters;$/;"	m	struct:libtorrent::utp_socket_manager
m_counters	torrent/kademlia/dht_storage.cpp	/^		dht_storage_counters m_counters;$/;"	m	class:libtorrent::dht::__anon153::final	file:
m_created	torrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_created;$/;"	m	struct:libtorrent::aux::final
m_created_by	torrent/include/libtorrent/create_torrent.hpp	/^		std::string m_created_by;$/;"	m	struct:libtorrent::create_torrent
m_created_by	torrent/include/libtorrent/torrent_info.hpp	/^		std::string m_created_by;$/;"	m	class:libtorrent::torrent_info
m_creation_date	torrent/include/libtorrent/create_torrent.hpp	/^		time_t m_creation_date;$/;"	m	struct:libtorrent::create_torrent
m_creation_date	torrent/include/libtorrent/torrent_info.hpp	/^		std::time_t m_creation_date = 0;$/;"	m	class:libtorrent::torrent_info
m_critical_resolver	torrent/include/libtorrent/resolver.hpp	/^	tcp::resolver m_critical_resolver;$/;"	m	struct:libtorrent::final
m_cur_chunk_end	torrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_cur_chunk_end = -1;$/;"	m	class:libtorrent::http_parser
m_current	torrent/include/libtorrent/linked_list.hpp	/^		T* m_current;$/;"	m	struct:libtorrent::list_iterator
m_current	torrent/include/libtorrent/tailqueue.hpp	/^		T* m_current;$/;"	m	struct:libtorrent::tailqueue_iterator
m_cwnd	torrent/src/utp_stream.cpp	/^	std::int64_t m_cwnd = TORRENT_ETHERNET_MTU << 16;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_cwnd_full	torrent/src/utp_stream.cpp	/^	bool m_cwnd_full:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_data	torrent/include/libtorrent/aux_/socket_type.hpp	/^		>::type m_data;$/;"	m	struct:libtorrent::aux::socket_type
m_data	torrent/include/libtorrent/kademlia/get_item.hpp	/^	item m_data;$/;"	m	class:libtorrent::dht::get_item
m_data	torrent/include/libtorrent/kademlia/put_data.hpp	/^	item m_data;$/;"	m	struct:libtorrent::dht::put_data
m_data	torrent/include/libtorrent/lazy_entry.hpp	/^		} m_data;$/;"	m	struct:libtorrent::lazy_entry	typeref:union:libtorrent::lazy_entry::data_t
m_dataPenWidth	qt_pro/QRoundProgressBar.h	/^    double m_outlinePenWidth, m_dataPenWidth;$/;"	m	class:QRoundProgressBar
m_data_callback	torrent/include/libtorrent/kademlia/get_item.hpp	/^	data_callback m_data_callback;$/;"	m	class:libtorrent::dht::get_item
m_data_callback	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	data_callback m_data_callback;$/;"	m	struct:libtorrent::dht::get_peers
m_data_callback	torrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^	data_callback m_data_callback;$/;"	m	class:libtorrent::dht::final
m_dec_handler	torrent/include/libtorrent/pe_crypto.hpp	/^		std::shared_ptr<crypto_plugin> m_dec_handler;$/;"	m	struct:libtorrent::encryption_handler
m_decimals	qt_pro/QRoundProgressBar.h	/^    int m_decimals;$/;"	m	class:QRoundProgressBar
m_decrypt	torrent/include/libtorrent/pe_crypto.hpp	/^		bool m_decrypt;$/;"	m	struct:libtorrent::rc4_handler
m_deferred_ack	torrent/src/utp_stream.cpp	/^	bool m_deferred_ack:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_deferred_disconnect	torrent/include/libtorrent/torrent.hpp	/^		aux::deferred_handler m_deferred_disconnect;$/;"	m	class:libtorrent::torrent
m_deferred_file_priorities	torrent/include/libtorrent/torrent.hpp	/^		std::map<file_index_t, download_priority_t> m_deferred_file_priorities;$/;"	m	class:libtorrent::torrent
m_deferred_handler_storage	torrent/include/libtorrent/torrent.hpp	/^		aux::handler_storage<64> m_deferred_handler_storage;$/;"	m	class:libtorrent::torrent
m_deferred_handler_storage	torrent/include/libtorrent/torrent.hpp	/^		aux::handler_storage<96> m_deferred_handler_storage;$/;"	m	class:libtorrent::torrent
m_deferred_submit_disk_jobs	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_deferred_submit_disk_jobs = false;$/;"	m	struct:libtorrent::aux::final
m_delay_hist	torrent/src/utp_stream.cpp	/^	timestamp_history m_delay_hist;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_delay_sample_hist	torrent/src/utp_stream.cpp	/^	std::array<std::uint32_t, 3> m_delay_sample_hist;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_delay_sample_idx	torrent/src/utp_stream.cpp	/^	std::uint8_t m_delay_sample_idx:2;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_depth	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	mutable int m_depth;$/;"	m	class:libtorrent::dht::routing_table
m_desired_queue_size	torrent/include/libtorrent/peer_connection.hpp	/^		std::uint16_t m_desired_queue_size = 4;$/;"	m	class:libtorrent::peer_connection
m_desktop_group_name	src/client.c	/^char m_desktop_group_name[128] = {0};$/;"	v
m_dest	torrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_dest;$/;"	m	class:libtorrent::i2p_stream
m_destructed	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_destructed = false;$/;"	m	class:libtorrent::peer_connection
m_device	torrent/include/libtorrent/upnp.hpp	/^	std::string m_device;$/;"	m	struct:libtorrent::final
m_devices	torrent/include/libtorrent/upnp.hpp	/^	std::set<rootdevice> m_devices;$/;"	m	struct:libtorrent::final
m_df	torrent/src/udp_socket.cpp	/^	bool const m_df;$/;"	m	struct:libtorrent::set_dont_frag	file:
m_dh_local_key	torrent/include/libtorrent/pe_crypto.hpp	/^		key_t m_dh_local_key;$/;"	m	class:libtorrent::dh_key_exchange
m_dh_local_secret	torrent/include/libtorrent/pe_crypto.hpp	/^		key_t m_dh_local_secret;$/;"	m	class:libtorrent::dh_key_exchange
m_dh_shared_secret	torrent/include/libtorrent/pe_crypto.hpp	/^		key_t m_dh_shared_secret;$/;"	m	class:libtorrent::dh_key_exchange
m_dht	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::shared_ptr<dht::dht_tracker> m_dht;$/;"	m	struct:libtorrent::aux::final
m_dht_announce_timer	torrent/include/libtorrent/aux_/session_impl.hpp	/^			deadline_timer m_dht_announce_timer;$/;"	m	struct:libtorrent::aux::final
m_dht_interval_update_torrents	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_dht_interval_update_torrents = 0;$/;"	m	struct:libtorrent::aux::final
m_dht_nodes	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<udp::endpoint> m_dht_nodes;$/;"	m	struct:libtorrent::aux::final
m_dht_router_nodes	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<udp::endpoint> m_dht_router_nodes;$/;"	m	struct:libtorrent::aux::final
m_dht_settings	torrent/include/libtorrent/aux_/session_impl.hpp	/^			dht::settings m_dht_settings;$/;"	m	struct:libtorrent::aux::final
m_dht_start_time	torrent/include/libtorrent/torrent.hpp	/^		time_point m_dht_start_time;$/;"	m	class:libtorrent::torrent
m_dht_state	torrent/include/libtorrent/aux_/session_impl.hpp	/^			dht::dht_state m_dht_state;$/;"	m	struct:libtorrent::aux::final
m_dht_storage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::unique_ptr<dht::dht_storage_interface> m_dht_storage;$/;"	m	struct:libtorrent::aux::final
m_dht_storage_constructor	torrent/include/libtorrent/aux_/session_impl.hpp	/^			dht::dht_storage_constructor_type m_dht_storage_constructor$/;"	m	struct:libtorrent::aux::final
m_dht_torrents	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::deque<std::weak_ptr<torrent>> m_dht_torrents;$/;"	m	struct:libtorrent::aux::final
m_dio	torrent/src/create_torrent.cpp	/^		disk_io_thread& m_dio;$/;"	m	struct:libtorrent::__anon135::disk_aborter	file:
m_dirty	torrent/include/libtorrent/piece_picker.hpp	/^		mutable bool m_dirty = false;$/;"	m	class:libtorrent::piece_picker
m_dirty_metadata	torrent/include/libtorrent/part_file.hpp	/^		bool m_dirty_metadata = false;$/;"	m	struct:libtorrent::part_file
m_disabled	torrent/include/libtorrent/lsd.hpp	/^	bool m_disabled = false;$/;"	m	struct:libtorrent::lsd
m_disabled	torrent/include/libtorrent/natpmp.hpp	/^	bool m_disabled = false;$/;"	m	struct:libtorrent::natpmp
m_disabled	torrent/include/libtorrent/upnp.hpp	/^	bool m_disabled = false;$/;"	m	struct:libtorrent::final
m_disconnect_started	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_disconnect_started = false;$/;"	m	class:libtorrent::peer_connection
m_disconnect_time_scaler	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_disconnect_time_scaler = 90;$/;"	m	struct:libtorrent::aux::final
m_disconnecting	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_disconnecting:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_disk_cache	torrent/include/libtorrent/disk_io_thread.hpp	/^		block_cache m_disk_cache;$/;"	m	struct:libtorrent::final
m_disk_io	torrent/include/libtorrent/disk_interface.hpp	/^		disk_interface* m_disk_io = nullptr;$/;"	m	struct:libtorrent::storage_holder
m_disk_read_failures	torrent/include/libtorrent/peer_connection.hpp	/^		std::uint8_t m_disk_read_failures = 0;$/;"	m	class:libtorrent::peer_connection
m_disk_thread	torrent/include/libtorrent/aux_/session_impl.hpp	/^			disk_io_thread m_disk_thread;$/;"	m	struct:libtorrent::aux::final
m_disk_thread	torrent/include/libtorrent/peer_connection.hpp	/^		disk_interface& m_disk_thread;$/;"	m	class:libtorrent::peer_connection
m_done	torrent/include/libtorrent/file.hpp	/^		bool m_done;$/;"	m	class:libtorrent::directory
m_done	torrent/include/libtorrent/kademlia/find_data.hpp	/^	bool m_done;$/;"	m	struct:libtorrent::dht::find_data
m_done	torrent/include/libtorrent/kademlia/put_data.hpp	/^	bool m_done = false;$/;"	m	struct:libtorrent::dht::put_data
m_done	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	bool m_done = false;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_download_connect_attempts	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_download_connect_attempts = 0;$/;"	m	struct:libtorrent::aux::final
m_download_queue	torrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::vector<torrent*, queue_position_t> m_download_queue;$/;"	m	struct:libtorrent::aux::final
m_download_queue	torrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<pending_block> m_download_queue;$/;"	m	class:libtorrent::peer_connection
m_download_quota	torrent/include/libtorrent/http_connection.hpp	/^	int m_download_quota;$/;"	m	struct:libtorrent::http_connection
m_download_rate	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bandwidth_manager m_download_rate;$/;"	m	struct:libtorrent::aux::final
m_download_rate_peak	torrent/include/libtorrent/peer_connection.hpp	/^		int m_download_rate_peak = 0;$/;"	m	class:libtorrent::peer_connection
m_downloaded_at_last_round	torrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t m_downloaded_at_last_round = 0;$/;"	m	class:libtorrent::peer_connection
m_downloaded_last_second	torrent/include/libtorrent/peer_connection.hpp	/^		std::int32_t m_downloaded_last_second = 0;$/;"	m	class:libtorrent::peer_connection
m_downloads	torrent/include/libtorrent/piece_picker.hpp	/^			, download_queue_t> m_downloads;$/;"	m	class:libtorrent::piece_picker
m_drained_event	torrent/include/libtorrent/utp_socket_manager.hpp	/^		socket_vector_t m_drained_event;$/;"	m	struct:libtorrent::utp_socket_manager
m_dropped	torrent/include/libtorrent/alert_manager.hpp	/^		std::bitset<num_alert_types> m_dropped;$/;"	m	class:libtorrent::alert_manager
m_dst_name	torrent/include/libtorrent/http_stream.hpp	/^	std::string m_dst_name;$/;"	m	class:libtorrent::http_stream
m_dst_name	torrent/include/libtorrent/socks5_stream.hpp	/^	std::string m_dst_name;$/;"	m	class:libtorrent::socks5_stream
m_duplicate_acks	torrent/src/utp_stream.cpp	/^	std::uint8_t m_duplicate_acks = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_dwConnectTick	torrent/bak/udp_tracker.cpp	/^	DWORD			m_dwConnectTick;$/;"	m	class:CUDPTrackerClient	file:
m_dwDonePeers	torrent/bak/udp_tracker.cpp	/^	DWORD m_dwDonePeers;	\/\/ç§å­æ°$/;"	m	class:CUDPTrackerClient	file:
m_dwIP	torrent/bak/udp_tracker.cpp	/^	DWORD			m_dwIP;$/;"	m	class:CUDPTrackerClient	file:
m_dwInterval	torrent/bak/udp_tracker.cpp	/^	DWORD m_dwInterval;	\/\/æ¥è¯¢é´éæ¶é´$/;"	m	class:CUDPTrackerClient	file:
m_dwNumPeers	torrent/bak/udp_tracker.cpp	/^	DWORD m_dwNumPeers;	\/\/å½åä¸è½½èä¸ªæ°$/;"	m	class:CUDPTrackerClient	file:
m_encrypt	torrent/include/libtorrent/pe_crypto.hpp	/^		bool m_encrypt;$/;"	m	struct:libtorrent::rc4_handler
m_endgame_mode	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_endgame_mode:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_endpoints	torrent/include/libtorrent/http_connection.hpp	/^	aux::vector<tcp::endpoint> m_endpoints;$/;"	m	struct:libtorrent::http_connection
m_endpoints	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::vector<tcp::endpoint> m_endpoints;$/;"	m	class:libtorrent::udp_tracker_connection
m_eof	torrent/src/utp_stream.cpp	/^	bool m_eof:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_eof_seq_nr	torrent/src/utp_stream.cpp	/^	std::uint16_t m_eof_seq_nr = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_error	torrent/include/libtorrent/torrent.hpp	/^		error_code m_error;$/;"	m	class:libtorrent::torrent
m_error	torrent/src/utp_stream.cpp	/^	error_code m_error;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_error_file	torrent/include/libtorrent/torrent.hpp	/^		file_index_t m_error_file;$/;"	m	class:libtorrent::torrent
m_errors	torrent/include/libtorrent/stat_cache.hpp	/^		std::vector<error_code> m_errors;$/;"	m	struct:libtorrent::stat_cache
m_est_reciprocation_rate	torrent/include/libtorrent/peer_connection.hpp	/^		int m_est_reciprocation_rate;$/;"	m	class:libtorrent::peer_connection
m_exceeded_max_size	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		bool m_exceeded_max_size;$/;"	m	struct:libtorrent::disk_buffer_pool
m_executed	torrent/src/disk_io_thread.cpp	/^		bool m_executed = false;$/;"	m	struct:libtorrent::__anon122::piece_refcount_holder	file:
m_extension_outstanding_bytes	torrent/include/libtorrent/peer_connection.hpp	/^		int m_extension_outstanding_bytes = 0;$/;"	m	class:libtorrent::peer_connection
m_extensions	torrent/include/libtorrent/peer_connection.hpp	/^		std::list<std::shared_ptr<peer_plugin>> m_extensions;$/;"	m	class:libtorrent::peer_connection
m_extensions	torrent/include/libtorrent/torrent.hpp	/^		std::list<std::shared_ptr<torrent_plugin>> m_extensions;$/;"	m	class:libtorrent::torrent
m_external_address	torrent/include/libtorrent/ip_voter.hpp	/^		address m_external_address;$/;"	m	struct:libtorrent::ip_voter
m_external_address_voters	torrent/include/libtorrent/ip_voter.hpp	/^		bloom_filter<32> m_external_address_voters;$/;"	m	struct:libtorrent::ip_voter
m_external_addresses	torrent/include/libtorrent/ip_voter.hpp	/^		std::vector<external_ip_t> m_external_addresses;$/;"	m	struct:libtorrent::ip_voter
m_external_auth	torrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_external_auth;$/;"	m	class:libtorrent::web_connection_base
m_external_ip	torrent/include/libtorrent/natpmp.hpp	/^	address m_external_ip;$/;"	m	struct:libtorrent::natpmp
m_extra_headers	torrent/include/libtorrent/web_connection_base.hpp	/^		web_seed_entry::headers_t m_extra_headers;$/;"	m	class:libtorrent::web_connection_base
m_f	torrent/include/libtorrent/aux_/session_impl.hpp	/^				ext_function_t m_f;$/;"	m	struct:libtorrent::aux::final::session_plugin_wrapper
m_failed_bytes_idx	torrent/bak/session_view.hpp	/^	int const m_failed_bytes_idx = lt::find_metric_idx("net.recv_failed_bytes");$/;"	m	struct:session_view
m_failures	torrent/src/udp_socket.cpp	/^	int m_failures = 0;$/;"	m	struct:libtorrent::socks5	file:
m_fast_resend_seq_nr	torrent/src/utp_stream.cpp	/^	std::uint16_t m_fast_resend_seq_nr = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_fd	torrent/include/libtorrent/aux_/dev_random.hpp	/^		int m_fd;$/;"	m	struct:libtorrent::aux::dev_random
m_fd	torrent/include/libtorrent/file.hpp	/^		WIN32_FIND_DATAW m_fd;$/;"	m	class:libtorrent::directory
m_file	torrent/include/libtorrent/part_file.hpp	/^		std::shared_ptr<file> m_file;$/;"	m	struct:libtorrent::part_file
m_file_created	torrent/include/libtorrent/storage.hpp	/^		mutable typed_bitfield<file_index_t> m_file_created;$/;"	m	class:libtorrent::default_storage
m_file_created_mutex	torrent/include/libtorrent/storage.hpp	/^		mutable std::mutex m_file_created_mutex;$/;"	m	class:libtorrent::default_storage
m_file_data	torrent/bak/custom_storage.cpp	/^	std::map<lt::piece_index_t, std::vector<char>> m_file_data;$/;"	m	struct:temp_storage	file:
m_file_handle	torrent/include/libtorrent/file.hpp	/^		handle_type m_file_handle;$/;"	m	struct:libtorrent::file
m_file_hashes	torrent/include/libtorrent/file_storage.hpp	/^		aux::vector<char const*, file_index_t> m_file_hashes;$/;"	m	class:libtorrent::file_storage
m_file_idx	torrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_file_idx;$/;"	m	struct:libtorrent::final
m_file_priority	torrent/include/libtorrent/storage.hpp	/^		aux::vector<download_priority_t, file_index_t> m_file_priority;$/;"	m	class:libtorrent::default_storage
m_file_priority	torrent/include/libtorrent/torrent.hpp	/^		aux::vector<download_priority_t, file_index_t> m_file_priority;$/;"	m	class:libtorrent::torrent
m_file_progress	torrent/include/libtorrent/aux_/file_progress.hpp	/^		vector<std::int64_t, file_index_t> m_file_progress;$/;"	m	struct:libtorrent::aux::file_progress
m_file_progress	torrent/include/libtorrent/torrent.hpp	/^		aux::file_progress m_file_progress;$/;"	m	class:libtorrent::torrent
m_file_requests	torrent/include/libtorrent/web_peer_connection.hpp	/^		std::deque<file_request_t> m_file_requests;$/;"	m	class:libtorrent::web_peer_connection
m_file_sizes	torrent/include/libtorrent/aux_/file_progress.hpp	/^		vector<std::int64_t, file_index_t> m_file_sizes;$/;"	m	struct:libtorrent::aux::file_progress
m_file_sizes	torrent/include/libtorrent/resolve_links.hpp	/^		std::unordered_multimap<std::int64_t, file_index_t> m_file_sizes;$/;"	m	struct:libtorrent::resolve_links
m_filehashes	torrent/include/libtorrent/create_torrent.hpp	/^		aux::vector<sha1_hash, file_index_t> m_filehashes;$/;"	m	struct:libtorrent::create_torrent
m_files	torrent/include/libtorrent/create_torrent.hpp	/^		file_storage& m_files;$/;"	m	struct:libtorrent::create_torrent
m_files	torrent/include/libtorrent/file_pool.hpp	/^		std::map<std::pair<storage_index_t, file_index_t>, lru_file_entry> m_files;$/;"	m	struct:libtorrent::file_pool
m_files	torrent/include/libtorrent/file_storage.hpp	/^		aux::vector<internal_file_entry, file_index_t> m_files;$/;"	m	class:libtorrent::file_storage
m_files	torrent/include/libtorrent/storage.hpp	/^		file_storage const& m_files;$/;"	m	struct:libtorrent::storage_interface
m_files	torrent/include/libtorrent/torrent_info.hpp	/^		file_storage m_files;$/;"	m	class:libtorrent::torrent_info
m_filter	torrent/include/libtorrent/ip_filter.hpp	/^	detail::filter_impl<std::uint16_t> m_filter;$/;"	m	class:libtorrent::port_filter
m_filter4	torrent/include/libtorrent/ip_filter.hpp	/^	detail::filter_impl<address_v4::bytes_type> m_filter4;$/;"	m	struct:libtorrent::ip_filter
m_filter6	torrent/include/libtorrent/ip_filter.hpp	/^	detail::filter_impl<address_v6::bytes_type> m_filter6;$/;"	m	struct:libtorrent::ip_filter
m_filter_handler	torrent/include/libtorrent/http_connection.hpp	/^	http_filter_handler m_filter_handler;$/;"	m	struct:libtorrent::http_connection
m_filtered_handles	torrent/bak/torrent_view.hpp	/^	std::vector<lt::torrent_status const*> m_filtered_handles;$/;"	m	struct:torrent_view
m_filtered_pad_blocks	torrent/include/libtorrent/piece_picker.hpp	/^		int m_filtered_pad_blocks = 0;$/;"	m	class:libtorrent::piece_picker
m_finished	torrent/include/libtorrent/http_parser.hpp	/^		bool m_finished = false;$/;"	m	class:libtorrent::http_parser
m_finished	torrent/include/libtorrent/peer_list.hpp	/^		std::uint32_t m_finished:1;$/;"	m	struct:libtorrent::peer_list
m_first	torrent/include/libtorrent/linked_list.hpp	/^		T* m_first;$/;"	m	struct:libtorrent::linked_list
m_first	torrent/include/libtorrent/tailqueue.hpp	/^		T* m_first;$/;"	m	struct:libtorrent::tailqueue
m_first_request	torrent/include/libtorrent/web_connection_base.hpp	/^		bool m_first_request;$/;"	m	class:libtorrent::web_connection_base
m_first_time	torrent/src/ut_pex.cpp	/^		bool m_first_time;$/;"	m	struct:libtorrent::__anon35::final	file:
m_flags	torrent/include/libtorrent/http_parser.hpp	/^		int m_flags;$/;"	m	class:libtorrent::http_parser
m_flags	torrent/include/libtorrent/torrent_info.hpp	/^		std::uint8_t m_flags = 0;$/;"	m	class:libtorrent::torrent_info
m_format	qt_pro/QRoundProgressBar.h	/^    QString m_format;$/;"	m	class:QRoundProgressBar
m_free_block_infos	torrent/include/libtorrent/piece_picker.hpp	/^		std::vector<std::uint16_t> m_free_block_infos;$/;"	m	class:libtorrent::piece_picker
m_free_list	torrent/include/libtorrent/peer_class.hpp	/^		std::vector<peer_class_t> m_free_list;$/;"	m	struct:libtorrent::peer_class_pool
m_free_slots	torrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<storage_index_t> m_free_slots;$/;"	m	struct:libtorrent::final
m_free_slots	torrent/include/libtorrent/part_file.hpp	/^		std::vector<slot_index_t> m_free_slots;$/;"	m	struct:libtorrent::part_file
m_fun	torrent/include/libtorrent/aux_/scope_end.hpp	/^		Fun m_fun;$/;"	m	struct:libtorrent::aux::scope_end_impl
m_generation	torrent/include/libtorrent/alert_manager.hpp	/^		int m_generation = 0;$/;"	m	class:libtorrent::alert_manager
m_generic_io_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		job_queue m_generic_io_jobs;$/;"	m	struct:libtorrent::final
m_generic_threads	torrent/include/libtorrent/disk_io_thread.hpp	/^		disk_io_thread_pool m_generic_threads;$/;"	m	struct:libtorrent::final
m_get_foreign_node	torrent/include/libtorrent/kademlia/node.hpp	/^	get_foreign_node_t m_get_foreign_node;$/;"	m	class:libtorrent::dht::node
m_ghost_size	torrent/include/libtorrent/block_cache.hpp	/^		int m_ghost_size;$/;"	m	struct:libtorrent::block_cache
m_graceful_pause_mode	torrent/include/libtorrent/torrent.hpp	/^		bool m_graceful_pause_mode:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_gradientData	qt_pro/QRoundProgressBar.h	/^    QGradientStops m_gradientData;$/;"	m	class:QRoundProgressBar
m_handle	torrent/include/libtorrent/file.hpp	/^		DIR* m_handle;$/;"	m	class:libtorrent::directory
m_handle	torrent/include/libtorrent/file.hpp	/^		HANDLE m_handle;$/;"	m	class:libtorrent::directory
m_handler	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^	Handler m_handler;$/;"	m	struct:libtorrent::aux::handler_wrapper
m_handler	torrent/include/libtorrent/http_connection.hpp	/^	http_handler m_handler;$/;"	m	struct:libtorrent::http_connection
m_has_fence	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		int m_has_fence = 0;$/;"	m	struct:libtorrent::aux::disk_job_fence
m_hash	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		HCRYPTHASH m_hash;$/;"	m	struct:libtorrent::aux::crypt_hash
m_hash_io_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		job_queue m_hash_io_jobs;$/;"	m	struct:libtorrent::final
m_hash_threads	torrent/include/libtorrent/disk_io_thread.hpp	/^		disk_io_thread_pool m_hash_threads;$/;"	m	struct:libtorrent::final
m_have_all	torrent/include/libtorrent/torrent.hpp	/^		bool m_have_all:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_have_filtered_pad_blocks	torrent/include/libtorrent/piece_picker.hpp	/^		int m_have_filtered_pad_blocks = 0;$/;"	m	class:libtorrent::piece_picker
m_have_pad_blocks	torrent/include/libtorrent/piece_picker.hpp	/^		int m_have_pad_blocks = 0;$/;"	m	class:libtorrent::piece_picker
m_have_piece	torrent/include/libtorrent/peer_connection.hpp	/^		typed_bitfield<piece_index_t> m_have_piece;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_have_pieces	torrent/include/libtorrent/aux_/file_progress.hpp	/^		typed_bitfield<piece_index_t> m_have_pieces;$/;"	m	struct:libtorrent::aux::file_progress
m_header	torrent/include/libtorrent/http_parser.hpp	/^		std::multimap<std::string, std::string> m_header;$/;"	m	class:libtorrent::http_parser
m_header_size	torrent/include/libtorrent/part_file.hpp	/^		int const m_header_size;$/;"	m	struct:libtorrent::part_file
m_height	torrent/bak/torrent_view.hpp	/^	int m_height;$/;"	m	struct:torrent_view
m_history	torrent/include/libtorrent/timestamp_history.hpp	/^	std::array<std::uint32_t, history_size> m_history;$/;"	m	struct:libtorrent::timestamp_history
m_host	torrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_host;$/;"	m	class:libtorrent::web_connection_base
m_host_resolver	torrent/include/libtorrent/aux_/session_impl.hpp	/^			resolver m_host_resolver;$/;"	m	struct:libtorrent::aux::final
m_host_resolver	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		udp::resolver m_host_resolver;$/;"	m	struct:libtorrent::dht::final
m_host_resolver	torrent/include/libtorrent/tracker_manager.hpp	/^		resolver_interface& m_host_resolver;$/;"	m	class:libtorrent::final
m_hostname	torrent/include/libtorrent/http_connection.hpp	/^	std::string m_hostname;$/;"	m	struct:libtorrent::http_connection
m_hostname	torrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_hostname;$/;"	m	class:libtorrent::i2p_connection
m_hostname	torrent/include/libtorrent/proxy_base.hpp	/^	std::string m_hostname; \/\/ proxy host$/;"	m	class:libtorrent::proxy_base
m_hostname	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::string m_hostname;$/;"	m	class:libtorrent::udp_tracker_connection
m_http_conns	torrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<std::shared_ptr<http_tracker_connection>> m_http_conns;$/;"	m	class:libtorrent::final
m_http_seeds	torrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::string> m_http_seeds;$/;"	m	struct:libtorrent::create_torrent
m_i2p_conn	torrent/include/libtorrent/aux_/session_impl.hpp	/^			i2p_connection m_i2p_conn;$/;"	m	struct:libtorrent::aux::final
m_i2p_conn	torrent/include/libtorrent/http_connection.hpp	/^	i2p_connection* m_i2p_conn;$/;"	m	struct:libtorrent::http_connection
m_i2p_listen_socket	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::shared_ptr<socket_type> m_i2p_listen_socket;$/;"	m	struct:libtorrent::aux::final
m_i2p_local_endpoint	torrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_i2p_local_endpoint;$/;"	m	class:libtorrent::i2p_connection
m_iConnection_id	torrent/bak/udp_tracker.cpp	/^	__int64			m_iConnection_id;$/;"	m	class:CUDPTrackerClient	file:
m_id	torrent/include/libtorrent/debug.hpp	/^		mutable std::thread::id m_id;$/;"	m	struct:libtorrent::single_threaded
m_id	torrent/include/libtorrent/i2p_stream.hpp	/^	char const* m_id;$/;"	m	class:libtorrent::i2p_stream
m_id	torrent/include/libtorrent/kademlia/node.hpp	/^	node_id m_id;$/;"	m	class:libtorrent::dht::node
m_id	torrent/include/libtorrent/kademlia/observer.hpp	/^	node_id m_id;$/;"	m	struct:libtorrent::dht::observer
m_id	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	node_id m_id; \/\/ our own node id$/;"	m	class:libtorrent::dht::routing_table
m_id	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::uint32_t m_id;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_idle_timer	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		deadline_timer m_idle_timer;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_idx	torrent/include/libtorrent/disk_interface.hpp	/^			, m_idx(rhs.m_idx)$/;"	f	struct:libtorrent::storage_holder
m_idx	torrent/include/libtorrent/index_range.hpp	/^	Index m_idx;$/;"	m	struct:libtorrent::index_iter
m_idx	torrent/include/libtorrent/stack_allocator.hpp	/^		int m_idx;$/;"	m	namespace:libtorrent::aux
m_ignore_stats	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_ignore_stats:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_immutable	torrent/include/libtorrent/kademlia/get_item.hpp	/^	bool m_immutable;$/;"	m	class:libtorrent::dht::get_item
m_immutable_table	torrent/kademlia/dht_storage.cpp	/^		std::map<node_id, dht_immutable_item> m_immutable_table;$/;"	m	class:libtorrent::dht::__anon153::final	file:
m_impl	torrent/include/libtorrent/session.hpp	/^		std::shared_ptr<aux::session_impl> m_impl;$/;"	m	class:libtorrent::session
m_impl	torrent/include/libtorrent/session.hpp	/^		std::shared_ptr<aux::session_impl> m_impl;$/;"	m	class:libtorrent::session_proxy
m_impl	torrent/include/libtorrent/session_handle.hpp	/^		std::weak_ptr<aux::session_impl> m_impl;$/;"	m	struct:libtorrent::session_handle
m_impl	torrent/include/libtorrent/utp_stream.hpp	/^	utp_socket_impl* m_impl;$/;"	m	struct:libtorrent::utp_stream
m_in_constructor	torrent/include/libtorrent/kademlia/observer.hpp	/^	bool m_in_constructor = true;$/;"	m	struct:libtorrent::dht::observer
m_in_constructor	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_in_constructor = true;$/;"	m	class:libtorrent::peer_connection
m_in_flight	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^	bool m_in_flight = false;$/;"	m	struct:libtorrent::aux::deferred_handler
m_in_flight	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^	bool& m_in_flight;$/;"	m	struct:libtorrent::aux::handler_wrapper
m_in_packets	torrent/src/utp_stream.cpp	/^	std::uint32_t m_in_packets = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_in_use	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		int m_in_use;$/;"	m	struct:libtorrent::disk_buffer_pool
m_in_use	torrent/include/libtorrent/kademlia/observer.hpp	/^	bool m_in_use = true;$/;"	m	struct:libtorrent::dht::observer
m_in_use	torrent/include/libtorrent/peer_connection.hpp	/^		int m_in_use = 1337;$/;"	m	class:libtorrent::peer_connection
m_in_use	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		bool m_in_use = true;$/;"	m	struct:libtorrent::final
m_inactivity_timer	torrent/include/libtorrent/torrent.hpp	/^		deadline_timer m_inactivity_timer;$/;"	m	class:libtorrent::torrent
m_inbuf	torrent/src/utp_stream.cpp	/^	packet_buffer m_inbuf;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_include_mtime	torrent/include/libtorrent/create_torrent.hpp	/^		bool m_include_mtime:1;$/;"	m	struct:libtorrent::create_torrent
m_include_symlinks	torrent/include/libtorrent/create_torrent.hpp	/^		bool m_include_symlinks:1;$/;"	m	struct:libtorrent::create_torrent
m_incoming_close_reason	torrent/include/libtorrent/utp_stream.hpp	/^	close_reason_t m_incoming_close_reason = close_reason_t::none;$/;"	m	struct:libtorrent::utp_stream
m_incoming_requests	torrent/src/ut_metadata.cpp	/^		std::vector<int> m_incoming_requests;$/;"	m	struct:libtorrent::__anon72::final	file:
m_incoming_sockets	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::set<std::shared_ptr<socket_type>> m_incoming_sockets;$/;"	m	struct:libtorrent::aux::final
m_index	torrent/include/libtorrent/timestamp_history.hpp	/^	std::uint16_t m_index = 0;$/;"	m	struct:libtorrent::timestamp_history
m_info_dict	torrent/include/libtorrent/create_torrent.hpp	/^		entry m_info_dict;$/;"	m	struct:libtorrent::create_torrent
m_info_dict	torrent/include/libtorrent/torrent_info.hpp	/^		mutable bdecode_node m_info_dict;$/;"	m	class:libtorrent::torrent_info
m_info_hash	torrent/include/libtorrent/torrent.hpp	/^		sha1_hash m_info_hash;$/;"	m	class:libtorrent::torrent
m_info_hash	torrent/include/libtorrent/torrent_info.hpp	/^		sha1_hash m_info_hash;$/;"	m	class:libtorrent::torrent_info
m_info_section	torrent/include/libtorrent/torrent_info.hpp	/^		boost::shared_array<char> m_info_section;$/;"	m	class:libtorrent::torrent_info
m_info_section_size	torrent/include/libtorrent/torrent_info.hpp	/^		std::int32_t m_info_section_size = 0;$/;"	m	class:libtorrent::torrent_info
m_infohashes_sample	torrent/kademlia/dht_storage.cpp	/^		infohashes_sample m_infohashes_sample;$/;"	m	class:libtorrent::dht::__anon153::final	file:
m_initialized	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_initialized = false;$/;"	m	class:libtorrent::peer_connection
m_innerOuterRate	qt_pro/QRoundProgressBar.h	/^    float m_innerOuterRate;\/\/\/< åå¾æ¯å¤å¾ï¼è¿ém_innerOuterRateåºè¯¥å°äº1$/;"	m	class:QRoundProgressBar
m_interesting	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_interesting:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_interface_idx	torrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_interface_idx;$/;"	m	namespace:libtorrent
m_interface_index	torrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable std::uint8_t m_interface_index = 0;$/;"	m	struct:libtorrent::aux::final
m_ints	torrent/include/libtorrent/aux_/session_settings.hpp	/^		std::array<int, settings_pack::num_int_settings> m_ints;$/;"	m	struct:libtorrent::aux::session_settings_single_thread
m_ints	torrent/include/libtorrent/settings_pack.hpp	/^		std::vector<std::pair<std::uint16_t, int>> m_ints;$/;"	m	namespace:libtorrent
m_invoke_count	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int8_t m_invoke_count = 0;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_io_service	torrent/include/libtorrent/aux_/session_impl.hpp	/^			io_service& m_io_service;$/;"	m	struct:libtorrent::aux::final
m_io_service	torrent/include/libtorrent/aux_/socket_type.hpp	/^		io_service& m_io_service;$/;"	m	struct:libtorrent::aux::socket_type
m_io_service	torrent/include/libtorrent/i2p_stream.hpp	/^	io_service& m_io_service;$/;"	m	class:libtorrent::i2p_connection
m_io_service	torrent/include/libtorrent/session.hpp	/^		std::shared_ptr<io_service> m_io_service;$/;"	m	class:libtorrent::session
m_io_service	torrent/include/libtorrent/session.hpp	/^		std::shared_ptr<io_service> m_io_service;$/;"	m	class:libtorrent::session_proxy
m_io_service	torrent/include/libtorrent/upnp.hpp	/^	io_service& m_io_service;$/;"	m	struct:libtorrent::final
m_io_service	torrent/include/libtorrent/utp_stream.hpp	/^	io_service& m_io_service;$/;"	m	struct:libtorrent::utp_stream
m_ios	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		io_service& m_ios;$/;"	m	struct:libtorrent::disk_buffer_pool
m_ios	torrent/include/libtorrent/disk_io_thread.hpp	/^		io_service& m_ios;$/;"	m	struct:libtorrent::final
m_ios	torrent/include/libtorrent/peer_connection.hpp	/^		io_service& m_ios;$/;"	m	class:libtorrent::peer_connection
m_ios	torrent/include/libtorrent/resolver.hpp	/^	io_service& m_ios;$/;"	m	struct:libtorrent::final
m_ios	torrent/include/libtorrent/utp_socket_manager.hpp	/^		io_service& m_ios;$/;"	m	struct:libtorrent::utp_socket_manager
m_ios	torrent/src/ip_notifier.cpp	/^	io_service& m_ios;$/;"	m	struct:libtorrent::aux::__anon43::final	file:
m_ip4s	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	std::unordered_multiset<address_v4::bytes_type, ipv4_hash> m_ip4s;$/;"	m	struct:libtorrent::dht::ip_set
m_ip6s	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	std::unordered_multiset<address_v6::bytes_type, ipv6_hash> m_ip6s;$/;"	m	struct:libtorrent::dht::ip_set
m_ip_filter	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::shared_ptr<ip_filter> m_ip_filter;$/;"	m	struct:libtorrent::aux::final
m_ip_filter	torrent/include/libtorrent/torrent.hpp	/^		std::shared_ptr<const ip_filter> m_ip_filter;$/;"	m	class:libtorrent::torrent
m_ip_notifier	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::unique_ptr<ip_change_notifier> m_ip_notifier;$/;"	m	struct:libtorrent::aux::final
m_ips	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	ip_set m_ips;$/;"	m	class:libtorrent::dht::routing_table
m_isize	torrent/bak/udp_tracker.cpp	/^	int m_isize;$/;"	m	class:CDataStream	file:
m_iterating_connections	torrent/include/libtorrent/torrent.hpp	/^		mutable int m_iterating_connections = 0;$/;"	m	class:libtorrent::torrent
m_job	torrent/src/disk_io_job.cpp	/^			disk_io_job& m_job;$/;"	m	struct:libtorrent::__anon115::caller_visitor	file:
m_job_completions_in_flight	torrent/include/libtorrent/disk_io_thread.hpp	/^		bool m_job_completions_in_flight = false;$/;"	m	struct:libtorrent::final
m_job_cond	torrent/include/libtorrent/disk_io_thread.hpp	/^			std::condition_variable m_job_cond;$/;"	m	struct:libtorrent::final::job_queue
m_job_mutex	torrent/include/libtorrent/disk_io_thread.hpp	/^		mutable std::mutex m_job_mutex;$/;"	m	struct:libtorrent::final
m_job_mutex	torrent/include/libtorrent/disk_job_pool.hpp	/^		std::mutex m_job_mutex;$/;"	m	struct:libtorrent::disk_job_pool
m_job_pool	torrent/include/libtorrent/disk_job_pool.hpp	/^		boost::pool<> m_job_pool;$/;"	m	struct:libtorrent::disk_job_pool
m_jobs_aborted	torrent/include/libtorrent/disk_io_thread.hpp	/^		std::atomic_flag m_jobs_aborted = ATOMIC_FLAG_INIT;$/;"	m	struct:libtorrent::final
m_jobs_in_use	torrent/include/libtorrent/disk_job_pool.hpp	/^		int m_jobs_in_use;$/;"	m	struct:libtorrent::disk_job_pool
m_key_refresh_timer	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		deadline_timer m_key_refresh_timer;$/;"	m	struct:libtorrent::dht::final
m_last	torrent/include/libtorrent/linked_list.hpp	/^		T* m_last;$/;"	m	struct:libtorrent::linked_list
m_last	torrent/include/libtorrent/tailqueue.hpp	/^		T* m_last;$/;"	m	struct:libtorrent::tailqueue
m_last_auto_manage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_last_auto_manage;$/;"	m	struct:libtorrent::aux::final
m_last_cache_expiry	torrent/include/libtorrent/disk_io_thread.hpp	/^		time_point m_last_cache_expiry = min_time();$/;"	m	struct:libtorrent::final
m_last_cache_op	torrent/include/libtorrent/block_cache.hpp	/^		int m_last_cache_op;$/;"	m	struct:libtorrent::block_cache
m_last_choke	torrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_last_choke;$/;"	m	struct:libtorrent::aux::final
m_last_choke	torrent/include/libtorrent/bt_peer_connection.hpp	/^		time_point m_last_choke;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
m_last_choke	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_choke = min_time();$/;"	m	class:libtorrent::peer_connection
m_last_history_step	torrent/src/utp_stream.cpp	/^	time_point m_last_history_step = clock_type::now();$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_last_incoming_request	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_incoming_request = min_time();$/;"	m	class:libtorrent::peer_connection
m_last_index	torrent/include/libtorrent/bdecode.hpp	/^	mutable int m_last_index = -1;$/;"	m	struct:bdecode_node
m_last_msg	torrent/src/ut_pex.cpp	/^		time_point m_last_msg;$/;"	m	struct:libtorrent::__anon35::final	file:
m_last_pex	torrent/src/ut_pex.cpp	/^		time_point m_last_pex[6];$/;"	m	struct:libtorrent::__anon35::final	file:
m_last_piece	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_piece = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_receive	torrent/include/libtorrent/http_connection.hpp	/^	time_point m_last_receive;$/;"	m	struct:libtorrent::http_connection
m_last_receive	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_receive = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_request	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_request = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_rotate	torrent/include/libtorrent/ip_voter.hpp	/^		time_point m_last_rotate;$/;"	m	struct:libtorrent::ip_voter
m_last_second_tick	torrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_last_second_tick;$/;"	m	struct:libtorrent::aux::final
m_last_seen_complete	torrent/include/libtorrent/peer_connection.hpp	/^		time_t m_last_seen_complete = 0;$/;"	m	class:libtorrent::peer_connection
m_last_seen_complete	torrent/include/libtorrent/torrent.hpp	/^		std::time_t m_last_seen_complete = 0;$/;"	m	class:libtorrent::torrent
m_last_self_refresh	torrent/include/libtorrent/kademlia/node.hpp	/^	time_point m_last_self_refresh;$/;"	m	class:libtorrent::dht::node
m_last_self_refresh	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	mutable time_point m_last_self_refresh;$/;"	m	class:libtorrent::dht::routing_table
m_last_sent	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_sent = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_sent_payload	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_sent_payload = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_socket	torrent/include/libtorrent/utp_socket_manager.hpp	/^		utp_socket_impl* m_last_socket = nullptr;$/;"	m	struct:libtorrent::utp_socket_manager
m_last_tick	torrent/include/libtorrent/aux_/session_impl.hpp	/^			time_point m_last_tick;$/;"	m	struct:libtorrent::aux::final
m_last_tick	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		time_point m_last_tick;$/;"	m	struct:libtorrent::dht::final
m_last_token	torrent/include/libtorrent/bdecode.hpp	/^	mutable int m_last_token = -1;$/;"	m	struct:bdecode_node
m_last_tracker_tick	torrent/include/libtorrent/kademlia/node.hpp	/^	time_point m_last_tracker_tick;$/;"	m	class:libtorrent::dht::node
m_last_unchoke	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_unchoke = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_unchoked	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_last_unchoked = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_last_working_tracker	torrent/include/libtorrent/torrent.hpp	/^		std::int8_t m_last_working_tracker = -1;$/;"	m	class:libtorrent::torrent
m_len	torrent/include/libtorrent/lazy_entry.hpp	/^		std::uint32_t m_len = 0;$/;"	m	struct:libtorrent::lazy_entry
m_len	torrent/include/libtorrent/span.hpp	/^			: m_ptr(&arr[0]), m_len(N) {}$/;"	f	struct:libtorrent::span
m_len	torrent/include/libtorrent/span.hpp	/^			: m_ptr(v.data()), m_len(v.size()) {}$/;"	f	struct:libtorrent::span
m_len	torrent/include/libtorrent/span.hpp	/^		difference_type m_len;$/;"	m	struct:libtorrent::span
m_len	torrent/include/libtorrent/span.hpp	/^		span(T* p, difference_type const l) noexcept : m_ptr(p), m_len(l) \/\/ NOLINT$/;"	f	struct:libtorrent::span
m_limit	torrent/include/libtorrent/bandwidth_limit.hpp	/^	std::int32_t m_limit;$/;"	m	struct:libtorrent::bandwidth_channel
m_limit	torrent/include/libtorrent/packet_pool.hpp	/^		const std::size_t m_limit;$/;"	m	struct:libtorrent::packet_slab
m_limiter_down_queue_idx	torrent/bak/session_view.hpp	/^	int const m_limiter_down_queue_idx = lt::find_metric_idx("net.limiter_down_queue");$/;"	m	struct:session_view
m_limiter_timer	torrent/include/libtorrent/http_connection.hpp	/^	deadline_timer m_limiter_timer;$/;"	m	struct:libtorrent::http_connection
m_limiter_timer_active	torrent/include/libtorrent/http_connection.hpp	/^	bool m_limiter_timer_active;$/;"	m	struct:libtorrent::http_connection
m_limiter_up_queue_idx	torrent/bak/session_view.hpp	/^	int const m_limiter_up_queue_idx = lt::find_metric_idx("net.limiter_up_queue");$/;"	m	struct:session_view
m_links	torrent/include/libtorrent/resolve_links.hpp	/^		aux::vector<link_t, file_index_t> m_links;$/;"	m	struct:libtorrent::resolve_links
m_links	torrent/include/libtorrent/torrent.hpp	/^			m_links;$/;"	m	class:libtorrent::torrent
m_listPeers	torrent/bak/udp_tracker.cpp	/^	list<CPeerHostInfo> m_listPeers;$/;"	m	class:CUDPTrackerClient	file:
m_listen_address	torrent/include/libtorrent/lsd.hpp	/^	address m_listen_address;$/;"	m	struct:libtorrent::lsd
m_listen_address	torrent/include/libtorrent/upnp.hpp	/^	address_v4 m_listen_address;$/;"	m	struct:libtorrent::final
m_listen_interfaces	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<listen_interface_t> m_listen_interfaces;$/;"	m	struct:libtorrent::aux::final
m_listen_socket	torrent/include/libtorrent/udp_socket.hpp	/^		aux::listen_socket_handle m_listen_socket;$/;"	m	class:libtorrent::udp_socket
m_listen_socket	torrent/src/udp_socket.cpp	/^	aux::listen_socket_handle m_listen_socket;$/;"	m	struct:libtorrent::socks5	file:
m_listen_sockets	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<std::shared_ptr<listen_socket_t>> m_listen_sockets;$/;"	m	struct:libtorrent::aux::final
m_live_allocations	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		int m_live_allocations = 0;$/;"	m	struct:libtorrent::final
m_live_bytes	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		int m_live_bytes = 0;$/;"	m	struct:libtorrent::final
m_local	torrent/include/libtorrent/peer_connection.hpp	/^		tcp::endpoint m_local;$/;"	m	class:libtorrent::peer_connection
m_lock	torrent/src/disk_io_thread.cpp	/^		Lock* m_lock;$/;"	m	namespace:libtorrent::__anon122	file:
m_locked_peer	torrent/include/libtorrent/peer_list.hpp	/^		torrent_peer* m_locked_peer;$/;"	m	struct:libtorrent::peer_list
m_log	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dht_observer* m_log;$/;"	m	struct:libtorrent::dht::final
m_log	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	dht_logger* m_log;$/;"	m	class:libtorrent::dht::routing_table
m_log	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	dht_logger* m_log;$/;"	m	class:libtorrent::dht::rpc_manager
m_loss_seq_nr	torrent/src/utp_stream.cpp	/^	std::uint16_t m_loss_seq_nr = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_low_prio_io	torrent/include/libtorrent/file_pool.hpp	/^		bool m_low_prio_io = false;$/;"	m	struct:libtorrent::file_pool
m_low_watermark	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		int m_low_watermark;$/;"	m	struct:libtorrent::disk_buffer_pool
m_lru	torrent/include/libtorrent/block_cache.hpp	/^		linked_list<cached_piece_entry> m_lru[cached_piece_entry::num_lrus];$/;"	m	struct:libtorrent::block_cache
m_lsd_announce_timer	torrent/include/libtorrent/aux_/session_impl.hpp	/^			deadline_timer m_lsd_announce_timer;$/;"	m	struct:libtorrent::aux::final
m_magic	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		int m_magic;$/;"	m	struct:libtorrent::disk_buffer_pool
m_magic	torrent/include/libtorrent/disk_io_thread.hpp	/^		int m_magic = 0x1337;$/;"	m	struct:libtorrent::final
m_magic	torrent/include/libtorrent/i2p_stream.hpp	/^	int m_magic;$/;"	m	class:libtorrent::i2p_stream
m_magic	torrent/include/libtorrent/udp_socket.hpp	/^		int m_magic;$/;"	m	class:libtorrent::udp_socket
m_man	torrent/include/libtorrent/tracker_manager.hpp	/^		tracker_manager& m_man;$/;"	m	struct:libtorrent::tracker_connection
m_map	torrent/kademlia/dht_storage.cpp	/^		std::map<node_id, torrent_entry> m_map;$/;"	m	class:libtorrent::dht::__anon153::final	file:
m_map_timer	torrent/include/libtorrent/upnp.hpp	/^	deadline_timer m_map_timer;$/;"	m	struct:libtorrent::final
m_mapped_files	torrent/include/libtorrent/storage.hpp	/^		std::unique_ptr<file_storage> m_mapped_files;$/;"	m	class:libtorrent::default_storage
m_mappings	torrent/include/libtorrent/natpmp.hpp	/^	aux::vector<mapping_t, port_mapping_t> m_mappings;$/;"	m	struct:libtorrent::natpmp
m_mappings	torrent/include/libtorrent/upnp.hpp	/^	aux::vector<global_mapping_t, port_mapping_t> m_mappings;$/;"	m	struct:libtorrent::final
m_max	qt_pro/QRoundProgressBar.h	/^    double m_min, m_max;$/;"	m	class:QRoundProgressBar
m_max_bottled_buffer_size	torrent/include/libtorrent/http_connection.hpp	/^	int m_max_bottled_buffer_size;$/;"	m	struct:libtorrent::http_connection
m_max_connections	torrent/include/libtorrent/torrent.hpp	/^		std::uint32_t m_max_connections:24;$/;"	m	struct:libtorrent::torrent_hot_members
m_max_failcount	torrent/include/libtorrent/peer_list.hpp	/^		int m_max_failcount = 3;$/;"	m	struct:libtorrent::peer_list
m_max_out_request_queue	torrent/include/libtorrent/peer_connection.hpp	/^		int m_max_out_request_queue;$/;"	m	class:libtorrent::peer_connection
m_max_pieces	torrent/include/libtorrent/part_file.hpp	/^		int const m_max_pieces;$/;"	m	struct:libtorrent::part_file
m_max_size	torrent/include/libtorrent/resolver.hpp	/^	int m_max_size;$/;"	m	struct:libtorrent::final
m_max_threads	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::atomic<int> m_max_threads;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_max_use	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		int m_max_use;$/;"	m	struct:libtorrent::disk_buffer_pool
m_max_volatile_blocks	torrent/include/libtorrent/block_cache.hpp	/^		int m_max_volatile_blocks;$/;"	m	struct:libtorrent::block_cache
m_mean	torrent/include/libtorrent/sliding_average.hpp	/^	Int m_mean = 0;$/;"	m	struct:libtorrent::sliding_average
m_merkle_first_leaf	torrent/include/libtorrent/torrent_info.hpp	/^		std::int32_t m_merkle_first_leaf = 0;$/;"	m	class:libtorrent::torrent_info
m_merkle_torrent	torrent/include/libtorrent/create_torrent.hpp	/^		bool m_merkle_torrent:1;$/;"	m	struct:libtorrent::create_torrent
m_merkle_tree	torrent/include/libtorrent/create_torrent.hpp	/^		mutable aux::vector<sha1_hash> m_merkle_tree;$/;"	m	struct:libtorrent::create_torrent
m_merkle_tree	torrent/include/libtorrent/torrent_info.hpp	/^		aux::vector<sha1_hash> m_merkle_tree;$/;"	m	class:libtorrent::torrent_info
m_message_index	torrent/src/ut_metadata.cpp	/^		int m_message_index;$/;"	m	struct:libtorrent::__anon72::final	file:
m_message_index	torrent/src/ut_pex.cpp	/^		int m_message_index;$/;"	m	struct:libtorrent::__anon35::final	file:
m_message_rate_limit	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		int m_message_rate_limit;$/;"	m	struct:libtorrent::dht::dos_blocker
m_metadata	torrent/src/ut_metadata.cpp	/^		mutable boost::shared_array<char> m_metadata;$/;"	m	struct:libtorrent::__anon72::final	file:
m_metadata_size	torrent/src/ut_metadata.cpp	/^		mutable int m_metadata_size = 0;$/;"	m	struct:libtorrent::__anon72::final	file:
m_method	torrent/include/libtorrent/http_parser.hpp	/^		std::string m_method;$/;"	m	class:libtorrent::http_parser
m_mfu_ghost_idx	torrent/bak/session_view.hpp	/^	int const m_mfu_ghost_idx = lt::find_metric_idx("disk.arc_mfu_ghost_size");$/;"	m	struct:session_view
m_mfu_size_idx	torrent/bak/session_view.hpp	/^	int const m_mfu_size_idx = lt::find_metric_idx("disk.arc_mfu_size");$/;"	m	struct:session_view
m_min	qt_pro/QRoundProgressBar.h	/^    double m_min, m_max;$/;"	m	class:QRoundProgressBar
m_min_idle_threads	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::atomic<int> m_min_idle_threads;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_model	torrent/include/libtorrent/upnp.hpp	/^	std::string m_model;$/;"	m	struct:libtorrent::final
m_mru_ghost_idx	torrent/bak/session_view.hpp	/^	int const m_mru_ghost_idx = lt::find_metric_idx("disk.arc_mru_ghost_size");$/;"	m	struct:session_view
m_mru_size_idx	torrent/bak/session_view.hpp	/^	int const m_mru_size_idx = lt::find_metric_idx("disk.arc_mru_size");$/;"	m	struct:session_view
m_msg	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		bdecode_node m_msg;$/;"	m	struct:libtorrent::dht::final
m_msg_idx	torrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_msg_idx;$/;"	m	struct:libtorrent::final
m_mtime	torrent/include/libtorrent/file_storage.hpp	/^		aux::vector<std::time_t, file_index_t> m_mtime;$/;"	m	class:libtorrent::file_storage
m_mtu	torrent/src/utp_stream.cpp	/^	std::uint16_t m_mtu = TORRENT_ETHERNET_MTU - TORRENT_IPV4_HEADER - TORRENT_UDP_HEADER - 8 - 24 - 36;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_mtu_ceiling	torrent/src/utp_stream.cpp	/^	std::uint16_t m_mtu_ceiling = TORRENT_ETHERNET_MTU - TORRENT_IPV4_HEADER - TORRENT_UDP_HEADER;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_mtu_ceiling_slab	torrent/include/libtorrent/packet_pool.hpp	/^		packet_slab m_mtu_ceiling_slab;$/;"	m	struct:libtorrent::packet_pool
m_mtu_floor	torrent/src/utp_stream.cpp	/^	std::uint16_t m_mtu_floor = TORRENT_INET_MIN_MTU - TORRENT_IPV4_HEADER - TORRENT_UDP_HEADER;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_mtu_floor_slab	torrent/include/libtorrent/packet_pool.hpp	/^		packet_slab m_mtu_floor_slab;$/;"	m	struct:libtorrent::packet_pool
m_mtu_idx	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int m_mtu_idx = 0;$/;"	m	struct:libtorrent::utp_socket_manager
m_mtu_seq	torrent/src/utp_stream.cpp	/^	std::uint16_t m_mtu_seq = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_multicast_endpoint	torrent/include/libtorrent/broadcast_socket.hpp	/^		udp::endpoint m_multicast_endpoint;$/;"	m	class:libtorrent::broadcast_socket
m_multicast_socket	torrent/include/libtorrent/upnp.hpp	/^	udp::socket m_multicast_socket;$/;"	m	struct:libtorrent::final
m_multifile	torrent/include/libtorrent/create_torrent.hpp	/^		bool m_multifile:1;$/;"	m	struct:libtorrent::create_torrent
m_mutable	torrent/include/libtorrent/kademlia/item.hpp	/^	bool m_mutable = false;$/;"	m	class:libtorrent::dht::item
m_mutable_table	torrent/kademlia/dht_storage.cpp	/^		std::map<node_id, dht_mutable_item> m_mutable_table;$/;"	m	class:libtorrent::dht::__anon153::final	file:
m_mutex	torrent/include/libtorrent/alert_manager.hpp	/^		mutable std::recursive_mutex m_mutex;$/;"	m	class:libtorrent::alert_manager
m_mutex	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::aux::disk_job_fence
m_mutex	torrent/include/libtorrent/aux_/session_settings.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::aux::session_settings
m_mutex	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::mutex m_mutex;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_mutex	torrent/include/libtorrent/file_pool.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::file_pool
m_mutex	torrent/include/libtorrent/kademlia/node.hpp	/^	std::mutex m_mutex;$/;"	m	class:libtorrent::dht::node
m_mutex	torrent/include/libtorrent/part_file.hpp	/^		std::mutex m_mutex;$/;"	m	struct:libtorrent::part_file
m_mutex	torrent/include/libtorrent/performance_counters.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::counters
m_mutex	torrent/include/libtorrent/stat_cache.hpp	/^		mutable std::mutex m_mutex;$/;"	m	struct:libtorrent::stat_cache
m_nagle	torrent/src/utp_stream.cpp	/^	bool m_nagle:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_nagle_packet	torrent/src/utp_stream.cpp	/^	packet_ptr m_nagle_packet;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_name	torrent/include/libtorrent/file.hpp	/^		std::string m_name;$/;"	m	class:libtorrent::directory
m_name	torrent/include/libtorrent/file_storage.hpp	/^		std::string m_name;$/;"	m	class:libtorrent::file_storage
m_name	torrent/include/libtorrent/part_file.hpp	/^		std::string const m_name;$/;"	m	class:libtorrent::part_file::std
m_name	torrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<std::string> m_name;$/;"	m	class:libtorrent::torrent
m_name_idx	torrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_name_idx;$/;"	m	struct:libtorrent::final
m_name_idx	torrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_name_idx;$/;"	m	struct:libtorrent::torrent_alert
m_name_lookup	torrent/include/libtorrent/i2p_stream.hpp	/^	std::list<std::pair<std::string, name_lookup_handler>> m_name_lookup;$/;"	m	class:libtorrent::i2p_connection
m_name_lookup	torrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_name_lookup;$/;"	m	class:libtorrent::i2p_stream
m_nat_endpoint	torrent/include/libtorrent/natpmp.hpp	/^	udp::endpoint m_nat_endpoint;$/;"	m	struct:libtorrent::natpmp
m_need_auto_manage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_need_auto_manage = false;$/;"	m	struct:libtorrent::aux::final
m_need_tick	torrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<std::pair<time_point, std::weak_ptr<storage_interface>>> m_need_tick;$/;"	m	struct:libtorrent::final
m_need_tick	torrent/include/libtorrent/storage.hpp	/^		bool m_need_tick = false;$/;"	m	struct:libtorrent::storage_interface
m_need_tick_mutex	torrent/include/libtorrent/disk_io_thread.hpp	/^		std::mutex m_need_tick_mutex;$/;"	m	struct:libtorrent::final
m_need_uncork	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_need_uncork = false;$/;"	m	struct:libtorrent::cork
m_netmask	torrent/include/libtorrent/lsd.hpp	/^	address m_netmask;$/;"	m	struct:libtorrent::lsd
m_netmask	torrent/include/libtorrent/upnp.hpp	/^	address_v4 m_netmask;$/;"	m	struct:libtorrent::final
m_new_connection	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int m_new_connection = -1;$/;"	m	struct:libtorrent::utp_socket_manager
m_next_close_oldest_file	torrent/include/libtorrent/disk_io_thread.hpp	/^		time_point m_next_close_oldest_file = min_time();$/;"	m	struct:libtorrent::final
m_next_dht_torrent	torrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_map::iterator m_next_dht_torrent;$/;"	m	struct:libtorrent::aux::final
m_next_downloading_connect_torrent	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_next_downloading_connect_torrent = 0;$/;"	m	struct:libtorrent::aux::final
m_next_ep	torrent/include/libtorrent/http_connection.hpp	/^	int m_next_ep;$/;"	m	struct:libtorrent::http_connection
m_next_finished_connect_torrent	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_next_finished_connect_torrent = 0;$/;"	m	struct:libtorrent::aux::final
m_next_loss	torrent/src/utp_stream.cpp	/^	time_point m_next_loss;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_next_lsd_torrent	torrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_map::iterator m_next_lsd_torrent;$/;"	m	struct:libtorrent::aux::final
m_next_port	torrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable int m_next_port = 0;$/;"	m	struct:libtorrent::aux::final
m_next_scrape_torrent	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_next_scrape_torrent = 0;$/;"	m	struct:libtorrent::aux::final
m_nl_family	torrent/include/libtorrent/netlink.hpp	/^		int m_nl_family;$/;"	m	class:libtorrent::netlink
m_no_connect	torrent/include/libtorrent/http_stream.hpp	/^	bool m_no_connect;$/;"	m	class:libtorrent::http_stream
m_node	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	node& m_node;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_node_ids	torrent/kademlia/dht_storage.cpp	/^		std::vector<node_id> const& m_node_ids;$/;"	m	class:libtorrent::dht::__anon153::immutable_item_comparator::std	file:
m_node_ids	torrent/kademlia/dht_storage.cpp	/^		std::vector<node_id> m_node_ids;$/;"	m	class:libtorrent::dht::__anon153::final	file:
m_nodes	torrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::pair<std::string, int>> m_nodes;$/;"	m	struct:libtorrent::create_torrent
m_nodes	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		tracker_nodes_t m_nodes;$/;"	m	struct:libtorrent::dht::final
m_nodes	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<std::pair<std::string, int>> m_nodes;$/;"	m	class:libtorrent::torrent_info
m_nodes_callback	torrent/include/libtorrent/kademlia/find_data.hpp	/^	nodes_callback m_nodes_callback;$/;"	m	struct:libtorrent::dht::find_data
m_noseeds	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	bool m_noseeds;$/;"	m	struct:libtorrent::dht::get_peers
m_notify	torrent/include/libtorrent/alert_manager.hpp	/^		std::function<void()> m_notify;$/;"	m	class:libtorrent::alert_manager
m_nullPosition	qt_pro/QRoundProgressBar.h	/^    double m_nullPosition;$/;"	m	class:QRoundProgressBar
m_null_buffers	torrent/src/utp_stream.cpp	/^	bool m_null_buffers:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_num_blocks_read_idx	torrent/bak/session_view.hpp	/^	int const m_num_blocks_read_idx = lt::find_metric_idx("disk.num_blocks_read");$/;"	m	struct:session_view
m_num_connect_candidates	torrent/include/libtorrent/peer_list.hpp	/^		int m_num_connect_candidates = 0;$/;"	m	struct:libtorrent::peer_list
m_num_connecting	torrent/include/libtorrent/torrent.hpp	/^		std::uint16_t m_num_connecting = 0;$/;"	m	class:libtorrent::torrent
m_num_connecting_seeds	torrent/include/libtorrent/torrent.hpp	/^		std::uint16_t m_num_connecting_seeds = 0;$/;"	m	class:libtorrent::torrent
m_num_filtered	torrent/include/libtorrent/piece_picker.hpp	/^		int m_num_filtered = 0;$/;"	m	class:libtorrent::piece_picker
m_num_have	torrent/include/libtorrent/piece_picker.hpp	/^		int m_num_have = 0;$/;"	m	class:libtorrent::piece_picker
m_num_have_filtered	torrent/include/libtorrent/piece_picker.hpp	/^		int m_num_have_filtered = 0;$/;"	m	class:libtorrent::piece_picker
m_num_idle_threads	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::atomic<int> m_num_idle_threads;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_num_invalid_requests	torrent/include/libtorrent/peer_connection.hpp	/^		int m_num_invalid_requests = 0;$/;"	m	class:libtorrent::peer_connection
m_num_items	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		int m_num_items = 0;$/;"	m	struct:libtorrent::heterogeneous_queue
m_num_pad_blocks	torrent/include/libtorrent/piece_picker.hpp	/^		int m_num_pad_blocks = 0;$/;"	m	class:libtorrent::piece_picker
m_num_passed	torrent/include/libtorrent/piece_picker.hpp	/^		int m_num_passed = 0;$/;"	m	class:libtorrent::piece_picker
m_num_peers_idx	torrent/bak/session_view.hpp	/^	int const m_num_peers_idx = lt::find_metric_idx("peer.num_peers_connected");$/;"	m	struct:session_view
m_num_pieces	torrent/include/libtorrent/aux_/storage_piece_set.hpp	/^		int m_num_pieces = 0;$/;"	m	struct:libtorrent::aux::storage_piece_set
m_num_pieces	torrent/include/libtorrent/file_storage.hpp	/^		int m_num_pieces;$/;"	m	class:libtorrent::file_storage
m_num_pieces	torrent/include/libtorrent/peer_connection.hpp	/^		int m_num_pieces;$/;"	m	class:libtorrent::peer_connection
m_num_responses	torrent/include/libtorrent/web_peer_connection.hpp	/^		int m_num_responses;$/;"	m	class:libtorrent::web_peer_connection
m_num_running_threads	torrent/include/libtorrent/disk_io_thread.hpp	/^		int m_num_running_threads = 0;$/;"	m	struct:libtorrent::final
m_num_samples	torrent/include/libtorrent/sliding_average.hpp	/^	int m_num_samples = 0;$/;"	m	struct:libtorrent::sliding_average
m_num_samples	torrent/include/libtorrent/timestamp_history.hpp	/^	std::uint16_t m_num_samples = not_initialized;$/;"	m	struct:libtorrent::timestamp_history
m_num_seeds	torrent/include/libtorrent/peer_list.hpp	/^		std::uint32_t m_num_seeds:31;$/;"	m	struct:libtorrent::peer_list
m_num_seeds	torrent/include/libtorrent/torrent.hpp	/^		std::uint16_t m_num_seeds = 0;$/;"	m	class:libtorrent::torrent
m_num_timeouts	torrent/src/utp_stream.cpp	/^	std::uint8_t m_num_timeouts = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_num_verified	torrent/include/libtorrent/torrent.hpp	/^		std::uint32_t m_num_verified = 0;$/;"	m	class:libtorrent::torrent
m_number	torrent/include/libtorrent/sha1_hash.hpp	/^		std::array<std::uint32_t, number_size> m_number;$/;"	m	class:libtorrent::digest32
m_obfuscated	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	bool m_obfuscated;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
m_obfuscated_torrents	torrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_map m_obfuscated_torrents;$/;"	m	struct:libtorrent::aux::final
m_observer	torrent/include/libtorrent/kademlia/node.hpp	/^	dht_observer* m_observer;$/;"	m	class:libtorrent::dht::node
m_observers	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		std::vector<std::weak_ptr<disk_observer>> m_observers;$/;"	m	struct:libtorrent::disk_buffer_pool
m_old_peers	torrent/src/ut_pex.cpp	/^		std::set<tcp::endpoint> m_old_peers;$/;"	m	struct:libtorrent::__anon35::final	file:
m_on_receive	torrent/include/libtorrent/broadcast_socket.hpp	/^		receive_handler_t m_on_receive;$/;"	m	class:libtorrent::broadcast_socket
m_open	torrent/include/libtorrent/utp_stream.hpp	/^	bool m_open;$/;"	m	struct:libtorrent::utp_stream
m_optimistic_unchoke_time_scaler	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_optimistic_unchoke_time_scaler = 0;$/;"	m	struct:libtorrent::aux::final
m_orig_files	torrent/include/libtorrent/torrent_info.hpp	/^		copy_ptr<const file_storage> m_orig_files;$/;"	m	class:libtorrent::torrent_info
m_our_id	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	node_id m_our_id;$/;"	m	class:libtorrent::dht::rpc_manager
m_out_packets	torrent/src/utp_stream.cpp	/^	std::uint32_t m_out_packets = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_outbuf	torrent/src/utp_stream.cpp	/^	packet_buffer m_outbuf;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_outgoing_interfaces	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<std::string> m_outgoing_interfaces;$/;"	m	struct:libtorrent::aux::final
m_outgoing_pids	torrent/include/libtorrent/torrent.hpp	/^		std::set<peer_id> m_outgoing_pids;$/;"	m	class:libtorrent::torrent
m_outlinePenWidth	qt_pro/QRoundProgressBar.h	/^    double m_outlinePenWidth, m_dataPenWidth;$/;"	m	class:QRoundProgressBar
m_outstanding_bytes	torrent/include/libtorrent/peer_connection.hpp	/^		int m_outstanding_bytes = 0;$/;"	m	class:libtorrent::peer_connection
m_outstanding_check_files	torrent/include/libtorrent/torrent.hpp	/^		bool m_outstanding_check_files = false;$/;"	m	class:libtorrent::torrent
m_outstanding_operations	torrent/include/libtorrent/broadcast_socket.hpp	/^		int m_outstanding_operations;$/;"	m	class:libtorrent::broadcast_socket
m_outstanding_router_lookups	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_outstanding_router_lookups = 0;$/;"	m	struct:libtorrent::aux::final
m_outstanding_timer_wait	torrent/include/libtorrent/tracker_manager.hpp	/^		int m_outstanding_timer_wait = 0;$/;"	m	struct:libtorrent::timeout_handler
m_outstanding_writing_bytes	torrent/include/libtorrent/peer_connection.hpp	/^		int m_outstanding_writing_bytes = 0;$/;"	m	class:libtorrent::peer_connection
m_owned_collections	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<std::string> m_owned_collections;$/;"	m	class:libtorrent::torrent_info
m_owned_similar_torrents	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<sha1_hash> m_owned_similar_torrents;$/;"	m	class:libtorrent::torrent_info
m_owner	torrent/include/libtorrent/disk_io_thread.hpp	/^			disk_io_thread& m_owner;$/;"	m	struct:libtorrent::final::job_queue
m_packet_pool	torrent/include/libtorrent/utp_socket_manager.hpp	/^		packet_pool m_packet_pool;$/;"	m	struct:libtorrent::utp_socket_manager
m_packet_size	torrent/include/libtorrent/receive_buffer.hpp	/^	int m_packet_size = 0;$/;"	m	struct:libtorrent::crypto_receive_buffer
m_packet_size	torrent/include/libtorrent/receive_buffer.hpp	/^	int m_packet_size = 0;$/;"	m	struct:libtorrent::receive_buffer
m_pad_blocks	torrent/include/libtorrent/piece_picker.hpp	/^		bitfield m_pad_blocks;$/;"	m	class:libtorrent::piece_picker
m_padding_blocks	torrent/include/libtorrent/torrent.hpp	/^		std::uint16_t m_padding_blocks = 0;$/;"	m	class:libtorrent::torrent
m_pads_in_piece	torrent/include/libtorrent/piece_picker.hpp	/^		std::unordered_map<piece_index_t, int> m_pads_in_piece;$/;"	m	class:libtorrent::piece_picker
m_parser	torrent/include/libtorrent/http_connection.hpp	/^	http_parser m_parser;$/;"	m	struct:libtorrent::http_connection
m_parser	torrent/include/libtorrent/web_connection_base.hpp	/^		http_parser m_parser;$/;"	m	class:libtorrent::web_connection_base
m_part_file	torrent/include/libtorrent/storage.hpp	/^		std::unique_ptr<part_file> m_part_file;$/;"	m	class:libtorrent::default_storage
m_part_file_name	torrent/include/libtorrent/storage.hpp	/^		std::string m_part_file_name;$/;"	m	class:libtorrent::default_storage
m_partial_chunk_header	torrent/include/libtorrent/http_parser.hpp	/^		int m_partial_chunk_header = 0;$/;"	m	class:libtorrent::http_parser
m_partial_chunk_header	torrent/include/libtorrent/http_seed_connection.hpp	/^		int m_partial_chunk_header;$/;"	m	class:libtorrent::http_seed_connection
m_partial_chunk_header	torrent/include/libtorrent/web_peer_connection.hpp	/^		int m_partial_chunk_header;$/;"	m	class:libtorrent::web_peer_connection
m_password	torrent/include/libtorrent/http_stream.hpp	/^	std::string m_password;$/;"	m	class:libtorrent::http_stream
m_password	torrent/include/libtorrent/socks5_stream.hpp	/^	std::string m_password;$/;"	m	class:libtorrent::socks5_stream
m_password	torrent/include/libtorrent/torrent.hpp	/^		std::string m_password;$/;"	m	class:libtorrent::torrent
m_path	torrent/include/libtorrent/http_parser.hpp	/^		std::string m_path;$/;"	m	class:libtorrent::http_parser
m_path	torrent/include/libtorrent/part_file.hpp	/^		std::string m_path;$/;"	m	struct:libtorrent::part_file
m_path	torrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_path;$/;"	m	class:libtorrent::web_connection_base
m_path_idx	torrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_path_idx;$/;"	m	struct:libtorrent::final
m_paths	torrent/include/libtorrent/file_storage.hpp	/^		aux::vector<std::string> m_paths;$/;"	m	class:libtorrent::file_storage
m_paused	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_paused = false;$/;"	m	struct:libtorrent::aux::final
m_paused	torrent/include/libtorrent/torrent.hpp	/^		bool m_paused:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_pc	torrent/include/libtorrent/peer_connection.hpp	/^		peer_connection& m_pc;$/;"	m	struct:libtorrent::cork
m_pc	torrent/src/ut_metadata.cpp	/^		bt_peer_connection& m_pc;$/;"	m	struct:libtorrent::__anon72::final	file:
m_pc	torrent/src/ut_pex.cpp	/^		peer_connection& m_pc;$/;"	m	struct:libtorrent::__anon35::final	file:
m_pe	torrent/src/disk_io_thread.cpp	/^		cached_piece_entry* m_pe;$/;"	m	struct:libtorrent::__anon122::piece_refcount_holder	file:
m_peak_up_rate	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_peak_up_rate = 0;$/;"	m	struct:libtorrent::aux::final
m_peer4_prefixes	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::set<std::uint32_t> m_peer4_prefixes;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_peer6_prefixes	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::set<std::uint64_t> m_peer6_prefixes;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_peer_allocator	torrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_peer_allocator m_peer_allocator;$/;"	m	struct:libtorrent::aux::final
m_peer_allocator	torrent/include/libtorrent/peer_list.hpp	/^		torrent_peer_allocator_interface& m_peer_allocator;$/;"	m	struct:libtorrent::peer_list
m_peer_class_filter	torrent/include/libtorrent/aux_/session_impl.hpp	/^			ip_filter m_peer_class_filter;$/;"	m	struct:libtorrent::aux::final
m_peer_class_type	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		std::array<std::uint32_t, num_socket_types> m_peer_class_type;$/;"	m	namespace:libtorrent
m_peer_class_type_filter	torrent/include/libtorrent/aux_/session_impl.hpp	/^			peer_class_type_filter m_peer_class_type_filter;$/;"	m	struct:libtorrent::aux::final
m_peer_class_type_mask	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		std::array<std::uint32_t, num_socket_types> m_peer_class_type_mask;$/;"	m	namespace:libtorrent
m_peer_classes	torrent/include/libtorrent/peer_class.hpp	/^		aux::deque<peer_class, peer_class_t> m_peer_classes;$/;"	m	struct:libtorrent::peer_class_pool
m_peer_id	torrent/include/libtorrent/peer_connection.hpp	/^		peer_id m_peer_id;$/;"	m	class:libtorrent::peer_connection
m_peer_id	torrent/include/libtorrent/torrent.hpp	/^		peer_id m_peer_id;$/;"	m	class:libtorrent::torrent
m_peer_info	torrent/include/libtorrent/peer_connection.hpp	/^		torrent_peer* m_peer_info;$/;"	m	class:libtorrent::peer_connection
m_peer_list	torrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<peer_list> m_peer_list;$/;"	m	struct:libtorrent::torrent_hot_members
m_peer_ssl_ctx	torrent/include/libtorrent/aux_/session_impl.hpp	/^			ssl::context m_peer_ssl_ctx;$/;"	m	struct:libtorrent::aux::final
m_peers	torrent/include/libtorrent/peer_list.hpp	/^		peers_t m_peers;$/;"	m	struct:libtorrent::peer_list
m_peers_in_message	torrent/src/ut_pex.cpp	/^		int m_peers_in_message;$/;"	m	struct:libtorrent::__anon35::final	file:
m_peers_to_disconnect	torrent/include/libtorrent/torrent.hpp	/^		std::vector<std::shared_ptr<peer_connection>> m_peers_to_disconnect;$/;"	m	class:libtorrent::torrent
m_pending_auto_manage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_pending_auto_manage = false;$/;"	m	struct:libtorrent::aux::final
m_physicaldrive_offset	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t m_physicaldrive_offset;$/;"	m	class:libtorrent::file_storage
m_picker	torrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<piece_picker> m_picker;$/;"	m	struct:libtorrent::torrent_hot_members
m_picker	torrent/src/torrent.cpp	/^		piece_picker& m_picker;$/;"	m	struct:libtorrent::piece_refcount	file:
m_piece	torrent/include/libtorrent/web_peer_connection.hpp	/^		aux::vector<char> m_piece;$/;"	m	class:libtorrent::web_peer_connection
m_piece	torrent/src/torrent.cpp	/^		piece_index_t m_piece;$/;"	m	struct:libtorrent::piece_refcount	file:
m_piece_hash	torrent/include/libtorrent/create_torrent.hpp	/^		aux::vector<sha1_hash, piece_index_t> m_piece_hash;$/;"	m	struct:libtorrent::create_torrent
m_piece_hashes	torrent/include/libtorrent/torrent_info.hpp	/^		char const* m_piece_hashes = nullptr;$/;"	m	class:libtorrent::torrent_info
m_piece_length	torrent/include/libtorrent/file_storage.hpp	/^		int m_piece_length;$/;"	m	class:libtorrent::file_storage
m_piece_map	torrent/include/libtorrent/part_file.hpp	/^		std::unordered_map<piece_index_t, slot_index_t> m_piece_map;$/;"	m	struct:libtorrent::part_file
m_piece_map	torrent/include/libtorrent/piece_picker.hpp	/^		mutable aux::vector<piece_pos, piece_index_t> m_piece_map;$/;"	m	class:libtorrent::piece_picker
m_piece_size	torrent/include/libtorrent/part_file.hpp	/^		int const m_piece_size;$/;"	m	struct:libtorrent::part_file
m_piece_time_deviation	torrent/include/libtorrent/torrent.hpp	/^		std::int32_t m_piece_time_deviation = 0;$/;"	m	class:libtorrent::torrent
m_pieces	torrent/include/libtorrent/block_cache.hpp	/^		cache_t m_pieces;$/;"	m	struct:libtorrent::block_cache
m_pieces	torrent/include/libtorrent/piece_picker.hpp	/^		mutable aux::vector<piece_index_t, prio_index_t> m_pieces;$/;"	m	class:libtorrent::piece_picker
m_pinned_blocks	torrent/include/libtorrent/block_cache.hpp	/^		int m_pinned_blocks;$/;"	m	struct:libtorrent::block_cache
m_pinned_idx	torrent/bak/session_view.hpp	/^	int const m_pinned_idx = lt::find_metric_idx("disk.pinned_blocks");$/;"	m	struct:session_view
m_pk	torrent/include/libtorrent/kademlia/item.hpp	/^	public_key m_pk;$/;"	m	class:libtorrent::dht::item
m_pool	torrent/include/libtorrent/storage.hpp	/^		file_pool& m_pool;$/;"	m	class:libtorrent::default_storage
m_pool_allocator	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	mutable boost::pool<> m_pool_allocator;$/;"	m	class:libtorrent::dht::rpc_manager
m_pool_mutex	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		mutable std::mutex m_pool_mutex;$/;"	m	struct:libtorrent::disk_buffer_pool
m_port	torrent/include/libtorrent/http_connection.hpp	/^	std::uint16_t m_port;$/;"	m	struct:libtorrent::http_connection
m_port	torrent/include/libtorrent/i2p_stream.hpp	/^	int m_port;$/;"	m	class:libtorrent::i2p_connection
m_port	torrent/include/libtorrent/kademlia/observer.hpp	/^	std::uint16_t m_port = 0;$/;"	m	struct:libtorrent::dht::observer
m_port	torrent/include/libtorrent/proxy_base.hpp	/^	int m_port;             \/\/ proxy port$/;"	m	class:libtorrent::proxy_base
m_port	torrent/include/libtorrent/web_connection_base.hpp	/^		int m_port;$/;"	m	class:libtorrent::web_connection_base
m_port	torrent/src/peer_list.cpp	/^		std::uint16_t m_port;$/;"	m	struct:__anon56::match_peer_endpoint	file:
m_port	torrent/src/utp_stream.cpp	/^	std::uint16_t m_port = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_port_filter	torrent/include/libtorrent/aux_/session_impl.hpp	/^			port_filter m_port_filter;$/;"	m	struct:libtorrent::aux::final
m_position	torrent/bak/session_view.hpp	/^	int m_position;$/;"	m	struct:session_view
m_posted_stats_header	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_posted_stats_header = false;$/;"	m	struct:libtorrent::aux::final
m_posting_torrent_updates	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool m_posting_torrent_updates = false;$/;"	m	struct:libtorrent::aux::final
m_predictive_pieces	torrent/include/libtorrent/torrent.hpp	/^		std::vector<piece_index_t> m_predictive_pieces;$/;"	m	class:libtorrent::torrent
m_prefer_contiguous_blocks	torrent/include/libtorrent/peer_connection.hpp	/^		int m_prefer_contiguous_blocks = 0;$/;"	m	class:libtorrent::peer_connection
m_prio_torrents	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::deque<std::pair<std::weak_ptr<torrent>, int>> m_prio_torrents;$/;"	m	struct:libtorrent::aux::final
m_priority	torrent/include/libtorrent/http_connection.hpp	/^	int m_priority;$/;"	m	struct:libtorrent::http_connection
m_priority_boundaries	torrent/include/libtorrent/piece_picker.hpp	/^		mutable aux::vector<prio_index_t> m_priority_boundaries;$/;"	m	class:libtorrent::piece_picker
m_priority_pieces	torrent/include/libtorrent/aux_/suggest_piece.hpp	/^	vector<piece_index_t, int> m_priority_pieces;$/;"	m	struct:libtorrent::aux::suggest_piece
m_private	torrent/include/libtorrent/create_torrent.hpp	/^		bool m_private:1;$/;"	m	struct:libtorrent::create_torrent
m_proto	torrent/include/libtorrent/netlink.hpp	/^			protocol_type m_proto;$/;"	m	class:libtorrent::basic_nl_endpoint
m_protocol	torrent/include/libtorrent/http_parser.hpp	/^		std::string m_protocol;$/;"	m	class:libtorrent::http_parser
m_protocol	torrent/include/libtorrent/kademlia/node.hpp	/^	protocol_descriptor const& m_protocol;$/;"	m	class:libtorrent::dht::node
m_protocol	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	udp m_protocol; \/\/ protocol this table is for$/;"	m	class:libtorrent::dht::routing_table
m_proxy	torrent/include/libtorrent/http_connection.hpp	/^	aux::proxy_settings m_proxy;$/;"	m	struct:libtorrent::http_connection
m_proxy_addr	torrent/src/udp_socket.cpp	/^	tcp::endpoint m_proxy_addr;$/;"	m	struct:libtorrent::socks5	file:
m_proxy_settings	torrent/include/libtorrent/udp_socket.hpp	/^		aux::proxy_settings m_proxy_settings;$/;"	m	class:libtorrent::udp_socket
m_proxy_settings	torrent/src/udp_socket.cpp	/^	aux::proxy_settings m_proxy_settings;$/;"	m	struct:libtorrent::socks5	file:
m_ptr	torrent/include/libtorrent/aux_/string_ptr.hpp	/^		char* m_ptr;$/;"	m	struct:libtorrent::aux::string_ptr
m_ptr	torrent/include/libtorrent/copy_ptr.hpp	/^		std::unique_ptr<T> m_ptr;$/;"	m	struct:libtorrent::copy_ptr
m_ptr	torrent/include/libtorrent/span.hpp	/^		T* m_ptr;$/;"	m	struct:libtorrent::span
m_put_callback	torrent/include/libtorrent/kademlia/put_data.hpp	/^	put_callback m_put_callback;$/;"	m	struct:libtorrent::dht::put_data
m_queue	torrent/include/libtorrent/bandwidth_manager.hpp	/^	std::vector<bw_request> m_queue;$/;"	m	struct:libtorrent::bandwidth_manager
m_queue_size_limit	torrent/include/libtorrent/alert_manager.hpp	/^		int m_queue_size_limit;$/;"	m	class:libtorrent::alert_manager
m_queued_bytes	torrent/include/libtorrent/bandwidth_manager.hpp	/^	std::int64_t m_queued_bytes;$/;"	m	struct:libtorrent::bandwidth_manager
m_queued_bytes_idx	torrent/bak/session_view.hpp	/^	int const m_queued_bytes_idx = lt::find_metric_idx("disk.queued_write_bytes");$/;"	m	struct:session_view
m_queued_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^			jobqueue_t m_queued_jobs;$/;"	m	struct:libtorrent::final::job_queue
m_queued_reads_idx	torrent/bak/session_view.hpp	/^	int const m_queued_reads_idx = lt::find_metric_idx("disk.num_read_jobs");$/;"	m	struct:session_view
m_queued_time_critical	torrent/include/libtorrent/peer_connection.hpp	/^		int m_queued_time_critical = 0;$/;"	m	class:libtorrent::peer_connection
m_queued_writes_idx	torrent/bak/session_view.hpp	/^	int const m_queued_writes_idx = lt::find_metric_idx("disk.num_write_jobs");$/;"	m	struct:session_view
m_quota	torrent/include/libtorrent/peer_connection.hpp	/^		int m_quota[2];$/;"	m	class:libtorrent::peer_connection
m_quota_left	torrent/include/libtorrent/bandwidth_limit.hpp	/^	std::int64_t m_quota_left;$/;"	m	struct:libtorrent::bandwidth_channel
m_range_end	torrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_range_end = -1;$/;"	m	class:libtorrent::http_parser
m_range_start	torrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_range_start = -1;$/;"	m	class:libtorrent::http_parser
m_rate_limit	torrent/include/libtorrent/http_connection.hpp	/^	int m_rate_limit;$/;"	m	struct:libtorrent::http_connection
m_rc4_incoming	torrent/include/libtorrent/pe_crypto.hpp	/^		rc4 m_rc4_incoming;$/;"	m	struct:libtorrent::rc4_handler
m_rc4_outgoing	torrent/include/libtorrent/pe_crypto.hpp	/^		rc4 m_rc4_outgoing;$/;"	m	struct:libtorrent::rc4_handler
m_read	torrent/src/utp_stream.cpp	/^	std::int32_t m_read = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_read_buffer	torrent/src/utp_stream.cpp	/^	std::vector<iovec_t> m_read_buffer;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_read_buffer_size	torrent/src/utp_stream.cpp	/^	std::int32_t m_read_buffer_size = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_read_cache_size	torrent/include/libtorrent/block_cache.hpp	/^		std::int32_t m_read_cache_size;$/;"	m	struct:libtorrent::block_cache
m_read_handler	torrent/include/libtorrent/utp_stream.hpp	/^	std::function<void(error_code const&, std::size_t)> m_read_handler;$/;"	m	struct:libtorrent::utp_stream
m_read_handler	torrent/src/utp_stream.cpp	/^	bool m_read_handler = false;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_read_handler_storage	torrent/include/libtorrent/peer_connection.hpp	/^		aux::handler_storage<TORRENT_READ_HANDLER_MAX_SIZE> m_read_handler_storage;$/;"	m	class:libtorrent::peer_connection
m_read_jobs	torrent/include/libtorrent/disk_job_pool.hpp	/^		int m_read_jobs;$/;"	m	struct:libtorrent::disk_job_pool
m_read_pos	torrent/include/libtorrent/http_connection.hpp	/^	int m_read_pos;$/;"	m	struct:libtorrent::http_connection
m_read_time	torrent/include/libtorrent/tracker_manager.hpp	/^		time_point m_read_time;$/;"	m	struct:libtorrent::timeout_handler
m_read_timeout	torrent/include/libtorrent/tracker_manager.hpp	/^		int m_read_timeout = 0;$/;"	m	struct:libtorrent::timeout_handler
m_reading_bytes	torrent/include/libtorrent/peer_connection.hpp	/^		int m_reading_bytes = 0;$/;"	m	class:libtorrent::peer_connection
m_reads_cache_idx	torrent/bak/session_view.hpp	/^	int const m_reads_cache_idx = lt::find_metric_idx("disk.read_cache_blocks");$/;"	m	struct:session_view
m_rebuildBrush	qt_pro/QRoundProgressBar.h	/^    bool m_rebuildBrush;$/;"	m	class:QRoundProgressBar
m_receive_buffer	torrent/src/utp_stream.cpp	/^	std::vector<packet_ptr> m_receive_buffer;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_receive_buffer_capacity	torrent/src/utp_stream.cpp	/^	std::int32_t m_receive_buffer_capacity = 1024 * 1024;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_receive_buffer_size	torrent/src/utp_stream.cpp	/^	std::int32_t m_receive_buffer_size = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_received_body	torrent/include/libtorrent/web_peer_connection.hpp	/^		int m_received_body;$/;"	m	class:libtorrent::web_peer_connection
m_received_in_piece	torrent/include/libtorrent/peer_connection.hpp	/^		int m_received_in_piece = 0;$/;"	m	class:libtorrent::peer_connection
m_receiving_block	torrent/include/libtorrent/peer_connection.hpp	/^		piece_block m_receiving_block = piece_block::invalid;$/;"	m	class:libtorrent::peer_connection
m_recent_extents	torrent/include/libtorrent/piece_picker.hpp	/^		mutable std::vector<piece_extent_t> m_recent_extents;$/;"	m	class:libtorrent::piece_picker
m_recv_buffer	torrent/include/libtorrent/http_parser.hpp	/^		span<char const> m_recv_buffer;$/;"	m	class:libtorrent::http_parser
m_recv_buffer	torrent/include/libtorrent/peer_connection.hpp	/^		receive_buffer m_recv_buffer;$/;"	m	class:libtorrent::peer_connection
m_recv_buffer	torrent/include/libtorrent/receive_buffer.hpp	/^	buffer m_recv_buffer;$/;"	m	struct:libtorrent::receive_buffer
m_recv_delay	torrent/src/utp_stream.cpp	/^	std::int32_t m_recv_delay = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_recv_end	torrent/include/libtorrent/receive_buffer.hpp	/^	int m_recv_end = 0;$/;"	m	struct:libtorrent::receive_buffer
m_recv_id	torrent/src/utp_stream.cpp	/^	std::uint16_t m_recv_id;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_recv_idx	torrent/bak/session_view.hpp	/^	int const m_recv_idx = lt::find_metric_idx("net.recv_bytes");$/;"	m	struct:session_view
m_recv_pos	torrent/include/libtorrent/http_parser.hpp	/^		std::int64_t m_recv_pos = 0;$/;"	m	class:libtorrent::http_parser
m_recv_pos	torrent/include/libtorrent/receive_buffer.hpp	/^	int m_recv_pos = (std::numeric_limits<int>::max)();$/;"	m	struct:libtorrent::crypto_receive_buffer
m_recv_pos	torrent/include/libtorrent/receive_buffer.hpp	/^	int m_recv_pos = 0;$/;"	m	struct:libtorrent::receive_buffer
m_recv_start	torrent/include/libtorrent/receive_buffer.hpp	/^	int m_recv_start = 0;$/;"	m	struct:libtorrent::receive_buffer
m_recvbuffer	torrent/include/libtorrent/http_connection.hpp	/^	aux::vector<char> m_recvbuffer;$/;"	m	struct:libtorrent::http_connection
m_redirects	torrent/include/libtorrent/http_connection.hpp	/^	int m_redirects;$/;"	m	struct:libtorrent::http_connection
m_ref	torrent/include/libtorrent/disk_buffer_holder.hpp	/^		aux::block_cache_reference m_ref;$/;"	m	struct:libtorrent::disk_buffer_holder
m_ref	torrent/src/disk_buffer_holder.cpp	/^		: m_allocator(&alloc), m_buf(buf), m_size(sz), m_ref()$/;"	f	namespace:libtorrent
m_ref	torrent/src/disk_buffer_holder.cpp	/^		: m_allocator(&alloc), m_buf(buf), m_size(sz), m_ref(ref)$/;"	f	namespace:libtorrent
m_ref	torrent/src/disk_buffer_holder.cpp	/^		: m_allocator(h.m_allocator), m_buf(h.m_buf), m_size(h.m_size), m_ref(h.m_ref)$/;"	f	namespace:libtorrent
m_refresh_timer	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		deadline_timer m_refresh_timer;$/;"	m	struct:libtorrent::dht::final
m_refresh_timer	torrent/include/libtorrent/natpmp.hpp	/^	deadline_timer m_refresh_timer;$/;"	m	struct:libtorrent::natpmp
m_refresh_timer	torrent/include/libtorrent/upnp.hpp	/^	deadline_timer m_refresh_timer;$/;"	m	struct:libtorrent::final
m_remote	torrent/include/libtorrent/natpmp.hpp	/^	udp::endpoint m_remote;$/;"	m	struct:libtorrent::natpmp
m_remote	torrent/include/libtorrent/peer_connection.hpp	/^		tcp::endpoint m_remote;$/;"	m	class:libtorrent::peer_connection
m_remote_address	torrent/src/utp_stream.cpp	/^	address m_remote_address;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_remote_endpoint	torrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type m_remote_endpoint;$/;"	m	class:libtorrent::proxy_base
m_reply_micro	torrent/src/utp_stream.cpp	/^	std::uint32_t m_reply_micro = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_req	torrent/include/libtorrent/tracker_manager.hpp	/^		const tracker_request m_req;$/;"	m	struct:libtorrent::tracker_connection
m_request_limit	torrent/src/ut_metadata.cpp	/^		time_point m_request_limit;$/;"	m	struct:libtorrent::__anon72::final	file:
m_request_queue	torrent/include/libtorrent/peer_connection.hpp	/^		std::vector<pending_block> m_request_queue;$/;"	m	class:libtorrent::peer_connection
m_request_time	torrent/include/libtorrent/peer_connection.hpp	/^		sliding_average<int, 20> m_request_time;$/;"	m	class:libtorrent::peer_connection
m_requested	torrent/include/libtorrent/peer_connection.hpp	/^		time_point m_requested = aux::time_now();$/;"	m	class:libtorrent::peer_connection
m_requested_metadata	torrent/src/ut_metadata.cpp	/^		aux::vector<metadata_piece> m_requested_metadata;$/;"	m	struct:libtorrent::__anon72::final	file:
m_requester	torrent/include/libtorrent/tracker_manager.hpp	/^		std::weak_ptr<request_callback> m_requester;$/;"	m	struct:libtorrent::tracker_connection
m_requests	torrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<peer_request> m_requests;$/;"	m	class:libtorrent::peer_connection
m_requests	torrent/include/libtorrent/web_connection_base.hpp	/^		std::deque<peer_request> m_requests;$/;"	m	class:libtorrent::web_connection_base
m_resolve_flags	torrent/include/libtorrent/http_connection.hpp	/^	resolver_flags m_resolve_flags;$/;"	m	struct:libtorrent::http_connection
m_resolver	torrent/include/libtorrent/http_connection.hpp	/^	resolver_interface& m_resolver;$/;"	m	struct:libtorrent::http_connection
m_resolver	torrent/include/libtorrent/proxy_base.hpp	/^	tcp::resolver m_resolver;$/;"	m	class:libtorrent::proxy_base
m_resolver	torrent/include/libtorrent/resolver.hpp	/^	tcp::resolver m_resolver;$/;"	m	struct:libtorrent::final
m_resolver	torrent/include/libtorrent/upnp.hpp	/^	resolver m_resolver;$/;"	m	struct:libtorrent::final
m_resolver	torrent/src/udp_socket.cpp	/^	tcp::resolver m_resolver;$/;"	m	struct:libtorrent::socks5	file:
m_response_buffer	torrent/include/libtorrent/natpmp.hpp	/^	char m_response_buffer[1100];$/;"	m	struct:libtorrent::natpmp
m_response_left	torrent/include/libtorrent/http_seed_connection.hpp	/^		std::int64_t m_response_left;$/;"	m	class:libtorrent::http_seed_connection
m_responses	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int16_t m_responses = 0;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_restrict_mtu	torrent/include/libtorrent/utp_socket_manager.hpp	/^		std::array<int, 3> m_restrict_mtu;$/;"	m	struct:libtorrent::utp_socket_manager
m_results	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::vector<observer_ptr> m_results;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_retry_count	torrent/include/libtorrent/natpmp.hpp	/^	int m_retry_count = 0;$/;"	m	struct:libtorrent::natpmp
m_retry_count	torrent/include/libtorrent/upnp.hpp	/^	int m_retry_count = 0;$/;"	m	struct:libtorrent::final
m_retry_timer	torrent/src/udp_socket.cpp	/^	deadline_timer m_retry_timer;$/;"	m	struct:libtorrent::socks5	file:
m_root_cert	torrent/include/libtorrent/create_torrent.hpp	/^		std::string m_root_cert;$/;"	m	struct:libtorrent::create_torrent
m_root_tokens	torrent/include/libtorrent/bdecode.hpp	/^	detail::bdecode_token const* m_root_tokens = nullptr;$/;"	m	class:bdecode_node::detail
m_round_robin	torrent/include/libtorrent/peer_list.hpp	/^		int m_round_robin = 0;$/;"	m	struct:libtorrent::peer_list
m_router_nodes	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	std::set<udp::endpoint> m_router_nodes;$/;"	m	class:libtorrent::dht::routing_table
m_rpc	torrent/include/libtorrent/kademlia/node.hpp	/^	rpc_manager m_rpc;$/;"	m	class:libtorrent::dht::node
m_rtt	torrent/src/utp_stream.cpp	/^	sliding_average<int, 16> m_rtt;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_running	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		bool m_running;$/;"	m	struct:libtorrent::dht::final
m_running_requests	torrent/include/libtorrent/kademlia/node.hpp	/^	std::set<traversal_algorithm*> m_running_requests;$/;"	m	class:libtorrent::dht::node
m_salt	torrent/include/libtorrent/kademlia/item.hpp	/^	std::string m_salt;$/;"	m	class:libtorrent::dht::item
m_salt	torrent/src/smart_ban.cpp	/^		std::uint32_t const m_salt;$/;"	m	class:libtorrent::__anon85::final::std	file:
m_sam_socket	torrent/include/libtorrent/i2p_stream.hpp	/^	std::shared_ptr<i2p_stream> m_sam_socket;$/;"	m	class:libtorrent::i2p_connection
m_save_path	torrent/include/libtorrent/storage.hpp	/^		std::string m_save_path;$/;"	m	class:libtorrent::default_storage
m_save_path	torrent/include/libtorrent/torrent.hpp	/^		std::string m_save_path;$/;"	m	class:libtorrent::torrent
m_save_resume_flags	torrent/include/libtorrent/torrent.hpp	/^		resume_data_flags_t m_save_resume_flags;$/;"	m	class:libtorrent::torrent
m_scroll_position	torrent/bak/torrent_view.hpp	/^	int m_scroll_position;$/;"	m	struct:torrent_view
m_search_id	torrent/include/libtorrent/kademlia/node.hpp	/^	std::uint32_t m_search_id = 0;$/;"	m	class:libtorrent::dht::node
m_secret	torrent/include/libtorrent/kademlia/node.hpp	/^	std::uint32_t m_secret[2];$/;"	m	class:libtorrent::dht::node
m_seeds	torrent/include/libtorrent/piece_picker.hpp	/^		int m_seeds = 0;$/;"	m	class:libtorrent::piece_picker
m_send_barrier	torrent/include/libtorrent/peer_connection.hpp	/^		int m_send_barrier = INT_MAX;$/;"	m	class:libtorrent::peer_connection
m_send_barriers	torrent/include/libtorrent/pe_crypto.hpp	/^		std::list<barrier> m_send_barriers;$/;"	m	struct:libtorrent::encryption_handler
m_send_buf	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		std::vector<char> m_send_buf;$/;"	m	struct:libtorrent::dht::final
m_send_buffer	torrent/include/libtorrent/peer_connection.hpp	/^		chained_buffer m_send_buffer;$/;"	m	class:libtorrent::peer_connection
m_send_buffer_blocks	torrent/include/libtorrent/block_cache.hpp	/^		std::int32_t m_send_buffer_blocks;$/;"	m	struct:libtorrent::block_cache
m_send_delay	torrent/src/utp_stream.cpp	/^	std::int32_t m_send_delay = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_send_fun	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		send_fun_t m_send_fun;$/;"	m	struct:libtorrent::dht::final
m_send_fun	torrent/include/libtorrent/tracker_manager.hpp	/^		send_fun_t m_send_fun;$/;"	m	class:libtorrent::final
m_send_fun	torrent/include/libtorrent/utp_socket_manager.hpp	/^		send_fun_t m_send_fun;$/;"	m	struct:libtorrent::utp_socket_manager
m_send_fun_hostname	torrent/include/libtorrent/tracker_manager.hpp	/^		send_fun_hostname_t m_send_fun_hostname;$/;"	m	class:libtorrent::final
m_send_id	torrent/src/utp_stream.cpp	/^	std::uint16_t m_send_id;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_send_quota	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		int m_send_quota;$/;"	m	struct:libtorrent::dht::final
m_send_timer	torrent/include/libtorrent/natpmp.hpp	/^	deadline_timer m_send_timer;$/;"	m	struct:libtorrent::natpmp
m_sendbuffer	torrent/include/libtorrent/http_connection.hpp	/^	std::string m_sendbuffer;$/;"	m	struct:libtorrent::http_connection
m_sent	torrent/include/libtorrent/kademlia/observer.hpp	/^	time_point m_sent;$/;"	m	struct:libtorrent::dht::observer
m_sent_idx	torrent/bak/session_view.hpp	/^	int const m_sent_idx = lt::find_metric_idx("net.sent_bytes");$/;"	m	struct:session_view
m_sent_requests	torrent/src/ut_metadata.cpp	/^		std::vector<int> m_sent_requests;$/;"	m	struct:libtorrent::__anon72::final	file:
m_seq_nr	torrent/src/utp_stream.cpp	/^	std::uint16_t m_seq_nr = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_sequence_number	torrent/include/libtorrent/torrent.hpp	/^		queue_position_t m_sequence_number;$/;"	m	class:libtorrent::torrent
m_server_message	torrent/include/libtorrent/http_parser.hpp	/^		std::string m_server_message;$/;"	m	class:libtorrent::http_parser
m_server_string	torrent/include/libtorrent/web_connection_base.hpp	/^		std::string m_server_string;$/;"	m	class:libtorrent::web_connection_base
m_ses	torrent/include/libtorrent/aux_/session_impl.hpp	/^			session_interface& m_ses;$/;"	m	struct:libtorrent::aux::tracker_logger
m_ses	torrent/include/libtorrent/peer_connection.hpp	/^		aux::session_interface& m_ses;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_ses	torrent/include/libtorrent/torrent.hpp	/^		aux::session_interface& m_ses;$/;"	m	struct:libtorrent::torrent_hot_members
m_ses	torrent/include/libtorrent/tracker_manager.hpp	/^		aux::session_logger& m_ses;$/;"	m	class:libtorrent::final
m_ses_extensions	torrent/include/libtorrent/alert_manager.hpp	/^		std::list<std::shared_ptr<plugin>> m_ses_extensions;$/;"	m	class:libtorrent::alert_manager
m_ses_extensions	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::array<std::vector<std::shared_ptr<plugin>>, 4> m_ses_extensions;$/;"	m	struct:libtorrent::aux::final
m_session_id	torrent/include/libtorrent/i2p_stream.hpp	/^	std::string m_session_id;$/;"	m	class:libtorrent::i2p_connection
m_session_paused	torrent/include/libtorrent/torrent.hpp	/^		bool m_session_paused:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_sett	torrent/include/libtorrent/utp_socket_manager.hpp	/^		aux::session_settings const& m_sett;$/;"	m	class:libtorrent::utp_socket_manager::aux
m_settings	torrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::session_settings m_settings;$/;"	m	struct:libtorrent::aux::final
m_settings	torrent/include/libtorrent/disk_io_thread.hpp	/^		aux::session_settings const& m_settings;$/;"	m	class:libtorrent::final::aux
m_settings	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dht::settings const& m_settings;$/;"	m	class:libtorrent::dht::final::dht
m_settings	torrent/include/libtorrent/kademlia/node.hpp	/^	dht::settings const& m_settings;$/;"	m	class:libtorrent::dht::node::dht
m_settings	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	dht::settings const& m_settings;$/;"	m	class:libtorrent::dht::routing_table::dht
m_settings	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	dht_settings const& m_settings;$/;"	m	class:libtorrent::dht::rpc_manager
m_settings	torrent/include/libtorrent/peer_connection.hpp	/^		aux::session_settings const& m_settings;$/;"	m	class:libtorrent::peer_connection_hot_members::aux
m_settings	torrent/include/libtorrent/storage.hpp	/^		aux::session_settings const* m_settings = nullptr;$/;"	m	class:libtorrent::storage_interface::aux
m_settings	torrent/include/libtorrent/tracker_manager.hpp	/^		aux::session_settings const& m_settings;$/;"	m	class:libtorrent::final::aux
m_settings	torrent/include/libtorrent/upnp.hpp	/^	aux::session_settings const& m_settings;$/;"	m	class:libtorrent::final::aux
m_settings	torrent/kademlia/dht_storage.cpp	/^		dht_settings const& m_settings;$/;"	m	class:libtorrent::dht::__anon153::final	file:
m_settings_set	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		bool m_settings_set;$/;"	m	struct:libtorrent::disk_buffer_pool
m_share_mode	torrent/include/libtorrent/torrent.hpp	/^		bool m_share_mode:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_sig	torrent/include/libtorrent/kademlia/item.hpp	/^	signature m_sig;$/;"	m	class:libtorrent::dht::item
m_similar	torrent/include/libtorrent/create_torrent.hpp	/^		std::vector<sha1_hash> m_similar;$/;"	m	struct:libtorrent::create_torrent
m_similar_torrents	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<char const*> m_similar_torrents;$/;"	m	class:libtorrent::torrent_info
m_size	torrent/include/libtorrent/bdecode.hpp	/^	mutable int m_size = -1;$/;"	m	struct:bdecode_node
m_size	torrent/include/libtorrent/buffer.hpp	/^	difference_type m_size = 0;$/;"	m	class:libtorrent::buffer
m_size	torrent/include/libtorrent/disk_buffer_holder.hpp	/^		std::size_t m_size;$/;"	m	struct:libtorrent::disk_buffer_holder
m_size	torrent/include/libtorrent/file_pool.hpp	/^		int m_size;$/;"	m	struct:libtorrent::file_pool
m_size	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		int m_size = 0;$/;"	m	struct:libtorrent::heterogeneous_queue
m_size	torrent/include/libtorrent/lazy_entry.hpp	/^		std::uint32_t m_size:29;$/;"	m	struct:libtorrent::lazy_entry
m_size	torrent/include/libtorrent/linked_list.hpp	/^		int m_size;$/;"	m	struct:libtorrent::linked_list
m_size	torrent/include/libtorrent/packet_buffer.hpp	/^		int m_size = 0;$/;"	m	class:libtorrent::packet_buffer
m_size	torrent/include/libtorrent/peer_class_set.hpp	/^		std::int8_t m_size;$/;"	m	struct:libtorrent::peer_class_set
m_size	torrent/include/libtorrent/tailqueue.hpp	/^		int m_size;$/;"	m	struct:libtorrent::tailqueue
m_slow_start	torrent/src/utp_stream.cpp	/^	bool m_slow_start:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_sm	torrent/src/utp_stream.cpp	/^	utp_socket_manager& m_sm;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_snubbed	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_snubbed:1;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_sock	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		std::weak_ptr<listen_socket_t> m_sock;$/;"	m	struct:libtorrent::aux::listen_socket_handle
m_sock	torrent/include/libtorrent/http_connection.hpp	/^	aux::socket_type m_sock;$/;"	m	struct:libtorrent::http_connection
m_sock	torrent/include/libtorrent/kademlia/node.hpp	/^	aux::listen_socket_handle const m_sock;$/;"	m	class:libtorrent::dht::node::aux
m_sock	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	aux::listen_socket_handle m_sock;$/;"	m	class:libtorrent::dht::rpc_manager
m_sock	torrent/include/libtorrent/proxy_base.hpp	/^	tcp::socket m_sock;$/;"	m	class:libtorrent::proxy_base
m_sock	torrent/include/libtorrent/ssl_stream.hpp	/^	ssl::stream<Stream> m_sock;$/;"	m	class:libtorrent::ssl_stream
m_sock	torrent/src/utp_stream.cpp	/^	std::weak_ptr<utp_socket_interface> m_sock;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_sock_man	torrent/include/libtorrent/kademlia/node.hpp	/^	socket_manager* m_sock_man;$/;"	m	class:libtorrent::dht::node
m_sock_man	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	socket_manager* m_sock_man;$/;"	m	class:libtorrent::dht::rpc_manager
m_sockaddr	torrent/include/libtorrent/netlink.hpp	/^			sockaddr_nl m_sockaddr;$/;"	m	class:libtorrent::basic_nl_endpoint
m_socket	torrent/bak/udp_tracker.cpp	/^	SOCKET			m_socket;$/;"	m	class:CUDPTrackerClient	file:
m_socket	torrent/include/libtorrent/lsd.hpp	/^	udp::socket m_socket;$/;"	m	struct:libtorrent::lsd
m_socket	torrent/include/libtorrent/natpmp.hpp	/^	udp::socket m_socket;$/;"	m	struct:libtorrent::natpmp
m_socket	torrent/include/libtorrent/peer_connection.hpp	/^		std::shared_ptr<aux::socket_type> m_socket;$/;"	m	class:libtorrent::peer_connection
m_socket	torrent/include/libtorrent/udp_socket.hpp	/^		udp::socket m_socket;$/;"	m	class:libtorrent::udp_socket
m_socket	torrent/src/udp_socket.cpp	/^	udp::socket& m_socket;$/;"	m	struct:libtorrent::set_dont_frag	file:
m_socket_is_writing	torrent/include/libtorrent/peer_connection.hpp	/^		bool m_socket_is_writing = false;$/;"	m	class:libtorrent::peer_connection
m_sockets	torrent/include/libtorrent/broadcast_socket.hpp	/^		std::list<socket_entry> m_sockets;$/;"	m	class:libtorrent::broadcast_socket
m_socks5_connection	torrent/include/libtorrent/udp_socket.hpp	/^		std::shared_ptr<socks5> m_socks5_connection;$/;"	m	class:libtorrent::udp_socket
m_socks5_sock	torrent/src/udp_socket.cpp	/^	tcp::socket m_socks5_sock;$/;"	m	struct:libtorrent::socks5	file:
m_sorted_results	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int8_t m_sorted_results = 0;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_source_feed_url	torrent/include/libtorrent/torrent.hpp	/^		std::string m_source_feed_url;$/;"	m	class:libtorrent::torrent
m_ssl	torrent/include/libtorrent/http_connection.hpp	/^	bool m_ssl;$/;"	m	struct:libtorrent::http_connection
m_ssl	torrent/include/libtorrent/web_connection_base.hpp	/^		bool m_ssl;$/;"	m	class:libtorrent::web_connection_base
m_ssl_context	torrent/include/libtorrent/utp_socket_manager.hpp	/^		void* m_ssl_context;$/;"	m	struct:libtorrent::utp_socket_manager
m_ssl_ctx	torrent/include/libtorrent/aux_/session_impl.hpp	/^			ssl::context m_ssl_ctx;$/;"	m	struct:libtorrent::aux::final
m_ssl_ctx	torrent/include/libtorrent/http_connection.hpp	/^	ssl::context* m_ssl_ctx;$/;"	m	struct:libtorrent::http_connection
m_ssl_ctx	torrent/include/libtorrent/torrent.hpp	/^		std::unique_ptr<boost::asio::ssl::context> m_ssl_ctx;$/;"	m	class:libtorrent::torrent
m_ssl_ctx	torrent/include/libtorrent/upnp.hpp	/^	ssl::context m_ssl_ctx;$/;"	m	struct:libtorrent::final
m_ssl_utp_socket_manager	torrent/include/libtorrent/aux_/session_impl.hpp	/^			libtorrent::utp_socket_manager m_ssl_utp_socket_manager;$/;"	m	struct:libtorrent::aux::final
m_ssthres	torrent/src/utp_stream.cpp	/^	std::int32_t m_ssthres = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_stalled	torrent/src/utp_stream.cpp	/^	bool m_stalled:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_stalled_sockets	torrent/include/libtorrent/utp_socket_manager.hpp	/^		socket_vector_t m_stalled_sockets;$/;"	m	struct:libtorrent::utp_socket_manager
m_start_time	torrent/include/libtorrent/http_connection.hpp	/^	time_point m_start_time;$/;"	m	struct:libtorrent::http_connection
m_start_time	torrent/include/libtorrent/tracker_manager.hpp	/^		time_point m_start_time;$/;"	m	struct:libtorrent::timeout_handler
m_started	torrent/include/libtorrent/torrent.hpp	/^		time_point32 m_started = aux::time_now32();$/;"	m	class:libtorrent::torrent
m_started	torrent/include/libtorrent/udp_socket.hpp	/^		bool m_started;$/;"	m	class:libtorrent::udp_socket
m_stat	torrent/include/libtorrent/aux_/session_impl.hpp	/^			stat m_stat;$/;"	m	struct:libtorrent::aux::final
m_stat	torrent/include/libtorrent/stat.hpp	/^		stat_channel m_stat[num_channels];$/;"	m	class:libtorrent::stat
m_stat	torrent/include/libtorrent/torrent.hpp	/^		libtorrent::stat m_stat;$/;"	m	class:libtorrent::torrent
m_stat_cache	torrent/include/libtorrent/stat_cache.hpp	/^		aux::vector<stat_cache_t, file_index_t> m_stat_cache;$/;"	m	struct:libtorrent::stat_cache
m_stat_cache	torrent/include/libtorrent/storage.hpp	/^		mutable stat_cache m_stat_cache;$/;"	m	class:libtorrent::default_storage
m_state	torrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	m	class:libtorrent::http_parser	typeref:enum:libtorrent::http_parser::__anon22
m_state	torrent/include/libtorrent/i2p_stream.hpp	/^	state_t m_state;$/;"	m	class:libtorrent::i2p_connection
m_state	torrent/include/libtorrent/i2p_stream.hpp	/^	state_t m_state;$/;"	m	class:libtorrent::i2p_stream
m_state	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dht_state m_state; \/\/ to be used only once$/;"	m	struct:libtorrent::dht::final
m_state	torrent/include/libtorrent/torrent.hpp	/^		std::uint32_t m_state:3;$/;"	m	struct:libtorrent::torrent_hot_members
m_state	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		action_t m_state;$/;"	m	class:libtorrent::udp_tracker_connection
m_state	torrent/src/utp_stream.cpp	/^	std::uint8_t m_state:3;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_state_subscription	torrent/include/libtorrent/torrent.hpp	/^		bool m_state_subscription:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_statistics	torrent/include/libtorrent/peer_connection.hpp	/^		stat m_statistics;$/;"	m	class:libtorrent::peer_connection
m_stats_counter	torrent/include/libtorrent/performance_counters.hpp	/^		aux::array<std::atomic<std::int64_t>, num_counters> m_stats_counter;$/;"	m	struct:libtorrent::counters
m_stats_counter	torrent/include/libtorrent/performance_counters.hpp	/^		aux::array<std::int64_t, num_counters> m_stats_counter;$/;"	m	struct:libtorrent::counters
m_stats_counters	torrent/include/libtorrent/aux_/session_impl.hpp	/^			counters m_stats_counters;$/;"	m	struct:libtorrent::aux::final
m_stats_counters	torrent/include/libtorrent/disk_io_thread.hpp	/^		counters& m_stats_counters;$/;"	m	struct:libtorrent::final
m_stats_counters	torrent/include/libtorrent/torrent.hpp	/^		counters& m_stats_counters;$/;"	m	class:libtorrent::torrent
m_stats_counters	torrent/include/libtorrent/tracker_manager.hpp	/^		counters& m_stats_counters;$/;"	m	class:libtorrent::final
m_status_code	torrent/include/libtorrent/http_parser.hpp	/^		int m_status_code = -1;$/;"	m	class:libtorrent::http_parser
m_storage	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		std::unique_ptr<char, aux::free_deleter> m_storage;$/;"	m	struct:libtorrent::heterogeneous_queue
m_storage	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		dht_storage_interface& m_storage;$/;"	m	struct:libtorrent::dht::final
m_storage	torrent/include/libtorrent/kademlia/node.hpp	/^	dht_storage_interface& m_storage;$/;"	m	class:libtorrent::dht::node
m_storage	torrent/include/libtorrent/packet_buffer.hpp	/^		aux::unique_ptr<packet_ptr[], index_type> m_storage;$/;"	m	class:libtorrent::packet_buffer
m_storage	torrent/include/libtorrent/packet_pool.hpp	/^		std::vector<packet_ptr> m_storage;$/;"	m	struct:libtorrent::packet_slab
m_storage	torrent/include/libtorrent/stack_allocator.hpp	/^		vector<char> m_storage;$/;"	m	struct:libtorrent::stack_allocator
m_storage	torrent/include/libtorrent/torrent.hpp	/^		storage_holder m_storage;$/;"	m	class:libtorrent::torrent
m_storage	torrent/include/libtorrent/utp_stream.hpp	/^		char m_storage[sizeof(T)];$/;"	m	struct:libtorrent::big_endian_int
m_storage_constructor	torrent/include/libtorrent/torrent.hpp	/^		storage_constructor_type m_storage_constructor;$/;"	m	class:libtorrent::torrent
m_store	torrent/include/libtorrent/aux_/session_settings.hpp	/^		session_settings_single_thread m_store;$/;"	m	struct:libtorrent::aux::session_settings
m_strError	torrent/bak/udp_tracker.cpp	/^	string			m_strError;		\/\/å¦æè¯·æ±å¤±è´¥,æ­¤åéä¿å­éè¯¯ä¿¡æ¯$/;"	m	class:CUDPTrackerClient	file:
m_strings	torrent/include/libtorrent/aux_/session_settings.hpp	/^		std::array<std::string, settings_pack::num_string_settings> m_strings;$/;"	m	struct:libtorrent::aux::session_settings_single_thread
m_strings	torrent/include/libtorrent/settings_pack.hpp	/^		std::vector<std::pair<std::uint16_t, std::string>> m_strings;$/;"	m	namespace:libtorrent
m_subscribe_drained	torrent/src/utp_stream.cpp	/^	bool m_subscribe_drained:1;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_suggest_pieces	torrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<piece_index_t> m_suggest_pieces;$/;"	m	class:libtorrent::peer_connection
m_suggest_pieces	torrent/include/libtorrent/torrent.hpp	/^		aux::suggest_piece m_suggest_pieces;$/;"	m	class:libtorrent::torrent
m_suggested_pieces	torrent/include/libtorrent/peer_connection.hpp	/^		aux::vector<piece_index_t> m_suggested_pieces;$/;"	m	class:libtorrent::peer_connection
m_superseed_piece	torrent/include/libtorrent/peer_connection.hpp	/^		std::array<piece_index_t, 2> m_superseed_piece = {{piece_index_t(-1), piece_index_t(-1)}};$/;"	m	class:libtorrent::peer_connection
m_swarm_last_seen_complete	torrent/include/libtorrent/torrent.hpp	/^		std::time_t m_swarm_last_seen_complete = 0;$/;"	m	class:libtorrent::torrent
m_symlinks	torrent/include/libtorrent/file_storage.hpp	/^		std::vector<std::string> m_symlinks;$/;"	m	class:libtorrent::file_storage
m_syn_slab	torrent/include/libtorrent/packet_pool.hpp	/^		packet_slab m_syn_slab;$/;"	m	struct:libtorrent::packet_pool
m_table	torrent/include/libtorrent/kademlia/node.hpp	/^	routing_table m_table;$/;"	m	class:libtorrent::dht::node
m_table	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	routing_table& m_table;$/;"	m	class:libtorrent::dht::rpc_manager
m_target	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	node_id const m_target;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_target	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		udp::endpoint m_target;$/;"	m	class:libtorrent::udp_tracker_connection
m_temp_sockets	torrent/include/libtorrent/utp_socket_manager.hpp	/^		socket_vector_t m_temp_sockets;$/;"	m	struct:libtorrent::utp_socket_manager
m_their_delay_hist	torrent/src/utp_stream.cpp	/^	timestamp_history m_their_delay_hist;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_thread	torrent/include/libtorrent/session.hpp	/^		std::shared_ptr<std::thread> m_thread;$/;"	m	class:libtorrent::session
m_thread	torrent/include/libtorrent/session.hpp	/^		std::shared_ptr<std::thread> m_thread;$/;"	m	class:libtorrent::session_proxy
m_thread_iface	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		pool_thread_interface& m_thread_iface;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_threads	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::vector<std::thread> m_threads;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_threads_to_exit	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		std::atomic<int> m_threads_to_exit;$/;"	m	struct:libtorrent::disk_io_thread_pool
m_tick_handler_storage	torrent/include/libtorrent/aux_/session_impl.hpp	/^			aux::handler_storage<TORRENT_READ_HANDLER_MAX_SIZE> m_tick_handler_storage;$/;"	m	struct:libtorrent::aux::final
m_time_critical_pieces	torrent/include/libtorrent/torrent.hpp	/^		std::vector<time_critical_piece> m_time_critical_pieces;$/;"	m	class:libtorrent::torrent
m_timeout	torrent/include/libtorrent/resolver.hpp	/^	time_duration m_timeout;$/;"	m	struct:libtorrent::final
m_timeout	torrent/include/libtorrent/tracker_manager.hpp	/^		deadline_timer m_timeout;$/;"	m	struct:libtorrent::timeout_handler
m_timeout	torrent/src/utp_stream.cpp	/^	time_point m_timeout;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_timeouts	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::int16_t m_timeouts = 0;$/;"	m	struct:libtorrent::dht::traversal_algorithm
m_timer	torrent/include/libtorrent/aux_/session_impl.hpp	/^			deadline_timer m_timer;$/;"	m	struct:libtorrent::aux::final
m_timer	torrent/include/libtorrent/http_connection.hpp	/^	deadline_timer m_timer;$/;"	m	struct:libtorrent::http_connection
m_timer	torrent/src/udp_socket.cpp	/^	deadline_timer m_timer;$/;"	m	struct:libtorrent::socks5	file:
m_timestamp	torrent/bak/session_view.hpp	/^	std::uint64_t m_timestamp[2];$/;"	m	struct:session_view
m_timestamp	torrent/include/libtorrent/alert.hpp	/^		time_point const m_timestamp;$/;"	m	class:libtorrent::alert
m_tmp_buf	torrent/src/udp_socket.cpp	/^	std::array<char, tmp_buffer_size> m_tmp_buf;$/;"	m	struct:libtorrent::socks5	file:
m_token	torrent/include/libtorrent/kademlia/put_data.hpp	/^	std::string m_token;$/;"	m	struct:libtorrent::dht::put_data_observer
m_token_idx	torrent/include/libtorrent/bdecode.hpp	/^	int m_token_idx = -1;$/;"	m	struct:bdecode_node
m_tokens	torrent/include/libtorrent/bdecode.hpp	/^	aux::noexcept_movable<std::vector<detail::bdecode_token>> m_tokens;$/;"	m	struct:bdecode_node
m_torrent	torrent/include/libtorrent/peer_connection.hpp	/^		std::weak_ptr<torrent> m_torrent;$/;"	m	struct:libtorrent::peer_connection_hot_members
m_torrent	torrent/include/libtorrent/storage.hpp	/^		std::shared_ptr<void> m_torrent;$/;"	m	struct:libtorrent::storage_interface
m_torrent	torrent/include/libtorrent/torrent_handle.hpp	/^		std::weak_ptr<torrent> m_torrent;$/;"	m	struct:libtorrent::torrent_handle
m_torrent	torrent/src/smart_ban.cpp	/^		torrent& m_torrent;$/;"	m	struct:libtorrent::__anon85::final	file:
m_torrent	torrent/src/ut_metadata.cpp	/^		torrent& m_torrent;$/;"	m	struct:libtorrent::__anon72::final	file:
m_torrent	torrent/src/ut_pex.cpp	/^		torrent& m_torrent;$/;"	m	struct:libtorrent::__anon35::final	file:
m_torrent_file	torrent/include/libtorrent/resolve_links.hpp	/^		std::shared_ptr<torrent_info> m_torrent_file;$/;"	m	struct:libtorrent::resolve_links
m_torrent_file	torrent/include/libtorrent/torrent.hpp	/^		std::shared_ptr<torrent_info> m_torrent_file;$/;"	m	struct:libtorrent::torrent_hot_members
m_torrent_filter	torrent/bak/torrent_view.hpp	/^	int m_torrent_filter;$/;"	m	struct:torrent_view
m_torrent_lists	torrent/include/libtorrent/aux_/session_impl.hpp	/^				m_torrent_lists;$/;"	m	struct:libtorrent::aux::final
m_torrent_load_thread	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::unique_ptr<work_thread_t> m_torrent_load_thread;$/;"	m	struct:libtorrent::aux::final
m_torrents	torrent/include/libtorrent/aux_/session_impl.hpp	/^			torrent_map m_torrents;$/;"	m	struct:libtorrent::aux::final
m_torrents	torrent/include/libtorrent/disk_io_thread.hpp	/^		aux::vector<std::shared_ptr<storage_interface>, storage_index_t> m_torrents;$/;"	m	struct:libtorrent::final
m_total_allocations	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		std::uint64_t m_total_allocations = 0;$/;"	m	struct:libtorrent::final
m_total_bytes	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		std::uint64_t m_total_bytes = 0;$/;"	m	struct:libtorrent::final
m_total_counter	torrent/include/libtorrent/stat.hpp	/^		std::int64_t m_total_counter;$/;"	m	class:libtorrent::stat_channel
m_total_downloaded	torrent/include/libtorrent/torrent.hpp	/^		std::int64_t m_total_downloaded = 0;$/;"	m	class:libtorrent::torrent
m_total_failed_bytes	torrent/include/libtorrent/torrent.hpp	/^		std::int32_t m_total_failed_bytes = 0;$/;"	m	class:libtorrent::torrent
m_total_redundant_bytes	torrent/include/libtorrent/torrent.hpp	/^		std::int64_t m_total_redundant_bytes = 0;$/;"	m	class:libtorrent::torrent
m_total_size	torrent/include/libtorrent/file_storage.hpp	/^		std::int64_t m_total_size;$/;"	m	class:libtorrent::file_storage
m_total_uploaded	torrent/include/libtorrent/torrent.hpp	/^		std::int64_t m_total_uploaded = 0;$/;"	m	class:libtorrent::torrent
m_total_votes	torrent/include/libtorrent/ip_voter.hpp	/^		int m_total_votes;$/;"	m	struct:libtorrent::ip_voter
m_tp	torrent/src/ut_metadata.cpp	/^		ut_metadata_plugin& m_tp;$/;"	m	struct:libtorrent::__anon72::final	file:
m_tp	torrent/src/ut_pex.cpp	/^		ut_pex_plugin& m_tp;$/;"	m	struct:libtorrent::__anon35::final	file:
m_tracker_connection	torrent/include/libtorrent/http_tracker_connection.hpp	/^		std::shared_ptr<http_connection> m_tracker_connection;$/;"	m	class:libtorrent::http_tracker_connection
m_tracker_ip	torrent/include/libtorrent/http_tracker_connection.hpp	/^		address m_tracker_ip;$/;"	m	class:libtorrent::http_tracker_connection
m_tracker_manager	torrent/include/libtorrent/aux_/session_impl.hpp	/^			tracker_manager m_tracker_manager;$/;"	m	struct:libtorrent::aux::final
m_tracker_timer	torrent/include/libtorrent/torrent.hpp	/^		deadline_timer m_tracker_timer;$/;"	m	class:libtorrent::torrent
m_trackerid	torrent/include/libtorrent/torrent.hpp	/^		std::string m_trackerid;$/;"	m	class:libtorrent::torrent
m_trackers	torrent/include/libtorrent/torrent.hpp	/^		aux::vector<announce_entry> m_trackers;$/;"	m	class:libtorrent::torrent
m_transaction_id	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::uint32_t m_transaction_id;$/;"	m	class:libtorrent::udp_tracker_connection
m_transactions	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	std::unordered_multimap<int, observer_ptr> m_transactions;$/;"	m	class:libtorrent::dht::rpc_manager
m_trigger_cache_trim	torrent/include/libtorrent/disk_buffer_pool.hpp	/^		std::function<void()> m_trigger_cache_trim;$/;"	m	struct:libtorrent::disk_buffer_pool
m_type	torrent/include/libtorrent/aux_/socket_type.hpp	/^		int m_type;$/;"	m	struct:libtorrent::aux::socket_type
m_type	torrent/include/libtorrent/lazy_entry.hpp	/^		std::uint32_t m_type:3;$/;"	m	struct:libtorrent::lazy_entry
m_type	torrent/src/entry.cpp	/^		: m_type(undefined_t)$/;"	f	namespace:libtorrent
m_udp_conns	torrent/include/libtorrent/tracker_manager.hpp	/^		std::unordered_map<std::uint32_t, std::shared_ptr<udp_tracker_connection>> m_udp_conns;$/;"	m	class:libtorrent::final
m_udp_proxy_addr	torrent/src/udp_socket.cpp	/^	udp::endpoint m_udp_proxy_addr;$/;"	m	struct:libtorrent::socks5	file:
m_unchoke_slots_idx	torrent/bak/session_view.hpp	/^	int const m_unchoke_slots_idx = lt::find_metric_idx("ses.num_unchoke_slots");$/;"	m	struct:session_view
m_unchoke_time_scaler	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int m_unchoke_time_scaler = 0;$/;"	m	struct:libtorrent::aux::final
m_unchoked_idx	torrent/bak/session_view.hpp	/^	int const m_unchoked_idx = lt::find_metric_idx("peer.num_peers_up_unchoked");$/;"	m	struct:session_view
m_undead_peers	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::vector<std::shared_ptr<peer_connection>> m_undead_peers;$/;"	m	struct:libtorrent::aux::final
m_unicast_socket	torrent/include/libtorrent/upnp.hpp	/^	udp::socket m_unicast_socket;$/;"	m	struct:libtorrent::final
m_unicast_sockets	torrent/include/libtorrent/broadcast_socket.hpp	/^		std::list<socket_entry> m_unicast_sockets;$/;"	m	class:libtorrent::broadcast_socket
m_updateFlags	qt_pro/QRoundProgressBar.h	/^    int m_updateFlags;$/;"	m	class:QRoundProgressBar
m_upload_mode	torrent/include/libtorrent/torrent.hpp	/^		bool m_upload_mode:1;$/;"	m	struct:libtorrent::torrent_hot_members
m_upload_mode_time	torrent/include/libtorrent/torrent.hpp	/^		time_point32 m_upload_mode_time = aux::time_now32();$/;"	m	class:libtorrent::torrent
m_upload_rate	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bandwidth_manager m_upload_rate;$/;"	m	struct:libtorrent::aux::final
m_upload_rate_peak	torrent/include/libtorrent/peer_connection.hpp	/^		int m_upload_rate_peak = 0;$/;"	m	class:libtorrent::peer_connection
m_uploaded_at_last_round	torrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t m_uploaded_at_last_round = 0;$/;"	m	class:libtorrent::peer_connection
m_uploaded_at_last_unchoke	torrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t m_uploaded_at_last_unchoke = 0;$/;"	m	class:libtorrent::peer_connection
m_uploaded_last_second	torrent/include/libtorrent/peer_connection.hpp	/^		std::int32_t m_uploaded_last_second = 0;$/;"	m	class:libtorrent::peer_connection
m_url	torrent/include/libtorrent/http_connection.hpp	/^	std::string m_url;$/;"	m	struct:libtorrent::http_connection
m_url	torrent/include/libtorrent/http_seed_connection.hpp	/^		const std::string m_url;$/;"	m	class:libtorrent::http_seed_connection
m_url	torrent/include/libtorrent/torrent.hpp	/^		std::string m_url;$/;"	m	class:libtorrent::torrent
m_url	torrent/include/libtorrent/web_peer_connection.hpp	/^		std::string m_url;$/;"	m	class:libtorrent::web_peer_connection
m_url_idx	torrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_url_idx;$/;"	m	struct:libtorrent::final
m_url_idx	torrent/include/libtorrent/alert_types.hpp	/^		aux::allocation_slot m_url_idx;$/;"	m	struct:libtorrent::tracker_alert
m_url_seeds	torrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::string> m_url_seeds;$/;"	m	struct:libtorrent::create_torrent
m_urls	torrent/include/libtorrent/create_torrent.hpp	/^		std::vector<std::pair<std::string, int>> m_urls;$/;"	m	struct:libtorrent::create_torrent
m_urls	torrent/include/libtorrent/torrent_info.hpp	/^		aux::vector<announce_entry> m_urls;$/;"	m	class:libtorrent::torrent_info
m_use_partfile	torrent/include/libtorrent/storage.hpp	/^		aux::vector<bool, file_index_t> m_use_partfile;$/;"	m	class:libtorrent::default_storage
m_user	torrent/include/libtorrent/http_stream.hpp	/^	std::string m_user;$/;"	m	class:libtorrent::http_stream
m_user	torrent/include/libtorrent/socks5_stream.hpp	/^	std::string m_user;$/;"	m	class:libtorrent::socks5_stream
m_user_agent	torrent/include/libtorrent/http_connection.hpp	/^	std::string m_user_agent;$/;"	m	struct:libtorrent::http_connection
m_user_load_torrent	torrent/include/libtorrent/aux_/session_impl.hpp	/^			user_load_function_t m_user_load_torrent;$/;"	m	struct:libtorrent::aux::final
m_userdata	torrent/src/utp_stream.cpp	/^	void* m_userdata;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_username	torrent/include/libtorrent/torrent.hpp	/^		std::string m_username;$/;"	m	class:libtorrent::torrent
m_ut_pex_msg	torrent/src/ut_pex.cpp	/^		std::vector<char> m_ut_pex_msg;$/;"	m	struct:libtorrent::__anon35::final	file:
m_utp_close_wait	torrent/bak/session_view.hpp	/^	int const m_utp_close_wait = lt::find_metric_idx("utp.num_utp_close_wait");$/;"	m	struct:session_view
m_utp_connected	torrent/bak/session_view.hpp	/^	int const m_utp_connected = lt::find_metric_idx("utp.num_utp_connected");$/;"	m	struct:session_view
m_utp_fin_sent	torrent/bak/session_view.hpp	/^	int const m_utp_fin_sent = lt::find_metric_idx("utp.num_utp_fin_sent");$/;"	m	struct:session_view
m_utp_idle	torrent/bak/session_view.hpp	/^	int const m_utp_idle = lt::find_metric_idx("utp.num_utp_idle");$/;"	m	struct:session_view
m_utp_socket_manager	torrent/include/libtorrent/aux_/session_impl.hpp	/^			libtorrent::utp_socket_manager m_utp_socket_manager;$/;"	m	struct:libtorrent::aux::final
m_utp_syn_sent	torrent/bak/session_view.hpp	/^	int const m_utp_syn_sent = lt::find_metric_idx("utp.num_utp_syn_sent");$/;"	m	struct:session_view
m_uuid	torrent/include/libtorrent/torrent.hpp	/^		std::string m_uuid;$/;"	m	class:libtorrent::torrent
m_uuids	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::map<std::string, std::shared_ptr<torrent>> m_uuids;$/;"	m	struct:libtorrent::aux::final
m_val	torrent/include/libtorrent/flags.hpp	/^	UnderlyingType m_val;$/;"	m	namespace:libtorrent::flags
m_val	torrent/include/libtorrent/units.hpp	/^		UnderlyingType m_val;$/;"	m	struct:libtorrent::aux::strong_typedef
m_valid_external	torrent/include/libtorrent/ip_voter.hpp	/^		bool m_valid_external;$/;"	m	struct:libtorrent::ip_voter
m_value	qt_pro/QRoundProgressBar.h	/^    double m_value;$/;"	m	class:QRoundProgressBar
m_value	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^		char const* m_value;$/;"	m	struct:libtorrent::aux::bind_to_device
m_value	torrent/include/libtorrent/aux_/keepalive.hpp	/^		int m_value;$/;"	m	struct:libtorrent::aux::tcp_keepalive_idle
m_value	torrent/include/libtorrent/aux_/keepalive.hpp	/^		int m_value;$/;"	m	struct:libtorrent::aux::tcp_keepalive_interval
m_value	torrent/include/libtorrent/kademlia/item.hpp	/^	entry m_value;$/;"	m	class:libtorrent::dht::item
m_value	torrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::dont_fragment
m_value	torrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::exclusive_address_use
m_value	torrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::no_enobufs
m_value	torrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::tcp_notsent_lowat
m_value	torrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::traffic_class
m_value	torrent/include/libtorrent/socket.hpp	/^		int m_value;$/;"	m	struct:libtorrent::v6_protection_level
m_value	torrent/include/libtorrent/socket.hpp	/^		tos_t m_value;$/;"	m	struct:libtorrent::type_of_service
m_verified	torrent/include/libtorrent/torrent.hpp	/^		typed_bitfield<piece_index_t> m_verified;$/;"	m	class:libtorrent::torrent
m_verifying	torrent/include/libtorrent/torrent.hpp	/^		typed_bitfield<piece_index_t> m_verifying;$/;"	m	class:libtorrent::torrent
m_version	torrent/include/libtorrent/natpmp.hpp	/^	protocol_version m_version = version_pcp;$/;"	m	struct:libtorrent::natpmp
m_version	torrent/include/libtorrent/socks5_stream.hpp	/^	int m_version;$/;"	m	class:libtorrent::socks5_stream
m_volatile_size	torrent/include/libtorrent/block_cache.hpp	/^		std::int32_t m_volatile_size;$/;"	m	struct:libtorrent::block_cache
m_wPort	torrent/bak/udp_tracker.cpp	/^	WORD			m_wPort;	$/;"	m	class:CUDPTrackerClient	file:
m_waiting_tracker	torrent/include/libtorrent/torrent.hpp	/^		std::int8_t m_waiting_tracker = 0;$/;"	m	class:libtorrent::torrent
m_was_abandoned	torrent/include/libtorrent/kademlia/observer.hpp	/^	bool m_was_abandoned = false;$/;"	m	struct:libtorrent::dht::observer
m_was_sent	torrent/include/libtorrent/kademlia/observer.hpp	/^	bool m_was_sent = false;$/;"	m	struct:libtorrent::dht::observer
m_was_started	torrent/include/libtorrent/torrent.hpp	/^		bool m_was_started = false;$/;"	m	class:libtorrent::torrent
m_wasted_bytes_idx	torrent/bak/session_view.hpp	/^	int const m_wasted_bytes_idx = lt::find_metric_idx("net.recv_redundant_bytes");$/;"	m	struct:session_view
m_watermark	torrent/include/libtorrent/receive_buffer.hpp	/^	sliding_average<std::ptrdiff_t, 20> m_watermark;$/;"	m	struct:libtorrent::receive_buffer
m_web	torrent/include/libtorrent/http_seed_connection.hpp	/^		web_seed_t* m_web;$/;"	m	class:libtorrent::http_seed_connection
m_web	torrent/include/libtorrent/web_peer_connection.hpp	/^		web_seed_t* m_web;$/;"	m	class:libtorrent::web_peer_connection
m_web_seeds	torrent/include/libtorrent/torrent.hpp	/^		std::list<web_seed_t> m_web_seeds;$/;"	m	class:libtorrent::torrent
m_web_seeds	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<web_seed_entry> m_web_seeds;$/;"	m	class:libtorrent::torrent_info
m_width	torrent/bak/session_view.hpp	/^	int m_width;$/;"	m	struct:session_view
m_width	torrent/bak/torrent_view.hpp	/^	int m_width;$/;"	m	struct:torrent_view
m_work	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::unique_ptr<io_service::work> m_work;$/;"	m	struct:libtorrent::aux::final
m_work	torrent/include/libtorrent/peer_connection.hpp	/^		io_service::work m_work;$/;"	m	class:libtorrent::peer_connection
m_write_buffer	torrent/src/utp_stream.cpp	/^	std::vector<iovec_t> m_write_buffer;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_write_buffer_size	torrent/src/utp_stream.cpp	/^	std::int32_t m_write_buffer_size = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_write_cache_size	torrent/include/libtorrent/block_cache.hpp	/^		std::int32_t m_write_cache_size;$/;"	m	struct:libtorrent::block_cache
m_write_handler	torrent/include/libtorrent/utp_stream.hpp	/^	std::function<void(error_code const&, std::size_t)> m_write_handler;$/;"	m	struct:libtorrent::utp_stream
m_write_handler	torrent/src/utp_stream.cpp	/^	bool m_write_handler = false;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_write_handler_storage	torrent/include/libtorrent/peer_connection.hpp	/^		aux::handler_storage<TORRENT_WRITE_HANDLER_MAX_SIZE> m_write_handler_storage;$/;"	m	class:libtorrent::peer_connection
m_write_jobs	torrent/include/libtorrent/disk_job_pool.hpp	/^		int m_write_jobs;$/;"	m	struct:libtorrent::disk_job_pool
m_write_ops_idx	torrent/bak/session_view.hpp	/^	int const m_write_ops_idx = lt::find_metric_idx("disk.num_write_ops");$/;"	m	struct:session_view
m_write_tokens	torrent/include/libtorrent/kademlia/find_data.hpp	/^	std::map<node_id, std::string> m_write_tokens;$/;"	m	struct:libtorrent::dht::find_data
m_writes_cache_idx	torrent/bak/session_view.hpp	/^	int const m_writes_cache_idx = lt::find_metric_idx("disk.write_cache_blocks");$/;"	m	struct:session_view
m_written	torrent/src/utp_stream.cpp	/^	std::int32_t m_written = 0;$/;"	m	struct:libtorrent::utp_socket_impl	file:
m_xor_mask	torrent/include/libtorrent/pe_crypto.hpp	/^		sha1_hash m_xor_mask;$/;"	m	class:libtorrent::dh_key_exchange
mac	include/config.h	/^    char mac[32];$/;"	m	struct:netcard_param
mac	qt_pro/external.h	/^    char mac[32];$/;"	m	struct:netcard_param
magic	include/qcow2.h	/^    uint32_t magic;$/;"	m	struct:_QCowHeader
magic	test/check.c	/^    uint32_t magic;$/;"	m	struct:_QCowHeader	file:
magic	torrent/include/libtorrent/upnp.hpp	/^		int magic = 1337;$/;"	m	struct:libtorrent::final::rootdevice
main	qt_pro/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	src/main.c	/^int main(int argc, char *argv[])$/;"	f
main	test/test.c	/^int main(int argc, char *argv[])$/;"	f
main	torrent/bak/bt-get.cpp	/^int main(int argc, char const* argv[]) try$/;"	f
main	torrent/bak/bt-get2.cpp	/^int main(int argc, char const* argv[]) try$/;"	f
main	torrent/bak/client_test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	torrent/bak/connection_tester.cpp	/^int main(int argc, char* argv[])$/;"	f
main	torrent/bak/custom_storage.cpp	/^int main(int argc, char* argv[]) try$/;"	f
main	torrent/bak/dump_torrent.cpp	/^int main(int argc, char* argv[]) try$/;"	f
main	torrent/bak/make_torrent.cpp	/^int main(int argc_, char const* argv_[]) try$/;"	f
main	torrent/bak/simple_client.cpp	/^int main(int argc, char* argv[]) try$/;"	f
main	torrent/bak/stats_counters.cpp	/^int main()$/;"	f
main	torrent/bak/upnp_test.cpp	/^int main(int argc, char*[])$/;"	f
main	torrent/ed25519/test.c	/^int main(int argc, char *argv[]) {$/;"	f
main	torrent/src/client.cpp	/^int main(int argc, char *argv[])$/;"	f
mainLayout	qt_pro/mainwindow.h	/^    QVBoxLayout *mainLayout;$/;"	m	class:MainWindow
main_ui	qt_pro/global.h	/^    MainWindow *main_ui;$/;"	m	class:Global
mainobj	Makefile	/^mainobj = main.o tools.o log.o inirw.o device.o qcow2.o linux.o gpt.o StoreConfig.o event.o socket.o cJSON.o client.o window.o \\$/;"	m
mainobj	torrent/Makefile	/^mainobj =$/;"	m
major	include/device.h	/^    int major;$/;"	m	struct:_PedDevice
major_ver	include/config.h	/^    int major_ver;$/;"	m	struct:config
major_ver	qt_pro/external.h	/^    int major_ver;$/;"	m	struct:config
major_version	torrent/include/libtorrent/fingerprint.hpp	/^		int major_version;$/;"	m	struct:libtorrent::fingerprint
make_absolute_path	torrent/bak/client_test.cpp	/^std::string make_absolute_path(std::string const& p)$/;"	f
make_announce_port	torrent/src/session_impl.cpp	/^	std::uint16_t make_announce_port(std::uint16_t const p)$/;"	f	namespace:libtorrent::aux::__anon47
make_error_code	torrent/src/bdecode.cpp	/^		boost::system::error_code make_error_code(error_code_enum e)$/;"	f	namespace:libtorrent::bdecode_errors
make_error_code	torrent/src/error_code.cpp	/^		boost::system::error_code make_error_code(error_code_enum e)$/;"	f	namespace:libtorrent::errors
make_error_code	torrent/src/gzip.cpp	/^		boost::system::error_code make_error_code(error_code_enum e)$/;"	f	namespace:libtorrent::gzip_errors
make_error_code	torrent/src/i2p_stream.cpp	/^		boost::system::error_code make_error_code(i2p_error_code e)$/;"	f	namespace:libtorrent::i2p_error
make_error_code	torrent/src/natpmp.cpp	/^	boost::system::error_code make_error_code(pcp_errors e)$/;"	f	namespace:libtorrent::errors
make_error_code	torrent/src/socks5_stream.cpp	/^		boost::system::error_code make_error_code(socks_error_code e)$/;"	f	namespace:libtorrent::socks_error
make_error_code	torrent/src/upnp.cpp	/^	boost::system::error_code make_error_code(error_code_enum e)$/;"	f	namespace:libtorrent::upnp_errors
make_error_code	torrent/src/utf8.cpp	/^		boost::system::error_code make_error_code(utf8_errors::error_code_enum e)$/;"	f	namespace:libtorrent::utf8_errors
make_free_holder	torrent/src/path.cpp	/^	std::unique_ptr<T, free_function> make_free_holder(T* ptr)$/;"	f	namespace:libtorrent::__anon136
make_handler	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^	make_handler(Handler handler$/;"	f	namespace:libtorrent::aux
make_id_secret	torrent/kademlia/node_id.cpp	/^void make_id_secret(node_id& in)$/;"	f	namespace:libtorrent::dht
make_invariant_checker	torrent/include/libtorrent/invariant_check.hpp	/^	invariant_checker_impl<T> make_invariant_checker(T const& x)$/;"	f	namespace:libtorrent
make_magnet_uri	torrent/src/magnet_uri.cpp	/^	std::string make_magnet_uri(torrent_handle const& handle)$/;"	f	namespace:libtorrent
make_magnet_uri	torrent/src/magnet_uri.cpp	/^	std::string make_magnet_uri(torrent_info const& info)$/;"	f	namespace:libtorrent
make_reverse	torrent/include/libtorrent/piece_picker.hpp	/^			void make_reverse()$/;"	f	struct:libtorrent::piece_picker::piece_pos
make_table	src/StoreConfig.c	/^static void make_table()$/;"	f	file:
make_tcp	torrent/include/libtorrent/socket.hpp	/^	inline tcp::endpoint make_tcp(udp::endpoint const ep)$/;"	f	namespace:libtorrent
make_time_critical	torrent/src/peer_connection.cpp	/^	bool peer_connection::make_time_critical(piece_block const& block)$/;"	f	class:libtorrent::peer_connection
make_udp	torrent/include/libtorrent/socket.hpp	/^	inline udp::endpoint make_udp(tcp::endpoint const ep)$/;"	f	namespace:libtorrent
malloc	virt-p2v/include/gnulib/stdlib.h	/^_GL_CXXALIASWARN (malloc);$/;"	v
malloc	virt-p2v/include/gnulib/stdlib.h	811;"	d
malloc_fn	cJSON/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
malloc_fn	include/cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
mandir	torrent/include/libtorrent/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
map_block	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<file_slice> map_block(piece_index_t const piece$/;"	f	class:libtorrent::torrent_info
map_block	torrent/src/file_storage.cpp	/^	std::vector<file_slice> file_storage::map_block(piece_index_t const piece$/;"	f	class:libtorrent::file_storage
map_entry	torrent/src/identify_client.cpp	/^	struct map_entry$/;"	s	namespace:__anon59	file:
map_file	torrent/include/libtorrent/torrent_info.hpp	/^		peer_request map_file(file_index_t const file, std::int64_t offset, int size) const$/;"	f	class:libtorrent::torrent_info
map_file	torrent/src/file_storage.cpp	/^	peer_request file_storage::map_file(file_index_t const file_index$/;"	f	class:libtorrent::file_storage
map_interface_to_network	virt-p2v/src/physical-xml.c	/^map_interface_to_network (struct config *config, const char *interface)$/;"	f	file:
map_port	torrent/src/session_impl.cpp	/^		void map_port(MapProtocol& m, ProtoType protocol, EndpointType const& ep$/;"	f	namespace:libtorrent::aux::__anon48
map_protocol_to_descriptor	torrent/kademlia/node.cpp	/^node::protocol_descriptor const& node::map_protocol_to_descriptor(udp const protocol)$/;"	f	class:libtorrent::dht::node::node
map_sent	torrent/include/libtorrent/natpmp.hpp	/^		bool map_sent = false;$/;"	m	struct:libtorrent::natpmp::mapping_t
map_timer	torrent/src/upnp.cpp	/^void upnp::map_timer(error_code const& ec)$/;"	f	class:libtorrent::upnp
mapped_files	torrent/include/libtorrent/storage_defs.hpp	/^		file_storage const* mapped_files = nullptr; \/\/ optional$/;"	m	struct:libtorrent::storage_params
mapping	torrent/include/libtorrent/aux_/session_impl.hpp	/^		port_mapping_t mapping = port_mapping_t{-1};$/;"	m	struct:libtorrent::aux::listen_port_mapping
mapping	torrent/include/libtorrent/upnp.hpp	/^		aux::vector<mapping_t, port_mapping_t> mapping;$/;"	m	struct:libtorrent::final::rootdevice
mapping_expired	torrent/src/natpmp.cpp	/^void natpmp::mapping_expired(error_code const& e, port_mapping_t const i)$/;"	f	class:libtorrent::natpmp
mapping_log	torrent/src/natpmp.cpp	/^void natpmp::mapping_log(char const* op, mapping_t const& m) const$/;"	f	class:libtorrent::natpmp
mapping_t	torrent/include/libtorrent/natpmp.hpp	/^	struct mapping_t : aux::base_mapping$/;"	s	struct:libtorrent::natpmp
mapping_t	torrent/include/libtorrent/upnp.hpp	/^	struct mapping_t : aux::base_mapping$/;"	s	struct:libtorrent::final
mappings	torrent/include/libtorrent/upnp.hpp	/^		aux::vector<global_mapping_t, port_mapping_t> mappings;$/;"	m	struct:libtorrent::final::upnp_state_t
mark_as_canceled	torrent/src/piece_picker.cpp	/^	void piece_picker::mark_as_canceled(piece_block const block, torrent_peer* peer)$/;"	f	class:libtorrent::piece_picker
mark_as_downloading	torrent/src/piece_picker.cpp	/^	bool piece_picker::mark_as_downloading(piece_block const block$/;"	f	class:libtorrent::piece_picker
mark_as_finished	torrent/src/piece_picker.cpp	/^	void piece_picker::mark_as_finished(piece_block const block, torrent_peer* peer)$/;"	f	class:libtorrent::piece_picker
mark_as_pad	torrent/src/piece_picker.cpp	/^	void piece_picker::mark_as_pad(piece_block block)$/;"	f	class:libtorrent::piece_picker
mark_as_writing	torrent/src/piece_picker.cpp	/^	bool piece_picker::mark_as_writing(piece_block const block, torrent_peer* peer)$/;"	f	class:libtorrent::piece_picker
mark_for_eviction	torrent/src/block_cache.cpp	/^void block_cache::mark_for_eviction(cached_piece_entry* p$/;"	f	class:libtorrent::block_cache
marked_for_deletion	torrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t marked_for_deletion:1;$/;"	m	struct:libtorrent::cached_piece_entry
marked_for_eviction	torrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t marked_for_eviction:1;$/;"	m	struct:libtorrent::cached_piece_entry
match	torrent/src/resolve_links.cpp	/^void resolve_links::match(std::shared_ptr<const torrent_info> const& ti$/;"	f	class:libtorrent::resolve_links
match_addr_mask	torrent/src/enum_net.cpp	/^	bool match_addr_mask(address const& a1, address const& a2, address const& mask)$/;"	f	namespace:libtorrent
match_peer_endpoint	torrent/src/peer_list.cpp	/^		match_peer_endpoint(address const& addr, std::uint16_t port)$/;"	f	struct:__anon56::match_peer_endpoint
match_peer_endpoint	torrent/src/peer_list.cpp	/^	struct match_peer_endpoint$/;"	s	namespace:__anon56	file:
matching_prefix	torrent/kademlia/node_id.cpp	/^bool matching_prefix(node_id const& nid, int mask, int prefix, int offset)$/;"	f	namespace:libtorrent::dht
max	torrent/include/libtorrent/aux_/aligned_union.hpp	/^constexpr std::size_t max(std::size_t a)$/;"	f	namespace:libtorrent::aux
max	torrent/include/libtorrent/aux_/aligned_union.hpp	/^constexpr std::size_t max(std::size_t a, std::size_t b)$/;"	f	namespace:libtorrent::aux
max	torrent/include/libtorrent/aux_/aligned_union.hpp	/^constexpr std::size_t max(std::size_t a, std::size_t b, Vals... v)$/;"	f	namespace:libtorrent::aux
max	torrent/include/libtorrent/units.hpp	/^		static constexpr type (max)()$/;"	f	class:std::numeric_limits
max_addr	torrent/include/libtorrent/ip_filter.hpp	/^	Addr max_addr()$/;"	f	namespace:libtorrent::detail
max_addr	torrent/include/libtorrent/ip_filter.hpp	/^	inline std::uint16_t max_addr<std::uint16_t>()$/;"	f	namespace:libtorrent::detail
max_allowed_in_request_queue	torrent/include/libtorrent/settings_pack.hpp	/^			max_allowed_in_request_queue,$/;"	e	enum:libtorrent::settings_pack::int_types
max_bandwidth_channels	torrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	static constexpr int max_bandwidth_channels = 10;$/;"	m	struct:libtorrent::bw_request
max_blocks_per_piece	torrent/include/libtorrent/piece_picker.hpp	/^			max_blocks_per_piece = (1 << 15) - 1$/;"	e	enum:libtorrent::piece_picker::__anon19
max_bool_setting_internal	torrent/include/libtorrent/settings_pack.hpp	/^			max_bool_setting_internal$/;"	e	enum:libtorrent::settings_pack::bool_types
max_buffer_size	torrent/include/libtorrent/torrent_info.hpp	/^		int max_buffer_size = 6000000;$/;"	m	struct:libtorrent::load_torrent_limits
max_connections	test/test.c	/^int max_connections = 1024;$/;"	v
max_connections	torrent/include/libtorrent/add_torrent_params.hpp	/^		int max_connections = -1;$/;"	m	struct:libtorrent::add_torrent_params
max_connections	torrent/include/libtorrent/torrent.hpp	/^		int max_connections() const { return int(m_max_connections); }$/;"	f	class:libtorrent::torrent
max_connections	torrent/src/session_handle.cpp	/^	int session_handle::max_connections() const$/;"	f	class:libtorrent::session_handle
max_connections	torrent/src/session_impl.cpp	/^	int session_impl::max_connections() const$/;"	f	class:libtorrent::aux::session_impl
max_connections	torrent/src/torrent_handle.cpp	/^	int torrent_handle::max_connections() const$/;"	f	class:libtorrent::torrent_handle
max_connections_per_torrent	torrent/bak/client_test.cpp	/^int max_connections_per_torrent = 50;$/;"	v
max_decode_depth	torrent/include/libtorrent/torrent_info.hpp	/^		int max_decode_depth = 100;$/;"	m	struct:libtorrent::load_torrent_limits
max_decode_tokens	torrent/include/libtorrent/torrent_info.hpp	/^		int max_decode_tokens = 2000000;$/;"	m	struct:libtorrent::load_torrent_limits
max_dht_items	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_dht_items = 700;$/;"	m	struct:libtorrent::dht::dht_settings
max_fail_count	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_fail_count = 20;$/;"	m	struct:libtorrent::dht::dht_settings
max_failcount	torrent/include/libtorrent/peer_list.hpp	/^		int max_failcount = 3;$/;"	m	struct:libtorrent::torrent_state
max_failcount	torrent/include/libtorrent/settings_pack.hpp	/^			max_failcount,$/;"	e	enum:libtorrent::settings_pack::int_types
max_half_open_connections	torrent/src/session_handle.cpp	/^	int session_handle::max_half_open_connections() const { return 8; }$/;"	f	class:libtorrent::session_handle
max_header	torrent/include/libtorrent/bdecode.hpp	/^		max_header = (1 << 3) - 1$/;"	e	enum:libtorrent::detail::limits_t
max_header_size	torrent/src/udp_socket.cpp	/^std::size_t const max_header_size = 255;$/;"	m	class:libtorrent::std	file:
max_http_recv_buffer_size	torrent/include/libtorrent/settings_pack.hpp	/^			max_http_recv_buffer_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_incoming_requests	torrent/src/ut_metadata.cpp	/^		max_incoming_requests = 1024,$/;"	e	enum:libtorrent::__anon72::__anon73	file:
max_infohashes_sample_count	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_infohashes_sample_count = 20;$/;"	m	struct:libtorrent::dht::dht_settings
max_int_setting_internal	torrent/include/libtorrent/settings_pack.hpp	/^			max_int_setting_internal$/;"	e	enum:libtorrent::settings_pack::int_types
max_metadata_size	torrent/include/libtorrent/settings_pack.hpp	/^			max_metadata_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_next_item	torrent/include/libtorrent/bdecode.hpp	/^		max_next_item = (1 << 29) - 1,$/;"	e	enum:libtorrent::detail::limits_t
max_offset	torrent/include/libtorrent/bdecode.hpp	/^		max_offset = (1 << 29) - 1,$/;"	e	enum:libtorrent::detail::limits_t
max_open_files	torrent/src/platform_util.cpp	/^	int max_open_files()$/;"	f	namespace:libtorrent
max_out_request_queue	torrent/include/libtorrent/settings_pack.hpp	/^			max_out_request_queue,$/;"	e	enum:libtorrent::settings_pack::int_types
max_out_request_queue	torrent/src/peer_connection.cpp	/^	int peer_connection::max_out_request_queue() const$/;"	f	class:libtorrent::peer_connection
max_out_request_queue	torrent/src/peer_connection.cpp	/^	void peer_connection::max_out_request_queue(int s)$/;"	f	class:libtorrent::peer_connection
max_paused_peerlist_size	torrent/include/libtorrent/settings_pack.hpp	/^			max_paused_peerlist_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_peer_count	torrent/include/libtorrent/piece_picker.hpp	/^			static constexpr std::uint32_t max_peer_count = 0xffff;$/;"	m	struct:libtorrent::piece_picker::piece_pos
max_peer_entries	torrent/src/ut_pex.cpp	/^		max_peer_entries = 100$/;"	e	enum:libtorrent::__anon35::__anon36	file:
max_peer_recv_buffer_size	torrent/include/libtorrent/settings_pack.hpp	/^			max_peer_recv_buffer_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_peerlist_size	torrent/include/libtorrent/peer_list.hpp	/^		int max_peerlist_size = 1000;$/;"	m	struct:libtorrent::torrent_state
max_peerlist_size	torrent/include/libtorrent/settings_pack.hpp	/^			max_peerlist_size,$/;"	e	enum:libtorrent::settings_pack::int_types
max_peers	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_peers = 500;$/;"	m	struct:libtorrent::dht::dht_settings
max_peers_reply	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_peers_reply = 100;$/;"	m	struct:libtorrent::dht::dht_settings
max_pex_peers	torrent/include/libtorrent/settings_pack.hpp	/^			max_pex_peers,$/;"	e	enum:libtorrent::settings_pack::int_types
max_piece_affinity_extent	torrent/src/piece_picker.cpp	/^	constexpr int max_piece_affinity_extent = 4 * 1024 * 1024 \/ default_block_size;$/;"	m	namespace:libtorrent	file:
max_piece_requests	torrent/include/libtorrent/performance_counters.hpp	/^			max_piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
max_pieces	torrent/include/libtorrent/piece_picker.hpp	/^		enum { max_pieces = (std::numeric_limits<int>::max)() - 1 };$/;"	e	enum:libtorrent::piece_picker::__anon21
max_pieces	torrent/include/libtorrent/torrent_info.hpp	/^		int max_pieces = 0x100000;$/;"	m	struct:libtorrent::load_torrent_limits
max_queued_disk_bytes	torrent/include/libtorrent/settings_pack.hpp	/^			max_queued_disk_bytes,$/;"	e	enum:libtorrent::settings_pack::int_types
max_receive	torrent/src/receive_buffer.cpp	/^int receive_buffer::max_receive() const$/;"	f	class:libtorrent::receive_buffer
max_refcount	torrent/include/libtorrent/block_cache.hpp	/^		static constexpr int max_refcount = (1 << 29) - 1;$/;"	m	struct:libtorrent::cached_block_entry
max_rejects	torrent/include/libtorrent/settings_pack.hpp	/^			max_rejects,$/;"	e	enum:libtorrent::settings_pack::int_types
max_retry_port_bind	torrent/include/libtorrent/settings_pack.hpp	/^			max_retry_port_bind,$/;"	e	enum:libtorrent::settings_pack::int_types
max_size	include/client.h	/^    int max_size;$/;"	m	struct:client
max_string_setting_internal	torrent/include/libtorrent/settings_pack.hpp	/^			max_string_setting_internal$/;"	e	enum:libtorrent::settings_pack::string_types
max_suggest_pieces	torrent/include/libtorrent/settings_pack.hpp	/^			max_suggest_pieces,$/;"	e	enum:libtorrent::settings_pack::int_types
max_threads	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		int max_threads() const { return m_max_threads; }$/;"	f	struct:libtorrent::disk_io_thread_pool
max_time	torrent/include/libtorrent/time.hpp	/^	inline time_point max_time() { return (time_point::max)(); }$/;"	f	namespace:libtorrent
max_torrent_search_reply	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_torrent_search_reply = 20;$/;"	m	struct:libtorrent::dht::dht_settings
max_torrents	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int max_torrents = 2000;$/;"	m	struct:libtorrent::dht::dht_settings
max_uploads	torrent/include/libtorrent/add_torrent_params.hpp	/^		int max_uploads = -1;$/;"	m	struct:libtorrent::add_torrent_params
max_uploads	torrent/include/libtorrent/torrent.hpp	/^		int max_uploads() const { return int(m_max_uploads); }$/;"	f	class:libtorrent::torrent
max_uploads	torrent/src/session_handle.cpp	/^	int session_handle::max_uploads() const$/;"	f	class:libtorrent::session_handle
max_uploads	torrent/src/session_impl.cpp	/^	int session_impl::max_uploads() const$/;"	f	class:libtorrent::aux::session_impl
max_uploads	torrent/src/torrent_handle.cpp	/^	int torrent_handle::max_uploads() const$/;"	f	class:libtorrent::torrent_handle
max_web_seed_connections	torrent/include/libtorrent/settings_pack.hpp	/^			max_web_seed_connections,$/;"	e	enum:libtorrent::settings_pack::int_types
maximum	qt_pro/QRoundProgressBar.h	/^    double maximum() const { return m_max; }$/;"	f	class:QRoundProgressBar
maybe_abort	torrent/src/broadcast_socket.cpp	/^	bool broadcast_socket::maybe_abort()$/;"	f	class:libtorrent::broadcast_socket
maybe_connect_web_seeds	torrent/src/torrent.cpp	/^	void torrent::maybe_connect_web_seeds()$/;"	f	class:libtorrent::torrent
maybe_done_flushing	torrent/src/torrent.cpp	/^	void torrent::maybe_done_flushing()$/;"	f	class:libtorrent::torrent
maybe_free_piece	torrent/src/block_cache.cpp	/^bool block_cache::maybe_free_piece(cached_piece_entry* pe)$/;"	f	class:libtorrent::block_cache
maybe_harvest_piece	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::maybe_harvest_piece()$/;"	f	class:libtorrent::web_peer_connection
maybe_identify_click	virt-p2v/src/gui.c	/^maybe_identify_click (GtkWidget *interfaces_list, GdkEventButton *event,$/;"	f	file:
maybe_inc_acked_seq_nr	torrent/src/utp_stream.cpp	/^void utp_socket_impl::maybe_inc_acked_seq_nr()$/;"	f	class:libtorrent::utp_socket_impl
maybe_notify	torrent/src/alert_manager.cpp	/^	void alert_manager::maybe_notify(alert* a)$/;"	f	class:libtorrent::alert_manager
maybe_rotate	torrent/src/ip_voter.cpp	/^	bool ip_voter::maybe_rotate()$/;"	f	class:libtorrent::ip_voter
maybe_send_request	torrent/src/ut_metadata.cpp	/^		void maybe_send_request()$/;"	f	struct:libtorrent::__anon72::final
maybe_trigger_receive_callback	torrent/src/utp_stream.cpp	/^void utp_socket_impl::maybe_trigger_receive_callback()$/;"	f	class:libtorrent::utp_socket_impl
maybe_trigger_send_callback	torrent/src/utp_stream.cpp	/^void utp_socket_impl::maybe_trigger_send_callback()$/;"	f	class:libtorrent::utp_socket_impl
maybe_unchoke_this_peer	torrent/src/peer_connection.cpp	/^	void peer_connection::maybe_unchoke_this_peer()$/;"	f	class:libtorrent::peer_connection
maybe_unchoke_this_peer	torrent/src/peer_connection_handle.cpp	/^void peer_connection_handle::maybe_unchoke_this_peer()$/;"	f	class:libtorrent::peer_connection_handle
maybe_url_encode	torrent/src/escape_string.cpp	/^	std::string maybe_url_encode(std::string const& url)$/;"	f	namespace:libtorrent
mbr_part_count	include/gpt.h	/^    uint32_t             mbr_part_count;$/;"	m	struct:_DiskDriver
mbr_parts	include/gpt.h	/^    PARTITION_INFO       mbr_parts[4];$/;"	m	struct:_DiskDriver
mbr_parttype_name	src/gpt.c	/^CHARN * mbr_parttype_name(uint8_t type)$/;"	f
mbr_type	include/gpt.h	/^    uint32_t    mbr_type;$/;"	m	struct:__anon9
mbr_type	include/gpt.h	/^    uint8_t   mbr_type;$/;"	m	struct:__anon8
mbr_types	src/gpt.c	/^MBR_PARTTYPE    mbr_types[] = {$/;"	v
mbtowc	virt-p2v/include/gnulib/stdlib.h	836;"	d
mean	torrent/include/libtorrent/sliding_average.hpp	/^	Int mean() const { return m_num_samples > 0 ? (m_mean + 32) \/ 64 : 0; }$/;"	f	struct:libtorrent::sliding_average
medium	torrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	e	enum:libtorrent::partial_piece_info::state_t
memchr	virt-p2v/include/gnulib/string.h	630;"	d
memmem	virt-p2v/include/gnulib/string.h	664;"	d
memory	include/config.h	/^    unsigned long long memory;$/;"	m	struct:terminal_info
memory	qt_pro/external.h	/^    unsigned long long memory;$/;"	m	struct:terminal_info
memory	qt_pro/global.h	/^    unsigned int memory;$/;"	m	struct:hwinfo
memory	virt-p2v/include/p2v-config.h	/^  uint64_t memory;$/;"	m	struct:config
memory_entry	virt-p2v/src/gui.c	/^  *guestname_entry, *vcpus_entry, *memory_entry,$/;"	v	file:
memory_warning	virt-p2v/src/gui.c	/^  *vcpus_warning, *memory_warning, *target_warning_label,$/;"	v	file:
mempcpy	virt-p2v/include/gnulib/string.h	686;"	d
memrchr	virt-p2v/include/gnulib/string.h	714;"	d
memset	src/StoreConfig.c	12;"	d	file:
memtoll	src/tools.c	/^long long memtoll(const char *p, int *err)$/;"	f
merge_resume_http_seeds	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER merge_resume_http_seeds = 18_bit;$/;"	m	namespace:libtorrent::torrent_flags
merge_resume_trackers	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER merge_resume_trackers = 16_bit;$/;"	m	namespace:libtorrent::torrent_flags
merkle	torrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t merkle = 1_bit;$/;"	m	struct:libtorrent::create_torrent
merkle	torrent/src/create_torrent.cpp	/^	constexpr create_flags_t create_torrent::merkle;$/;"	m	class:libtorrent::create_torrent	file:
merkle_get_parent	torrent/src/merkle.cpp	/^	int merkle_get_parent(int tree_node)$/;"	f	namespace:libtorrent
merkle_get_sibling	torrent/src/merkle.cpp	/^	int merkle_get_sibling(int tree_node)$/;"	f	namespace:libtorrent
merkle_num_leafs	torrent/src/merkle.cpp	/^	int merkle_num_leafs(int pieces)$/;"	f	namespace:libtorrent
merkle_num_nodes	torrent/src/merkle.cpp	/^	int merkle_num_nodes(int leafs)$/;"	f	namespace:libtorrent
merkle_tree	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<sha1_hash>> merkle_tree;$/;"	m	struct:libtorrent::add_torrent_params
merkle_tree	torrent/include/libtorrent/create_torrent.hpp	/^		std::vector<sha1_hash> const& merkle_tree() const { return m_merkle_tree; }$/;"	f	class:libtorrent::create_torrent::std
merkle_tree	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<sha1_hash> const& merkle_tree() const { return m_merkle_tree; }$/;"	f	class:libtorrent::torrent_info::std
message	torrent/ed25519/test.c	/^const char message[] = "Hello, world!";$/;"	v
message	torrent/include/libtorrent/announce_entry.hpp	/^		std::string message;$/;"	m	struct:libtorrent::announce_endpoint
message	torrent/include/libtorrent/http_parser.hpp	/^		std::string const& message() const { return m_server_message; }$/;"	f	class:libtorrent::http_parser::std
message	torrent/include/libtorrent/kademlia/msg.hpp	/^	bdecode_node const& message;$/;"	m	struct:libtorrent::dht::msg
message	torrent/src/alert.cpp	/^	std::string add_torrent_alert::message() const$/;"	f	class:libtorrent::add_torrent_alert
message	torrent/src/alert.cpp	/^	std::string alerts_dropped_alert::message() const$/;"	f	class:libtorrent::alerts_dropped_alert
message	torrent/src/alert.cpp	/^	std::string anonymous_mode_alert::message() const$/;"	f	class:libtorrent::anonymous_mode_alert
message	torrent/src/alert.cpp	/^	std::string block_downloading_alert::message() const$/;"	f	class:libtorrent::block_downloading_alert
message	torrent/src/alert.cpp	/^	std::string block_finished_alert::message() const$/;"	f	class:libtorrent::block_finished_alert
message	torrent/src/alert.cpp	/^	std::string block_timeout_alert::message() const$/;"	f	class:libtorrent::block_timeout_alert
message	torrent/src/alert.cpp	/^	std::string block_uploaded_alert::message() const$/;"	f	class:libtorrent::block_uploaded_alert
message	torrent/src/alert.cpp	/^	std::string dht_announce_alert::message() const$/;"	f	class:libtorrent::dht_announce_alert
message	torrent/src/alert.cpp	/^	std::string dht_bootstrap_alert::message() const$/;"	f	class:libtorrent::dht_bootstrap_alert
message	torrent/src/alert.cpp	/^	std::string dht_direct_response_alert::message() const$/;"	f	class:libtorrent::dht_direct_response_alert
message	torrent/src/alert.cpp	/^	std::string dht_error_alert::message() const$/;"	f	class:libtorrent::dht_error_alert
message	torrent/src/alert.cpp	/^	std::string dht_get_peers_alert::message() const$/;"	f	class:libtorrent::dht_get_peers_alert
message	torrent/src/alert.cpp	/^	std::string dht_get_peers_reply_alert::message() const$/;"	f	class:libtorrent::dht_get_peers_reply_alert
message	torrent/src/alert.cpp	/^	std::string dht_immutable_item_alert::message() const$/;"	f	class:libtorrent::dht_immutable_item_alert
message	torrent/src/alert.cpp	/^	std::string dht_live_nodes_alert::message() const$/;"	f	class:libtorrent::dht_live_nodes_alert
message	torrent/src/alert.cpp	/^	std::string dht_log_alert::message() const$/;"	f	class:libtorrent::dht_log_alert
message	torrent/src/alert.cpp	/^	std::string dht_mutable_item_alert::message() const$/;"	f	class:libtorrent::dht_mutable_item_alert
message	torrent/src/alert.cpp	/^	std::string dht_outgoing_get_peers_alert::message() const$/;"	f	class:libtorrent::dht_outgoing_get_peers_alert
message	torrent/src/alert.cpp	/^	std::string dht_pkt_alert::message() const$/;"	f	class:libtorrent::dht_pkt_alert
message	torrent/src/alert.cpp	/^	std::string dht_put_alert::message() const$/;"	f	class:libtorrent::dht_put_alert
message	torrent/src/alert.cpp	/^	std::string dht_reply_alert::message() const$/;"	f	class:libtorrent::dht_reply_alert
message	torrent/src/alert.cpp	/^	std::string dht_sample_infohashes_alert::message() const$/;"	f	class:libtorrent::dht_sample_infohashes_alert
message	torrent/src/alert.cpp	/^	std::string dht_stats_alert::message() const$/;"	f	class:libtorrent::dht_stats_alert
message	torrent/src/alert.cpp	/^	std::string external_ip_alert::message() const$/;"	f	class:libtorrent::external_ip_alert
message	torrent/src/alert.cpp	/^	std::string fastresume_rejected_alert::message() const$/;"	f	class:libtorrent::fastresume_rejected_alert
message	torrent/src/alert.cpp	/^	std::string file_completed_alert::message() const$/;"	f	class:libtorrent::file_completed_alert
message	torrent/src/alert.cpp	/^	std::string file_error_alert::message() const$/;"	f	class:libtorrent::file_error_alert
message	torrent/src/alert.cpp	/^	std::string file_rename_failed_alert::message() const$/;"	f	class:libtorrent::file_rename_failed_alert
message	torrent/src/alert.cpp	/^	std::string file_renamed_alert::message() const$/;"	f	class:libtorrent::file_renamed_alert
message	torrent/src/alert.cpp	/^	std::string hash_failed_alert::message() const$/;"	f	class:libtorrent::hash_failed_alert
message	torrent/src/alert.cpp	/^	std::string i2p_alert::message() const$/;"	f	class:libtorrent::i2p_alert
message	torrent/src/alert.cpp	/^	std::string incoming_connection_alert::message() const$/;"	f	class:libtorrent::incoming_connection_alert
message	torrent/src/alert.cpp	/^	std::string incoming_request_alert::message() const$/;"	f	class:libtorrent::incoming_request_alert
message	torrent/src/alert.cpp	/^	std::string invalid_request_alert::message() const$/;"	f	class:libtorrent::invalid_request_alert
message	torrent/src/alert.cpp	/^	std::string listen_failed_alert::message() const$/;"	f	class:libtorrent::listen_failed_alert
message	torrent/src/alert.cpp	/^	std::string listen_succeeded_alert::message() const$/;"	f	class:libtorrent::listen_succeeded_alert
message	torrent/src/alert.cpp	/^	std::string log_alert::message() const$/;"	f	class:libtorrent::log_alert
message	torrent/src/alert.cpp	/^	std::string lsd_error_alert::message() const$/;"	f	class:libtorrent::lsd_error_alert
message	torrent/src/alert.cpp	/^	std::string lsd_peer_alert::message() const$/;"	f	class:libtorrent::lsd_peer_alert
message	torrent/src/alert.cpp	/^	std::string metadata_failed_alert::message() const$/;"	f	class:libtorrent::metadata_failed_alert
message	torrent/src/alert.cpp	/^	std::string metadata_received_alert::message() const$/;"	f	class:libtorrent::metadata_received_alert
message	torrent/src/alert.cpp	/^	std::string mmap_cache_alert::message() const$/;"	f	class:libtorrent::mmap_cache_alert
message	torrent/src/alert.cpp	/^	std::string peer_alert::message() const$/;"	f	class:libtorrent::peer_alert
message	torrent/src/alert.cpp	/^	std::string peer_ban_alert::message() const$/;"	f	class:libtorrent::peer_ban_alert
message	torrent/src/alert.cpp	/^	std::string peer_blocked_alert::message() const$/;"	f	class:libtorrent::peer_blocked_alert
message	torrent/src/alert.cpp	/^	std::string peer_connect_alert::message() const$/;"	f	class:libtorrent::peer_connect_alert
message	torrent/src/alert.cpp	/^	std::string peer_disconnected_alert::message() const$/;"	f	class:libtorrent::peer_disconnected_alert
message	torrent/src/alert.cpp	/^	std::string peer_error_alert::message() const$/;"	f	class:libtorrent::peer_error_alert
message	torrent/src/alert.cpp	/^	std::string peer_log_alert::message() const$/;"	f	class:libtorrent::peer_log_alert
message	torrent/src/alert.cpp	/^	std::string peer_snubbed_alert::message() const$/;"	f	class:libtorrent::peer_snubbed_alert
message	torrent/src/alert.cpp	/^	std::string peer_unsnubbed_alert::message() const$/;"	f	class:libtorrent::peer_unsnubbed_alert
message	torrent/src/alert.cpp	/^	std::string performance_alert::message() const$/;"	f	class:libtorrent::performance_alert
message	torrent/src/alert.cpp	/^	std::string picker_log_alert::message() const$/;"	f	class:libtorrent::picker_log_alert
message	torrent/src/alert.cpp	/^	std::string piece_finished_alert::message() const$/;"	f	class:libtorrent::piece_finished_alert
message	torrent/src/alert.cpp	/^	std::string portmap_alert::message() const$/;"	f	class:libtorrent::portmap_alert
message	torrent/src/alert.cpp	/^	std::string portmap_error_alert::message() const$/;"	f	class:libtorrent::portmap_error_alert
message	torrent/src/alert.cpp	/^	std::string portmap_log_alert::message() const$/;"	f	class:libtorrent::portmap_log_alert
message	torrent/src/alert.cpp	/^	std::string read_piece_alert::message() const$/;"	f	class:libtorrent::read_piece_alert
message	torrent/src/alert.cpp	/^	std::string request_dropped_alert::message() const$/;"	f	class:libtorrent::request_dropped_alert
message	torrent/src/alert.cpp	/^	std::string save_resume_data_alert::message() const$/;"	f	class:libtorrent::save_resume_data_alert
message	torrent/src/alert.cpp	/^	std::string save_resume_data_failed_alert::message() const$/;"	f	class:libtorrent::save_resume_data_failed_alert
message	torrent/src/alert.cpp	/^	std::string scrape_failed_alert::message() const$/;"	f	class:libtorrent::scrape_failed_alert
message	torrent/src/alert.cpp	/^	std::string scrape_reply_alert::message() const$/;"	f	class:libtorrent::scrape_reply_alert
message	torrent/src/alert.cpp	/^	std::string session_error_alert::message() const$/;"	f	class:libtorrent::session_error_alert
message	torrent/src/alert.cpp	/^	std::string session_stats_alert::message() const$/;"	f	class:libtorrent::session_stats_alert
message	torrent/src/alert.cpp	/^	std::string session_stats_header_alert::message() const$/;"	f	class:libtorrent::session_stats_header_alert
message	torrent/src/alert.cpp	/^	std::string socks5_alert::message() const$/;"	f	class:libtorrent::socks5_alert
message	torrent/src/alert.cpp	/^	std::string state_changed_alert::message() const$/;"	f	class:libtorrent::state_changed_alert
message	torrent/src/alert.cpp	/^	std::string state_update_alert::message() const$/;"	f	class:libtorrent::state_update_alert
message	torrent/src/alert.cpp	/^	std::string stats_alert::message() const$/;"	f	class:libtorrent::stats_alert
message	torrent/src/alert.cpp	/^	std::string storage_moved_alert::message() const$/;"	f	class:libtorrent::storage_moved_alert
message	torrent/src/alert.cpp	/^	std::string storage_moved_failed_alert::message() const$/;"	f	class:libtorrent::storage_moved_failed_alert
message	torrent/src/alert.cpp	/^	std::string torrent_added_alert::message() const$/;"	f	class:libtorrent::torrent_added_alert
message	torrent/src/alert.cpp	/^	std::string torrent_alert::message() const$/;"	f	class:libtorrent::torrent_alert
message	torrent/src/alert.cpp	/^	std::string torrent_checked_alert::message() const$/;"	f	class:libtorrent::torrent_checked_alert
message	torrent/src/alert.cpp	/^	std::string torrent_delete_failed_alert::message() const$/;"	f	class:libtorrent::torrent_delete_failed_alert
message	torrent/src/alert.cpp	/^	std::string torrent_deleted_alert::message() const$/;"	f	class:libtorrent::torrent_deleted_alert
message	torrent/src/alert.cpp	/^	std::string torrent_error_alert::message() const$/;"	f	class:libtorrent::torrent_error_alert
message	torrent/src/alert.cpp	/^	std::string torrent_finished_alert::message() const$/;"	f	class:libtorrent::torrent_finished_alert
message	torrent/src/alert.cpp	/^	std::string torrent_log_alert::message() const$/;"	f	class:libtorrent::torrent_log_alert
message	torrent/src/alert.cpp	/^	std::string torrent_need_cert_alert::message() const$/;"	f	class:libtorrent::torrent_need_cert_alert
message	torrent/src/alert.cpp	/^	std::string torrent_paused_alert::message() const$/;"	f	class:libtorrent::torrent_paused_alert
message	torrent/src/alert.cpp	/^	std::string torrent_removed_alert::message() const$/;"	f	class:libtorrent::torrent_removed_alert
message	torrent/src/alert.cpp	/^	std::string torrent_resumed_alert::message() const$/;"	f	class:libtorrent::torrent_resumed_alert
message	torrent/src/alert.cpp	/^	std::string torrent_update_alert::message() const$/;"	f	class:libtorrent::torrent_update_alert
message	torrent/src/alert.cpp	/^	std::string tracker_alert::message() const$/;"	f	class:libtorrent::tracker_alert
message	torrent/src/alert.cpp	/^	std::string tracker_announce_alert::message() const$/;"	f	class:libtorrent::tracker_announce_alert
message	torrent/src/alert.cpp	/^	std::string tracker_error_alert::message() const$/;"	f	class:libtorrent::tracker_error_alert
message	torrent/src/alert.cpp	/^	std::string tracker_reply_alert::message() const$/;"	f	class:libtorrent::tracker_reply_alert
message	torrent/src/alert.cpp	/^	std::string tracker_warning_alert::message() const$/;"	f	class:libtorrent::tracker_warning_alert
message	torrent/src/alert.cpp	/^	std::string trackerid_alert::message() const$/;"	f	class:libtorrent::trackerid_alert
message	torrent/src/alert.cpp	/^	std::string udp_error_alert::message() const$/;"	f	class:libtorrent::udp_error_alert
message	torrent/src/alert.cpp	/^	std::string unwanted_block_alert::message() const$/;"	f	class:libtorrent::unwanted_block_alert
message	torrent/src/alert.cpp	/^	std::string url_seed_alert::message() const$/;"	f	class:libtorrent::url_seed_alert
message	torrent/src/bdecode.cpp	/^	std::string bdecode_error_category::message(int ev) const$/;"	f	class:libtorrent::bdecode_error_category
message	torrent/src/error_code.cpp	/^	std::string libtorrent_error_category::message(int ev) const$/;"	f	class:libtorrent::libtorrent_error_category
message	torrent/src/gzip.cpp	/^	std::string gzip_error_category::message(int ev) const$/;"	f	class:libtorrent::gzip_error_category
message_direction_t	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^		enum message_direction_t$/;"	g	struct:libtorrent::dht::dht_logger
message_too_big	torrent/include/libtorrent/close_reason.hpp	/^		message_too_big,$/;"	m	class:libtorrent::close_reason_t
message_type	torrent/include/libtorrent/bt_peer_connection.hpp	/^		enum message_type$/;"	g	class:libtorrent::bt_peer_connection
metaObject	qt_pro/moc_downloadwindow.cpp	/^const QMetaObject *DownloadWindow::metaObject() const$/;"	f	class:DownloadWindow
metaObject	qt_pro/moc_errodialog.cpp	/^const QMetaObject *ErroDialog::metaObject() const$/;"	f	class:ErroDialog
metadata	torrent/include/libtorrent/torrent_info.hpp	/^		boost::shared_array<char> metadata() const$/;"	f	class:libtorrent::torrent_info
metadata	torrent/src/ut_metadata.cpp	/^		span<char const> metadata() const$/;"	f	struct:libtorrent::__anon72::final
metadata_dont_have	torrent/src/ut_metadata.cpp	/^		metadata_dont_have = 2$/;"	e	enum:libtorrent::__anon72::__anon73	file:
metadata_failed_alert	torrent/src/alert.cpp	/^	metadata_failed_alert::metadata_failed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::metadata_failed_alert
metadata_piece	torrent/src/ut_metadata.cpp	/^			metadata_piece(): num_requests(0), last_request(min_time()) {}$/;"	f	struct:libtorrent::__anon72::final::metadata_piece
metadata_piece	torrent/src/ut_metadata.cpp	/^		metadata_piece = 1,$/;"	e	enum:libtorrent::__anon72::__anon73	file:
metadata_piece	torrent/src/ut_metadata.cpp	/^		struct metadata_piece$/;"	s	struct:libtorrent::__anon72::final	file:
metadata_received_alert	torrent/src/alert.cpp	/^	metadata_received_alert::metadata_received_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::metadata_received_alert
metadata_req	torrent/src/ut_metadata.cpp	/^		metadata_req = 0,$/;"	e	enum:libtorrent::__anon72::__anon73	file:
metadata_request	torrent/src/ut_metadata.cpp	/^	int ut_metadata_plugin::metadata_request(bool const has_metadata)$/;"	f	class:libtorrent::__anon72::ut_metadata_plugin
metadata_size	torrent/include/libtorrent/torrent_info.hpp	/^		int metadata_size() const { return m_info_section_size; }$/;"	f	class:libtorrent::torrent_info
metadata_size	torrent/src/ut_metadata.cpp	/^		void metadata_size(int const size)$/;"	f	struct:libtorrent::__anon72::final
metadata_too_big	torrent/include/libtorrent/close_reason.hpp	/^		metadata_too_big,$/;"	m	class:libtorrent::close_reason_t
metadata_too_large	torrent/include/libtorrent/error_code.hpp	/^			metadata_too_large,$/;"	e	enum:libtorrent::errors::error_code_enum
method	torrent/include/libtorrent/http_parser.hpp	/^		std::string const& method() const { return m_method; }$/;"	f	class:libtorrent::http_parser::std
metric_type_t	torrent/include/libtorrent/session_stats.hpp	/^	enum class metric_type_t$/;"	c	namespace:libtorrent
mexp_close	virt-p2v/miniexpect/miniexpect.c	/^mexp_close (mexp_h *h)$/;"	f
mexp_expect	virt-p2v/miniexpect/miniexpect.c	/^mexp_expect (mexp_h *h, const mexp_regexp *regexps, int *ovector, int ovecsize)$/;"	f
mexp_get_debug_file	virt-p2v/include/miniexpect.h	68;"	d
mexp_get_debug_file	virt-p2v/miniexpect/miniexpect.h	68;"	d
mexp_get_fd	virt-p2v/include/miniexpect.h	56;"	d
mexp_get_fd	virt-p2v/miniexpect/miniexpect.h	56;"	d
mexp_get_pcre_error	virt-p2v/include/miniexpect.h	66;"	d
mexp_get_pcre_error	virt-p2v/miniexpect/miniexpect.h	66;"	d
mexp_get_pid	virt-p2v/include/miniexpect.h	57;"	d
mexp_get_pid	virt-p2v/miniexpect/miniexpect.h	57;"	d
mexp_get_read_size	virt-p2v/include/miniexpect.h	64;"	d
mexp_get_read_size	virt-p2v/miniexpect/miniexpect.h	64;"	d
mexp_get_timeout_ms	virt-p2v/include/miniexpect.h	58;"	d
mexp_get_timeout_ms	virt-p2v/miniexpect/miniexpect.h	58;"	d
mexp_h	virt-p2v/include/miniexpect.h	/^struct mexp_h {$/;"	s
mexp_h	virt-p2v/include/miniexpect.h	/^typedef struct mexp_h mexp_h;$/;"	t	typeref:struct:mexp_h
mexp_h	virt-p2v/miniexpect/miniexpect.h	/^struct mexp_h {$/;"	s
mexp_h	virt-p2v/miniexpect/miniexpect.h	/^typedef struct mexp_h mexp_h;$/;"	t	typeref:struct:mexp_h
mexp_printf	virt-p2v/miniexpect/miniexpect.c	/^mexp_printf (mexp_h *h, const char *fs, ...)$/;"	f
mexp_printf_password	virt-p2v/miniexpect/miniexpect.c	/^mexp_printf_password (mexp_h *h, const char *fs, ...)$/;"	f
mexp_regexp	virt-p2v/include/miniexpect.h	/^struct mexp_regexp {$/;"	s
mexp_regexp	virt-p2v/include/miniexpect.h	/^typedef struct mexp_regexp mexp_regexp;$/;"	t	typeref:struct:mexp_regexp
mexp_regexp	virt-p2v/miniexpect/miniexpect.h	/^struct mexp_regexp {$/;"	s
mexp_regexp	virt-p2v/miniexpect/miniexpect.h	/^typedef struct mexp_regexp mexp_regexp;$/;"	t	typeref:struct:mexp_regexp
mexp_send_interrupt	virt-p2v/miniexpect/miniexpect.c	/^mexp_send_interrupt (mexp_h *h)$/;"	f
mexp_set_debug_file	virt-p2v/include/miniexpect.h	67;"	d
mexp_set_debug_file	virt-p2v/miniexpect/miniexpect.h	67;"	d
mexp_set_read_size	virt-p2v/include/miniexpect.h	65;"	d
mexp_set_read_size	virt-p2v/miniexpect/miniexpect.h	65;"	d
mexp_set_timeout	virt-p2v/include/miniexpect.h	63;"	d
mexp_set_timeout	virt-p2v/miniexpect/miniexpect.h	63;"	d
mexp_set_timeout_ms	virt-p2v/include/miniexpect.h	59;"	d
mexp_set_timeout_ms	virt-p2v/miniexpect/miniexpect.h	59;"	d
mexp_spawnl	virt-p2v/include/miniexpect.h	74;"	d
mexp_spawnl	virt-p2v/miniexpect/miniexpect.h	74;"	d
mexp_spawnlf	virt-p2v/miniexpect/miniexpect.c	/^mexp_spawnlf (unsigned flags, const char *file, const char *arg, ...)$/;"	f
mexp_spawnv	virt-p2v/include/miniexpect.h	73;"	d
mexp_spawnv	virt-p2v/miniexpect/miniexpect.h	73;"	d
mexp_spawnvf	virt-p2v/miniexpect/miniexpect.c	/^mexp_spawnvf (unsigned flags, const char *file, char **argv)$/;"	f
mexp_status	virt-p2v/include/miniexpect.h	/^enum mexp_status {$/;"	g
mexp_status	virt-p2v/miniexpect/miniexpect.h	/^enum mexp_status {$/;"	g
mexp_vprintf	virt-p2v/miniexpect/miniexpect.c	/^mexp_vprintf (mexp_h *h, int password, const char *fs, va_list args)$/;"	f	file:
min	torrent/include/libtorrent/units.hpp	/^		static constexpr type (min)()$/;"	f	class:std::numeric_limits
min_announce	torrent/include/libtorrent/announce_entry.hpp	/^		time_point32 min_announce = (time_point32::min)();$/;"	m	struct:libtorrent::announce_endpoint
min_announce_interval	torrent/include/libtorrent/settings_pack.hpp	/^			min_announce_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
min_distance_exp	torrent/kademlia/node_id.cpp	/^int min_distance_exp(node_id const& n1, std::vector<node_id> const& ids)$/;"	f	namespace:libtorrent::dht
min_interval	torrent/include/libtorrent/tracker_manager.hpp	/^		seconds32 min_interval;$/;"	m	struct:libtorrent::tracker_response
min_memory_usage	torrent/include/libtorrent/session.hpp	/^	inline void min_memory_usage(settings_pack& set)$/;"	f	namespace:libtorrent
min_memory_usage	torrent/src/session.cpp	/^	settings_pack min_memory_usage()$/;"	f	namespace:libtorrent
min_reconnect_time	torrent/include/libtorrent/peer_list.hpp	/^		int min_reconnect_time = 60;$/;"	m	struct:libtorrent::torrent_state
min_reconnect_time	torrent/include/libtorrent/settings_pack.hpp	/^			min_reconnect_time,$/;"	e	enum:libtorrent::settings_pack::int_types
min_request_queue	torrent/src/peer_connection.cpp	/^	constexpr int min_request_queue = 2;$/;"	m	namespace:libtorrent::__anon83	file:
min_time	torrent/include/libtorrent/time.hpp	/^	inline time_point min_time() { return (time_point::min)(); }$/;"	f	namespace:libtorrent
min_timeout	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int min_timeout() const { return m_sett.get_int(settings_pack::utp_min_timeout); }$/;"	f	struct:libtorrent::utp_socket_manager
mini_disk	include/device.h	/^    disk_param *mini_disk;$/;"	m	struct:device_info
minimum	qt_pro/QRoundProgressBar.h	/^    double minimum() const { return m_min; }$/;"	f	class:QRoundProgressBar
minimumSizeHint	qt_pro/QRoundProgressBar.h	/^    virtual QSize minimumSizeHint() const { return QSize(32,32); }$/;"	f	class:QRoundProgressBar
minor	include/device.h	/^    int minor;$/;"	m	struct:_PedDevice
minor_ver	include/config.h	/^    int minor_ver;$/;"	m	struct:config
minor_ver	qt_pro/external.h	/^    int minor_ver;$/;"	m	struct:config
minor_version	torrent/include/libtorrent/fingerprint.hpp	/^		int minor_version;$/;"	m	struct:libtorrent::fingerprint
minus_one	torrent/include/libtorrent/ip_filter.hpp	/^	Addr minus_one(Addr const& a)$/;"	f	namespace:libtorrent::detail
minus_one	torrent/include/libtorrent/ip_filter.hpp	/^	inline std::uint16_t minus_one(std::uint16_t val) { return val - 1; }$/;"	f	namespace:libtorrent::detail
mismatching_file_size	torrent/include/libtorrent/error_code.hpp	/^			mismatching_file_size,$/;"	e	enum:libtorrent::errors::error_code_enum
mismatching_file_timestamp	torrent/include/libtorrent/error_code.hpp	/^			mismatching_file_timestamp,$/;"	e	enum:libtorrent::errors::error_code_enum
mismatching_info_hash	torrent/include/libtorrent/error_code.hpp	/^			mismatching_info_hash,$/;"	e	enum:libtorrent::errors::error_code_enum
mismatching_number_of_files	torrent/include/libtorrent/error_code.hpp	/^			mismatching_number_of_files,$/;"	e	enum:libtorrent::errors::error_code_enum
missed_connection_attempts	torrent/include/libtorrent/performance_counters.hpp	/^			missed_connection_attempts,$/;"	e	enum:libtorrent::counters::stats_counter_t
missing_file_sizes	torrent/include/libtorrent/error_code.hpp	/^			missing_file_sizes = 130,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_info_hash	torrent/include/libtorrent/error_code.hpp	/^			missing_info_hash,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_info_hash_in_uri	torrent/include/libtorrent/error_code.hpp	/^			missing_info_hash_in_uri,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_location	torrent/include/libtorrent/error_code.hpp	/^			missing_location,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_pieces	torrent/include/libtorrent/error_code.hpp	/^			missing_pieces,$/;"	e	enum:libtorrent::errors::error_code_enum
missing_slots	torrent/include/libtorrent/error_code.hpp	/^			missing_slots,$/;"	e	enum:libtorrent::errors::error_code_enum
mixed_mode_algorithm	torrent/include/libtorrent/settings_pack.hpp	/^			mixed_mode_algorithm,$/;"	e	enum:libtorrent::settings_pack::int_types
mkdir	torrent/include/libtorrent/operations.hpp	/^		mkdir,$/;"	m	class:libtorrent::operation_t
mkdir_p	torrent/include/libtorrent/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdtemp	virt-p2v/include/gnulib/stdlib.h	855;"	d
mkinstalldirs	torrent/include/libtorrent/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkostemp	virt-p2v/include/gnulib/stdlib.h	882;"	d
mkostemps	virt-p2v/include/gnulib/stdlib.h	912;"	d
mkstemp	virt-p2v/include/gnulib/stdlib.h	943;"	d
mkstemps	virt-p2v/include/gnulib/stdlib.h	968;"	d
mmap_cache	torrent/include/libtorrent/settings_pack.hpp	/^			mmap_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::string_types
mmap_cache_alert	torrent/src/alert.cpp	/^	mmap_cache_alert::mmap_cache_alert(aux::stack_allocator&$/;"	f	class:libtorrent::mmap_cache_alert
mmx_support	torrent/src/cpuid.cpp	/^	bool const mmx_support = supports_mmx();$/;"	m	namespace:libtorrent::aux	file:
mode	torrent/include/libtorrent/aux_/path.hpp	/^		int mode = 0;$/;"	m	struct:libtorrent::file_status
model	include/device.h	/^    char *model;                \/\/brief description of hardware$/;"	m	struct:_PedDevice
model	torrent/include/libtorrent/upnp.hpp	/^	std::string model;$/;"	m	struct:libtorrent::parse_state
model	virt-p2v/include/p2v-config.h	/^  char *model;$/;"	m	struct:cpu_config
modes_t	torrent/include/libtorrent/aux_/path.hpp	/^		} modes_t;$/;"	m	struct:libtorrent::file_status	typeref:enum:libtorrent::file_status::__anon31
modification_time	torrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t modification_time = 2_bit;$/;"	m	struct:libtorrent::create_torrent
modification_time	torrent/src/create_torrent.cpp	/^	constexpr create_flags_t create_torrent::modification_time;$/;"	m	class:libtorrent::create_torrent	file:
module_t	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^		enum module_t$/;"	g	struct:libtorrent::dht::dht_logger
monitor_dir	torrent/bak/client_test.cpp	/^std::string monitor_dir;$/;"	v
month_tab	src/tools.c	/^const char month_tab[48] =$/;"	v
mostly_verified_nodes	torrent/kademlia/routing_table.cpp	/^bool mostly_verified_nodes(bucket_t const& b)$/;"	f	namespace:libtorrent::dht
mount_boot	src/device.c	/^int mount_boot()$/;"	f
mount_sh	src/shell.c	/^char mount_sh[] = {"#!\/bin\/sh \\n"$/;"	v
move	torrent/bak/udp_tracker.cpp	/^	void move(int ilen)\/\/å½åæéååç§»å¨ilen$/;"	f	class:CDataStream
move	torrent/include/libtorrent/heterogeneous_queue.hpp	/^			void (*move)(char* dst, char* src);$/;"	m	struct:libtorrent::heterogeneous_queue::header_t
move_file	torrent/src/path.cpp	/^	void move_file(std::string const& inf, std::string const& newf, error_code& ec)$/;"	f	namespace:libtorrent
move_flags	torrent/include/libtorrent/disk_io_job.hpp	/^		move_flags_t move_flags = move_flags_t::always_replace_files;$/;"	m	struct:libtorrent::disk_io_job
move_flags_t	torrent/include/libtorrent/storage_defs.hpp	/^	enum class move_flags_t : std::uint8_t$/;"	c	namespace:libtorrent
move_holder	torrent/include/libtorrent/chained_buffer.hpp	/^			move_construct_holder_fun move_holder;$/;"	m	struct:libtorrent::chained_buffer
move_partfile	torrent/src/part_file.cpp	/^	void part_file::move_partfile(std::string const& path, error_code& ec)$/;"	f	class:libtorrent::part_file
move_storage	torrent/include/libtorrent/disk_io_job.hpp	/^		, move_storage$/;"	m	class:libtorrent::job_action_t
move_storage	torrent/src/storage.cpp	/^	status_t default_storage::move_storage(std::string const& sp$/;"	f	class:libtorrent::default_storage
move_storage	torrent/src/storage_utils.cpp	/^	std::pair<status_t, std::string> move_storage(file_storage const& f$/;"	f	namespace:libtorrent::aux
move_storage	torrent/src/torrent.cpp	/^	void torrent::move_storage(std::string const& save_path, move_flags_t const flags)$/;"	f	class:libtorrent::torrent
move_storage	torrent/src/torrent_handle.cpp	/^	void torrent_handle::move_storage($/;"	f	class:libtorrent::torrent_handle
move_storage	torrent/src/torrent_handle.cpp	/^	void torrent_handle::move_storage(std::string const& save_path, move_flags_t flags) const$/;"	f	class:libtorrent::torrent_handle
move_to_ghost	torrent/src/block_cache.cpp	/^void block_cache::move_to_ghost(cached_piece_entry* pe)$/;"	f	class:libtorrent::block_cache
moved_permanently	torrent/include/libtorrent/error_code.hpp	/^			moved_permanently = 301,$/;"	e	enum:libtorrent::errors::http_errors
moved_temporarily	torrent/include/libtorrent/error_code.hpp	/^			moved_temporarily = 302,$/;"	e	enum:libtorrent::errors::http_errors
moving_storage	torrent/include/libtorrent/torrent_status.hpp	/^		bool moving_storage = false;$/;"	m	struct:libtorrent::torrent_status
msg	torrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER msg;$/;"	m	struct:libtorrent::final
msg	torrent/include/libtorrent/kademlia/msg.hpp	/^	msg(bdecode_node const& m, udp::endpoint const& ep): message(m), addr(ep) {}$/;"	f	struct:libtorrent::dht::msg
msg	torrent/include/libtorrent/kademlia/msg.hpp	/^struct msg$/;"	s	namespace:libtorrent::dht
msg	torrent/src/alert.cpp	/^	char const* log_alert::msg() const$/;"	f	class:libtorrent::log_alert
msg	torrent/src/alert.cpp	/^	char const* peer_log_alert::msg() const$/;"	f	class:libtorrent::peer_log_alert
msg	torrent/src/alert.cpp	/^	char const* torrent_log_alert::msg() const$/;"	f	class:libtorrent::torrent_log_alert
msg	torrent/src/upnp.cpp	/^		char const* msg;$/;"	m	struct:libtorrent::__anon124::error_code_t	file:
msg_allowed_fast	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_allowed_fast,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_bitfield	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_bitfield,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_cancel	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_cancel,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_choke	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_choke = 0,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_dht_port	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_dht_port,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_extended	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_extended = 20,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_have	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_have,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_have_all	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_have_all,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_have_none	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_have_none,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_interested	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_interested,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_not_interested	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_not_interested,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_out	qt_pro/external.cpp	/^void msg_out(QtMsgType type, const char *msg)$/;"	f
msg_piece	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_piece,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_reject_request	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_reject_request,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_request	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_request,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_suggest_piece	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_suggest_piece = 0xd,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
msg_unchoke	torrent/include/libtorrent/bt_peer_connection.hpp	/^			msg_unchoke,$/;"	e	enum:libtorrent::bt_peer_connection::message_type
mstime	src/tools.c	/^long long mstime(void)$/;"	f
mtime	torrent/include/libtorrent/aux_/path.hpp	/^		std::uint64_t mtime = 0;$/;"	m	struct:libtorrent::file_status
mtime	torrent/include/libtorrent/file_storage.hpp	/^		std::time_t mtime;$/;"	m	struct:libtorrent::file_entry
mtime	torrent/src/file_storage.cpp	/^	std::time_t file_storage::mtime(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
mtime	torrent/src/file_storage.cpp	/^	std::time_t file_storage::mtime(internal_file_entry const& fe) const$/;"	f	class:libtorrent::file_storage
mtu	torrent/include/libtorrent/enum_net.hpp	/^		int mtu = 0;$/;"	m	struct:libtorrent::ip_route
mtu_ceiling_size	torrent/include/libtorrent/packet_pool.hpp	/^		static constexpr int mtu_ceiling_size = TORRENT_ETHERNET_MTU - TORRENT_IPV4_HEADER - TORRENT_UDP_HEADER;$/;"	m	struct:libtorrent::packet_pool
mtu_floor_size	torrent/include/libtorrent/packet_pool.hpp	/^		static constexpr int mtu_floor_size = TORRENT_INET_MIN_MTU - TORRENT_IPV4_HEADER - TORRENT_UDP_HEADER;$/;"	m	struct:libtorrent::packet_pool
mtu_for_dest	torrent/src/utp_socket_manager.cpp	/^	std::pair<int, int> utp_socket_manager::mtu_for_dest(address const& addr)$/;"	f	class:libtorrent::utp_socket_manager
mtu_probe	torrent/include/libtorrent/packet_pool.hpp	/^		bool mtu_probe:1;$/;"	m	struct:libtorrent::packet
multiple_choices	torrent/include/libtorrent/error_code.hpp	/^			multiple_choices = 300,$/;"	e	enum:libtorrent::errors::http_errors
multiprecision	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^   namespace multiprecision {$/;"	n	namespace:boost
mut	torrent/include/libtorrent/aux_/session_impl.hpp	/^			mutable std::mutex mut;$/;"	m	struct:libtorrent::aux::final
mutable_blocks_for_piece	torrent/src/piece_picker.cpp	/^	span<piece_picker::block_info> piece_picker::mutable_blocks_for_piece($/;"	f	class:libtorrent::piece_picker
mutable_buffer	torrent/include/libtorrent/receive_buffer.hpp	/^	span<char> mutable_buffer() { return m_connection_buffer.mutable_buffer(); }$/;"	f	struct:libtorrent::crypto_receive_buffer
mutable_buffer	torrent/src/receive_buffer.cpp	/^span<char> crypto_receive_buffer::mutable_buffer($/;"	f	class:libtorrent::crypto_receive_buffer
mutable_buffer	torrent/src/receive_buffer.cpp	/^span<char> receive_buffer::mutable_buffer()$/;"	f	class:libtorrent::receive_buffer
mutable_buffer	torrent/src/receive_buffer.cpp	/^span<char> receive_buffer::mutable_buffer(int const bytes)$/;"	f	class:libtorrent::receive_buffer
mutable_data	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^		std::int32_t mutable_data = 0;$/;"	m	struct:libtorrent::dht::dht_storage_counters
mutable_torrent_support	torrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t mutable_torrent_support = 4_bit;$/;"	m	struct:libtorrent::create_torrent
mutable_torrent_support	torrent/src/create_torrent.cpp	/^	constexpr create_flags_t create_torrent::mutable_torrent_support;$/;"	m	class:libtorrent::create_torrent	file:
name	include/config.h	/^    char name[32];$/;"	m	struct:netcard_param
name	include/config.h	/^    unsigned char name[128];$/;"	m	struct:terminal_info
name	include/device.h	/^    unsigned char name[16];$/;"	m	struct:disk_param
name	include/gpt.h	/^    CHAR16  name[36];$/;"	m	struct:__anon7
name	include/gpt.h	/^    CHARN   *name;$/;"	m	struct:__anon5
name	include/gpt.h	/^    CHARN   *name;$/;"	m	struct:__anon8
name	qt_pro/external.h	/^    char name[32];$/;"	m	struct:netcard_param
name	qt_pro/external.h	/^    unsigned char name[128];$/;"	m	struct:terminal_info
name	qt_pro/global.h	/^    char name[24];$/;"	m	struct:hwinfo
name	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::string name;$/;"	m	struct:libtorrent::add_torrent_params
name	torrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER name;$/;"	m	struct:libtorrent::final
name	torrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER name;$/;"	m	struct:libtorrent::torrent_alert
name	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^		int name(Protocol const&) const { return SO_BINDTODEVICE; }$/;"	f	struct:libtorrent::aux::bind_to_device
name	torrent/include/libtorrent/aux_/keepalive.hpp	/^		int name(Protocol const&) const { return TCP_KEEPIDLE; }$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
name	torrent/include/libtorrent/aux_/keepalive.hpp	/^		int name(Protocol const&) const { return TCP_KEEPINTVL; }$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
name	torrent/include/libtorrent/file_storage.hpp	/^		char const* name;$/;"	m	struct:libtorrent::internal_file_entry
name	torrent/include/libtorrent/file_storage.hpp	/^		std::string const& name() const { return m_name; }$/;"	f	class:libtorrent::file_storage::std
name	torrent/include/libtorrent/fingerprint.hpp	/^		char name[2];$/;"	m	struct:libtorrent::fingerprint
name	torrent/include/libtorrent/kademlia/msg.hpp	/^	char const* name;$/;"	m	struct:libtorrent::dht::key_desc_t
name	torrent/include/libtorrent/lazy_entry.hpp	/^		char const* name = nullptr;$/;"	m	struct:libtorrent::lazy_dict_entry
name	torrent/include/libtorrent/session_stats.hpp	/^		char const* name;$/;"	m	struct:libtorrent::stats_metric
name	torrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return IPV6_PROTECTION_LEVEL; }$/;"	f	struct:libtorrent::v6_protection_level
name	torrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return IPV6_TCLASS; }$/;"	f	struct:libtorrent::traffic_class
name	torrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return IP_MTU_DISCOVER; }$/;"	f	struct:libtorrent::dont_fragment
name	torrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return IP_TOS; }$/;"	f	struct:libtorrent::type_of_service
name	torrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return NETLINK_NO_ENOBUFS; }$/;"	f	struct:libtorrent::no_enobufs
name	torrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return SO_EXCLUSIVEADDRUSE; }$/;"	f	struct:libtorrent::exclusive_address_use
name	torrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const { return TCP_NOTSENT_LOWAT; }$/;"	f	struct:libtorrent::tcp_notsent_lowat
name	torrent/include/libtorrent/socket.hpp	/^		int name(Protocol const&) const$/;"	f	struct:libtorrent::dont_fragment
name	torrent/include/libtorrent/torrent_info.hpp	/^		const std::string& name() const { return m_files.name(); }$/;"	f	class:libtorrent::torrent_info
name	torrent/include/libtorrent/torrent_status.hpp	/^		std::string name;$/;"	m	struct:libtorrent::torrent_status
name	torrent/kademlia/dht_storage.cpp	/^		std::string name;$/;"	m	struct:libtorrent::dht::__anon153::torrent_entry	file:
name	torrent/kademlia/find_data.cpp	/^char const* find_data::name() const { return "find_data"; }$/;"	f	class:libtorrent::dht::find_data
name	torrent/kademlia/get_item.cpp	/^char const* get_item::name() const { return "get"; }$/;"	f	class:libtorrent::dht::get_item
name	torrent/kademlia/get_peers.cpp	/^char const* get_peers::name() const { return "get_peers"; }$/;"	f	class:libtorrent::dht::get_peers
name	torrent/kademlia/get_peers.cpp	/^char const* obfuscated_get_peers::name() const$/;"	f	class:libtorrent::dht::obfuscated_get_peers
name	torrent/kademlia/put_data.cpp	/^char const* put_data::name() const { return "put_data"; }$/;"	f	class:libtorrent::dht::put_data
name	torrent/kademlia/refresh.cpp	/^char const* bootstrap::name() const { return "bootstrap"; }$/;"	f	class:libtorrent::dht::bootstrap
name	torrent/kademlia/sample_infohashes.cpp	/^char const* sample_infohashes::name() const { return "sample_infohashes"; }$/;"	f	class:libtorrent::dht::sample_infohashes
name	torrent/kademlia/traversal_algorithm.cpp	/^char const* traversal_algorithm::name() const$/;"	f	class:libtorrent::dht::traversal_algorithm
name	torrent/src/identify_client.cpp	/^		char const* name;$/;"	m	struct:__anon59::generic_map_entry	file:
name	torrent/src/identify_client.cpp	/^		char const* name;$/;"	m	struct:__anon59::map_entry	file:
name	torrent/src/session_stats.cpp	/^		char const* name;$/;"	m	struct:libtorrent::__anon117::stats_metric_impl	file:
name	torrent/src/settings_pack.cpp	/^		char const* name;$/;"	m	struct:libtorrent::bool_setting_entry_t	file:
name	torrent/src/settings_pack.cpp	/^		char const* name;$/;"	m	struct:libtorrent::int_setting_entry_t	file:
name	torrent/src/settings_pack.cpp	/^		char const* name;$/;"	m	struct:libtorrent::str_setting_entry_t	file:
name	torrent/src/torrent.cpp	/^	std::string torrent::name() const$/;"	f	class:libtorrent::torrent
name	torrent/src/torrent_handle.cpp	/^	std::string torrent_handle::name() const$/;"	f	class:libtorrent::torrent_handle
name_entry	torrent/src/torrent_info.cpp	/^	struct name_entry$/;"	s	namespace:libtorrent::__anon88	file:
name_for_setting	torrent/src/settings_pack.cpp	/^	char const* name_for_setting(int s)$/;"	f	namespace:libtorrent
name_is_owned	torrent/include/libtorrent/file_storage.hpp	/^			name_is_owned = (1 << 12) - 1,$/;"	e	enum:libtorrent::internal_file_entry::__anon14
name_len	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t name_len:12;$/;"	m	struct:libtorrent::internal_file_entry
name_lookup	torrent/include/libtorrent/i2p_stream.hpp	/^	std::string name_lookup() const { return m_name_lookup; }$/;"	f	class:libtorrent::i2p_stream
name_lookup	torrent/src/http_stream.cpp	/^	void http_stream::name_lookup(error_code const& e, tcp::resolver::iterator i$/;"	f	class:libtorrent::http_stream
name_lookup	torrent/src/socks5_stream.cpp	/^	void socks5_stream::name_lookup(error_code const& e, tcp::resolver::iterator i$/;"	f	class:libtorrent::socks5_stream
name_lookup	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::name_lookup(error_code const& error$/;"	f	class:libtorrent::udp_tracker_connection
name_map	torrent/src/identify_client.cpp	/^	const map_entry name_map[] =$/;"	m	namespace:__anon59	file:
nat_type_str	torrent/src/alert.cpp	/^	char const* const nat_type_str[] = {"NAT-PMP", "UPnP"};$/;"	m	namespace:libtorrent::__anon98	file:
native_address	torrent/include/libtorrent/kademlia/node.hpp	/^	bool native_address(address const& addr) const$/;"	f	class:libtorrent::dht::node
native_address	torrent/include/libtorrent/kademlia/node.hpp	/^	bool native_address(tcp::endpoint const& ep) const$/;"	f	class:libtorrent::dht::node
native_address	torrent/include/libtorrent/kademlia/node.hpp	/^	bool native_address(udp::endpoint const& ep) const$/;"	f	class:libtorrent::dht::node
native_address	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	bool native_address(address const& addr) const$/;"	f	class:libtorrent::dht::routing_table
native_endpoint	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	bool native_endpoint(udp::endpoint const& ep) const$/;"	f	class:libtorrent::dht::routing_table
native_handle	torrent/include/libtorrent/file.hpp	/^		handle_type native_handle() const { return m_file_handle; }$/;"	f	struct:libtorrent::file
native_handle	torrent/include/libtorrent/peer_connection_handle.hpp	/^	std::shared_ptr<peer_connection> native_handle() const$/;"	f	struct:libtorrent::peer_connection_handle
native_handle	torrent/include/libtorrent/session_handle.hpp	/^		std::shared_ptr<aux::session_impl> native_handle() const$/;"	f	struct:libtorrent::session_handle
native_handle	torrent/include/libtorrent/ssl_stream.hpp	/^	SSL* native_handle() { return m_sock.native_handle(); }$/;"	f	class:libtorrent::ssl_stream
native_handle	torrent/src/peer_connection_handle.cpp	/^std::shared_ptr<bt_peer_connection> bt_peer_connection_handle::native_handle() const$/;"	f	class:libtorrent::bt_peer_connection_handle
native_handle	torrent/src/torrent_handle.cpp	/^	std::shared_ptr<torrent> torrent_handle::native_handle() const$/;"	f	class:libtorrent::torrent_handle
natpmp	torrent/include/libtorrent/natpmp.hpp	/^struct TORRENT_EXTRA_EXPORT natpmp$/;"	s	namespace:libtorrent
natpmp	torrent/include/libtorrent/portmap.hpp	/^		natpmp, upnp$/;"	m	class:libtorrent::portmap_transport
natpmp	torrent/src/natpmp.cpp	/^natpmp::natpmp(io_service& ios$/;"	f	class:libtorrent::natpmp
natpmp_mapper	torrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<natpmp> natpmp_mapper;$/;"	m	struct:libtorrent::aux::listen_socket_t
natpmp_not_authorized	torrent/include/libtorrent/error_code.hpp	/^			natpmp_not_authorized TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
nb_snapshots	include/qcow2.h	/^    uint32_t nb_snapshots;$/;"	m	struct:_QCowHeader
nb_snapshots	test/check.c	/^    uint32_t nb_snapshots;$/;"	m	struct:_QCowHeader	file:
nbd_error	virt-p2v/src/nbd.c	/^static char *nbd_error;$/;"	v	file:
nbd_local_port	virt-p2v/src/nbd.c	/^static int nbd_local_port;$/;"	v	file:
nbd_pid	virt-p2v/include/p2v.h	/^  pid_t nbd_pid;            \/* NBD server PID *\/$/;"	m	struct:data_conn
nbd_remote_port	virt-p2v/include/p2v.h	/^  int nbd_remote_port;      \/* remote NBD port on conversion server *\/$/;"	m	struct:data_conn
nbd_server	virt-p2v/src/nbd.c	/^enum nbd_server {$/;"	g	file:
nbd_server_string	virt-p2v/src/nbd.c	/^nbd_server_string (enum nbd_server s)$/;"	f	file:
need_bucket_split	torrent/include/libtorrent/kademlia/routing_table.hpp	/^		need_bucket_split$/;"	e	enum:libtorrent::dht::routing_table::add_node_status_t
need_encoding	torrent/src/escape_string.cpp	/^	bool need_encoding(char const* str, int const len)$/;"	f	namespace:libtorrent
need_full_check	torrent/include/libtorrent/storage_defs.hpp	/^		need_full_check,$/;"	m	class:libtorrent::status_t
need_partfile	torrent/src/storage.cpp	/^	void default_storage::need_partfile()$/;"	f	class:libtorrent::default_storage
need_peer_list	torrent/src/torrent.cpp	/^	void torrent::need_peer_list()$/;"	f	class:libtorrent::torrent
need_picker	torrent/src/torrent.cpp	/^	void torrent::need_picker()$/;"	f	class:libtorrent::torrent
need_queueing	torrent/include/libtorrent/bandwidth_limit.hpp	/^	bool need_queueing(int amount)$/;"	f	struct:libtorrent::bandwidth_channel
need_readback	torrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t need_readback:1;$/;"	m	struct:libtorrent::cached_piece_entry
need_readback	torrent/include/libtorrent/disk_io_thread.hpp	/^		bool need_readback;$/;"	m	struct:libtorrent::cached_piece_info
need_resend	torrent/include/libtorrent/packet_pool.hpp	/^		bool need_resend:1;$/;"	m	struct:libtorrent::packet
need_save_resume	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t need_save_resume = 13_bit;$/;"	m	namespace:libtorrent::torrent_flags
need_save_resume	torrent/include/libtorrent/torrent_status.hpp	/^		bool need_save_resume = false;$/;"	m	struct:libtorrent::torrent_status
need_save_resume_data	torrent/include/libtorrent/torrent.hpp	/^		bool need_save_resume_data() const { return m_need_save_resume_data; }$/;"	f	class:libtorrent::torrent
need_save_resume_data	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::need_save_resume_data() const$/;"	f	class:libtorrent::torrent_handle
negative	torrent/ed25519/ge.cpp	/^static unsigned char negative(signed char b) {$/;"	f	file:
net	include/device.h	/^    netcard_param *net;$/;"	m	struct:device_info
netWidget	qt_pro/ui_downloadwindow.h	/^    QWidget *netWidget;$/;"	m	class:Ui_DownloadWindow
net_state	qt_pro/global.h	/^    NET_STATE net_state;$/;"	m	class:Global
netcard	include/config.h	/^    char netcard[128];$/;"	m	struct:terminal_info
netcard	include/config.h	/^    netcard_param netcard;$/;"	m	struct:config
netcard	qt_pro/external.h	/^    char netcard[128];$/;"	m	struct:terminal_info
netcard	qt_pro/external.h	/^    netcard_param netcard;$/;"	m	struct:config
netcard	qt_pro/global.h	/^    char netcard[128];$/;"	m	struct:hwinfo
netcard_count	include/device.h	/^    int netcard_count;$/;"	m	struct:device_info
netcard_param	include/config.h	/^struct netcard_param{$/;"	s
netcard_param	include/config.h	/^typedef struct netcard_param netcard_param;$/;"	t	typeref:struct:netcard_param
netcard_param	qt_pro/external.h	/^struct netcard_param{$/;"	s
netcard_param	qt_pro/external.h	/^typedef struct netcard_param netcard_param;$/;"	t	typeref:struct:netcard_param
neticon_label	qt_pro/downloadwindow.h	/^   QLabel *neticon_label;$/;"	m	class:DownloadWindow
neticon_label	qt_pro/mainwindow.h	/^    QLabel *neticon_label;$/;"	m	class:MainWindow
neticon_label	qt_pro/oswindow.h	/^    QLabel *neticon_label;$/;"	m	class:OSWindow
neticon_label	qt_pro/ui_downloadwindow.h	/^    QLabel *neticon_label;$/;"	m	class:Ui_DownloadWindow
neticon_label	qt_pro/uploadwindow.h	/^    QLabel *neticon_label;$/;"	m	class:Uploadwindow
netlink	torrent/include/libtorrent/netlink.hpp	/^		explicit netlink(int nl_family)$/;"	f	class:libtorrent::netlink
netlink	torrent/include/libtorrent/netlink.hpp	/^		netlink() : netlink(NETLINK_ROUTE) {}$/;"	f	class:libtorrent::netlink
netlink	torrent/include/libtorrent/netlink.hpp	/^	class netlink$/;"	c	namespace:libtorrent
netmask	include/StoreConfig.h	/^    uint64_t            netmask;$/;"	m	struct:_YZY_STORE_CONFIG
netmask	include/config.h	/^    char netmask[32];$/;"	m	struct:netcard_param
netmask	qt_pro/external.h	/^    char netmask[32];$/;"	m	struct:netcard_param
netmask	torrent/include/libtorrent/aux_/session_impl.hpp	/^			address netmask;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
netmask	torrent/include/libtorrent/aux_/session_impl.hpp	/^		address netmask;$/;"	m	struct:libtorrent::aux::listen_socket_t
netmask	torrent/include/libtorrent/broadcast_socket.hpp	/^			address_v4 netmask;$/;"	m	struct:libtorrent::broadcast_socket::socket_entry
netmask	torrent/include/libtorrent/enum_net.hpp	/^		address netmask;$/;"	m	struct:libtorrent::ip_interface
netmask	torrent/include/libtorrent/enum_net.hpp	/^		address netmask;$/;"	m	struct:libtorrent::ip_route
netpoint_label	qt_pro/downloadwindow.h	/^   QLabel *netpoint_label;$/;"	m	class:DownloadWindow
netpoint_label	qt_pro/mainwindow.h	/^    QLabel *netpoint_label;$/;"	m	class:MainWindow
netpoint_label	qt_pro/oswindow.h	/^    QLabel *netpoint_label;$/;"	m	class:OSWindow
netpoint_label	qt_pro/ui_downloadwindow.h	/^    QLabel *netpoint_label;$/;"	m	class:Ui_DownloadWindow
netpoint_label	qt_pro/uploadwindow.h	/^    QLabel *netpoint_label;$/;"	m	class:Uploadwindow
netstate_label	qt_pro/downloadwindow.h	/^   QLabel *netstate_label;$/;"	m	class:DownloadWindow
netstate_label	qt_pro/mainwindow.h	/^    QLabel *netstate_label;$/;"	m	class:MainWindow
netstate_label	qt_pro/oswindow.h	/^    QLabel *netstate_label;$/;"	m	class:OSWindow
netstate_label	qt_pro/ui_downloadwindow.h	/^    QLabel *netstate_label;$/;"	m	class:Ui_DownloadWindow
netstate_label	qt_pro/uploadwindow.h	/^    QLabel *netstate_label;$/;"	m	class:Uploadwindow
network_edited_callback	virt-p2v/src/gui.c	/^network_edited_callback (GtkCellRendererToggle *cell, gchar *path_str,$/;"	f	file:
network_failure	torrent/include/libtorrent/error_code.hpp	/^			network_failure TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
network_ip	src/tools.c	/^char network_ip[10][128] = {0};$/;"	v
network_map	virt-p2v/include/p2v-config.h	/^  char **network_map;$/;"	m	struct:config
network_threads	torrent/include/libtorrent/settings_pack.hpp	/^			network_threads TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
network_to_host	torrent/include/libtorrent/aux_/byteswap.hpp	/^inline std::uint16_t network_to_host(std::uint16_t x)$/;"	f	namespace:libtorrent::aux
network_to_host	torrent/include/libtorrent/aux_/byteswap.hpp	/^inline std::uint32_t network_to_host(std::uint32_t x)$/;"	f	namespace:libtorrent::aux
new	torrent/bak/udp_tracker.cpp	75;"	d	file:
new_config	virt-p2v/src/p2v_config.c	/^new_config (void)$/;"	f
new_connection	torrent/include/libtorrent/extensions.hpp	/^		virtual std::shared_ptr<peer_plugin> new_connection(peer_connection_handle const&)$/;"	f	struct:libtorrent::torrent_plugin
new_connection	torrent/src/peer_list.cpp	/^	bool peer_list::new_connection(peer_connection_interface& c, int session_time$/;"	f	class:libtorrent::peer_list
new_connection	torrent/src/ut_metadata.cpp	/^	std::shared_ptr<peer_plugin> ut_metadata_plugin::new_connection($/;"	f	class:libtorrent::__anon72::ut_metadata_plugin
new_connection	torrent/src/ut_pex.cpp	/^	std::shared_ptr<peer_plugin> ut_pex_plugin::new_connection(peer_connection_handle const& pc)$/;"	f	class:libtorrent::__anon35::ut_pex_plugin
new_external_ip	torrent/src/torrent.cpp	/^	void torrent::new_external_ip()$/;"	f	class:libtorrent::torrent
new_name	torrent/src/alert.cpp	/^	char const* file_renamed_alert::new_name() const$/;"	f	class:libtorrent::file_renamed_alert
new_observer	torrent/kademlia/find_data.cpp	/^observer_ptr find_data::new_observer(udp::endpoint const& ep$/;"	f	class:libtorrent::dht::find_data
new_observer	torrent/kademlia/get_item.cpp	/^observer_ptr get_item::new_observer(udp::endpoint const& ep$/;"	f	class:libtorrent::dht::get_item
new_observer	torrent/kademlia/get_peers.cpp	/^observer_ptr get_peers::new_observer(udp::endpoint const& ep$/;"	f	class:libtorrent::dht::get_peers
new_observer	torrent/kademlia/get_peers.cpp	/^observer_ptr obfuscated_get_peers::new_observer(udp::endpoint const& ep$/;"	f	class:libtorrent::dht::obfuscated_get_peers
new_observer	torrent/kademlia/refresh.cpp	/^observer_ptr bootstrap::new_observer(udp::endpoint const& ep$/;"	f	class:libtorrent::dht::bootstrap
new_observer	torrent/kademlia/traversal_algorithm.cpp	/^observer_ptr traversal_algorithm::new_observer(udp::endpoint const& ep$/;"	f	class:libtorrent::dht::traversal_algorithm
new_peer_class	torrent/src/peer_class.cpp	/^	peer_class_t peer_class_pool::new_peer_class(std::string label)$/;"	f	class:libtorrent::peer_class_pool
new_socket	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::new_socket(aux::listen_socket_handle const& s)$/;"	f	class:libtorrent::dht::dht_tracker
new_torrent	torrent/include/libtorrent/extensions.hpp	/^		virtual std::shared_ptr<torrent_plugin> new_torrent(torrent_handle const&, void*)$/;"	f	struct:libtorrent::plugin
new_torrent	torrent/src/disk_io_thread.cpp	/^	storage_holder disk_io_thread::new_torrent(storage_constructor_type sc$/;"	f	class:disk_io_thread
new_utp_socket	torrent/src/utp_socket_manager.cpp	/^	utp_socket_impl* utp_socket_manager::new_utp_socket(utp_stream* str)$/;"	f	class:libtorrent::utp_socket_manager
new_write_key	torrent/kademlia/node.cpp	/^void node::new_write_key()$/;"	f	class:libtorrent::dht::node
newline	src/inirw.c	/^static int newline(char c)$/;"	f	file:
next	cJSON/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
next	include/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
next	include/device.h	/^    PedDevice *next;$/;"	m	struct:_PedDevice
next	torrent/include/libtorrent/linked_list.hpp	/^		T* next;$/;"	m	struct:libtorrent::list_node
next	torrent/include/libtorrent/linked_list.hpp	/^		void next() { m_current = m_current->next; }$/;"	f	struct:libtorrent::list_iterator
next	torrent/include/libtorrent/pe_crypto.hpp	/^			int next;$/;"	m	struct:libtorrent::encryption_handler::barrier
next	torrent/include/libtorrent/tailqueue.hpp	/^		T* next;$/;"	m	struct:libtorrent::tailqueue_node
next	torrent/include/libtorrent/tailqueue.hpp	/^		void next() { m_current = m_current->next; }$/;"	f	struct:libtorrent::tailqueue_iterator
next	torrent/include/libtorrent/units.hpp	/^	strong_typedef<T, Tag> next(strong_typedef<T, Tag> v)$/;"	f	namespace:libtorrent::aux
next	torrent/src/file.cpp	/^	void directory::next(error_code& ec)$/;"	f	class:libtorrent::directory
next	torrent/src/upnp.cpp	/^void upnp::next(rootdevice& d, port_mapping_t const i)$/;"	f	class:libtorrent::upnp
next_announce	torrent/include/libtorrent/announce_entry.hpp	/^		time_point32 next_announce = (time_point32::min)();$/;"	m	struct:libtorrent::announce_endpoint
next_announce	torrent/include/libtorrent/torrent_status.hpp	/^		time_duration next_announce = seconds(0);$/;"	m	struct:libtorrent::torrent_status
next_button	virt-p2v/src/gui.c	/^  *spinner_message, *next_button;$/;"	v	file:
next_layer	torrent/include/libtorrent/proxy_base.hpp	/^	next_layer_type& next_layer()$/;"	f	class:libtorrent::proxy_base
next_layer	torrent/include/libtorrent/ssl_stream.hpp	/^	next_layer_type& next_layer()$/;"	f	class:libtorrent::ssl_stream
next_match	virt-p2v/include/miniexpect.h	/^  ssize_t next_match;$/;"	m	struct:mexp_h
next_match	virt-p2v/miniexpect/miniexpect.h	/^  ssize_t next_match;$/;"	m	struct:mexp_h
next_port	torrent/src/session_impl.cpp	/^	int session_impl::next_port() const$/;"	f	class:libtorrent::aux::session_impl
next_refresh	torrent/kademlia/routing_table.cpp	/^node_entry const* routing_table::next_refresh()$/;"	f	class:libtorrent::dht::routing_table
next_to_hash	torrent/include/libtorrent/disk_io_thread.hpp	/^		int next_to_hash;$/;"	m	struct:libtorrent::cached_piece_info
nid	torrent/include/libtorrent/kademlia/node.hpp	/^	node_id const& nid() const { return m_id; }$/;"	f	class:libtorrent::dht::node
nids	torrent/include/libtorrent/kademlia/dht_state.hpp	/^		node_ids_t nids;$/;"	m	struct:libtorrent::dht::dht_state
nl_dump_request	torrent/src/enum_net.cpp	/^	int nl_dump_request(int sock, std::uint16_t type, std::uint32_t seq, char family, span<char> msg, std::size_t msg_len)$/;"	f	namespace:libtorrent::__anon102
no_access_peers	torrent/include/libtorrent/performance_counters.hpp	/^			no_access_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
no_atime	torrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t no_atime = 3_bit;$/;"	m	namespace:libtorrent::file_open_mode
no_atime	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t no_atime = 3_bit;$/;"	m	namespace:libtorrent::open_mode
no_atime_storage	torrent/include/libtorrent/settings_pack.hpp	/^			no_atime_storage,$/;"	e	enum:libtorrent::settings_pack::bool_types
no_cache	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t no_cache = 5_bit;$/;"	m	namespace:libtorrent::open_mode
no_connect_privileged_ports	torrent/include/libtorrent/settings_pack.hpp	/^			no_connect_privileged_ports,$/;"	e	enum:libtorrent::settings_pack::bool_types
no_content	torrent/include/libtorrent/error_code.hpp	/^			no_content = 204,$/;"	e	enum:libtorrent::errors::http_errors
no_content_length	torrent/include/libtorrent/error_code.hpp	/^			no_content_length,$/;"	e	enum:libtorrent::errors::error_code_enum
no_download	torrent/include/libtorrent/peer_connection.hpp	/^		bool no_download() const { return m_no_download; }$/;"	f	class:libtorrent::peer_connection
no_download	torrent/include/libtorrent/peer_connection.hpp	/^		void no_download(bool b) { m_no_download = b; }$/;"	f	class:libtorrent::peer_connection
no_enobufs	torrent/include/libtorrent/socket.hpp	/^		explicit no_enobufs(bool val) : m_value(val) {}$/;"	f	struct:libtorrent::no_enobufs
no_enobufs	torrent/include/libtorrent/socket.hpp	/^	struct no_enobufs$/;"	s	namespace:libtorrent
no_entropy	torrent/include/libtorrent/error_code.hpp	/^			no_entropy = 200,$/;"	e	enum:libtorrent::errors::error_code_enum
no_error	torrent/include/libtorrent/bdecode.hpp	/^		no_error = 0,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
no_error	torrent/include/libtorrent/bt_peer_connection.hpp	/^			no_error = 0,$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
no_error	torrent/include/libtorrent/error_code.hpp	/^			no_error = 0,$/;"	e	enum:libtorrent::errors::error_code_enum
no_error	torrent/include/libtorrent/gzip.hpp	/^			no_error = 0,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
no_error	torrent/include/libtorrent/i2p_stream.hpp	/^			no_error = 0,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
no_error	torrent/include/libtorrent/socks5_stream.hpp	/^		no_error = 0,$/;"	e	enum:libtorrent::socks_error::socks_error_code
no_error	torrent/include/libtorrent/storage_defs.hpp	/^		no_error,$/;"	m	class:libtorrent::status_t
no_error	torrent/include/libtorrent/upnp.hpp	/^			no_error = 0,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
no_files_in_resume_data	torrent/include/libtorrent/error_code.hpp	/^			no_files_in_resume_data,$/;"	e	enum:libtorrent::errors::error_code_enum
no_files_in_torrent	torrent/include/libtorrent/error_code.hpp	/^			no_files_in_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
no_gauge_state	torrent/include/libtorrent/torrent.hpp	/^		static constexpr int no_gauge_state = 0xf;$/;"	m	class:libtorrent::torrent
no_i2p_endpoint	torrent/include/libtorrent/error_code.hpp	/^			no_i2p_endpoint = 161,$/;"	e	enum:libtorrent::errors::error_code_enum
no_i2p_router	torrent/include/libtorrent/error_code.hpp	/^			no_i2p_router = 160,$/;"	e	enum:libtorrent::errors::error_code_enum
no_identd	torrent/include/libtorrent/socks5_stream.hpp	/^		no_identd,$/;"	e	enum:libtorrent::socks_error::socks_error_code
no_incoming_encrypted	torrent/include/libtorrent/error_code.hpp	/^			no_incoming_encrypted,$/;"	e	enum:libtorrent::errors::error_code_enum
no_incoming_regular	torrent/include/libtorrent/error_code.hpp	/^			no_incoming_regular,$/;"	e	enum:libtorrent::errors::error_code_enum
no_memory	torrent/include/libtorrent/close_reason.hpp	/^		no_memory,$/;"	m	class:libtorrent::close_reason_t
no_memory	torrent/include/libtorrent/error_code.hpp	/^			no_memory,$/;"	e	enum:libtorrent::errors::error_code_enum
no_memory_peers	torrent/include/libtorrent/performance_counters.hpp	/^			no_memory_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
no_metadata	torrent/include/libtorrent/error_code.hpp	/^			no_metadata,$/;"	e	enum:libtorrent::errors::error_code_enum
no_padding	torrent/include/libtorrent/aux_/escape_string.hpp	/^		constexpr encode_string_flags_t no_padding = 1_bit;$/;"	m	namespace:libtorrent::string
no_peer_connection_attempts	torrent/include/libtorrent/performance_counters.hpp	/^			no_peer_connection_attempts,$/;"	e	enum:libtorrent::counters::stats_counter_t
no_plaintext_mode	torrent/include/libtorrent/error_code.hpp	/^			no_plaintext_mode,$/;"	e	enum:libtorrent::errors::error_code_enum
no_rc4_mode	torrent/include/libtorrent/error_code.hpp	/^			no_rc4_mode,$/;"	e	enum:libtorrent::errors::error_code_enum
no_recheck_incomplete_resume	torrent/include/libtorrent/settings_pack.hpp	/^			no_recheck_incomplete_resume,$/;"	e	enum:libtorrent::settings_pack::bool_types
no_resources	torrent/include/libtorrent/error_code.hpp	/^			no_resources TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
no_root_dir	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t no_root_dir:1;$/;"	m	struct:libtorrent::internal_file_entry
no_router	torrent/include/libtorrent/error_code.hpp	/^			no_router,$/;"	e	enum:libtorrent::errors::error_code_enum
no_self	torrent/include/libtorrent/bt_peer_connection.hpp	/^			no_self = 4$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
no_such_peer	torrent/include/libtorrent/bt_peer_connection.hpp	/^			no_such_peer = 1,$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
no_support	torrent/include/libtorrent/bt_peer_connection.hpp	/^			no_support = 3,$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
nobase_include_HEADERS	torrent/include/libtorrent/Makefile	/^nobase_include_HEADERS = \\$/;"	m
node	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^			node,$/;"	e	enum:libtorrent::dht::dht_logger::module_t
node	torrent/include/libtorrent/kademlia/node.hpp	/^class TORRENT_EXTRA_EXPORT node$/;"	c	namespace:libtorrent::dht
node	torrent/kademlia/node.cpp	/^node::node(aux::listen_socket_handle const& sock, socket_manager* sock_man$/;"	f	class:libtorrent::dht::node
node_added	torrent/include/libtorrent/kademlia/routing_table.hpp	/^		node_added,$/;"	e	enum:libtorrent::dht::routing_table::add_node_status_t
node_ban_entry	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^			node_ban_entry(): count(0) {}$/;"	f	struct:libtorrent::dht::dos_blocker::node_ban_entry
node_ban_entry	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		struct node_ban_entry$/;"	s	struct:libtorrent::dht::dos_blocker
node_endpoint	torrent/include/libtorrent/kademlia/io.hpp	/^	struct node_endpoint$/;"	s	namespace:libtorrent::dht
node_entry	torrent/include/libtorrent/kademlia/node_entry.hpp	/^struct TORRENT_EXTRA_EXPORT node_entry$/;"	s	namespace:libtorrent::dht
node_entry	torrent/kademlia/node_entry.cpp	/^	node_entry::node_entry(node_id const& id_, udp::endpoint const& ep$/;"	f	class:libtorrent::dht::node_entry
node_entry	torrent/kademlia/node_entry.cpp	/^	node_entry::node_entry(udp::endpoint const& ep)$/;"	f	class:libtorrent::dht::node_entry
node_failed	torrent/kademlia/routing_table.cpp	/^void routing_table::node_failed(node_id const& nid, udp::endpoint const& ep)$/;"	f	class:libtorrent::dht::routing_table
node_seen	torrent/kademlia/routing_table.cpp	/^bool routing_table::node_seen(node_id const& id, udp::endpoint const& ep, int const rtt)$/;"	f	class:libtorrent::dht::routing_table
nodes	torrent/include/libtorrent/kademlia/dht_state.hpp	/^		std::vector<udp::endpoint> nodes;$/;"	m	struct:libtorrent::dht::dht_state
nodes	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<std::pair<std::string, int>> const& nodes() const$/;"	f	class:libtorrent::torrent_info::std
nodes	torrent/src/alert.cpp	/^	std::vector<std::pair<sha1_hash, udp::endpoint>> dht_live_nodes_alert::nodes() const$/;"	f	class:libtorrent::dht_live_nodes_alert
nodes	torrent/src/alert.cpp	/^	std::vector<std::pair<sha1_hash, udp::endpoint>> dht_sample_infohashes_alert::nodes() const$/;"	f	class:libtorrent::dht_sample_infohashes_alert
nodes6	torrent/include/libtorrent/kademlia/dht_state.hpp	/^		std::vector<udp::endpoint> nodes6;$/;"	m	struct:libtorrent::dht::dht_state
nodes_key	torrent/include/libtorrent/kademlia/node.hpp	/^		char const* nodes_key;$/;"	m	struct:libtorrent::dht::node::protocol_descriptor
noexcept	torrent/include/libtorrent/add_torrent_params.hpp	/^		add_torrent_params(add_torrent_params&&) noexcept;$/;"	m	struct:libtorrent::add_torrent_params
noexcept	torrent/include/libtorrent/alert.hpp	/^		alert(alert&& rhs) noexcept = default;$/;"	m	class:libtorrent::alert
noexcept	torrent/include/libtorrent/alert.hpp	/^		virtual alert_category_t category() const noexcept = 0;$/;"	m	class:libtorrent::alert
noexcept	torrent/include/libtorrent/alert.hpp	/^		virtual char const* what() const noexcept = 0;$/;"	m	class:libtorrent::alert
noexcept	torrent/include/libtorrent/alert.hpp	/^		virtual int type() const noexcept = 0;$/;"	m	class:libtorrent::alert
noexcept	torrent/include/libtorrent/alert_types.hpp	/^		peer_alert(peer_alert&& rhs) noexcept = default;$/;"	m	struct:libtorrent::peer_alert
noexcept	torrent/include/libtorrent/alert_types.hpp	/^		torrent_alert(torrent_alert&&) noexcept = default;$/;"	m	struct:libtorrent::torrent_alert
noexcept	torrent/include/libtorrent/aux_/noexcept_movable.hpp	/^		noexcept_movable(T&& rhs) noexcept : T(std::forward<T>(rhs)) {} \/\/ NOLINT$/;"	m	struct:libtorrent::aux::noexcept_movable
noexcept	torrent/include/libtorrent/aux_/noexcept_movable.hpp	/^		noexcept_movable(noexcept_movable<T>&& rhs) noexcept$/;"	m	struct:libtorrent::aux::noexcept_movable
noexcept	torrent/include/libtorrent/aux_/scope_end.hpp	/^		scope_end_impl& operator=(scope_end_impl&&) noexcept = default;$/;"	m	struct:libtorrent::aux::scope_end_impl
noexcept	torrent/include/libtorrent/aux_/scope_end.hpp	/^		scope_end_impl(scope_end_impl&&) noexcept = default;$/;"	m	struct:libtorrent::aux::scope_end_impl
noexcept	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void abort() noexcept;$/;"	m	struct:libtorrent::aux::final
noexcept	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void abort_stage2() noexcept;$/;"	m	struct:libtorrent::aux::final
noexcept	torrent/include/libtorrent/aux_/session_interface.hpp	/^		virtual void close_connection(peer_connection* p) noexcept = 0;$/;"	m	struct:libtorrent::aux::session_interface
noexcept	torrent/include/libtorrent/aux_/session_interface.hpp	/^		virtual void trigger_optimistic_unchoke() noexcept = 0;$/;"	m	struct:libtorrent::aux::session_interface
noexcept	torrent/include/libtorrent/aux_/session_interface.hpp	/^		virtual void trigger_unchoke() noexcept = 0;$/;"	m	struct:libtorrent::aux::session_interface
noexcept	torrent/include/libtorrent/bdecode.hpp	/^	bdecode_node(bdecode_node&&) noexcept;$/;"	m	struct:bdecode_node
noexcept	torrent/include/libtorrent/bdecode.hpp	/^	explicit operator bool() const noexcept;$/;"	m	struct:bdecode_node
noexcept	torrent/include/libtorrent/bdecode.hpp	/^	span<char const> data_section() const noexcept;$/;"	m	struct:bdecode_node
noexcept	torrent/include/libtorrent/bdecode.hpp	/^	type_t type() const noexcept;$/;"	m	struct:bdecode_node
noexcept	torrent/include/libtorrent/bdecode.hpp	/^	void switch_underlying_buffer(char const* buf) noexcept;$/;"	m	struct:bdecode_node
noexcept	torrent/include/libtorrent/bitfield.hpp	/^		bitfield& operator=(bitfield&& rhs) noexcept = default;$/;"	m	struct:libtorrent::bitfield
noexcept	torrent/include/libtorrent/bitfield.hpp	/^		bitfield() noexcept = default;$/;"	m	struct:libtorrent::bitfield
noexcept	torrent/include/libtorrent/bitfield.hpp	/^		bitfield(bitfield&& rhs) noexcept = default;$/;"	m	struct:libtorrent::bitfield
noexcept	torrent/include/libtorrent/bitfield.hpp	/^		bool all_set() const noexcept;$/;"	m	struct:libtorrent::bitfield
noexcept	torrent/include/libtorrent/bitfield.hpp	/^		int count() const noexcept;$/;"	m	struct:libtorrent::bitfield
noexcept	torrent/include/libtorrent/bitfield.hpp	/^		int find_first_set() const noexcept;$/;"	m	struct:libtorrent::bitfield
noexcept	torrent/include/libtorrent/bitfield.hpp	/^		int find_last_clear() const noexcept;$/;"	m	struct:libtorrent::bitfield
noexcept	torrent/include/libtorrent/bitfield.hpp	/^		typed_bitfield(typed_bitfield&& rhs) noexcept$/;"	m	struct:libtorrent::typed_bitfield
noexcept	torrent/include/libtorrent/chained_buffer.hpp	/^			buffer_t(buffer_t const& rhs) noexcept$/;"	m	struct:libtorrent::chained_buffer::buffer_t
noexcept	torrent/include/libtorrent/copy_ptr.hpp	/^		copy_ptr& operator=(copy_ptr&& p) & noexcept = default;$/;"	m	struct:libtorrent::copy_ptr
noexcept	torrent/include/libtorrent/copy_ptr.hpp	/^		copy_ptr(copy_ptr&& p) noexcept = default;$/;"	m	struct:libtorrent::copy_ptr
noexcept	torrent/include/libtorrent/disk_buffer_holder.hpp	/^			, char* buf, std::size_t sz) noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	torrent/include/libtorrent/disk_buffer_holder.hpp	/^			, std::size_t sz) noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	torrent/include/libtorrent/disk_buffer_holder.hpp	/^		char* release() noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	torrent/include/libtorrent/disk_buffer_holder.hpp	/^		disk_buffer_holder& operator=(disk_buffer_holder&&) & noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	torrent/include/libtorrent/disk_buffer_holder.hpp	/^		disk_buffer_holder(disk_buffer_holder&&) noexcept;$/;"	m	struct:libtorrent::disk_buffer_holder
noexcept	torrent/include/libtorrent/disk_interface.hpp	/^		storage_holder(storage_holder&& rhs) noexcept$/;"	m	struct:libtorrent::storage_holder
noexcept	torrent/include/libtorrent/entry.hpp	/^		entry& operator=(entry&&) & noexcept;$/;"	m	class:libtorrent::entry
noexcept	torrent/include/libtorrent/entry.hpp	/^		entry(entry&& e) noexcept;$/;"	m	class:libtorrent::entry
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		file_entry& operator=(file_entry&&) & noexcept = default;$/;"	m	struct:libtorrent::file_entry
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		file_entry(file_entry&&) noexcept = default;$/;"	m	struct:libtorrent::file_entry
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		file_index_t end_file() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		file_index_t last_file() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		file_storage(file_storage&&) noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		index_range<file_index_t> file_range() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		index_range<piece_index_t> piece_range() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		int num_files() const noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		internal_file_entry& operator=(internal_file_entry&& fe) & noexcept;$/;"	m	struct:libtorrent::internal_file_entry
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		internal_file_entry(internal_file_entry&& fe) noexcept;$/;"	m	struct:libtorrent::internal_file_entry
noexcept	torrent/include/libtorrent/file_storage.hpp	/^		void swap(file_storage& ti) noexcept;$/;"	m	class:libtorrent::file_storage
noexcept	torrent/include/libtorrent/flags.hpp	/^	bitfield_flag& operator=(bitfield_flag const& rhs) noexcept = default;$/;"	m	namespace:libtorrent::flags
noexcept	torrent/include/libtorrent/flags.hpp	/^	bitfield_flag& operator=(bitfield_flag&& rhs) noexcept = default;$/;"	m	namespace:libtorrent::flags
noexcept	torrent/include/libtorrent/flags.hpp	/^	constexpr bitfield_flag() noexcept : m_val(0) {}$/;"	m	struct:libtorrent::flags::bitfield_flag
noexcept	torrent/include/libtorrent/flags.hpp	/^	constexpr bitfield_flag(bitfield_flag const& rhs) noexcept = default;$/;"	m	struct:libtorrent::flags::bitfield_flag
noexcept	torrent/include/libtorrent/flags.hpp	/^	constexpr bitfield_flag(bitfield_flag&& rhs) noexcept = default;$/;"	m	struct:libtorrent::flags::bitfield_flag
noexcept	torrent/include/libtorrent/netlink.hpp	/^		basic_nl_endpoint(basic_nl_endpoint&& other) noexcept = default;$/;"	m	class:libtorrent::basic_nl_endpoint
noexcept	torrent/include/libtorrent/peer_connection.hpp	/^			, char const* event) const noexcept;$/;"	m	class:libtorrent::peer_connection
noexcept	torrent/include/libtorrent/session.hpp	/^		session_proxy& operator=(session_proxy&&) noexcept;$/;"	m	class:libtorrent::session_proxy
noexcept	torrent/include/libtorrent/session.hpp	/^		session_proxy(session_proxy&&) noexcept;$/;"	m	class:libtorrent::session_proxy
noexcept	torrent/include/libtorrent/session_handle.hpp	/^		session_handle& operator=(session_handle&&) noexcept = default;$/;"	m	struct:libtorrent::session_handle
noexcept	torrent/include/libtorrent/session_handle.hpp	/^		session_handle(session_handle&& t) noexcept = default;$/;"	m	struct:libtorrent::session_handle
noexcept	torrent/include/libtorrent/settings_pack.hpp	/^		settings_pack& operator=(settings_pack&&) noexcept = default;$/;"	m	struct:libtorrent::settings_pack
noexcept	torrent/include/libtorrent/settings_pack.hpp	/^		settings_pack(settings_pack&&) noexcept = default;$/;"	m	struct:libtorrent::settings_pack
noexcept	torrent/include/libtorrent/sha1_hash.hpp	/^		digest32& operator=(digest32 const&) noexcept = default;$/;"	m	class:libtorrent::digest32
noexcept	torrent/include/libtorrent/sha1_hash.hpp	/^		digest32(digest32 const&) noexcept = default;$/;"	m	class:libtorrent::digest32
noexcept	torrent/include/libtorrent/span.hpp	/^		span() noexcept : m_ptr(nullptr), m_len(0) {}$/;"	m	struct:libtorrent::span
noexcept	torrent/include/libtorrent/span.hpp	/^		span(T& p) noexcept : m_ptr(&p), m_len(1) {} \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	torrent/include/libtorrent/span.hpp	/^		span(T* p, difference_type const l) noexcept : m_ptr(p), m_len(l) \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	torrent/include/libtorrent/span.hpp	/^		span(U (&arr)[N]) noexcept \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	torrent/include/libtorrent/span.hpp	/^		span(span<U> const& v) noexcept \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	torrent/include/libtorrent/span.hpp	/^		span(std::array<U, N>& arr) noexcept \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	torrent/include/libtorrent/span.hpp	/^		span(std::basic_string<U>& str) noexcept \/\/ NOLINT$/;"	m	struct:libtorrent::span
noexcept	torrent/include/libtorrent/stack_allocator.hpp	/^		allocation_slot& operator=(allocation_slot&&) noexcept = default;$/;"	m	struct:libtorrent::aux::allocation_slot
noexcept	torrent/include/libtorrent/stack_allocator.hpp	/^		allocation_slot() noexcept : m_idx(-1) {}$/;"	m	struct:libtorrent::aux::allocation_slot
noexcept	torrent/include/libtorrent/stack_allocator.hpp	/^		allocation_slot(allocation_slot&&) noexcept = default;$/;"	m	struct:libtorrent::aux::allocation_slot
noexcept	torrent/include/libtorrent/stack_allocator.hpp	/^		explicit allocation_slot(int idx) noexcept : m_idx(idx) {}$/;"	m	struct:libtorrent::aux::allocation_slot
noexcept	torrent/include/libtorrent/torrent.hpp	/^		void on_remove_peers() noexcept;$/;"	m	class:libtorrent::torrent
noexcept	torrent/include/libtorrent/torrent.hpp	/^		void remove_peer(std::shared_ptr<peer_connection> p) noexcept;$/;"	m	class:libtorrent::torrent
noexcept	torrent/include/libtorrent/torrent.hpp	/^		void trigger_optimistic_unchoke() noexcept;$/;"	m	class:libtorrent::torrent
noexcept	torrent/include/libtorrent/torrent.hpp	/^		void trigger_unchoke() noexcept;$/;"	m	class:libtorrent::torrent
noexcept	torrent/include/libtorrent/torrent_handle.hpp	/^		partial_piece_info& operator=(partial_piece_info&&) noexcept = default;$/;"	m	struct:libtorrent::partial_piece_info
noexcept	torrent/include/libtorrent/torrent_handle.hpp	/^		partial_piece_info(partial_piece_info&&) noexcept = default;$/;"	m	struct:libtorrent::partial_piece_info
noexcept	torrent/include/libtorrent/torrent_handle.hpp	/^		torrent_handle& operator=(torrent_handle&&) noexcept = default;$/;"	m	struct:libtorrent::torrent_handle
noexcept	torrent/include/libtorrent/torrent_handle.hpp	/^		torrent_handle() noexcept = default;$/;"	m	struct:libtorrent::torrent_handle
noexcept	torrent/include/libtorrent/torrent_handle.hpp	/^		torrent_handle(torrent_handle&& t) noexcept = default;$/;"	m	struct:libtorrent::torrent_handle
noexcept	torrent/include/libtorrent/torrent_status.hpp	/^		torrent_status() noexcept;$/;"	m	struct:libtorrent::torrent_status
noexcept	torrent/include/libtorrent/torrent_status.hpp	/^		torrent_status(torrent_status&&) noexcept;$/;"	m	struct:libtorrent::torrent_status
noexcept	torrent/include/libtorrent/units.hpp	/^		constexpr strong_typedef(strong_typedef const& rhs) noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	torrent/include/libtorrent/units.hpp	/^		constexpr strong_typedef(strong_typedef&& rhs) noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	torrent/include/libtorrent/units.hpp	/^		strong_typedef& operator=(strong_typedef const& rhs) & noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	torrent/include/libtorrent/units.hpp	/^		strong_typedef& operator=(strong_typedef&& rhs) & noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	torrent/include/libtorrent/units.hpp	/^		strong_typedef() noexcept = default;$/;"	m	struct:libtorrent::aux::strong_typedef
noexcept	torrent/include/libtorrent/utp_stream.hpp	/^	utp_stream& operator=(utp_stream&&) noexcept = delete;$/;"	m	struct:libtorrent::utp_stream
noexcept	torrent/include/libtorrent/utp_stream.hpp	/^	utp_stream(utp_stream&&) noexcept = delete;$/;"	m	struct:libtorrent::utp_stream
noexcept	torrent/src/add_torrent_params.cpp	/^	add_torrent_params::add_torrent_params(add_torrent_params&&) noexcept = default;$/;"	m	namespace:libtorrent	file:
noexcept	torrent/src/bdecode.cpp	/^	bdecode_node::bdecode_node(bdecode_node&&) noexcept = default;$/;"	m	namespace:libtorrent	file:
noexcept	torrent/src/disk_io_thread.cpp	/^		scoped_unlocker_impl(scoped_unlocker_impl&& rhs) noexcept : m_lock(rhs.m_lock)$/;"	m	struct:libtorrent::__anon122::scoped_unlocker_impl	file:
noexcept	torrent/src/file_storage.cpp	/^	file_storage::file_storage(file_storage&&) noexcept = default;$/;"	m	namespace:libtorrent	file:
noexcept	torrent/src/session.cpp	/^	session_proxy& session_proxy::operator=(session_proxy&&) noexcept = default;$/;"	m	namespace:libtorrent	file:
noexcept	torrent/src/session.cpp	/^	session_proxy::session_proxy(session_proxy&&) noexcept = default;$/;"	m	namespace:libtorrent	file:
noexcept	torrent/src/torrent_status.cpp	/^	torrent_status::torrent_status(torrent_status&&) noexcept = default;$/;"	m	namespace:libtorrent	file:
noexcept_movable	torrent/include/libtorrent/aux_/noexcept_movable.hpp	/^	struct noexcept_movable : T$/;"	s	namespace:libtorrent::aux
non_blocking	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void non_blocking(bool b)$/;"	f	struct:libtorrent::aux::socket_type
non_blocking	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void non_blocking(bool b, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
non_blocking	torrent/include/libtorrent/proxy_base.hpp	/^	error_code non_blocking(bool b, error_code& ec)$/;"	f	class:libtorrent::proxy_base
non_blocking	torrent/include/libtorrent/proxy_base.hpp	/^	void non_blocking(bool b)$/;"	f	class:libtorrent::proxy_base
non_blocking	torrent/include/libtorrent/ssl_stream.hpp	/^	error_code non_blocking(bool b, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
non_blocking	torrent/include/libtorrent/ssl_stream.hpp	/^	void non_blocking(bool b) { m_sock.next_layer().non_blocking(b); }$/;"	f	class:libtorrent::ssl_stream
non_blocking	torrent/include/libtorrent/utp_stream.hpp	/^	error_code non_blocking(bool, error_code&) { return error_code(); }$/;"	f	struct:libtorrent::utp_stream
non_blocking	torrent/include/libtorrent/utp_stream.hpp	/^	void non_blocking(bool) {}$/;"	f	struct:libtorrent::utp_stream
non_filter_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			non_filter_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
non_owning	torrent/src/bdecode.cpp	/^	bdecode_node bdecode_node::non_owning() const$/;"	f	class:libtorrent::bdecode_node
nonce	torrent/include/libtorrent/natpmp.hpp	/^		std::array<char, 12> nonce;$/;"	m	struct:libtorrent::natpmp::mapping_t
none	torrent/bak/connection_tester.cpp	/^enum test_mode_t{ none, upload_test, download_test, dual_test };$/;"	e	enum:test_mode_t	file:
none	torrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
none	torrent/include/libtorrent/aux_/block_cache_reference.hpp	/^		static constexpr std::int32_t none = 0x7fffffff;$/;"	m	struct:libtorrent::aux::block_cache_reference
none	torrent/include/libtorrent/aux_/portmap.hpp	/^		none, add, del$/;"	m	class:libtorrent::aux::portmap_action
none	torrent/include/libtorrent/block_cache.hpp	/^			none,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
none	torrent/include/libtorrent/close_reason.hpp	/^		none = 0,$/;"	m	class:libtorrent::close_reason_t
none	torrent/include/libtorrent/portmap.hpp	/^		none, tcp, udp$/;"	m	class:libtorrent::portmap_protocol
none	torrent/include/libtorrent/torrent.hpp	/^		enum class disk_class { none, write };$/;"	m	class:libtorrent::torrent::disk_class
none	torrent/include/libtorrent/torrent_handle.hpp	/^			none,$/;"	e	enum:libtorrent::block_info::block_state_t
none	torrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	e	enum:libtorrent::partial_piece_info::state_t
none	torrent/include/libtorrent/tracker_manager.hpp	/^			none,$/;"	e	enum:libtorrent::tracker_request::event_t
none_t	torrent/include/libtorrent/bdecode.hpp	/^		none_t,$/;"	e	enum:bdecode_node::type_t
none_t	torrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
nop	torrent/include/libtorrent/create_torrent.hpp	/^	inline void nop(piece_index_t) {}$/;"	f	namespace:libtorrent::detail
nop	torrent/kademlia/node.cpp	/^void nop() {}$/;"	f	namespace:libtorrent::dht::__anon147
normal	torrent/src/peer_connection.cpp	/^	constexpr disconnect_severity_t peer_connection_interface::normal;$/;"	m	class:libtorrent::peer_connection_interface	file:
normalize	torrent/src/receive_buffer.cpp	/^void receive_buffer::normalize(int const force_shrink)$/;"	f	class:libtorrent::receive_buffer
normalized	torrent/include/libtorrent/receive_buffer.hpp	/^	bool normalized() const { return m_recv_start == 0; }$/;"	f	struct:libtorrent::receive_buffer
not_a_dictionary	torrent/include/libtorrent/error_code.hpp	/^			not_a_dictionary,$/;"	e	enum:libtorrent::errors::error_code_enum
not_a_symlink	torrent/include/libtorrent/file_storage.hpp	/^			not_a_symlink = (1 << 15) - 1$/;"	e	enum:libtorrent::internal_file_entry::__anon14
not_an_ssl_torrent	torrent/include/libtorrent/error_code.hpp	/^			not_an_ssl_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
not_connected	torrent/include/libtorrent/bt_peer_connection.hpp	/^			not_connected = 2,$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
not_found	torrent/include/libtorrent/error_code.hpp	/^			not_found = 404,$/;"	e	enum:libtorrent::errors::http_errors
not_implemented	torrent/include/libtorrent/error_code.hpp	/^			not_implemented = 501,$/;"	e	enum:libtorrent::errors::http_errors
not_in_buffer	torrent/include/libtorrent/peer_connection.hpp	/^		static constexpr std::uint32_t not_in_buffer = 0x1fffffff;$/;"	m	struct:libtorrent::pending_block
not_in_cache	torrent/include/libtorrent/stat_cache.hpp	/^			not_in_cache = -1,$/;"	e	enum:libtorrent::stat_cache::__anon13
not_initialized	torrent/include/libtorrent/timestamp_history.hpp	/^	static constexpr std::uint16_t not_initialized = 0xffff;$/;"	m	struct:libtorrent::timestamp_history
not_interested_upload_only	torrent/include/libtorrent/close_reason.hpp	/^		not_interested_upload_only,$/;"	m	class:libtorrent::close_reason_t
not_modified	torrent/include/libtorrent/error_code.hpp	/^			not_modified = 304,$/;"	e	enum:libtorrent::errors::http_errors
not_wanted	torrent/include/libtorrent/peer_connection.hpp	/^		std::uint32_t not_wanted:1;$/;"	m	struct:libtorrent::pending_block
notconnected_peers	torrent/include/libtorrent/performance_counters.hpp	/^			notconnected_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
notify	qt_pro/globalapplication.cpp	/^bool GlobalApplication::notify(QObject *obj, QEvent *e)$/;"	f	class:GlobalApplication
notify_event	virt-p2v/src/conversion.c	/^static int notify_event(char *buf, int size)$/;"	f	file:
notify_extension_add_peer	torrent/src/torrent.cpp	/^	void torrent::notify_extension_add_peer(tcp::endpoint const& ip$/;"	f	class:libtorrent::torrent
notify_ui_callback	virt-p2v/src/gui.c	/^notify_ui_callback (int type, const char *data)$/;"	f	file:
notify_ui_callback	virt-p2v/src/kernel.c	/^notify_ui_callback (int type, const char *data)$/;"	f	file:
ns_count	torrent/include/libtorrent/aux_/route.h	/^	int	ns_count;$/;"	m	struct:route_cb
nullPosition	qt_pro/QRoundProgressBar.h	/^    double nullPosition() const { return m_nullPosition; }$/;"	f	class:QRoundProgressBar
null_observer	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	null_observer(std::shared_ptr<traversal_algorithm> a$/;"	f	struct:libtorrent::dht::null_observer
null_observer	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^struct TORRENT_EXTRA_EXPORT null_observer : observer$/;"	s	namespace:libtorrent::dht
num	qt_pro/global.h	/^    char num[8];      \/\/åºå·$/;"	m	struct:hwinfo
num_active_buckets	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	int num_active_buckets() const { return int(m_buckets.size()); }$/;"	f	class:libtorrent::dht::routing_table
num_alert_types	torrent/include/libtorrent/alert_types.hpp	/^	constexpr int num_alert_types = 97;$/;"	m	namespace:libtorrent
num_allocated_observers	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	int num_allocated_observers() const { return m_allocated_observers; }$/;"	f	class:libtorrent::dht::rpc_manager
num_announcers	torrent/kademlia/dht_storage.cpp	/^		int num_announcers = 0;$/;"	m	struct:libtorrent::dht::__anon153::dht_immutable_item	file:
num_ban_nodes	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		static constexpr int num_ban_nodes = 20;$/;"	m	struct:libtorrent::dht::dos_blocker
num_banned_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_banned_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_blocked	torrent/src/disk_job_fence.cpp	/^	int disk_job_fence::num_blocked() const$/;"	f	class:libtorrent::aux::disk_job_fence
num_blocks	torrent/include/libtorrent/block_cache.hpp	/^		std::uint64_t num_blocks:14;$/;"	m	struct:libtorrent::cached_piece_entry
num_blocks_cache_hits	torrent/include/libtorrent/performance_counters.hpp	/^			num_blocks_cache_hits,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_blocks_hashed	torrent/include/libtorrent/performance_counters.hpp	/^			num_blocks_hashed,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_blocks_read	torrent/include/libtorrent/performance_counters.hpp	/^			num_blocks_read,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_blocks_written	torrent/include/libtorrent/performance_counters.hpp	/^			num_blocks_written,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_bool_settings	torrent/include/libtorrent/settings_pack.hpp	/^			num_bool_settings = int(max_bool_setting_internal) - int(bool_type_base),$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
num_channels	torrent/include/libtorrent/peer_connection.hpp	/^			num_channels$/;"	e	enum:libtorrent::peer_connection::channels
num_channels	torrent/include/libtorrent/stat.hpp	/^			num_channels$/;"	e	enum:libtorrent::stat::__anon12
num_checking_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			num_checking_torrents = num_stats_counters,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_classes	torrent/include/libtorrent/peer_class_set.hpp	/^		int num_classes() const { return m_size; }$/;"	f	struct:libtorrent::peer_class_set
num_close_wait	torrent/include/libtorrent/session_status.hpp	/^		int num_close_wait;$/;"	m	struct:libtorrent::utp_status
num_complete	torrent/include/libtorrent/add_torrent_params.hpp	/^		int num_complete = -1;$/;"	m	struct:libtorrent::add_torrent_params
num_complete	torrent/include/libtorrent/torrent_status.hpp	/^		int num_complete = -1;$/;"	m	struct:libtorrent::torrent_status
num_connect_candidates	torrent/include/libtorrent/peer_list.hpp	/^		int num_connect_candidates() const { return m_num_connect_candidates; }$/;"	f	struct:libtorrent::peer_list
num_connect_candidates	torrent/include/libtorrent/torrent.hpp	/^		int num_connect_candidates() const { return m_peer_list ? m_peer_list->num_connect_candidates() : 0; }$/;"	f	class:libtorrent::torrent
num_connected	torrent/include/libtorrent/session_status.hpp	/^		int num_connected;$/;"	m	struct:libtorrent::utp_status
num_connections	torrent/include/libtorrent/torrent_status.hpp	/^		int num_connections = 0;$/;"	m	struct:libtorrent::torrent_status
num_connections	torrent/src/session_handle.cpp	/^	int session_handle::num_connections() const$/;"	f	class:libtorrent::session_handle
num_counters	torrent/include/libtorrent/performance_counters.hpp	/^			num_counters,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_dead_peers	torrent/include/libtorrent/session_status.hpp	/^		int num_dead_peers;$/;"	m	struct:libtorrent::session_status
num_digits	torrent/src/lazy_bdecode.cpp	/^		int num_digits(int val)$/;"	f	namespace:libtorrent::__anon76
num_dirty	torrent/include/libtorrent/block_cache.hpp	/^		std::uint64_t num_dirty:14;$/;"	m	struct:libtorrent::cached_piece_entry
num_download_categories	torrent/src/piece_picker.cpp	/^	constexpr download_queue_t piece_picker::piece_pos::num_download_categories;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
num_downloaded	torrent/include/libtorrent/add_torrent_params.hpp	/^		int num_downloaded = -1;$/;"	m	struct:libtorrent::add_torrent_params
num_downloaders	torrent/src/torrent.cpp	/^	int torrent::num_downloaders() const$/;"	f	class:libtorrent::torrent
num_downloading_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			num_downloading_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_error_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			num_error_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_errors	torrent/include/libtorrent/i2p_stream.hpp	/^			num_errors$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
num_errors	torrent/include/libtorrent/socks5_stream.hpp	/^		num_errors$/;"	e	enum:libtorrent::socks_error::socks_error_code
num_fast_resend	torrent/include/libtorrent/packet_pool.hpp	/^		int num_fast_resend;$/;"	m	struct:libtorrent::packet
num_fence_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		int num_fence_jobs[static_cast<int>(job_action_t::num_job_ids)];$/;"	m	struct:libtorrent::cache_status
num_fenced_check_fastresume	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_check_fastresume,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_clear_piece	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_clear_piece,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_delete_files	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_delete_files,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_file_priority	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_file_priority,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_flush_hashed	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_flush_hashed,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_flush_piece	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_flush_piece,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_flush_storage	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_flush_storage,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_hash	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_hash,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_load_torrent	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_load_torrent,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_move_storage	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_move_storage,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_read	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_read,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_release_files	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_release_files,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_rename_file	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_rename_file,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_save_resume_data	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_save_resume_data,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_stop_torrent	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_stop_torrent,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_tick_storage	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_tick_storage,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_trim_cache	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_trim_cache,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_fenced_write	torrent/include/libtorrent/performance_counters.hpp	/^			num_fenced_write,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_files	torrent/include/libtorrent/torrent_info.hpp	/^		int num_files() const { return m_files.num_files(); }$/;"	f	class:libtorrent::torrent_info
num_fin_sent	torrent/include/libtorrent/session_status.hpp	/^		int num_fin_sent;$/;"	m	struct:libtorrent::utp_status
num_gauges_counters	torrent/include/libtorrent/performance_counters.hpp	/^			num_gauges_counters = num_counters - num_stats_counters$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_global_nodes	torrent/include/libtorrent/kademlia/node.hpp	/^	std::int64_t num_global_nodes() const$/;"	f	class:libtorrent::dht::node
num_global_nodes	torrent/kademlia/routing_table.cpp	/^std::int64_t routing_table::num_global_nodes() const$/;"	f	class:libtorrent::dht::routing_table
num_hashfails	torrent/include/libtorrent/peer_info.hpp	/^		int num_hashfails;$/;"	m	struct:libtorrent::peer_info
num_have	torrent/include/libtorrent/torrent.hpp	/^		int num_have() const$/;"	f	class:libtorrent::torrent
num_have_pieces	torrent/include/libtorrent/peer_connection.hpp	/^		int num_have_pieces() const { return m_num_pieces; }$/;"	f	class:libtorrent::peer_connection
num_have_pieces	torrent/include/libtorrent/performance_counters.hpp	/^			num_have_pieces,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_http_proxy_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_http_proxy_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_i2p_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_i2p_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_idle	torrent/include/libtorrent/session_status.hpp	/^		int num_idle;$/;"	m	struct:libtorrent::utp_status
num_incoming_allowed_fast	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_allowed_fast,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_bitfield	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_bitfield,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_cancel	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_cancel,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_choke	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_choke,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_dht_port	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_dht_port,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_ext_handshake	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_ext_handshake,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_extended	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_extended,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_have	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_have,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_have_all	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_have_all,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_have_none	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_have_none,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_interested	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_interested,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_metadata	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_metadata,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_not_interested	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_not_interested,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_pex	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_pex,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_piece	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_piece,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_reject	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_reject,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_request	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_request,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_suggest	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_suggest,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incoming_unchoke	torrent/include/libtorrent/performance_counters.hpp	/^			num_incoming_unchoke,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_incomplete	torrent/include/libtorrent/add_torrent_params.hpp	/^		int num_incomplete = -1;$/;"	m	struct:libtorrent::add_torrent_params
num_incomplete	torrent/include/libtorrent/torrent_status.hpp	/^		int num_incomplete = -1;$/;"	m	struct:libtorrent::torrent_status
num_int_settings	torrent/include/libtorrent/settings_pack.hpp	/^			num_int_settings = int(max_int_setting_internal) - int(int_type_base)$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
num_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		int num_jobs;$/;"	m	struct:libtorrent::cache_status
num_jobs	torrent/include/libtorrent/performance_counters.hpp	/^			num_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_known_peers	torrent/include/libtorrent/torrent.hpp	/^		int num_known_peers() const { return m_peer_list ? m_peer_list->num_peers() : 0; }$/;"	f	class:libtorrent::torrent
num_lrus	torrent/include/libtorrent/block_cache.hpp	/^			num_lrus$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
num_mappings	torrent/include/libtorrent/upnp.hpp	/^	int num_mappings() const { return int(m_mappings.size()); }$/;"	f	struct:libtorrent::final
num_nodes	torrent/include/libtorrent/alert_types.hpp	/^		int num_nodes;$/;"	m	struct:libtorrent::dht_routing_bucket
num_nodes	torrent/src/alert.cpp	/^	int dht_live_nodes_alert::num_nodes() const$/;"	f	class:libtorrent::dht_live_nodes_alert
num_nodes	torrent/src/alert.cpp	/^	int dht_sample_infohashes_alert::num_nodes() const$/;"	f	class:libtorrent::dht_sample_infohashes_alert
num_not_requested	torrent/src/peer_connection.cpp	/^		int num_not_requested;$/;"	m	struct:libtorrent::peer_count_t	file:
num_optimistic_unchoke_slots	torrent/include/libtorrent/settings_pack.hpp	/^			num_optimistic_unchoke_slots,$/;"	e	enum:libtorrent::settings_pack::int_types
num_outgoing_allowed_fast	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_allowed_fast,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_bitfield	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_bitfield,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_cancel	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_cancel,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_choke	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_choke,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_dht_port	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_dht_port,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_ext_handshake	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_ext_handshake,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_extended	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_extended,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_have	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_have,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_have_all	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_have_all,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_have_none	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_have_none,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_interested	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_interested,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_metadata	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_metadata,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_not_interested	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_not_interested,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_pex	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_pex,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_piece	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_piece,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_ports	torrent/include/libtorrent/settings_pack.hpp	/^			num_outgoing_ports,$/;"	e	enum:libtorrent::settings_pack::int_types
num_outgoing_reject	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_reject,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_request	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_request,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_suggest	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_suggest,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outgoing_unchoke	torrent/include/libtorrent/performance_counters.hpp	/^			num_outgoing_unchoke,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_outstanding_accept	torrent/include/libtorrent/performance_counters.hpp	/^			num_outstanding_accept,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_outstanding_jobs	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		int num_outstanding_jobs() const { return m_outstanding_jobs; }$/;"	f	struct:libtorrent::aux::disk_job_fence
num_outstanding_resume_data	torrent/bak/client_test.cpp	/^int num_outstanding_resume_data = 0;$/;"	v
num_pad_blocks	torrent/include/libtorrent/piece_picker.hpp	/^		int num_pad_blocks() const { return m_num_pad_blocks; }$/;"	f	class:libtorrent::piece_picker
num_passed	torrent/include/libtorrent/piece_picker.hpp	/^		int num_passed() const { return m_num_passed; }$/;"	f	class:libtorrent::piece_picker
num_passed	torrent/include/libtorrent/torrent.hpp	/^		int num_passed() const$/;"	f	class:libtorrent::torrent
num_paused_torrents	torrent/include/libtorrent/session_status.hpp	/^		int num_paused_torrents;$/;"	m	struct:libtorrent::session_status
num_peers	torrent/include/libtorrent/alert_types.hpp	/^		int const num_peers;$/;"	m	struct:libtorrent::final
num_peers	torrent/include/libtorrent/kademlia/node.hpp	/^	int num_peers() const { return int(m_storage.num_peers()); }$/;"	f	class:libtorrent::dht::node
num_peers	torrent/include/libtorrent/peer_list.hpp	/^		int num_peers() const { return int(m_peers.size()); }$/;"	f	struct:libtorrent::peer_list
num_peers	torrent/include/libtorrent/piece_picker.hpp	/^			unsigned num_peers:14;$/;"	m	struct:libtorrent::piece_picker::block_info
num_peers	torrent/include/libtorrent/session_status.hpp	/^		int num_peers;$/;"	m	struct:libtorrent::session_status
num_peers	torrent/include/libtorrent/torrent.hpp	/^		int num_peers() const { return int(m_connections.size() - m_peers_to_disconnect.size()); }$/;"	f	class:libtorrent::torrent
num_peers	torrent/include/libtorrent/torrent_handle.hpp	/^		unsigned num_peers:14;$/;"	m	struct:libtorrent::block_info
num_peers	torrent/include/libtorrent/torrent_status.hpp	/^		int num_peers = 0;$/;"	m	struct:libtorrent::torrent_status
num_peers	torrent/src/alert.cpp	/^	int dht_get_peers_reply_alert::num_peers() const$/;"	f	class:libtorrent::dht_get_peers_reply_alert
num_peers	torrent/src/peer_connection.cpp	/^		int num_peers;$/;"	m	struct:libtorrent::peer_count_t	file:
num_peers	torrent/src/piece_picker.cpp	/^	int piece_picker::num_peers(piece_block const block) const$/;"	f	class:libtorrent::piece_picker
num_peers_connected	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_connected,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_down_disk	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_down_disk,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_down_interested	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_down_interested,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_down_requests	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_down_requests,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_down_unchoked	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_down_unchoked,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_end_game	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_end_game,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_half_open	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_half_open,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_disk	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_disk,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_interested	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_interested,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_requests	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_requests,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_unchoked	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_unchoked,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_unchoked_all	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_unchoked_all,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_up_unchoked_optimistic	torrent/include/libtorrent/performance_counters.hpp	/^			num_peers_up_unchoked_optimistic,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_peers_with_nowant	torrent/src/peer_connection.cpp	/^		int num_peers_with_nowant;$/;"	m	struct:libtorrent::peer_count_t	file:
num_peers_with_timeouts	torrent/src/peer_connection.cpp	/^		int num_peers_with_timeouts;$/;"	m	struct:libtorrent::peer_count_t	file:
num_piece_failed	torrent/include/libtorrent/performance_counters.hpp	/^			num_piece_failed,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_piece_passed	torrent/include/libtorrent/performance_counters.hpp	/^			num_piece_passed,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_pieces	torrent/bak/connection_tester.cpp	/^	int num_pieces;$/;"	m	struct:peer_conn	file:
num_pieces	torrent/include/libtorrent/aux_/storage_piece_set.hpp	/^		int num_pieces() const { return m_num_pieces; }$/;"	f	struct:libtorrent::aux::storage_piece_set
num_pieces	torrent/include/libtorrent/block_cache.hpp	/^		int num_pieces() const { return int(m_pieces.size()); }$/;"	f	struct:libtorrent::block_cache
num_pieces	torrent/include/libtorrent/create_torrent.hpp	/^		int num_pieces() const { return m_files.num_pieces(); }$/;"	f	struct:libtorrent::create_torrent
num_pieces	torrent/include/libtorrent/file_storage.hpp	/^		int num_pieces() const { TORRENT_ASSERT(m_piece_length > 0); return m_num_pieces; }$/;"	f	class:libtorrent::file_storage
num_pieces	torrent/include/libtorrent/peer_info.hpp	/^		int num_pieces;$/;"	m	struct:libtorrent::peer_info
num_pieces	torrent/include/libtorrent/piece_picker.hpp	/^		int num_pieces() const { return int(m_piece_map.size()); }$/;"	f	class:libtorrent::piece_picker
num_pieces	torrent/include/libtorrent/piece_picker.hpp	/^		int num_pieces;$/;"	m	struct:libtorrent::piece_count
num_pieces	torrent/include/libtorrent/torrent_info.hpp	/^		int num_pieces() const { return m_files.num_pieces(); }$/;"	f	class:libtorrent::torrent_info
num_pieces	torrent/include/libtorrent/torrent_status.hpp	/^		int num_pieces = 0;$/;"	m	struct:libtorrent::torrent_status
num_queued_download_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			num_queued_download_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_queued_seeding_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			num_queued_seeding_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_read_back	torrent/include/libtorrent/performance_counters.hpp	/^			num_read_back,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_read_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		int num_read_jobs;$/;"	m	struct:libtorrent::cache_status
num_read_jobs	torrent/include/libtorrent/performance_counters.hpp	/^			num_read_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_read_ops	torrent/include/libtorrent/performance_counters.hpp	/^			num_read_ops,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_reading_bytes	torrent/include/libtorrent/peer_connection.hpp	/^		int num_reading_bytes() const { return m_reading_bytes; }$/;"	f	class:libtorrent::peer_connection
num_replacements	torrent/include/libtorrent/alert_types.hpp	/^		int num_replacements;$/;"	m	struct:libtorrent::dht_routing_bucket
num_requests	torrent/src/tracker_manager.cpp	/^	int tracker_manager::num_requests() const$/;"	f	class:libtorrent::tracker_manager
num_requests	torrent/src/ut_metadata.cpp	/^			int num_requests;$/;"	m	struct:libtorrent::__anon72::final::metadata_piece	file:
num_resends	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int num_resends() const { return m_sett.get_int(settings_pack::utp_num_resends); }$/;"	f	struct:libtorrent::utp_socket_manager
num_responses	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int num_responses() const { return m_responses; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
num_running_disk_jobs	torrent/include/libtorrent/performance_counters.hpp	/^			num_running_disk_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_running_threads	torrent/include/libtorrent/performance_counters.hpp	/^			num_running_threads,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_samples	torrent/include/libtorrent/sliding_average.hpp	/^	int num_samples() const { return m_num_samples; }$/;"	f	struct:libtorrent::sliding_average
num_samples	torrent/src/alert.cpp	/^	int dht_sample_infohashes_alert::num_samples() const$/;"	f	class:libtorrent::dht_sample_infohashes_alert
num_seeding_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			num_seeding_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_seeds	torrent/include/libtorrent/peer_list.hpp	/^		int num_seeds() const { return int(m_num_seeds); }$/;"	f	struct:libtorrent::peer_list
num_seeds	torrent/include/libtorrent/torrent_status.hpp	/^		int num_seeds = 0;$/;"	m	struct:libtorrent::torrent_status
num_seeds	torrent/src/torrent.cpp	/^	int torrent::num_seeds() const$/;"	f	class:libtorrent::torrent
num_send_sockets	torrent/include/libtorrent/broadcast_socket.hpp	/^		int num_send_sockets() const { return int(m_unicast_sockets.size()); }$/;"	f	class:libtorrent::broadcast_socket
num_sockets	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int num_sockets() const { return int(m_utp_sockets.size()); }$/;"	f	struct:libtorrent::utp_socket_manager
num_socks5_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_socks5_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_sorted_results	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int num_sorted_results() const { return m_sorted_results; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
num_ssl_http_proxy_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_ssl_http_proxy_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_ssl_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_ssl_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_ssl_socks5_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_ssl_socks5_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_ssl_utp_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_ssl_utp_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_stats_counters	torrent/include/libtorrent/performance_counters.hpp	/^			num_stats_counters$/;"	e	enum:libtorrent::counters::stats_counter_t
num_stopped_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			num_stopped_torrents,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_supported_messages	torrent/include/libtorrent/bt_peer_connection.hpp	/^			num_supported_messages$/;"	e	enum:libtorrent::bt_peer_connection::message_type
num_syn_sent	torrent/include/libtorrent/session_status.hpp	/^		int num_syn_sent;$/;"	m	struct:libtorrent::utp_status
num_tcp_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_tcp_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_threads	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		int num_threads()$/;"	f	struct:libtorrent::disk_io_thread_pool
num_time_critical_pieces	torrent/include/libtorrent/torrent.hpp	/^		int num_time_critical_pieces() const$/;"	f	class:libtorrent::torrent
num_timeouts	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	int num_timeouts() const { return m_timeouts; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
num_to_evict	torrent/src/disk_buffer_pool.cpp	/^	int disk_buffer_pool::num_to_evict(int const num_needed)$/;"	f	class:libtorrent::disk_buffer_pool
num_torrent_lists	torrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr std::size_t num_torrent_lists = 8;$/;"	m	struct:libtorrent::aux::session_interface
num_torrents	torrent/include/libtorrent/kademlia/node.hpp	/^	int num_torrents() const { return int(m_storage.num_torrents()); }$/;"	f	class:libtorrent::dht::node
num_torrents	torrent/include/libtorrent/session_status.hpp	/^		int num_torrents;$/;"	m	struct:libtorrent::session_status
num_total_pieces_added	torrent/include/libtorrent/performance_counters.hpp	/^			num_total_pieces_added,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_transmissions	torrent/include/libtorrent/packet_pool.hpp	/^		std::uint8_t num_transmissions:6;$/;"	m	struct:libtorrent::packet
num_unchoke_slots	torrent/include/libtorrent/performance_counters.hpp	/^			num_unchoke_slots,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_unchoked	torrent/include/libtorrent/session_status.hpp	/^		int num_unchoked;$/;"	m	struct:libtorrent::session_status
num_upload_only_torrents	torrent/include/libtorrent/performance_counters.hpp	/^			num_upload_only_torrents, \/\/ upload_only means finished$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_uploads	torrent/include/libtorrent/torrent_status.hpp	/^		int num_uploads = 0;$/;"	m	struct:libtorrent::torrent_status
num_uploads	torrent/src/session_handle.cpp	/^	int session_handle::num_uploads() const$/;"	f	class:libtorrent::session_handle
num_utp_close_wait	torrent/include/libtorrent/performance_counters.hpp	/^			num_utp_close_wait,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_connected	torrent/include/libtorrent/performance_counters.hpp	/^			num_utp_connected,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_deleted	torrent/include/libtorrent/performance_counters.hpp	/^			num_utp_deleted,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_fin_sent	torrent/include/libtorrent/performance_counters.hpp	/^			num_utp_fin_sent,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_idle	torrent/include/libtorrent/performance_counters.hpp	/^			num_utp_idle,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_peers	torrent/include/libtorrent/performance_counters.hpp	/^			num_utp_peers,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_utp_syn_sent	torrent/include/libtorrent/performance_counters.hpp	/^			num_utp_syn_sent,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_visible_torrents	torrent/bak/torrent_view.hpp	/^	int num_visible_torrents() const { return int(m_filtered_handles.size()); }$/;"	f	struct:torrent_view
num_votes	torrent/include/libtorrent/ip_voter.hpp	/^			std::uint16_t num_votes = 0;$/;"	m	struct:libtorrent::ip_voter::external_ip_t
num_want	torrent/include/libtorrent/settings_pack.hpp	/^			num_want,$/;"	e	enum:libtorrent::settings_pack::int_types
num_want	torrent/include/libtorrent/tracker_manager.hpp	/^		int num_want;$/;"	m	struct:libtorrent::tracker_request
num_want_left	torrent/include/libtorrent/piece_picker.hpp	/^		int num_want_left() const { return num_pieces() - m_num_have - m_num_filtered + m_num_have_filtered; }$/;"	f	class:libtorrent::piece_picker
num_warnings	torrent/include/libtorrent/alert_types.hpp	/^			num_warnings$/;"	e	enum:libtorrent::final::performance_warning_t
num_write_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		int num_write_jobs;$/;"	m	struct:libtorrent::cache_status
num_write_jobs	torrent/include/libtorrent/performance_counters.hpp	/^			num_write_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
num_write_lru_pieces	torrent/include/libtorrent/block_cache.hpp	/^		int num_write_lru_pieces() const { return m_lru[cached_piece_entry::write_lru].size(); }$/;"	f	struct:libtorrent::block_cache
num_write_ops	torrent/include/libtorrent/performance_counters.hpp	/^			num_write_ops,$/;"	e	enum:libtorrent::counters::stats_counter_t
num_writing_threads	torrent/include/libtorrent/disk_io_thread.hpp	/^		int num_writing_threads;$/;"	m	struct:libtorrent::cache_status
num_writing_threads	torrent/include/libtorrent/performance_counters.hpp	/^			num_writing_threads,$/;"	e	enum:libtorrent::counters::stats_gauge_t
number_size	torrent/include/libtorrent/sha1_hash.hpp	/^		static constexpr std::ptrdiff_t number_size = N \/ 32;$/;"	m	class:libtorrent::digest32
numeric	torrent/src/bdecode.cpp	/^	bool numeric(char c) { return c >= '0' && c <= '9'; }$/;"	f	namespace:libtorrent::__anon40
numeric_cast	torrent/include/libtorrent/aux_/numeric_cast.hpp	/^	T numeric_cast(In v)$/;"	f	namespace:libtorrent::aux
numeric_limits	torrent/include/libtorrent/units.hpp	/^	class numeric_limits<libtorrent::aux::strong_typedef<UnderlyingType, Tag>> : public std::numeric_limits<UnderlyingType>$/;"	c	namespace:std
o	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		listen_socket_handle& operator=(listen_socket_handle const& o) = default;$/;"	m	struct:libtorrent::aux::listen_socket_handle
o	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		listen_socket_handle(listen_socket_handle const& o) = default;$/;"	m	struct:libtorrent::aux::listen_socket_handle
o_combo	virt-p2v/src/gui.c	/^  *o_combo, *oc_entry, *os_entry, *of_entry, *oa_combo,$/;"	v	file:
oa_combo	virt-p2v/src/gui.c	/^  *o_combo, *oc_entry, *os_entry, *of_entry, *oa_combo,$/;"	v	file:
obfuscated_get_peers	torrent/include/libtorrent/kademlia/get_peers.hpp	/^struct obfuscated_get_peers : get_peers$/;"	s	namespace:libtorrent::dht
obfuscated_get_peers	torrent/kademlia/get_peers.cpp	/^obfuscated_get_peers::obfuscated_get_peers($/;"	f	class:libtorrent::dht::obfuscated_get_peers
obfuscated_get_peers_observer	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	obfuscated_get_peers_observer($/;"	f	struct:libtorrent::dht::obfuscated_get_peers_observer
obfuscated_get_peers_observer	torrent/include/libtorrent/kademlia/get_peers.hpp	/^struct obfuscated_get_peers_observer : traversal_observer$/;"	s	namespace:libtorrent::dht
objects	torrent/include/libtorrent/aux_/alloca.hpp	/^	span<T> objects;$/;"	m	struct:libtorrent::aux::alloca_destructor
observer	torrent/include/libtorrent/kademlia/node.hpp	/^	dht_observer* observer() const { return m_observer; }$/;"	f	class:libtorrent::dht::node
observer	torrent/include/libtorrent/kademlia/observer.hpp	/^	observer(std::shared_ptr<traversal_algorithm> a$/;"	f	struct:libtorrent::dht::observer
observer	torrent/include/libtorrent/kademlia/observer.hpp	/^struct TORRENT_EXTRA_EXPORT observer$/;"	s	namespace:libtorrent::dht
oc_entry	virt-p2v/src/gui.c	/^  *o_combo, *oc_entry, *os_entry, *of_entry, *oa_combo,$/;"	v	file:
of_entry	virt-p2v/src/gui.c	/^  *o_combo, *oc_entry, *os_entry, *of_entry, *oa_combo,$/;"	v	file:
offset	include/torrent.h	/^	uint64_t offset;$/;"	m	struct:torrent_task
offset	torrent/include/libtorrent/block_cache.hpp	/^		int offset;$/;"	m	struct:libtorrent::partial_hash
offset	torrent/include/libtorrent/disk_io_job.hpp	/^			std::int32_t offset;$/;"	m	struct:libtorrent::disk_io_job::un::io_args
offset	torrent/include/libtorrent/file_storage.hpp	/^		std::int64_t offset;$/;"	m	struct:libtorrent::file_entry
offset	torrent/include/libtorrent/file_storage.hpp	/^		std::int64_t offset;$/;"	m	struct:libtorrent::file_slice
offset	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t offset:48;$/;"	m	struct:libtorrent::internal_file_entry
offset	torrent/include/libtorrent/stat.hpp	/^		void offset(std::int64_t c)$/;"	f	class:libtorrent::stat_channel
offset	torrent/src/identify_client.cpp	/^		int offset;$/;"	m	struct:__anon59::generic_map_entry	file:
offset	virt-p2v/include/gnulib/windows-rwlock.h	/^          unsigned int offset; \/* index of first waiting thread in array *\/$/;"	m	struct:__anon163
offset	virt-p2v/include/p2v-config.h	/^  int offset;$/;"	m	struct:rtc_config
offsetsFromUTF8	torrent/src/ConvertUTF.cpp	/^const UTF32 offsetsFromUTF8[6] = { 0x00000000UL, 0x00003080UL, 0x000E2080UL,$/;"	v
ok	torrent/include/libtorrent/error_code.hpp	/^			ok = 200,$/;"	e	enum:libtorrent::errors::http_errors
ok_to_evict	torrent/include/libtorrent/block_cache.hpp	/^		bool ok_to_evict(bool ignore_hash = false) const$/;"	f	struct:libtorrent::cached_piece_entry
ol	torrent/src/file.cpp	/^		OVERLAPPED ol;$/;"	m	struct:libtorrent::overlapped_t	file:
oldincludedir	torrent/include/libtorrent/Makefile	/^oldincludedir = \/usr\/include$/;"	m
onUpdateTime	qt_pro/global.cpp	/^void Global::onUpdateTime()$/;"	f	class:Global
on_accept_connection	torrent/src/session_impl.cpp	/^	void session_impl::on_accept_connection(std::shared_ptr<socket_type> const& s$/;"	f	class:libtorrent::aux::session_impl
on_accept_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_accept_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_add_peer	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_add_peer(tcp::endpoint const&,$/;"	f	struct:libtorrent::torrent_plugin
on_alert	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_alert(alert const*) {}$/;"	f	struct:libtorrent::plugin
on_allowed_fast	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_allowed_fast(piece_index_t) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_allowed_fast	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_allowed_fast(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_announce	torrent/src/lsd.cpp	/^void lsd::on_announce(error_code const& ec)$/;"	f	class:libtorrent::lsd
on_announce_response	torrent/src/udp_tracker_connection.cpp	/^	bool udp_tracker_connection::on_announce_response(span<char const> buf)$/;"	f	class:libtorrent::udp_tracker_connection
on_assign_bandwidth	torrent/src/http_connection.cpp	/^void http_connection::on_assign_bandwidth(error_code const& e)$/;"	f	class:libtorrent::http_connection
on_async_load_torrent	torrent/src/session_impl.cpp	/^	void session_impl::on_async_load_torrent(add_torrent_params* params, error_code ec)$/;"	f	class:libtorrent::aux::session_impl
on_bitfield	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_bitfield(bitfield const& \/*bitfield*\/) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_bitfield	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_bitfield(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_cacel_btn_clicked	qt_pro/dialogwindow.cpp	/^void DialogWindow::on_cacel_btn_clicked()$/;"	f	class:DialogWindow
on_cache_flushed	torrent/src/torrent.cpp	/^	void torrent::on_cache_flushed(bool const manually_triggered) try$/;"	f	class:libtorrent::torrent
on_cancel	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_cancel(peer_request const&) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_cancel	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_cancel(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_choke	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_choke() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_choke	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_choke(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_close_reason	torrent/src/utp_stream.cpp	/^void utp_stream::on_close_reason(void* self, close_reason_t reason)$/;"	f	class:libtorrent::utp_stream
on_confirm_btn_clicked	qt_pro/dialogwindow.cpp	/^void DialogWindow::on_confirm_btn_clicked()$/;"	f	class:DialogWindow
on_connect	torrent/bak/connection_tester.cpp	/^	void on_connect(error_code const& ec)$/;"	f	struct:peer_conn
on_connect	torrent/src/http_connection.cpp	/^void http_connection::on_connect(error_code const& e)$/;"	f	class:libtorrent::http_connection
on_connect	torrent/src/http_tracker_connection.cpp	/^	void http_tracker_connection::on_connect(http_connection& c)$/;"	f	class:libtorrent::http_tracker_connection
on_connect	torrent/src/utp_stream.cpp	/^void utp_stream::on_connect(void* self, error_code const& ec, bool const shutdown)$/;"	f	class:libtorrent::utp_stream
on_connect_response	torrent/src/udp_tracker_connection.cpp	/^	bool udp_tracker_connection::on_connect_response(span<char const> buf)$/;"	f	class:libtorrent::udp_tracker_connection
on_connect_timeout	torrent/src/udp_socket.cpp	/^void socks5::on_connect_timeout(error_code const& e)$/;"	f	class:libtorrent::socks5
on_connected	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_connected() {}$/;"	f	struct:libtorrent::peer_plugin
on_connected	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_connected()$/;"	f	class:libtorrent::bt_peer_connection
on_connected	torrent/src/http_seed_connection.cpp	/^	void http_seed_connection::on_connected()$/;"	f	class:libtorrent::http_seed_connection
on_connected	torrent/src/udp_socket.cpp	/^void socks5::on_connected(error_code const& e)$/;"	f	class:libtorrent::socks5
on_connected	torrent/src/web_connection_base.cpp	/^	void web_connection_base::on_connected()$/;"	f	class:libtorrent::web_connection_base
on_connected	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::on_connected()$/;"	f	class:libtorrent::web_peer_connection
on_connection_complete	torrent/src/peer_connection.cpp	/^	void peer_connection::on_connection_complete(error_code const& e)$/;"	f	class:libtorrent::peer_connection
on_dht_announce	torrent/src/session_impl.cpp	/^	void session_impl::on_dht_announce(error_code const& e)$/;"	f	class:libtorrent::aux::session_impl
on_dht_announce_response	torrent/src/torrent.cpp	/^	void torrent::on_dht_announce_response(std::vector<tcp::endpoint> const& peers) try$/;"	f	class:libtorrent::torrent
on_dht_announce_response_disp	torrent/src/torrent.cpp	/^	void torrent::on_dht_announce_response_disp(std::weak_ptr<torrent> t$/;"	f	class:libtorrent::torrent
on_dht_get_peers	torrent/src/session_impl.cpp	/^		void on_dht_get_peers(alert_manager& alerts, sha1_hash info_hash, std::vector<tcp::endpoint> const& peers)$/;"	f	namespace:libtorrent::aux::__anon52
on_dht_name_lookup	torrent/src/session_impl.cpp	/^	void session_impl::on_dht_name_lookup(error_code const& e$/;"	f	class:libtorrent::aux::session_impl
on_dht_port	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_dht_port(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_dht_put_immutable_item	torrent/src/session_impl.cpp	/^		void on_dht_put_immutable_item(alert_manager& alerts, sha1_hash target, int num)$/;"	f	namespace:libtorrent::aux::__anon52
on_dht_put_mutable_item	torrent/src/session_impl.cpp	/^		void on_dht_put_mutable_item(alert_manager& alerts, dht::item const& i, int num)$/;"	f	namespace:libtorrent::aux::__anon52
on_dht_request	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_dht_request(string_view \/* query *\/$/;"	f	struct:libtorrent::plugin
on_dht_request	torrent/src/session_impl.cpp	/^	bool session_impl::on_dht_request(string_view query$/;"	f	class:libtorrent::aux::session_impl
on_dht_router_name_lookup	torrent/src/session_impl.cpp	/^	void session_impl::on_dht_router_name_lookup(error_code const& e$/;"	f	class:libtorrent::aux::session_impl
on_direct_response	torrent/src/session_impl.cpp	/^		void on_direct_response(alert_manager& alerts, void* userdata, dht::msg const& msg)$/;"	f	namespace:libtorrent::aux::__anon52
on_disconnect	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_disconnect(error_code const&) {}$/;"	f	struct:libtorrent::peer_plugin
on_disk	torrent/src/peer_connection.cpp	/^	void peer_connection::on_disk()$/;"	f	class:libtorrent::peer_connection
on_disk_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_disk_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_disk_queue_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_disk_queue_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_disk_read_complete	torrent/src/peer_connection.cpp	/^	void peer_connection::on_disk_read_complete(disk_buffer_holder buffer$/;"	f	class:libtorrent::peer_connection
on_disk_read_complete	torrent/src/torrent.cpp	/^	void torrent::on_disk_read_complete(disk_buffer_holder buffer$/;"	f	class:libtorrent::torrent
on_disk_write_complete	torrent/src/peer_connection.cpp	/^	void peer_connection::on_disk_write_complete(storage_error const& error$/;"	f	class:libtorrent::peer_connection
on_disk_write_complete	torrent/src/torrent.cpp	/^	void torrent::on_disk_write_complete(storage_error const& error$/;"	f	class:libtorrent::torrent
on_dont_have	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_dont_have(piece_index_t) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_error	torrent/src/peer_connection.cpp	/^	void peer_connection::on_error(error_code const& ec)$/;"	f	class:libtorrent::peer_connection
on_error	torrent/src/session_impl.cpp	/^	void session_impl::on_error(error_code const& ec)$/;"	f	class:libtorrent::aux::session_impl
on_error	torrent/src/torrent.cpp	/^	void torrent::on_error(error_code const& ec)$/;"	f	class:libtorrent::torrent
on_error_confirm_btn_clicked	qt_pro/dialogwindow.cpp	/^void DialogWindow::on_error_confirm_btn_clicked()$/;"	f	class:DialogWindow
on_exception	torrent/src/peer_connection.cpp	/^	void peer_connection::on_exception(std::exception const& e)$/;"	f	class:libtorrent::peer_connection
on_exception	torrent/src/session_impl.cpp	/^	void session_impl::on_exception(std::exception const& e)$/;"	f	class:libtorrent::aux::session_impl
on_exception	torrent/src/torrent.cpp	/^	void torrent::on_exception(std::exception const&)$/;"	f	class:libtorrent::torrent
on_expire	torrent/src/upnp.cpp	/^void upnp::on_expire(error_code const& ec)$/;"	f	class:libtorrent::upnp
on_extended	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_extended(int \/*length*\/, int \/*msg*\/,$/;"	f	struct:libtorrent::peer_plugin
on_extended	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_extended(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_extended_handshake	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_extended_handshake()$/;"	f	class:libtorrent::bt_peer_connection
on_extension_handshake	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_extension_handshake(bdecode_node const&) { return true; }$/;"	f	struct:libtorrent::peer_plugin
on_file_priority	torrent/src/torrent.cpp	/^	void torrent::on_file_priority(storage_error const& err$/;"	f	class:libtorrent::torrent
on_file_renamed	torrent/src/torrent.cpp	/^	void torrent::on_file_renamed(std::string const& filename$/;"	f	class:libtorrent::torrent
on_files_checked	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_files_checked() {}$/;"	f	struct:libtorrent::torrent_plugin
on_files_deleted	torrent/src/torrent.cpp	/^	void torrent::on_files_deleted(storage_error const& error) try$/;"	f	class:libtorrent::torrent
on_filter	torrent/src/http_tracker_connection.cpp	/^	void http_tracker_connection::on_filter(http_connection& c$/;"	f	class:libtorrent::http_tracker_connection
on_force_recheck	torrent/src/torrent.cpp	/^	void torrent::on_force_recheck(status_t const status, storage_error const& error) try$/;"	f	class:libtorrent::torrent
on_formatButton_clicked	qt_pro/configwindow.cpp	/^void ConfigWindow::on_formatButton_clicked()$/;"	f	class:ConfigWindow
on_handshake	torrent/bak/connection_tester.cpp	/^	void on_handshake(char* h, error_code const& ec, size_t)$/;"	f	struct:peer_conn
on_handshake	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_handshake(span<char const>) { return true; }$/;"	f	struct:libtorrent::peer_plugin
on_handshake2	torrent/bak/connection_tester.cpp	/^	void on_handshake2(error_code const& ec, size_t)$/;"	f	struct:peer_conn
on_hash	torrent/src/create_torrent.cpp	/^	void on_hash(piece_index_t const piece, sha1_hash const& piece_hash$/;"	f	namespace:libtorrent::__anon134
on_have	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_have(piece_index_t) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_have	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_have(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_have_all	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_have_all() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_have_all	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_have_all(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_have_all_sent	torrent/bak/connection_tester.cpp	/^	void on_have_all_sent(error_code const& ec, size_t)$/;"	f	struct:peer_conn
on_have_none	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_have_none() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_have_none	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_have_none(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_holepunch	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_holepunch()$/;"	f	class:libtorrent::bt_peer_connection
on_i2p_accept	torrent/src/session_impl.cpp	/^	void session_impl::on_i2p_accept(std::shared_ptr<socket_type> const& s$/;"	f	class:libtorrent::aux::session_impl
on_i2p_open	torrent/src/session_impl.cpp	/^	void session_impl::on_i2p_open(error_code const& ec)$/;"	f	class:libtorrent::aux::session_impl
on_i2p_resolve	torrent/src/http_connection.cpp	/^void http_connection::on_i2p_resolve(error_code const& e, char const* destination)$/;"	f	class:libtorrent::http_connection
on_i2p_resolve	torrent/src/torrent.cpp	/^	void torrent::on_i2p_resolve(error_code const& ec, char const* dest) try$/;"	f	class:libtorrent::torrent
on_inactivity_tick	torrent/src/torrent.cpp	/^	void torrent::on_inactivity_tick(error_code const& ec) try$/;"	f	class:libtorrent::torrent
on_incoming_utp_ssl	torrent/src/session_impl.cpp	/^	void session_impl::on_incoming_utp_ssl(std::shared_ptr<socket_type> const& s)$/;"	f	class:libtorrent::aux::session_impl
on_installButton_clicked	qt_pro/mainwindow.cpp	/^void MainWindow::on_installButton_clicked()$/;"	f	class:MainWindow
on_install_cacel_btn_clicked	qt_pro/dialogwindow.cpp	/^void DialogWindow::on_install_cacel_btn_clicked()$/;"	f	class:DialogWindow
on_install_confirm_btn_clicked	qt_pro/dialogwindow.cpp	/^void DialogWindow::on_install_confirm_btn_clicked()$/;"	f	class:DialogWindow
on_interested	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_interested() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_interested	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_interested(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_ip_change	torrent/src/session_impl.cpp	/^	void session_impl::on_ip_change(error_code const& ec)$/;"	f	class:libtorrent::aux::session_impl
on_laststepButton_clicked	qt_pro/configwindow.cpp	/^void ConfigWindow::on_laststepButton_clicked()$/;"	f	class:ConfigWindow
on_local_network	torrent/src/peer_connection.cpp	/^	bool peer_connection::on_local_network() const$/;"	f	class:libtorrent::peer_connection
on_local_network	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::on_local_network() const$/;"	f	class:libtorrent::peer_connection_handle
on_lookup	torrent/src/resolver.cpp	/^	void resolver::on_lookup(error_code const& ec, tcp::resolver::iterator i$/;"	f	class:libtorrent::resolver
on_lsd_announce	torrent/src/session_impl.cpp	/^	void session_impl::on_lsd_announce(error_code const& e)$/;"	f	class:libtorrent::aux::session_impl
on_lsd_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_lsd_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_lsd_peer	torrent/src/session_impl.cpp	/^	void session_impl::on_lsd_peer(tcp::endpoint const& peer, sha1_hash const& ih)$/;"	f	class:libtorrent::aux::session_impl
on_lsd_peer_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_lsd_peer_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_message	torrent/bak/connection_tester.cpp	/^	void on_message(error_code const& ec, size_t bytes_transferred)$/;"	f	struct:peer_conn
on_metadata	torrent/include/libtorrent/peer_connection.hpp	/^		virtual void on_metadata() {}$/;"	f	class:libtorrent::peer_connection
on_metadata	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_metadata()$/;"	f	class:libtorrent::bt_peer_connection
on_metadata_impl	torrent/src/peer_connection.cpp	/^	void peer_connection::on_metadata_impl()$/;"	f	class:libtorrent::peer_connection
on_msg_length	torrent/bak/connection_tester.cpp	/^	void on_msg_length(error_code const& ec, size_t)$/;"	f	struct:peer_conn
on_name_lookup	torrent/src/i2p_stream.cpp	/^	void i2p_connection::on_name_lookup(error_code const& ec$/;"	f	class:libtorrent::i2p_connection
on_name_lookup	torrent/src/torrent.cpp	/^	void torrent::on_name_lookup(error_code const& e$/;"	f	class:libtorrent::torrent
on_name_lookup	torrent/src/udp_socket.cpp	/^void socks5::on_name_lookup(error_code const& e, tcp::resolver::iterator i)$/;"	f	class:libtorrent::socks5
on_nextButton_clicked	qt_pro/configwindow.cpp	/^void ConfigWindow::on_nextButton_clicked()$/;"	f	class:ConfigWindow
on_not_interested	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_not_interested() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_not_interested	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_not_interested(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_parole	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t on_parole = 9_bit;$/;"	m	struct:libtorrent::peer_info
on_parole	torrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t on_parole = 2_bit;$/;"	m	class:libtorrent::piece_picker
on_parole	torrent/include/libtorrent/torrent_peer.hpp	/^		bool on_parole:1;$/;"	m	struct:libtorrent::torrent_peer
on_parole	torrent/src/peer_connection.cpp	/^	bool peer_connection::on_parole() const$/;"	f	class:libtorrent::peer_connection
on_parole	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::on_parole;$/;"	m	class:libtorrent::peer_info	file:
on_parole	torrent/src/piece_picker.cpp	/^	constexpr picker_options_t piece_picker::on_parole;$/;"	m	class:libtorrent::piece_picker	file:
on_pause	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_pause() { return false; }$/;"	f	struct:libtorrent::torrent_plugin
on_peer_name_lookup	torrent/src/torrent.cpp	/^	void torrent::on_peer_name_lookup(error_code const& e$/;"	f	class:libtorrent::torrent
on_piece	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_piece(peer_request const& \/*piece*\/$/;"	f	struct:libtorrent::peer_plugin
on_piece	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_piece(int const received)$/;"	f	class:libtorrent::bt_peer_connection
on_piece_fail_sync	torrent/src/torrent.cpp	/^	void torrent::on_piece_fail_sync(piece_index_t, piece_block) try$/;"	f	class:libtorrent::torrent
on_piece_failed	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_piece_failed(piece_index_t) {}$/;"	f	struct:libtorrent::peer_plugin
on_piece_failed	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_piece_failed(piece_index_t) {}$/;"	f	struct:libtorrent::torrent_plugin
on_piece_hashed	torrent/src/torrent.cpp	/^	void torrent::on_piece_hashed(piece_index_t const piece$/;"	f	class:libtorrent::torrent
on_piece_pass	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_piece_pass(piece_index_t) {}$/;"	f	struct:libtorrent::peer_plugin
on_piece_pass	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_piece_pass(piece_index_t) {}$/;"	f	struct:libtorrent::torrent_plugin
on_piece_sync	torrent/src/torrent.cpp	/^	void torrent::on_piece_sync(piece_index_t const piece) try$/;"	f	class:libtorrent::torrent
on_piece_verified	torrent/src/torrent.cpp	/^	void torrent::on_piece_verified(piece_index_t const piece$/;"	f	class:libtorrent::torrent
on_port_mapping	torrent/src/session_impl.cpp	/^	void session_impl::on_port_mapping(port_mapping_t const mapping$/;"	f	class:libtorrent::aux::session_impl
on_proxy_name_lookup	torrent/src/torrent.cpp	/^	void torrent::on_proxy_name_lookup(error_code const& e$/;"	f	class:libtorrent::torrent
on_pushButton_11_clicked	qt_pro/oswindow.cpp	/^void OSWindow::on_pushButton_11_clicked()$/;"	f	class:OSWindow
on_pushButton_12_clicked	qt_pro/oswindow.cpp	/^void OSWindow::on_pushButton_12_clicked()$/;"	f	class:OSWindow
on_read	torrent/src/http_connection.cpp	/^void http_connection::on_read(error_code const& e$/;"	f	class:libtorrent::http_connection
on_read	torrent/src/utp_stream.cpp	/^void utp_stream::on_read(void* self, std::size_t const bytes_transferred$/;"	f	class:libtorrent::utp_stream
on_read_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_read_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_read_failed_block	torrent/src/smart_ban.cpp	/^		void on_read_failed_block(piece_block const b, address const a$/;"	f	struct:libtorrent::__anon85::final	file:
on_read_ok_block	torrent/src/smart_ban.cpp	/^		void on_read_ok_block(std::pair<piece_block, block_entry> const b$/;"	f	struct:libtorrent::__anon85::final	file:
on_rebootButton_clicked	qt_pro/mainwindow.cpp	/^void MainWindow::on_rebootButton_clicked()$/;"	f	class:MainWindow
on_receive	torrent/src/broadcast_socket.cpp	/^	void broadcast_socket::on_receive(socket_entry* s, error_code const& ec$/;"	f	class:libtorrent::broadcast_socket
on_receive	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_receive(error_code const& error$/;"	f	class:libtorrent::bt_peer_connection
on_receive	torrent/src/http_seed_connection.cpp	/^	void http_seed_connection::on_receive(error_code const& error$/;"	f	class:libtorrent::http_seed_connection
on_receive	torrent/src/udp_tracker_connection.cpp	/^	bool udp_tracker_connection::on_receive(udp::endpoint const& ep$/;"	f	class:libtorrent::udp_tracker_connection
on_receive	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::on_receive(error_code const& error$/;"	f	class:libtorrent::web_peer_connection
on_receive_data	torrent/src/peer_connection.cpp	/^	void peer_connection::on_receive_data(const error_code& error$/;"	f	class:libtorrent::peer_connection
on_receive_hostname	torrent/src/udp_tracker_connection.cpp	/^	bool udp_tracker_connection::on_receive_hostname(char const* hostname$/;"	f	class:libtorrent::udp_tracker_connection
on_receive_impl	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_receive_impl(std::size_t bytes_transferred)$/;"	f	class:libtorrent::bt_peer_connection
on_receive_padfile	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::on_receive_padfile()$/;"	f	class:libtorrent::web_peer_connection
on_reject	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_reject(peer_request const&) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_reject_request	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_reject_request(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_reply	torrent/src/natpmp.cpp	/^void natpmp::on_reply(error_code const& e$/;"	f	class:libtorrent::natpmp
on_reply	torrent/src/upnp.cpp	/^void upnp::on_reply(udp::socket& s, error_code const& ec)$/;"	f	class:libtorrent::upnp
on_req_sent	torrent/bak/connection_tester.cpp	/^	void on_req_sent(char* m, error_code const& ec, size_t)$/;"	f	struct:peer_conn
on_request	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_request(peer_request const&) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_request	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_request(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_resend_request	torrent/src/natpmp.cpp	/^void natpmp::on_resend_request(port_mapping_t const i, error_code const& e)$/;"	f	class:libtorrent::natpmp
on_resolve	torrent/src/http_connection.cpp	/^void http_connection::on_resolve(error_code const& e$/;"	f	class:libtorrent::http_connection
on_response	torrent/src/http_tracker_connection.cpp	/^	void http_tracker_connection::on_response(error_code const& ec$/;"	f	class:libtorrent::http_tracker_connection
on_resume	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_resume() { return false; }$/;"	f	struct:libtorrent::torrent_plugin
on_resume_data_checked	torrent/src/torrent.cpp	/^	void torrent::on_resume_data_checked(status_t const status$/;"	f	class:libtorrent::torrent
on_retry_socks_connect	torrent/src/udp_socket.cpp	/^void socks5::on_retry_socks_connect(error_code const& e)$/;"	f	class:libtorrent::socks5
on_sam_connect	torrent/src/i2p_stream.cpp	/^	void i2p_connection::on_sam_connect(error_code const& ec$/;"	f	class:libtorrent::i2p_connection
on_scrape_response	torrent/src/udp_tracker_connection.cpp	/^	bool udp_tracker_connection::on_scrape_response(span<char const> buf)$/;"	f	class:libtorrent::udp_tracker_connection
on_seed_mode_hashed	torrent/src/peer_connection.cpp	/^	void peer_connection::on_seed_mode_hashed(piece_index_t const piece$/;"	f	class:libtorrent::peer_connection
on_send_data	torrent/src/peer_connection.cpp	/^	void peer_connection::on_send_data(error_code const& error$/;"	f	class:libtorrent::peer_connection
on_sent	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_sent(error_code const& error$/;"	f	class:libtorrent::bt_peer_connection
on_sent	torrent/src/web_connection_base.cpp	/^	void web_connection_base::on_sent(error_code const& error$/;"	f	class:libtorrent::web_connection_base
on_state	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_state(torrent_status::state_t) {}$/;"	f	struct:libtorrent::torrent_plugin
on_storage_moved	torrent/src/torrent.cpp	/^	void torrent::on_storage_moved(status_t const status, std::string const& path$/;"	f	class:libtorrent::torrent
on_suggest	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_suggest(piece_index_t) { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_suggest_piece	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_suggest_piece(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_template_size_edit_textChanged	qt_pro/oswindow.cpp	/^void OSWindow::on_template_size_edit_textChanged(const QString &arg1)$/;"	f	class:OSWindow
on_tick	torrent/include/libtorrent/extensions.hpp	/^		virtual void on_tick() {}$/;"	f	struct:libtorrent::plugin
on_tick	torrent/include/libtorrent/peer_connection.hpp	/^		virtual void on_tick() {}$/;"	f	class:libtorrent::peer_connection
on_tick	torrent/src/session_impl.cpp	/^	void session_impl::on_tick(error_code const& e)$/;"	f	class:libtorrent::aux::session_impl
on_tick_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_tick_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_timeout	torrent/src/http_connection.cpp	/^void http_connection::on_timeout(std::weak_ptr<http_connection> p$/;"	f	class:libtorrent::http_connection
on_timeout	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::on_timeout(error_code const& ec)$/;"	f	class:libtorrent::udp_tracker_connection
on_torrent_aborted	torrent/src/torrent.cpp	/^	void torrent::on_torrent_aborted()$/;"	f	class:libtorrent::torrent
on_torrent_download	torrent/src/torrent.cpp	/^	void torrent::on_torrent_download(error_code const& ec$/;"	f	class:libtorrent::torrent
on_torrent_paused	torrent/src/torrent.cpp	/^	void torrent::on_torrent_paused() try$/;"	f	class:libtorrent::torrent
on_tracker_announce	torrent/src/torrent.cpp	/^	void torrent::on_tracker_announce(error_code const& ec) try$/;"	f	class:libtorrent::torrent
on_trigger_auto_manage	torrent/src/session_impl.cpp	/^	void session_impl::on_trigger_auto_manage()$/;"	f	class:libtorrent::aux::session_impl
on_udp_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_udp_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
on_udp_packet	torrent/src/session_impl.cpp	/^	void session_impl::on_udp_packet(std::weak_ptr<session_udp_socket> socket$/;"	f	class:libtorrent::aux::session_impl
on_udp_writeable	torrent/src/session_impl.cpp	/^	void session_impl::on_udp_writeable(std::weak_ptr<session_udp_socket> sock, error_code const& ec)$/;"	f	class:libtorrent::aux::session_impl
on_unchoke	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_unchoke() { return false; }$/;"	f	struct:libtorrent::peer_plugin
on_unchoke	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::on_unchoke(int received)$/;"	f	class:libtorrent::bt_peer_connection
on_unknown_message	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_unknown_message(int \/*length*\/, int \/*msg*\/,$/;"	f	struct:libtorrent::peer_plugin
on_unknown_torrent	torrent/include/libtorrent/extensions.hpp	/^		virtual bool on_unknown_torrent(sha1_hash const& \/* info_hash *\/$/;"	f	struct:libtorrent::plugin
on_uploadButton_clicked	qt_pro/mainwindow.cpp	/^void MainWindow::on_uploadButton_clicked()$/;"	f	class:MainWindow
on_upnp_get_ip_address_response	torrent/src/upnp.cpp	/^void upnp::on_upnp_get_ip_address_response(error_code const& e$/;"	f	class:libtorrent::upnp
on_upnp_map_response	torrent/src/upnp.cpp	/^void upnp::on_upnp_map_response(error_code const& e$/;"	f	class:libtorrent::upnp
on_upnp_unmap_response	torrent/src/upnp.cpp	/^void upnp::on_upnp_unmap_response(error_code const& e$/;"	f	class:libtorrent::upnp
on_upnp_xml	torrent/src/upnp.cpp	/^void upnp::on_upnp_xml(error_code const& e$/;"	f	class:libtorrent::upnp
on_write	torrent/src/http_connection.cpp	/^void http_connection::on_write(error_code const& e)$/;"	f	class:libtorrent::http_connection
on_write	torrent/src/utp_stream.cpp	/^void utp_stream::on_write(void* self, std::size_t const bytes_transferred$/;"	f	class:libtorrent::utp_stream
on_write_counter	torrent/include/libtorrent/performance_counters.hpp	/^			on_write_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
only_if_modified	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr resume_data_flags_t only_if_modified = 2_bit;$/;"	m	struct:libtorrent::torrent_handle
only_if_modified	torrent/src/torrent_handle.cpp	/^	constexpr resume_data_flags_t torrent_handle::only_if_modified;$/;"	m	class:libtorrent::torrent_handle	file:
only_permanent_leases_supported	torrent/include/libtorrent/upnp.hpp	/^			only_permanent_leases_supported = 725,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
op	torrent/include/libtorrent/alert_types.hpp	/^		operation_t const op;$/;"	m	struct:libtorrent::final
op	torrent/include/libtorrent/alert_types.hpp	/^		operation_t op;$/;"	m	namespace:libtorrent
op	torrent/include/libtorrent/alert_types.hpp	/^		operation_t op;$/;"	m	struct:libtorrent::final
op_t	torrent/include/libtorrent/alert_types.hpp	/^		enum TORRENT_DEPRECATED_ENUM op_t$/;"	g	namespace:libtorrent
opcode_announce	torrent/include/libtorrent/natpmp.hpp	/^		opcode_announce = 0,$/;"	e	enum:libtorrent::natpmp::pcp_opcode
opcode_map	torrent/include/libtorrent/natpmp.hpp	/^		opcode_map,$/;"	e	enum:libtorrent::natpmp::pcp_opcode
opcode_peer	torrent/include/libtorrent/natpmp.hpp	/^		opcode_peer,$/;"	e	enum:libtorrent::natpmp::pcp_opcode
open	torrent/include/libtorrent/alert_types.hpp	/^			open TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
open	torrent/include/libtorrent/proxy_base.hpp	/^	void open(protocol_type const&)$/;"	f	class:libtorrent::proxy_base
open	torrent/include/libtorrent/proxy_base.hpp	/^	void open(protocol_type const&, error_code&)$/;"	f	class:libtorrent::proxy_base
open	torrent/include/libtorrent/ssl_stream.hpp	/^	void open(protocol_type const& p)$/;"	f	class:libtorrent::ssl_stream
open	torrent/include/libtorrent/ssl_stream.hpp	/^	void open(protocol_type const& p, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
open	torrent/include/libtorrent/utp_stream.hpp	/^	void open(Protocol const&)$/;"	f	struct:libtorrent::utp_stream
open	torrent/include/libtorrent/utp_stream.hpp	/^	void open(Protocol const&, error_code&)$/;"	f	struct:libtorrent::utp_stream
open	torrent/src/broadcast_socket.cpp	/^	void broadcast_socket::open(receive_handler_t handler$/;"	f	class:libtorrent::broadcast_socket
open	torrent/src/file.cpp	/^	bool file::open(std::string const& path, open_mode_t mode, error_code& ec)$/;"	f	class:libtorrent::file
open	torrent/src/i2p_stream.cpp	/^	void i2p_connection::open(std::string const& s, int port$/;"	f	class:libtorrent::i2p_connection
open	torrent/src/socket_type.cpp	/^	void socket_type::open(protocol_type const& p)$/;"	f	class:libtorrent::aux::socket_type
open	torrent/src/socket_type.cpp	/^	void socket_type::open(protocol_type const& p, error_code& ec)$/;"	f	class:libtorrent::aux::socket_type
open	torrent/src/udp_socket.cpp	/^void udp_socket::open(udp const& protocol, error_code& ec)$/;"	f	class:libtorrent::udp_socket
open_count	include/device.h	/^    int open_count;             \/\/the number of times this device has$/;"	m	struct:_PedDevice
open_data_connection	virt-p2v/src/ssh.c	/^open_data_connection (struct config *config,$/;"	f
open_file	torrent/src/file_pool.cpp	/^	file_handle file_pool::open_file(storage_index_t st, std::string const& p$/;"	f	class:libtorrent::file_pool
open_file	torrent/src/part_file.cpp	/^	void part_file::open_file(open_mode_t const mode, error_code& ec)$/;"	f	class:libtorrent::part_file
open_file	torrent/src/storage.cpp	/^	file_handle default_storage::open_file(file_index_t const file$/;"	f	class:libtorrent::default_storage
open_file_impl	torrent/src/storage.cpp	/^	file_handle default_storage::open_file_impl(file_index_t file, open_mode_t mode$/;"	f	class:libtorrent::default_storage
open_file_state	torrent/include/libtorrent/disk_interface.hpp	/^	struct TORRENT_EXPORT open_file_state$/;"	s	namespace:libtorrent
open_listening_socket	virt-p2v/src/nbd.c	/^open_listening_socket (const char *ipaddr, int **fds, size_t *nr_fds)$/;"	f	file:
open_mode	torrent/include/libtorrent/disk_interface.hpp	/^		file_open_mode_t open_mode;$/;"	m	struct:libtorrent::open_file_state
open_mode	torrent/include/libtorrent/file.hpp	/^		open_mode_t open_mode() const { return m_open_mode; }$/;"	f	struct:libtorrent::file
open_mode	torrent/include/libtorrent/file.hpp	/^	namespace open_mode {$/;"	n	namespace:libtorrent
open_multicast_socket	torrent/src/broadcast_socket.cpp	/^	void broadcast_socket::open_multicast_socket(io_service& ios$/;"	f	class:libtorrent::broadcast_socket
open_multicast_socket	torrent/src/upnp.cpp	/^void upnp::open_multicast_socket(udp::socket& s, error_code& ec)$/;"	f	class:libtorrent::upnp
open_new_incoming_i2p_connection	torrent/src/session_impl.cpp	/^	void session_impl::open_new_incoming_i2p_connection()$/;"	f	class:libtorrent::aux::session_impl
open_unicast_socket	torrent/src/broadcast_socket.cpp	/^	void broadcast_socket::open_unicast_socket(io_service& ios, address const& addr$/;"	f	class:libtorrent::broadcast_socket
open_unicast_socket	torrent/src/upnp.cpp	/^void upnp::open_unicast_socket(udp::socket& s, error_code& ec)$/;"	f	class:libtorrent::upnp
openssl_cleanup	torrent/src/session_impl.cpp	/^	struct openssl_cleanup$/;"	s	namespace:__anon45	file:
openssl_general_name_value	torrent/src/openssl.cpp	/^GENERAL_NAME* openssl_general_name_value(GENERAL_NAMES* gens, int i)$/;"	f	namespace:libtorrent::aux
openssl_global_destructor	torrent/src/session_impl.cpp	/^	} openssl_global_destructor;$/;"	m	namespace:__anon45	typeref:struct:__anon45::openssl_cleanup	file:
openssl_num_general_names	torrent/src/openssl.cpp	/^int openssl_num_general_names(GENERAL_NAMES* gens)$/;"	f	namespace:libtorrent::aux
openssl_set_tlsext_hostname	torrent/src/openssl.cpp	/^void openssl_set_tlsext_hostname(SSL* s, char const* name)$/;"	f	namespace:libtorrent::aux
openssl_set_tlsext_servername_arg	torrent/src/openssl.cpp	/^void openssl_set_tlsext_servername_arg(SSL_CTX* ctx, void* userdata)$/;"	f	namespace:libtorrent::aux
openssl_set_tlsext_servername_callback	torrent/src/openssl.cpp	/^void openssl_set_tlsext_servername_callback(SSL_CTX* ctx$/;"	f	namespace:libtorrent::aux
operation	torrent/include/libtorrent/alert_types.hpp	/^		char const* TORRENT_DEPRECATED_MEMBER operation;$/;"	m	struct:libtorrent::final
operation	torrent/include/libtorrent/alert_types.hpp	/^		int const TORRENT_DEPRECATED_MEMBER operation;$/;"	m	namespace:libtorrent
operation	torrent/include/libtorrent/alert_types.hpp	/^		int const TORRENT_DEPRECATED_MEMBER operation;$/;"	m	struct:libtorrent::final
operation	torrent/include/libtorrent/alert_types.hpp	/^		operation_t operation;$/;"	m	struct:libtorrent::final
operation	torrent/include/libtorrent/debug.hpp	/^		char const* operation;$/;"	m	struct:libtorrent::wakeup_t
operation	torrent/include/libtorrent/error_code.hpp	/^		operation_t operation;$/;"	m	struct:libtorrent::storage_error
operation_name	torrent/src/alert.cpp	/^	char const* operation_name(int const op)$/;"	f	namespace:libtorrent
operation_name	torrent/src/alert.cpp	/^	char const* operation_name(operation_t const op)$/;"	f	namespace:libtorrent
operation_t	torrent/include/libtorrent/operations.hpp	/^	enum class operation_t : std::uint8_t$/;"	c	namespace:libtorrent
operator !=	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		bool operator!=(listen_socket_handle const& o) const$/;"	f	struct:libtorrent::aux::listen_socket_handle
operator !=	torrent/include/libtorrent/entry.hpp	/^	inline bool operator!=(entry const& lhs, entry const& rhs) { return !(lhs == rhs); }$/;"	f	namespace:libtorrent
operator !=	torrent/include/libtorrent/index_range.hpp	/^	friend inline bool operator!=(index_iter lhs, index_iter rhs)$/;"	f	struct:libtorrent::index_iter
operator !=	torrent/include/libtorrent/netlink.hpp	/^		friend bool operator!=(const netlink& l, const netlink& r)$/;"	f	class:libtorrent::netlink
operator !=	torrent/include/libtorrent/peer_connection_handle.hpp	/^	bool operator!=(peer_connection_handle const& o) const$/;"	f	struct:libtorrent::peer_connection_handle
operator !=	torrent/include/libtorrent/piece_block.hpp	/^		bool operator!=(piece_block const& b) const$/;"	f	struct:libtorrent::piece_block
operator !=	torrent/include/libtorrent/piece_picker.hpp	/^			bool operator!=(piece_pos const& p) const$/;"	f	struct:libtorrent::piece_picker::piece_pos
operator !=	torrent/include/libtorrent/span.hpp	/^	inline bool operator!=(span<T> const& lhs, span<U> const& rhs)$/;"	f	namespace:libtorrent
operator !=	torrent/include/libtorrent/stack_allocator.hpp	/^		bool operator!=(allocation_slot const& s) const { return m_idx != s.m_idx; }$/;"	f	struct:libtorrent::aux::allocation_slot
operator !=	torrent/include/libtorrent/torrent_handle.hpp	/^		bool operator!=(const torrent_handle& h) const$/;"	f	struct:libtorrent::torrent_handle
operator !=	torrent/include/libtorrent/union_endpoint.hpp	/^		bool operator!=(union_address const& rh) const$/;"	f	struct:libtorrent::union_address
operator !=	torrent/include/libtorrent/units.hpp	/^		constexpr bool operator!=(strong_typedef const& rhs) const { return m_val != rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator ()	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		void operator()(A&&... a) const$/;"	f	struct:libtorrent::aux::allocating_handler
operator ()	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^	void operator()(Args&&... a)$/;"	f	struct:libtorrent::aux::handler_wrapper
operator ()	torrent/include/libtorrent/aux_/has_block.hpp	/^		bool operator()(pending_block const& pb) const$/;"	f	struct:libtorrent::aux::has_block
operator ()	torrent/include/libtorrent/block_cache.hpp	/^			std::size_t operator()(cached_piece_entry const& p) const$/;"	f	struct:libtorrent::block_cache::hash_value
operator ()	torrent/include/libtorrent/entry.hpp	/^			bool operator()(T1 const& rhs, T2 const& lhs) const$/;"	f	struct:libtorrent::aux::strview_less
operator ()	torrent/include/libtorrent/heterogeneous_queue.hpp	/^	{ void operator()(char* ptr) { return std::free(ptr); } };$/;"	f	struct:libtorrent::aux::free_deleter
operator ()	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	result_type operator()(argument_type const& ip) const$/;"	f	struct:libtorrent::dht::ipv4_hash
operator ()	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	result_type operator()(argument_type const& ip) const$/;"	f	struct:libtorrent::dht::ipv6_hash
operator ()	torrent/include/libtorrent/packet_pool.hpp	/^		void operator()(packet* p) const$/;"	f	struct:libtorrent::packet_deleter
operator ()	torrent/include/libtorrent/piece_picker.hpp	/^			bool operator()(downloading_piece const& p) const$/;"	f	struct:libtorrent::piece_picker::has_index
operator ()	torrent/include/libtorrent/sha1_hash.hpp	/^		std::size_t operator()(libtorrent::sha1_hash const& k) const$/;"	f	struct:std::hash
operator ()	torrent/include/libtorrent/torrent_handle.hpp	/^		std::size_t operator()(libtorrent::torrent_handle const& th) const$/;"	f	struct:std::hash
operator ()	torrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(address const& lhs, torrent_peer const* rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	torrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(string_view lhs, torrent_peer const* rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	torrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(torrent_peer const* lhs, address const& rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	torrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(torrent_peer const* lhs, string_view rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	torrent/include/libtorrent/torrent_peer.hpp	/^		bool operator()(torrent_peer const* lhs, torrent_peer const* rhs) const$/;"	f	struct:libtorrent::peer_address_compare
operator ()	torrent/include/libtorrent/torrent_status.hpp	/^		std::size_t operator()(libtorrent::torrent_status const& ts) const$/;"	f	struct:std::hash
operator ()	torrent/include/libtorrent/units.hpp	/^		result_type operator()(argument_type const& s) const$/;"	f	struct:std::hash
operator ()	torrent/kademlia/dht_storage.cpp	/^		bool operator()(std::pair<node_id const, Item> const& lhs$/;"	f	struct:libtorrent::dht::__anon153::immutable_item_comparator
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::check_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::clear_piece_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::hash_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::move_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::read_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::release_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::rename_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::set_file_prio_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/disk_io_job.cpp	/^			void operator()(disk_io_job::write_handler& h) const$/;"	f	struct:libtorrent::__anon115::caller_visitor
operator ()	torrent/src/peer_list.cpp	/^		bool operator()(torrent_peer const* p) const$/;"	f	struct:__anon56::match_peer_endpoint
operator ()	torrent/src/session_impl.cpp	/^			bool operator()(opt_unchoke_candidate const& l$/;"	f	struct:libtorrent::aux::__anon49::last_optimistic_unchoke_cmp
operator ()	torrent/src/socket_type.cpp	/^		void operator()(error_code const&)$/;"	f	struct:libtorrent::aux::socket_closer
operator ()	torrent/src/torrent_info.cpp	/^			void operator() (web_seed_entry const& w)$/;"	f	struct:libtorrent::__anon89::filter_web_seed_type
operator *	torrent/include/libtorrent/aux_/string_ptr.hpp	/^		char const* operator*() const { return m_ptr; }$/;"	f	struct:libtorrent::aux::string_ptr
operator *	torrent/include/libtorrent/copy_ptr.hpp	/^		T const& operator*() const { return *m_ptr; }$/;"	f	struct:libtorrent::copy_ptr
operator *	torrent/include/libtorrent/copy_ptr.hpp	/^		T& operator*() { return *m_ptr; }$/;"	f	struct:libtorrent::copy_ptr
operator *	torrent/include/libtorrent/index_range.hpp	/^	Index operator*() const { return m_idx; }$/;"	f	struct:libtorrent::index_iter
operator +	torrent/include/libtorrent/units.hpp	/^		friend strong_typedef operator+(diff_type lhs, strong_typedef rhs)$/;"	f	struct:libtorrent::aux::strong_typedef
operator +	torrent/include/libtorrent/units.hpp	/^		friend strong_typedef operator+(strong_typedef lhs, diff_type rhs)$/;"	f	struct:libtorrent::aux::strong_typedef
operator ++	torrent/include/libtorrent/index_range.hpp	/^	index_iter operator++()$/;"	f	struct:libtorrent::index_iter
operator ++	torrent/include/libtorrent/kademlia/types.hpp	/^		sequence_number& operator++()$/;"	f	struct:libtorrent::dht::sequence_number
operator ++	torrent/include/libtorrent/units.hpp	/^		strong_typedef operator++(int) & { return strong_typedef{m_val++}; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator ++	torrent/include/libtorrent/units.hpp	/^		strong_typedef& operator++() { ++m_val; return *this; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator +=	torrent/include/libtorrent/stat.hpp	/^		void operator+=(const stat& s)$/;"	f	class:libtorrent::stat
operator +=	torrent/include/libtorrent/stat.hpp	/^		void operator+=(stat_channel const& s)$/;"	f	class:libtorrent::stat_channel
operator +=	torrent/include/libtorrent/units.hpp	/^		strong_typedef& operator+=(diff_type rhs) &$/;"	f	struct:libtorrent::aux::strong_typedef
operator -	torrent/include/libtorrent/units.hpp	/^		friend diff_type operator-(strong_typedef lhs, strong_typedef rhs)$/;"	f	struct:libtorrent::aux::strong_typedef
operator -	torrent/include/libtorrent/units.hpp	/^		friend strong_typedef operator-(strong_typedef lhs, diff_type rhs)$/;"	f	struct:libtorrent::aux::strong_typedef
operator --	torrent/include/libtorrent/index_range.hpp	/^	index_iter operator--()$/;"	f	struct:libtorrent::index_iter
operator --	torrent/include/libtorrent/units.hpp	/^		strong_typedef operator--(int) & { return strong_typedef{m_val--}; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator --	torrent/include/libtorrent/units.hpp	/^		strong_typedef& operator--() { --m_val; return *this; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator -=	torrent/include/libtorrent/units.hpp	/^		strong_typedef& operator-=(diff_type rhs) &$/;"	f	struct:libtorrent::aux::strong_typedef
operator ->	torrent/include/libtorrent/copy_ptr.hpp	/^		T const* operator->() const { return m_ptr.get(); }$/;"	f	struct:libtorrent::copy_ptr
operator ->	torrent/include/libtorrent/copy_ptr.hpp	/^		T* operator->() { return m_ptr.get(); }$/;"	f	struct:libtorrent::copy_ptr
operator <	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		bool operator<(listen_socket_handle const& o) const$/;"	f	struct:libtorrent::aux::listen_socket_handle
operator <	torrent/include/libtorrent/ip_filter.hpp	/^			bool operator<(Addr const& a) const { return start < a; }$/;"	f	struct:libtorrent::detail::filter_impl::range
operator <	torrent/include/libtorrent/ip_filter.hpp	/^			bool operator<(range const& r) const { return start < r.start; }$/;"	f	struct:libtorrent::detail::filter_impl::range
operator <	torrent/include/libtorrent/ip_voter.hpp	/^			bool operator<(external_ip_t const& rhs) const$/;"	f	struct:libtorrent::ip_voter::external_ip_t
operator <	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	bool operator<(node_entry const& rhs) const$/;"	f	struct:libtorrent::dht::node_entry
operator <	torrent/include/libtorrent/kademlia/types.hpp	/^		bool operator<(sequence_number rhs) const$/;"	f	struct:libtorrent::dht::sequence_number
operator <	torrent/include/libtorrent/lazy_entry.hpp	/^		bool operator<(pascal_string const& rhs) const$/;"	f	struct:libtorrent::pascal_string
operator <	torrent/include/libtorrent/peer.hpp	/^		bool operator<(const peer_entry& p) const$/;"	f	struct:libtorrent::peer_entry
operator <	torrent/include/libtorrent/peer_connection_handle.hpp	/^	bool operator<(peer_connection_handle const& o) const$/;"	f	struct:libtorrent::peer_connection_handle
operator <	torrent/include/libtorrent/piece_block.hpp	/^		bool operator<(piece_block const& b) const$/;"	f	struct:libtorrent::piece_block
operator <	torrent/include/libtorrent/piece_picker.hpp	/^			bool operator<(downloading_piece const& rhs) const { return index < rhs.index; }$/;"	f	struct:libtorrent::piece_picker::downloading_piece
operator <	torrent/include/libtorrent/torrent.hpp	/^		bool operator<(time_critical_piece const& rhs) const$/;"	f	struct:libtorrent::time_critical_piece
operator <	torrent/include/libtorrent/torrent_handle.hpp	/^		bool operator<(const torrent_handle& h) const$/;"	f	struct:libtorrent::torrent_handle
operator <	torrent/include/libtorrent/torrent_info.hpp	/^		bool operator<(web_seed_entry const& e) const$/;"	f	struct:libtorrent::web_seed_entry
operator <	torrent/include/libtorrent/units.hpp	/^		constexpr bool operator<(strong_typedef const& rhs) const { return m_val < rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator <	torrent/include/libtorrent/upnp.hpp	/^		bool operator<(rootdevice const& rhs) const$/;"	f	struct:libtorrent::final::rootdevice
operator <	torrent/kademlia/dht_storage.cpp	/^	bool operator<(peer_entry const& lhs, peer_entry const& rhs)$/;"	f	namespace:libtorrent::dht::__anon153
operator <	torrent/src/torrent.cpp	/^		bool operator<(busy_block_t const& rhs) const { return peers < rhs.peers; }$/;"	f	struct:libtorrent::__anon114::busy_block_t
operator <	torrent/src/ut_metadata.cpp	/^			bool operator<(metadata_piece const& rhs) const$/;"	f	struct:libtorrent::__anon72::final::metadata_piece
operator <<	torrent/include/libtorrent/entry.hpp	/^	inline std::ostream& operator<<(std::ostream& os, const entry& e)$/;"	f	namespace:libtorrent
operator <<	torrent/include/libtorrent/flags.hpp	/^	std::ostream& operator<<(std::ostream& os, bitfield_flag<T, Tag> val)$/;"	f	namespace:libtorrent
operator <<	torrent/include/libtorrent/units.hpp	/^	std::ostream& operator<<(std::ostream& os, strong_typedef<T, Tag> val)$/;"	f	namespace:libtorrent::aux
operator <<	torrent/src/sha1_hash.cpp	/^	std::ostream& operator<<(std::ostream& os, sha1_hash const& peer)$/;"	f	namespace:libtorrent
operator <=	torrent/include/libtorrent/ip_filter.hpp	/^inline bool operator<=(address const& lhs$/;"	f	namespace:libtorrent
operator <=	torrent/include/libtorrent/kademlia/types.hpp	/^		bool operator<=(sequence_number rhs) const$/;"	f	struct:libtorrent::dht::sequence_number
operator <=	torrent/include/libtorrent/units.hpp	/^		constexpr bool operator<=(strong_typedef const& rhs) const { return m_val <= rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator =	torrent/include/libtorrent/aux_/string_ptr.hpp	/^		string_ptr& operator=(string_ptr&& rhs)$/;"	f	struct:libtorrent::aux::string_ptr
operator =	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		crypt_hash& operator=(crypt_hash const& h) &$/;"	f	struct:libtorrent::aux::crypt_hash
operator =	torrent/include/libtorrent/bitfield.hpp	/^		bitfield& operator=(bitfield const& rhs)$/;"	f	struct:libtorrent::bitfield
operator =	torrent/include/libtorrent/bitfield.hpp	/^		typed_bitfield& operator=(typed_bitfield const& rhs)$/;"	f	namespace:libtorrent
operator =	torrent/include/libtorrent/buffer.hpp	/^	buffer& operator=(buffer&& b)$/;"	f	class:libtorrent::buffer
operator =	torrent/include/libtorrent/copy_ptr.hpp	/^		copy_ptr& operator=(copy_ptr const& p) &$/;"	f	struct:libtorrent::copy_ptr
operator =	torrent/include/libtorrent/entry.hpp	/^		entry& operator=(U v) &$/;"	f	class:libtorrent::entry
operator =	torrent/include/libtorrent/kademlia/types.hpp	/^		sequence_number& operator=(sequence_number rhs)$/;"	f	struct:libtorrent::dht::sequence_number
operator =	torrent/include/libtorrent/netlink.hpp	/^		basic_nl_endpoint& operator=(basic_nl_endpoint const& other)$/;"	f	class:libtorrent::basic_nl_endpoint
operator =	torrent/include/libtorrent/union_endpoint.hpp	/^		union_address& operator=(address const& a) &$/;"	f	struct:libtorrent::union_address
operator =	torrent/include/libtorrent/union_endpoint.hpp	/^		union_endpoint& operator=(tcp::endpoint const& ep) &$/;"	f	struct:libtorrent::union_endpoint
operator =	torrent/include/libtorrent/union_endpoint.hpp	/^		union_endpoint& operator=(udp::endpoint const& ep) &$/;"	f	struct:libtorrent::union_endpoint
operator =	torrent/include/libtorrent/utp_stream.hpp	/^		big_endian_int& operator=(T v)$/;"	f	struct:libtorrent::big_endian_int
operator =	torrent/src/bdecode.cpp	/^	bdecode_node& bdecode_node::operator=(bdecode_node const& n)$/;"	f	class:libtorrent::bdecode_node
operator =	torrent/src/entry.cpp	/^	entry& entry::operator=(bdecode_node const& e) &$/;"	f	class:libtorrent::entry
operator =	torrent/src/entry.cpp	/^	entry& entry::operator=(const entry& e) &$/;"	f	class:libtorrent::entry
operator =	torrent/src/entry.cpp	/^	entry& entry::operator=(dictionary_type v) &$/;"	f	class:libtorrent::entry
operator =	torrent/src/entry.cpp	/^	entry& entry::operator=(integer_type v) &$/;"	f	class:libtorrent::entry
operator =	torrent/src/entry.cpp	/^	entry& entry::operator=(lazy_entry const& e) &$/;"	f	class:libtorrent::entry
operator =	torrent/src/entry.cpp	/^	entry& entry::operator=(list_type v) &$/;"	f	class:libtorrent::entry
operator =	torrent/src/entry.cpp	/^	entry& entry::operator=(preformatted_type v) &$/;"	f	class:libtorrent::entry
operator =	torrent/src/entry.cpp	/^	entry& entry::operator=(span<char const> v) &$/;"	f	class:libtorrent::entry
operator =	torrent/src/file_storage.cpp	/^	internal_file_entry& internal_file_entry::operator=(internal_file_entry const& fe) &$/;"	f	class:libtorrent::internal_file_entry
operator =	torrent/src/hasher.cpp	/^	hasher& hasher::operator=(hasher const& h) &$/;"	f	class:libtorrent::hasher
operator =	torrent/src/hasher512.cpp	/^	hasher512& hasher512::operator=(hasher512 const& h) &$/;"	f	class:libtorrent::hasher512
operator =	torrent/src/lazy_bdecode.cpp	/^	lazy_entry& lazy_entry::operator=(lazy_entry&& other)$/;"	f	class:libtorrent::lazy_entry
operator ==	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		bool operator==(listen_socket_handle const& o) const$/;"	f	struct:libtorrent::aux::listen_socket_handle
operator ==	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool operator==(listen_endpoint_t const& o) const$/;"	f	struct:libtorrent::aux::listen_endpoint_t
operator ==	torrent/include/libtorrent/block_cache.hpp	/^		bool operator==(cached_piece_entry const& rhs) const$/;"	f	struct:libtorrent::cached_piece_entry
operator ==	torrent/include/libtorrent/index_range.hpp	/^	friend inline bool operator==(index_iter lhs, index_iter rhs)$/;"	f	struct:libtorrent::index_iter
operator ==	torrent/include/libtorrent/ip_filter.hpp	/^	friend bool operator==(ip_range const& lhs, ip_range const& rhs)$/;"	f	struct:libtorrent::ip_range
operator ==	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	bool operator==(ip_set const& rh)$/;"	f	struct:libtorrent::dht::ip_set
operator ==	torrent/include/libtorrent/kademlia/types.hpp	/^		bool operator==(public_key const& rhs) const$/;"	f	struct:libtorrent::dht::public_key
operator ==	torrent/include/libtorrent/kademlia/types.hpp	/^		bool operator==(secret_key const& rhs) const$/;"	f	struct:libtorrent::dht::secret_key
operator ==	torrent/include/libtorrent/kademlia/types.hpp	/^		bool operator==(sequence_number const& rhs) const$/;"	f	struct:libtorrent::dht::sequence_number
operator ==	torrent/include/libtorrent/kademlia/types.hpp	/^		bool operator==(signature const& rhs) const$/;"	f	struct:libtorrent::dht::signature
operator ==	torrent/include/libtorrent/netlink.hpp	/^		friend bool operator==(const netlink& l, const netlink& r)$/;"	f	class:libtorrent::netlink
operator ==	torrent/include/libtorrent/peer.hpp	/^		bool operator==(const peer_entry& p) const$/;"	f	struct:libtorrent::peer_entry
operator ==	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		friend bool operator==(peer_class_type_filter const& lhs$/;"	f	namespace:libtorrent
operator ==	torrent/include/libtorrent/peer_connection.hpp	/^		bool operator==(pending_block const& b) const$/;"	f	struct:libtorrent::pending_block
operator ==	torrent/include/libtorrent/peer_connection_handle.hpp	/^	bool operator==(peer_connection_handle const& o) const$/;"	f	struct:libtorrent::peer_connection_handle
operator ==	torrent/include/libtorrent/peer_request.hpp	/^		bool operator==(peer_request const& r) const$/;"	f	struct:libtorrent::peer_request
operator ==	torrent/include/libtorrent/piece_block.hpp	/^		bool operator==(piece_block const& b) const$/;"	f	struct:libtorrent::piece_block
operator ==	torrent/include/libtorrent/piece_picker.hpp	/^			bool operator==(piece_pos const& p) const$/;"	f	struct:libtorrent::piece_picker::piece_pos
operator ==	torrent/include/libtorrent/span.hpp	/^	inline bool operator==(span<T> const& lhs, span<U> const& rhs)$/;"	f	namespace:libtorrent
operator ==	torrent/include/libtorrent/stack_allocator.hpp	/^		bool operator==(allocation_slot const& s) const { return m_idx == s.m_idx; }$/;"	f	struct:libtorrent::aux::allocation_slot
operator ==	torrent/include/libtorrent/string_util.hpp	/^		friend bool operator==(listen_interface_t const& lhs, listen_interface_t const& rhs)$/;"	f	struct:libtorrent::listen_interface_t
operator ==	torrent/include/libtorrent/torrent_handle.hpp	/^		bool operator==(const torrent_handle& h) const$/;"	f	struct:libtorrent::torrent_handle
operator ==	torrent/include/libtorrent/torrent_info.hpp	/^		bool operator==(web_seed_entry const& e) const$/;"	f	struct:libtorrent::web_seed_entry
operator ==	torrent/include/libtorrent/torrent_status.hpp	/^		bool operator==(torrent_status const& st) const$/;"	f	struct:libtorrent::torrent_status
operator ==	torrent/include/libtorrent/union_endpoint.hpp	/^		bool operator==(union_address const& rh) const$/;"	f	struct:libtorrent::union_address
operator ==	torrent/include/libtorrent/units.hpp	/^		constexpr bool operator==(strong_typedef const& rhs) const { return m_val == rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator ==	torrent/src/entry.cpp	/^	bool operator==(entry const& lhs, entry const& rhs)$/;"	f	namespace:libtorrent
operator >	torrent/include/libtorrent/kademlia/types.hpp	/^		bool operator>(sequence_number rhs) const$/;"	f	struct:libtorrent::dht::sequence_number
operator >	torrent/include/libtorrent/units.hpp	/^		constexpr bool operator>(strong_typedef const& rhs) const { return m_val > rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator >=	torrent/include/libtorrent/units.hpp	/^		constexpr bool operator>=(strong_typedef const& rhs) const { return m_val >= rhs.m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator >>	torrent/src/sha1_hash.cpp	/^	std::istream& operator>>(std::istream& is, sha1_hash& peer)$/;"	f	namespace:libtorrent
operator T	torrent/include/libtorrent/utp_stream.hpp	/^		operator T() const$/;"	f	struct:libtorrent::big_endian_int
operator UnderlyingType	torrent/include/libtorrent/units.hpp	/^		constexpr explicit operator UnderlyingType() const { return m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator UnderlyingType	torrent/include/libtorrent/units.hpp	/^		constexpr operator UnderlyingType() const { return m_val; }$/;"	f	struct:libtorrent::aux::strong_typedef
operator []	torrent/include/libtorrent/bitfield.hpp	/^		bool operator[](IndexType const index) const$/;"	f	namespace:libtorrent
operator []	torrent/include/libtorrent/buffer.hpp	/^	char const& operator[](difference_type const i) const { TORRENT_ASSERT(i < size()); return m_begin[i]; }$/;"	f	class:libtorrent::buffer
operator []	torrent/include/libtorrent/buffer.hpp	/^	char& operator[](index_type const i) { TORRENT_ASSERT(i < size()); return m_begin[i]; }$/;"	f	class:libtorrent::buffer
operator []	torrent/include/libtorrent/span.hpp	/^		T& operator[](index_type const idx) const$/;"	f	struct:libtorrent::span
operator []	torrent/include/libtorrent/stat.hpp	/^		stat_channel const& operator[](int i) const$/;"	f	class:libtorrent::stat
operator []	torrent/src/entry.cpp	/^	const entry& entry::operator[](string_view key) const$/;"	f	class:libtorrent::entry
operator []	torrent/src/entry.cpp	/^	entry& entry::operator[](string_view key)$/;"	f	class:libtorrent::entry
operator address	torrent/include/libtorrent/union_endpoint.hpp	/^		operator address() const$/;"	f	struct:libtorrent::union_address
operator bool	torrent/include/libtorrent/aux_/listen_socket_handle.hpp	/^		explicit operator bool() const { return !m_sock.expired(); }$/;"	f	struct:libtorrent::aux::listen_socket_handle
operator bool	torrent/include/libtorrent/copy_ptr.hpp	/^		explicit operator bool() const { return m_ptr.get() != nullptr; }$/;"	f	struct:libtorrent::copy_ptr
operator bool	torrent/include/libtorrent/disk_interface.hpp	/^		explicit operator bool() const { return m_disk_io != nullptr; }$/;"	f	struct:libtorrent::storage_holder
operator bool	torrent/include/libtorrent/error_code.hpp	/^		explicit operator bool() const { return ec.value() != 0; }$/;"	f	struct:libtorrent::storage_error
operator int	torrent/include/libtorrent/flags.hpp	/^	explicit constexpr operator int() const { return m_bit_idx; }$/;"	f	struct:libtorrent::bit_t
operator storage_index_t	torrent/include/libtorrent/disk_interface.hpp	/^		operator storage_index_t() const$/;"	f	struct:libtorrent::storage_holder
operator tcp::endpoint	torrent/include/libtorrent/union_endpoint.hpp	/^		operator tcp::endpoint() const { return tcp::endpoint(addr, port); }$/;"	f	struct:libtorrent::union_endpoint
operator udp::endpoint	torrent/include/libtorrent/union_endpoint.hpp	/^		operator udp::endpoint() const { return udp::endpoint(addr, port); }$/;"	f	struct:libtorrent::union_endpoint
opt_unchoke_candidate	torrent/src/session_impl.cpp	/^			explicit opt_unchoke_candidate(std::shared_ptr<peer_connection> const* tp)$/;"	f	struct:libtorrent::aux::__anon49::opt_unchoke_candidate
opt_unchoke_candidate	torrent/src/session_impl.cpp	/^		struct opt_unchoke_candidate$/;"	s	namespace:libtorrent::aux::__anon49	file:
optimistic_disconnect	torrent/include/libtorrent/error_code.hpp	/^			optimistic_disconnect,$/;"	e	enum:libtorrent::errors::error_code_enum
optimistic_disk_retry	torrent/include/libtorrent/settings_pack.hpp	/^			optimistic_disk_retry,$/;"	e	enum:libtorrent::settings_pack::int_types
optimistic_unchoke	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t optimistic_unchoke = 11_bit;$/;"	m	struct:libtorrent::peer_info
optimistic_unchoke	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::optimistic_unchoke;$/;"	m	class:libtorrent::peer_info	file:
optimistic_unchoke_counter	torrent/include/libtorrent/session_status.hpp	/^		int optimistic_unchoke_counter;$/;"	m	struct:libtorrent::session_status
optimistic_unchoke_feature	torrent/include/libtorrent/extensions.hpp	/^		static constexpr feature_flags_t optimistic_unchoke_feature = 1_bit;$/;"	m	struct:libtorrent::plugin
optimistic_unchoke_feature	torrent/src/session.cpp	/^	constexpr feature_flags_t plugin::optimistic_unchoke_feature;$/;"	m	class:libtorrent::plugin	file:
optimistic_unchoke_interval	torrent/include/libtorrent/settings_pack.hpp	/^			optimistic_unchoke_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
optimistically_unchoked	torrent/include/libtorrent/torrent_peer.hpp	/^		bool optimistically_unchoked:1;$/;"	m	struct:libtorrent::torrent_peer
optimize	torrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t TORRENT_DEPRECATED_MEMBER optimize = 0_bit;$/;"	m	struct:libtorrent::create_torrent
optimize	torrent/src/create_torrent.cpp	/^	constexpr create_flags_t create_torrent::optimize;$/;"	m	class:libtorrent::create_torrent	file:
optimize	torrent/src/file_storage.cpp	/^	void file_storage::optimize(int const pad_file_limit, int alignment$/;"	f	class:libtorrent::file_storage
optimize_alignment	torrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t optimize_alignment = 0_bit;$/;"	m	struct:libtorrent::create_torrent
optimize_alignment	torrent/src/create_torrent.cpp	/^	constexpr create_flags_t create_torrent::optimize_alignment;$/;"	m	class:libtorrent::create_torrent	file:
optional	torrent/include/libtorrent/kademlia/msg.hpp	/^		optional = 1,$/;"	e	enum:libtorrent::dht::key_desc_t::__anon28
options	virt-p2v/include/miniexpect.h	/^  int options;$/;"	m	struct:mexp_regexp
options	virt-p2v/miniexpect/miniexpect.h	/^  int options;$/;"	m	struct:mexp_regexp
options	virt-p2v/src/p2v.c	/^static const char options[] = "Vv";$/;"	v	file:
options	virt-p2v/src/p2v_transform.c	/^static const char options[] = "Vv";$/;"	v	file:
orig_files	torrent/include/libtorrent/torrent_info.hpp	/^		file_storage const& orig_files() const$/;"	f	class:libtorrent::torrent_info
original_port	torrent/include/libtorrent/aux_/session_impl.hpp	/^		int original_port = 0;$/;"	m	struct:libtorrent::aux::listen_socket_t
os_entry	virt-p2v/src/gui.c	/^  *o_combo, *oc_entry, *os_entry, *of_entry, *oa_combo,$/;"	v	file:
os_ui	qt_pro/global.h	/^    OSWindow *os_ui;$/;"	m	class:Global
os_ui	qt_pro/mainwindow.h	/^    OSWindow *os_ui;$/;"	m	class:MainWindow
other	torrent/include/libtorrent/netlink.hpp	/^		basic_nl_endpoint(basic_nl_endpoint const& other) = default;$/;"	m	class:libtorrent::basic_nl_endpoint
our_peer_id	torrent/include/libtorrent/peer_connection.hpp	/^		peer_id our_peer_id;$/;"	m	struct:libtorrent::peer_connection_args
out	torrent/src/escape_string.cpp	/^		, iconv_t cd, char const** in, size_t* insize, char** out, size_t* outsize)$/;"	m	namespace:libtorrent::__anon38	file:
out	torrent/src/puff.cpp	/^    unsigned char *out;         \/* output buffer *\/$/;"	m	struct:state	file:
out_enc_policy	torrent/include/libtorrent/session_settings.hpp	/^		std::uint8_t out_enc_policy;$/;"	m	struct:libtorrent::pe_settings
out_enc_policy	torrent/include/libtorrent/settings_pack.hpp	/^			out_enc_policy,$/;"	e	enum:libtorrent::settings_pack::int_types
outcnt	torrent/src/puff.cpp	/^    unsigned long outcnt;       \/* bytes written to out so far *\/$/;"	m	struct:state	file:
outdir	Makefile	/^outdir := $(TOP_DIR)\/bin$/;"	m
outdir	torrent/Makefile	/^outdir := $(TOP_DIR)\/..\/lib$/;"	m
outgoing_get_peers	torrent/src/session_impl.cpp	/^	void session_impl::outgoing_get_peers(sha1_hash const& target$/;"	f	class:libtorrent::aux::session_impl
outgoing_interfaces	torrent/include/libtorrent/settings_pack.hpp	/^			outgoing_interfaces,$/;"	e	enum:libtorrent::settings_pack::string_types
outgoing_message	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^			outgoing_message$/;"	e	enum:libtorrent::dht::dht_logger::message_direction_t
outgoing_port	torrent/include/libtorrent/settings_pack.hpp	/^			outgoing_port,$/;"	e	enum:libtorrent::settings_pack::int_types
outgoing_socket	torrent/include/libtorrent/tracker_manager.hpp	/^		aux::listen_socket_handle outgoing_socket;$/;"	m	struct:libtorrent::tracker_request
outlen	torrent/src/puff.cpp	/^    unsigned long outlen;       \/* available space at out *\/$/;"	m	struct:state	file:
outlinePenWidth	qt_pro/QRoundProgressBar.h	/^    double outlinePenWidth() const { return m_outlinePenWidth; }$/;"	f	class:QRoundProgressBar
output	virt-p2v/include/p2v-config.h	/^  struct output_config output;$/;"	m	struct:config	typeref:struct:config::output_config
output_allocation	virt-p2v/include/p2v-config.h	/^enum output_allocation {$/;"	g
output_config	virt-p2v/include/p2v-config.h	/^struct output_config {$/;"	s
output_drivers	virt-p2v/src/ssh.c	/^char **output_drivers = NULL;$/;"	v
outstanding_bytes	torrent/include/libtorrent/peer_connection.hpp	/^		int outstanding_bytes() const { return m_outstanding_bytes; }$/;"	f	class:libtorrent::peer_connection
outstanding_disk_buffer_limit_reached	torrent/include/libtorrent/alert_types.hpp	/^			outstanding_disk_buffer_limit_reached,$/;"	e	enum:libtorrent::final::performance_warning_t
outstanding_flush	torrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t outstanding_flush:1;$/;"	m	struct:libtorrent::cached_piece_entry
outstanding_hash_check	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t outstanding_hash_check:1;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
outstanding_read	torrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t outstanding_read:1;$/;"	m	struct:libtorrent::cached_piece_entry
outstanding_request	torrent/include/libtorrent/natpmp.hpp	/^		bool outstanding_request = false;$/;"	m	struct:libtorrent::natpmp::mapping_t
outstanding_request_limit_reached	torrent/include/libtorrent/alert_types.hpp	/^			outstanding_request_limit_reached,$/;"	e	enum:libtorrent::final::performance_warning_t
outstanding_requests	torrent/bak/connection_tester.cpp	/^	int outstanding_requests;$/;"	m	struct:peer_conn	file:
overflow	torrent/include/libtorrent/bdecode.hpp	/^		overflow,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
overflow	torrent/include/libtorrent/error_code.hpp	/^			overflow,$/;"	e	enum:libtorrent::errors::error_code_enum
overlapped_t	torrent/src/file.cpp	/^		overlapped_t()$/;"	f	struct:libtorrent::overlapped_t
overlapped_t	torrent/src/file.cpp	/^	struct overlapped_t$/;"	s	namespace:libtorrent	file:
override	torrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	namespace:libtorrent
override	torrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	struct:libtorrent::peer_alert
override	torrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	struct:libtorrent::torrent_alert
override	torrent/include/libtorrent/alert_types.hpp	/^		std::string message() const override;$/;"	m	struct:libtorrent::tracker_alert
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, address const& ip, address const& source) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, address const& remote_address, error_code& ec) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, dht::msg const& request, entry& response) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, error_code& ec) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, int channel, bandwidth_channel** dst, int m) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, ip_source_t source_type, address const& source) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, peer_connection* pc) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, portmap_transport transport) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, seconds32 retry_interval) override;$/;"	m	struct:libtorrent::aux::tracker_logger
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, sha1_hash const& sent_target, udp::endpoint const& ep) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, std::string const& str) override;$/;"	m	struct:libtorrent::aux::tracker_logger
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, std::weak_ptr<request_callback> c) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, struct tracker_response const& resp) override;$/;"	m	struct:libtorrent::aux::tracker_logger
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				, udp::endpoint const& node) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				sha1_hash const& info_hash, sha1_hash const& xor_mask) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^				std::string const& collection) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bandwidth_manager* get_bandwidth_manager(int channel) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool any_torrent_has_peer(peer_connection const* p) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool has_connection(peer_connection* p) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool has_dht() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool has_lsd() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool has_peer(peer_connection const* p) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool ignore_unchoke_slots_set(peer_class_set const& set) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool preemptive_unchoke() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log() const override;$/;"	m	struct:libtorrent::aux::tracker_logger
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log(module_t m) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log_lsd() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool should_log_portmap(portmap_transport transport) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			bool verify_queue_position(torrent const* t, queue_position_t pos) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			external_ip external_address() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int external_udp_port(address const& local_address) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int get_listen_port(transport ssl, aux::listen_socket_handle const& s) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int listen_port(transport ssl, address const& local_addr) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int use_quota_overhead(peer_class_set& set, int amount_down, int amount_up) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			port_filter const& get_port_filter() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			proxy_settings i2p_proxy() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			proxy_settings proxy() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::uint16_t listen_port() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::uint16_t ssl_listen_port() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::weak_ptr<torrent> find_disconnect_candidate_torrent() const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			std::weak_ptr<torrent> find_torrent(sha1_hash const& info_hash) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void add_dht_node(udp::endpoint const& n) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void add_obfuscated_hash(sha1_hash const& obfuscated, std::weak_ptr<torrent> const& t) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void announce(sha1_hash const& ih, address const& addr, int port) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void announce_lsd(sha1_hash const& ih, int port) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void apply_settings_pack(std::shared_ptr<settings_pack> pack) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void ban_ip(address addr) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void close_connection(peer_connection* p) noexcept override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void deferred_submit_jobs() override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void get_peers(sha1_hash const& ih) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void insert_peer(std::shared_ptr<peer_connection> const& c) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void log_lsd(char const* msg) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void log_portmap(portmap_transport transport, char const* msg) const override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void on_error(error_code const& ec) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void on_exception(std::exception const& e) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void on_lsd_peer(tcp::endpoint const& peer, sha1_hash const& ih) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void prioritize_connections(std::weak_ptr<torrent> t) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void prioritize_dht(std::weak_ptr<torrent> t) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void received_buffer(int size) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void received_bytes(int bytes_payload, int bytes_protocol) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void received_synack(bool ipv6) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void remove_torrent(torrent_handle const& h, remove_flags_t options) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void remove_torrent_impl(std::shared_ptr<torrent> tptr, remove_flags_t options) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void sent_buffer(int size) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void sent_bytes(int bytes_payload, int bytes_protocol) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void sent_syn(bool ipv6) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void set_peer_classes(peer_class_set* s, address const& a, int st) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void set_queue_position(torrent* t, queue_position_t p) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void trancieve_ip_packet(int bytes, bool ipv6) override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void trigger_auto_manage() override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/aux_/session_impl.hpp	/^			~session_impl() override;$/;"	m	struct:libtorrent::aux::final
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^			, std::size_t bytes_transferred) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		bool in_handshake() const override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		hit_send_barrier(span<span<char>> iovec) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		piece_block_progress downloading_piece_progress() const override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void get_specific_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void on_connected() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void on_metadata() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void start() override;$/;"	m	class:libtorrent::bt_peer_connection
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_allow_fast(piece_index_t piece) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_bitfield() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_cancel(peer_request const& r) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_choke() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_dont_have(piece_index_t index) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_have(piece_index_t index) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_interested() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_keepalive() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_not_interested() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_piece(peer_request const& r, disk_buffer_holder buffer) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_reject_request(peer_request const&) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_request(peer_request const& r) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_suggest(piece_index_t piece) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_unchoke() override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void write_upload_only(bool enabled) override;$/;"	m	class:libtorrent::bt_peer_connection::hp_message::hp_error
override	torrent/include/libtorrent/bt_peer_connection.hpp	/^		~bt_peer_connection() override;$/;"	m	class:libtorrent::bt_peer_connection
override	torrent/include/libtorrent/disk_io_thread.hpp	/^				, disk_job_flags_t flags, storage_error const& se)> handler, disk_job_flags_t flags = {}) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, bool no_pieces, bool session) const override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, disk_job_flags_t flags = {}) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void()> handler = std::function<void()>()) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void()> handler) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(piece_index_t)> handler) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(piece_index_t, sha1_hash const&, storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(status_t, std::string const&, storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(status_t, storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(std::string const&, file_index_t, storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(storage_error const&)> handler) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, std::function<void(storage_error const&, aux::vector<download_priority_t, file_index_t>)> handler) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^			, storage_params p, std::shared_ptr<void> const&) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<open_file_state> get_status(storage_index_t) const override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^		storage_interface* get_torrent(storage_index_t) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^		void clear_piece(storage_index_t storage, piece_index_t index) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^		void reclaim_blocks(span<aux::block_cache_reference> ref) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^		void remove_torrent(storage_index_t) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^		void submit_jobs() override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/disk_io_thread.hpp	/^		void update_stats_counters(counters& c) const override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/http_seed_connection.hpp	/^			, disconnect_severity_t error = peer_connection_interface::normal) override;$/;"	m	class:libtorrent::http_seed_connection
override	torrent/include/libtorrent/http_seed_connection.hpp	/^			, std::size_t bytes_transferred) override;$/;"	m	class:libtorrent::http_seed_connection
override	torrent/include/libtorrent/http_seed_connection.hpp	/^		piece_block_progress downloading_piece_progress() const override;$/;"	m	class:libtorrent::http_seed_connection
override	torrent/include/libtorrent/http_seed_connection.hpp	/^		void get_specific_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::http_seed_connection
override	torrent/include/libtorrent/http_seed_connection.hpp	/^		void on_connected() override;$/;"	m	class:libtorrent::http_seed_connection
override	torrent/include/libtorrent/http_seed_connection.hpp	/^		void write_request(peer_request const& r) override;$/;"	m	class:libtorrent::http_seed_connection
override	torrent/include/libtorrent/http_tracker_connection.hpp	/^		void close() override;$/;"	m	class:libtorrent::http_tracker_connection
override	torrent/include/libtorrent/http_tracker_connection.hpp	/^		void start() override;$/;"	m	class:libtorrent::http_tracker_connection
override	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		bool has_quota() override;$/;"	m	struct:libtorrent::dht::final
override	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		bool send_packet(aux::listen_socket_handle const& s, entry& e, udp::endpoint const& addr) override;$/;"	m	struct:libtorrent::dht::final
override	torrent/include/libtorrent/kademlia/find_data.hpp	/^		, node_id const& id) override;$/;"	m	struct:libtorrent::dht::find_data
override	torrent/include/libtorrent/kademlia/find_data.hpp	/^	char const* name() const override;$/;"	m	struct:libtorrent::dht::find_data
override	torrent/include/libtorrent/kademlia/find_data.hpp	/^	void done() override;$/;"	m	struct:libtorrent::dht::find_data
override	torrent/include/libtorrent/kademlia/find_data.hpp	/^	void reply(msg const&) override;$/;"	m	struct:libtorrent::dht::find_data_observer
override	torrent/include/libtorrent/kademlia/find_data.hpp	/^	void start() override;$/;"	m	struct:libtorrent::dht::find_data
override	torrent/include/libtorrent/kademlia/get_item.hpp	/^		, node_id const& id) override;$/;"	m	class:libtorrent::dht::get_item
override	torrent/include/libtorrent/kademlia/get_item.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	class:libtorrent::dht::get_item
override	torrent/include/libtorrent/kademlia/get_item.hpp	/^	char const* name() const override;$/;"	m	class:libtorrent::dht::get_item
override	torrent/include/libtorrent/kademlia/get_item.hpp	/^	void done() override;$/;"	m	class:libtorrent::dht::get_item
override	torrent/include/libtorrent/kademlia/get_item.hpp	/^	void reply(msg const&) override;$/;"	m	class:libtorrent::dht::get_item_observer
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^		, node_id const& id) override;$/;"	m	struct:libtorrent::dht::get_peers
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^		node_id const& id) override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	struct:libtorrent::dht::get_peers
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	char const* name() const override;$/;"	m	struct:libtorrent::dht::get_peers
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	char const* name() const override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	void done() override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	void reply(msg const&) override;$/;"	m	struct:libtorrent::dht::get_peers_observer
override	torrent/include/libtorrent/kademlia/get_peers.hpp	/^	void reply(msg const&) override;$/;"	m	struct:libtorrent::dht::obfuscated_get_peers_observer
override	torrent/include/libtorrent/kademlia/put_data.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	struct:libtorrent::dht::put_data
override	torrent/include/libtorrent/kademlia/put_data.hpp	/^	char const* name() const override;$/;"	m	struct:libtorrent::dht::put_data
override	torrent/include/libtorrent/kademlia/put_data.hpp	/^	void done() override;$/;"	m	struct:libtorrent::dht::put_data
override	torrent/include/libtorrent/kademlia/put_data.hpp	/^	void start() override;$/;"	m	struct:libtorrent::dht::put_data
override	torrent/include/libtorrent/kademlia/refresh.hpp	/^		, node_id const& id) override;$/;"	m	class:libtorrent::dht::bootstrap
override	torrent/include/libtorrent/kademlia/refresh.hpp	/^	bool invoke(observer_ptr o) override;$/;"	m	class:libtorrent::dht::bootstrap
override	torrent/include/libtorrent/kademlia/refresh.hpp	/^	char const* name() const override;$/;"	m	class:libtorrent::dht::bootstrap
override	torrent/include/libtorrent/kademlia/refresh.hpp	/^	void done() override;$/;"	m	class:libtorrent::dht::bootstrap
override	torrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^	char const* name() const override;$/;"	m	class:libtorrent::dht::final
override	torrent/include/libtorrent/kademlia/sample_infohashes.hpp	/^	void reply(msg const&) override;$/;"	m	class:libtorrent::dht::final
override	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	void reply(msg const&) override;$/;"	m	struct:libtorrent::dht::traversal_observer
override	torrent/include/libtorrent/pe_crypto.hpp	/^		encrypt(span<span<char>> buf) override;$/;"	m	struct:libtorrent::rc4_handler
override	torrent/include/libtorrent/pe_crypto.hpp	/^		std::tuple<int, int, int> decrypt(span<span<char>> buf) override;$/;"	m	struct:libtorrent::rc4_handler
override	torrent/include/libtorrent/pe_crypto.hpp	/^		void set_incoming_key(span<char const> key) override;$/;"	m	struct:libtorrent::rc4_handler
override	torrent/include/libtorrent/pe_crypto.hpp	/^		void set_outgoing_key(span<char const> key) override;$/;"	m	struct:libtorrent::rc4_handler
override	torrent/include/libtorrent/peer_connection.hpp	/^			, operation_t op, disconnect_severity_t = peer_connection_interface::normal) override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/peer_connection.hpp	/^		void add_stat(std::int64_t downloaded, std::int64_t uploaded) override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/peer_connection.hpp	/^		void assign_bandwidth(int channel, int amount) override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/peer_connection.hpp	/^		void get_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/peer_connection.hpp	/^		void on_disk() override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/peer_connection.hpp	/^		void on_error(error_code const& ec) override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/peer_connection.hpp	/^		void on_exception(std::exception const& e) override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/peer_connection.hpp	/^		void set_holepunch_mode() override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/peer_connection.hpp	/^		~peer_connection() override;$/;"	m	class:libtorrent::peer_connection
override	torrent/include/libtorrent/resolver.hpp	/^		, callback_t const& h) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/resolver.hpp	/^	void abort() override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/resolver.hpp	/^	void set_cache_timeout(seconds timeout) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/storage.hpp	/^			, move_flags_t flags, storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^			, piece_index_t piece, int offset, open_mode_t flags, storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^			, storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^			, storage_error& error) override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^		bool has_any_file(storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^		bool tick() override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^		void delete_files(remove_flags_t options, storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^		void initialize(storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^		void release_files(storage_error& ec) override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/storage.hpp	/^		~default_storage() override;$/;"	m	class:libtorrent::default_storage
override	torrent/include/libtorrent/torrent.hpp	/^			, int complete, int incomplete, int downloaded, int downloaders) override;$/;"	m	class:libtorrent::torrent
override	torrent/include/libtorrent/torrent.hpp	/^			, seconds32 retry_interval) override;$/;"	m	class:libtorrent::torrent
override	torrent/include/libtorrent/torrent.hpp	/^			, std::string const& msg) override;$/;"	m	class:libtorrent::torrent
override	torrent/include/libtorrent/torrent.hpp	/^			, struct tracker_response const& resp) override;$/;"	m	class:libtorrent::torrent
override	torrent/include/libtorrent/torrent.hpp	/^		bool should_log() const override;$/;"	m	class:libtorrent::torrent
override	torrent/include/libtorrent/torrent.hpp	/^		void on_error(error_code const& ec) override;$/;"	m	class:libtorrent::torrent
override	torrent/include/libtorrent/torrent.hpp	/^		void on_exception(std::exception const& e) override;$/;"	m	class:libtorrent::torrent
override	torrent/include/libtorrent/torrent.hpp	/^		~torrent() override;$/;"	m	class:libtorrent::torrent
override	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		torrent_peer* allocate_peer_entry(int type) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		void free_peer_entry(torrent_peer* p) override;$/;"	m	struct:libtorrent::final
override	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		void close() override;$/;"	m	class:libtorrent::udp_tracker_connection
override	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		void on_timeout(error_code const& ec) override;$/;"	m	class:libtorrent::udp_tracker_connection
override	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		void start() override;$/;"	m	class:libtorrent::udp_tracker_connection
override	torrent/include/libtorrent/web_connection_base.hpp	/^			, std::size_t bytes_transferred) override;$/;"	m	class:libtorrent::web_connection_base
override	torrent/include/libtorrent/web_connection_base.hpp	/^		bool in_handshake() const override;$/;"	m	class:libtorrent::web_connection_base
override	torrent/include/libtorrent/web_connection_base.hpp	/^		int timeout() const override;$/;"	m	class:libtorrent::web_connection_base
override	torrent/include/libtorrent/web_connection_base.hpp	/^		void get_specific_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::web_connection_base
override	torrent/include/libtorrent/web_connection_base.hpp	/^		void on_connected() override;$/;"	m	class:libtorrent::web_connection_base
override	torrent/include/libtorrent/web_connection_base.hpp	/^		void start() override;$/;"	m	class:libtorrent::web_connection_base
override	torrent/include/libtorrent/web_connection_base.hpp	/^		void write_request(peer_request const&) override = 0;$/;"	m	class:libtorrent::web_connection_base
override	torrent/include/libtorrent/web_connection_base.hpp	/^		~web_connection_base() override;$/;"	m	class:libtorrent::web_connection_base
override	torrent/include/libtorrent/web_peer_connection.hpp	/^			, operation_t op, disconnect_severity_t error = peer_connection_interface::normal) override;$/;"	m	class:libtorrent::web_peer_connection
override	torrent/include/libtorrent/web_peer_connection.hpp	/^			, std::size_t bytes_transferred) override;$/;"	m	class:libtorrent::web_peer_connection
override	torrent/include/libtorrent/web_peer_connection.hpp	/^		bool received_invalid_data(piece_index_t index, bool single_peer) override;$/;"	m	class:libtorrent::web_peer_connection
override	torrent/include/libtorrent/web_peer_connection.hpp	/^		piece_block_progress downloading_piece_progress() const override;$/;"	m	class:libtorrent::web_peer_connection
override	torrent/include/libtorrent/web_peer_connection.hpp	/^		void get_specific_peer_info(peer_info& p) const override;$/;"	m	class:libtorrent::web_peer_connection
override	torrent/include/libtorrent/web_peer_connection.hpp	/^		void on_connected() override;$/;"	m	class:libtorrent::web_peer_connection
override	torrent/include/libtorrent/web_peer_connection.hpp	/^		void write_request(peer_request const& r) override;$/;"	m	class:libtorrent::web_peer_connection
override	torrent/kademlia/dht_storage.cpp	/^		~dht_default_storage() override = default;$/;"	m	class:libtorrent::dht::__anon153::final	file:
override	torrent/src/bdecode.cpp	/^		const char* name() const BOOST_SYSTEM_NOEXCEPT override;$/;"	m	struct:libtorrent::final	file:
override	torrent/src/bdecode.cpp	/^		std::string message(int ev) const override;$/;"	m	struct:libtorrent::final	file:
override	torrent/src/error_code.cpp	/^		const char* name() const BOOST_SYSTEM_NOEXCEPT override;$/;"	m	struct:libtorrent::final	file:
override	torrent/src/error_code.cpp	/^		std::string message(int ev) const override;$/;"	m	struct:libtorrent::final	file:
override	torrent/src/gzip.cpp	/^		const char* name() const BOOST_SYSTEM_NOEXCEPT override;$/;"	m	struct:libtorrent::final	file:
override	torrent/src/gzip.cpp	/^		std::string message(int ev) const override;$/;"	m	struct:libtorrent::final	file:
override	torrent/src/ut_metadata.cpp	/^			peer_connection_handle const& pc) override;$/;"	m	struct:libtorrent::__anon72::final	file:
override	torrent/src/ut_pex.cpp	/^			peer_connection_handle const& pc) override;$/;"	m	struct:libtorrent::__anon35::final	file:
override_resume_data	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER override_resume_data = 15_bit;$/;"	m	namespace:libtorrent::torrent_flags
override_trackers	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t override_trackers = 11_bit;$/;"	m	namespace:libtorrent::torrent_flags
override_web_seeds	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t override_web_seeds = 12_bit;$/;"	m	namespace:libtorrent::torrent_flags
overwrite_existing	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr add_piece_flags_t overwrite_existing = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
overwrite_existing	torrent/src/torrent_handle.cpp	/^	constexpr add_piece_flags_t torrent_handle::overwrite_existing;$/;"	m	class:libtorrent::torrent_handle	file:
owner	virt-p2v/include/gnulib/windows-recmutex.h	/^          DWORD owner;$/;"	m	struct:__anon158
p	torrent/src/torrent_peer.cpp	/^	ipv4_peer& ipv4_peer::operator=(ipv4_peer const& p) = default;$/;"	m	class:libtorrent::ipv4_peer	file:
p2v_task	include/task.h	/^struct p2v_task{$/;"	s
p2v_transform	virt-p2v/src/p2v.c	/^int p2v_transform(struct p2v_config *p2v)$/;"	f
p2v_transform	virt-p2v/src/p2v_transform.c	/^int p2v_transform(const char *ip, char *user, char *passwd, char *storage, char *image_name, char *disks)$/;"	f
p2vobj	Makefile	/^p2vobj := p2v$/;"	m
pBuf	include/queue.h	/^  unsigned char *pBuf;$/;"	m	struct:__anon1
pBuf	include/queue.h	/^  unsigned char *pBuf;$/;"	m	struct:__anon2
pStoreCfg	include/StoreConfig.h	/^    PYZY_STORE_CONFIG pStoreCfg; \/\/éç½®è¡¨å¤´$/;"	m	struct:_StoreDriver
p_info	virt-p2v/src/conversion.c	/^struct progress_info p_info = {0};$/;"	v	typeref:struct:progress_info
packet	include/client.h	/^    unsigned char *packet;$/;"	m	struct:client
packet	torrent/include/libtorrent/packet_pool.hpp	/^	struct packet$/;"	s	namespace:libtorrent
packet	torrent/include/libtorrent/udp_socket.hpp	/^		struct packet$/;"	s	class:libtorrent::udp_socket
packet_buffer	torrent/include/libtorrent/packet_buffer.hpp	/^	class TORRENT_EXTRA_EXPORT packet_buffer$/;"	c	namespace:libtorrent
packet_bytes_remaining	torrent/include/libtorrent/receive_buffer.hpp	/^	int packet_bytes_remaining() const$/;"	f	struct:libtorrent::receive_buffer
packet_deleter	torrent/include/libtorrent/packet_pool.hpp	/^	struct packet_deleter$/;"	s	namespace:libtorrent
packet_finished	torrent/include/libtorrent/bt_peer_connection.hpp	/^		bool packet_finished() const { return m_recv_buffer.packet_finished(); }$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
packet_finished	torrent/include/libtorrent/receive_buffer.hpp	/^	bool packet_finished() const { return m_packet_size <= m_recv_pos; }$/;"	f	struct:libtorrent::receive_buffer
packet_finished	torrent/src/peer_connection_handle.cpp	/^bool bt_peer_connection_handle::packet_finished() const$/;"	f	class:libtorrent::bt_peer_connection_handle
packet_finished	torrent/src/receive_buffer.cpp	/^bool crypto_receive_buffer::packet_finished() const$/;"	f	class:libtorrent::crypto_receive_buffer
packet_flags_t	torrent/src/utp_stream.cpp	/^	enum packet_flags_t { pkt_ack = 1, pkt_fin = 2 };$/;"	g	struct:libtorrent::utp_socket_impl	file:
packet_loss	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t packet_loss;$/;"	m	struct:libtorrent::utp_status
packet_pool	torrent/include/libtorrent/packet_pool.hpp	/^		packet_pool()$/;"	f	struct:libtorrent::packet_pool
packet_pool	torrent/include/libtorrent/packet_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT packet_pool : private single_threaded$/;"	s	namespace:libtorrent
packet_resend	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t packet_resend;$/;"	m	struct:libtorrent::utp_status
packet_size	torrent/include/libtorrent/receive_buffer.hpp	/^	int packet_size() const { return m_packet_size; }$/;"	f	struct:libtorrent::receive_buffer
packet_size	torrent/src/receive_buffer.cpp	/^int crypto_receive_buffer::packet_size() const$/;"	f	class:libtorrent::crypto_receive_buffer
packet_slab	torrent/include/libtorrent/packet_pool.hpp	/^		explicit packet_slab(int const alloc_size, std::size_t const limit = 10)$/;"	f	struct:libtorrent::packet_slab
packet_slab	torrent/include/libtorrent/packet_pool.hpp	/^	struct TORRENT_EXTRA_EXPORT packet_slab$/;"	s	namespace:libtorrent
packet_timeout	torrent/src/utp_stream.cpp	/^int utp_socket_impl::packet_timeout() const$/;"	f	class:libtorrent::utp_socket_impl
packet_too_large	torrent/include/libtorrent/error_code.hpp	/^			packet_too_large,$/;"	e	enum:libtorrent::errors::error_code_enum
packet_type_names	torrent/src/utp_stream.cpp	/^static char const* packet_type_names[] = { "ST_DATA", "ST_FIN", "ST_STATE", "ST_RESET", "ST_SYN" };$/;"	m	namespace:libtorrent	file:
packets_in	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t packets_in;$/;"	m	struct:libtorrent::utp_status
packets_out	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t packets_out;$/;"	m	struct:libtorrent::utp_status
pad_blocks	torrent/include/libtorrent/piece_picker.hpp	/^		int pad_blocks;$/;"	m	struct:libtorrent::piece_count
pad_blocks_in_piece	torrent/src/piece_picker.cpp	/^	int piece_picker::pad_blocks_in_piece(piece_index_t const index) const$/;"	f	class:libtorrent::piece_picker
pad_bytes	torrent/include/libtorrent/heterogeneous_queue.hpp	/^			std::uint8_t pad_bytes;$/;"	m	struct:libtorrent::heterogeneous_queue::header_t
pad_file	torrent/include/libtorrent/file_storage.hpp	/^		bool pad_file:1;$/;"	m	struct:libtorrent::file_entry
pad_file	torrent/include/libtorrent/file_storage.hpp	/^		static constexpr file_flags_t TORRENT_DEPRECATED_MEMBER pad_file = 0_bit;$/;"	m	class:libtorrent::file_storage
pad_file	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t pad_file:1;$/;"	m	struct:libtorrent::internal_file_entry
pad_file	torrent/src/file_storage.cpp	/^	constexpr file_flags_t file_storage::pad_file;$/;"	m	class:libtorrent::file_storage	file:
pad_file_at	torrent/src/file_storage.cpp	/^	bool file_storage::pad_file_at(file_index_t const index) const$/;"	f	class:libtorrent::file_storage
pad_file_at	torrent/src/file_storage.cpp	/^	bool file_storage::pad_file_at(internal_file_entry const& fe) const$/;"	f	class:libtorrent::file_storage
pad_job	torrent/src/block_cache.cpp	/^int block_cache::pad_job(disk_io_job const* j, int const blocks_in_piece$/;"	f	class:libtorrent::block_cache
pae	virt-p2v/include/p2v-config.h	/^  bool pae;$/;"	m	struct:cpu_config
paintEvent	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::paintEvent(QPaintEvent* \/*event*\/)$/;"	f	class:QRoundProgressBar
panic	torrent/src/torrent.cpp	/^	void torrent::panic()$/;"	f	class:libtorrent::torrent
params	torrent/include/libtorrent/alert_types.hpp	/^		add_torrent_params params;$/;"	m	struct:libtorrent::final
parent_path	torrent/src/path.cpp	/^	std::string parent_path(std::string const& f)$/;"	f	namespace:libtorrent
parse_addr	torrent/include/libtorrent/alert_types.hpp	/^			parse_addr TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::op_t
parse_address	torrent/include/libtorrent/operations.hpp	/^		parse_address,$/;"	m	class:libtorrent::operation_t
parse_array	cJSON/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:
parse_array	src/cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:
parse_az_style	torrent/src/identify_client.cpp	/^	boost::optional<fingerprint> parse_az_style(const peer_id& id)$/;"	f	namespace:__anon59
parse_children	torrent/include/libtorrent/kademlia/msg.hpp	/^		parse_children = 2,$/;"	e	enum:libtorrent::dht::key_desc_t::__anon28
parse_chunk_header	torrent/src/http_parser.cpp	/^	bool http_parser::parse_chunk_header(span<char const> buf$/;"	f	class:libtorrent::http_parser
parse_close_reason	torrent/src/utp_stream.cpp	/^void utp_socket_impl::parse_close_reason(std::uint8_t const* ptr, int const size)$/;"	f	class:libtorrent::utp_socket_impl
parse_cmdline_string	virt-p2v/src/kernel-cmdline.c	/^parse_cmdline_string (const char *cmdline)$/;"	f
parse_comma_separated_string	torrent/src/string_util.cpp	/^	void parse_comma_separated_string(std::string const& in, std::vector<std::string>& out)$/;"	f	namespace:libtorrent
parse_comma_separated_string_port	torrent/src/string_util.cpp	/^	void parse_comma_separated_string_port(std::string const& in$/;"	f	namespace:libtorrent
parse_endpoint	torrent/src/socket_io.cpp	/^	tcp::endpoint parse_endpoint(string_view str, error_code& ec)$/;"	f	namespace:libtorrent
parse_failed	torrent/include/libtorrent/error_code.hpp	/^			parse_failed,$/;"	e	enum:libtorrent::errors::error_code_enum
parse_failed	torrent/include/libtorrent/i2p_stream.hpp	/^			parse_failed,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
parse_file	src/inirw.c	/^static int parse_file(const char *section, const char *key, const char *buf,int *sec_s,int *sec_e,$/;"	f	file:
parse_hex4	cJSON/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:
parse_hex4	src/cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:
parse_info_section	torrent/src/torrent_info.cpp	/^	bool torrent_info::parse_info_section(bdecode_node const& e, error_code& ec)$/;"	f	class:libtorrent::torrent_info
parse_info_section	torrent/src/torrent_info.cpp	/^	bool torrent_info::parse_info_section(bdecode_node const& info$/;"	f	class:libtorrent::torrent_info
parse_info_section	torrent/src/torrent_info.cpp	/^	bool torrent_info::parse_info_section(lazy_entry const& le, error_code& ec)$/;"	f	class:libtorrent::torrent_info
parse_int	torrent/src/bdecode.cpp	/^	char const* parse_int(char const* start, char const* end, char delimiter$/;"	f	namespace:libtorrent
parse_listen_interfaces	torrent/src/string_util.cpp	/^	std::vector<listen_interface_t> parse_listen_interfaces(std::string const& in$/;"	f	namespace:libtorrent
parse_magnet_uri	torrent/src/magnet_uri.cpp	/^	add_torrent_params parse_magnet_uri(string_view uri)$/;"	f	namespace:libtorrent
parse_magnet_uri	torrent/src/magnet_uri.cpp	/^	add_torrent_params parse_magnet_uri(string_view uri, error_code& ec)$/;"	f	namespace:libtorrent
parse_magnet_uri	torrent/src/magnet_uri.cpp	/^	void parse_magnet_uri(string_view uri, add_torrent_params& p, error_code& ec)$/;"	f	namespace:libtorrent
parse_mainline_style	torrent/src/identify_client.cpp	/^	boost::optional<fingerprint> parse_mainline_style(const peer_id& id)$/;"	f	namespace:__anon59
parse_nl_address	torrent/src/enum_net.cpp	/^	bool parse_nl_address(nlmsghdr* nl_hdr, ip_interface* ip_info)$/;"	f	namespace:libtorrent::__anon102
parse_number	cJSON/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:
parse_number	src/cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:
parse_object	cJSON/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:
parse_object	src/cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:
parse_proc_cmdline	virt-p2v/src/kernel-cmdline.c	/^parse_proc_cmdline (void)$/;"	f
parse_route	torrent/src/enum_net.cpp	/^	bool parse_route(int s, nlmsghdr* nl_hdr, ip_route* rt_info)$/;"	f	namespace:libtorrent::__anon102
parse_route	torrent/src/enum_net.cpp	/^	bool parse_route(int, rt_msghdr* rtm, ip_route* rt_info)$/;"	f	namespace:libtorrent::__anon102
parse_sack	torrent/src/utp_stream.cpp	/^std::pair<std::uint32_t, int> utp_socket_impl::parse_sack(std::uint16_t const packet_ack$/;"	f	class:libtorrent::utp_socket_impl
parse_shadow_style	torrent/src/identify_client.cpp	/^	boost::optional<fingerprint> parse_shadow_style(const peer_id& id)$/;"	f	namespace:__anon59
parse_state	torrent/include/libtorrent/upnp.hpp	/^struct parse_state$/;"	s	namespace:libtorrent
parse_string	cJSON/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:
parse_string	src/cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:
parse_string	torrent/src/lazy_bdecode.cpp	/^	char const* parse_string(char const* start, char const* end$/;"	f	namespace:libtorrent::__anon75
parse_torrent_file	torrent/src/torrent_info.cpp	/^	bool torrent_info::parse_torrent_file(bdecode_node const& torrent_file$/;"	f	class:libtorrent::torrent_info
parse_tracker_response	torrent/src/http_tracker_connection.cpp	/^	tracker_response parse_tracker_response(span<char const> const data, error_code& ec$/;"	f	namespace:libtorrent
parse_url_components	torrent/src/parse_url.cpp	/^		parse_url_components(std::string url, error_code& ec)$/;"	f	namespace:libtorrent
parse_utf8_codepoint	torrent/src/utf8.cpp	/^	std::pair<std::int32_t, int> parse_utf8_codepoint(string_view str)$/;"	f	namespace:libtorrent
parse_value	cJSON/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:
parse_value	src/cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:
part_file	torrent/include/libtorrent/part_file.hpp	/^	struct TORRENT_EXTRA_EXPORT part_file$/;"	s	namespace:libtorrent
part_file	torrent/src/part_file.cpp	/^	part_file::part_file(std::string const& path, std::string const& name$/;"	f	class:libtorrent::part_file
partfile_move	torrent/include/libtorrent/operations.hpp	/^		partfile_move,$/;"	m	class:libtorrent::operation_t
partfile_read	torrent/include/libtorrent/operations.hpp	/^		partfile_read,$/;"	m	class:libtorrent::operation_t
partfile_write	torrent/include/libtorrent/operations.hpp	/^		partfile_write,$/;"	m	class:libtorrent::operation_t
partial_compare_rarest_first	torrent/src/piece_picker.cpp	/^	bool piece_picker::partial_compare_rarest_first(downloading_piece const* lhs$/;"	f	class:libtorrent::piece_picker
partial_hash	torrent/include/libtorrent/block_cache.hpp	/^		partial_hash(): offset(0) {}$/;"	f	struct:libtorrent::partial_hash
partial_hash	torrent/include/libtorrent/block_cache.hpp	/^	struct TORRENT_EXTRA_EXPORT partial_hash$/;"	s	namespace:libtorrent
partial_piece_info	torrent/include/libtorrent/torrent_handle.hpp	/^	struct TORRENT_EXPORT partial_piece_info$/;"	s	namespace:libtorrent
partial_ratio	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::partial_ratio;$/;"	m	class:libtorrent::picker_log_alert	file:
partition	include/device.h	/^    unsigned int partition;     	\/\/ 1 gpt 0 mgr$/;"	m	struct:disk_param
partition_guid	include/gpt.h	/^    uint8_t   partition_guid[16];$/;"	m	struct:__anon7
partition_listen_sockets	torrent/src/session_impl.cpp	/^	std::vector<std::shared_ptr<listen_socket_t>>::iterator partition_listen_sockets($/;"	f	namespace:libtorrent::aux
partition_parent	src/device.c	/^partition_parent (dev_t part_dev)$/;"	f	file:
partition_parent	virt-p2v/src/p2v.c	/^partition_parent (dev_t part_dev)$/;"	f	file:
partition_parent	virt-p2v/src/p2v_transform.c	/^partition_parent (dev_t part_dev)$/;"	f	file:
pascal_string	torrent/include/libtorrent/lazy_entry.hpp	/^		pascal_string(char const* p, int l): len(l), ptr(p) {}$/;"	f	struct:libtorrent::pascal_string
pascal_string	torrent/include/libtorrent/lazy_entry.hpp	/^	struct TORRENT_DEPRECATED_EXPORT pascal_string$/;"	s	namespace:libtorrent
passed_hash_check	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t passed_hash_check:1;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
passwd	include/task.h	/^    char passwd[32];    $/;"	m	struct:p2v_task
password	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^		std::string password;$/;"	m	struct:libtorrent::aux::proxy_settings
password	virt-p2v/include/p2v-config.h	/^  char *password;$/;"	m	struct:auth_config
password_callback	torrent/src/torrent.cpp	/^		std::string password_callback(int length, boost::asio::ssl::context::password_purpose p$/;"	f	namespace:libtorrent::__anon107
password_entry	virt-p2v/src/gui.c	/^  *username_entry, *password_entry, *identity_entry, *sudo_button,$/;"	v	file:
password_or_identity_changed_callback	virt-p2v/src/gui.c	/^password_or_identity_changed_callback (GtkWidget *w, gpointer data)$/;"	f	file:
password_re	virt-p2v/src/ssh.c	/^static pcre *password_re;$/;"	v	file:
path	include/device.h	/^    char *path;                 \/\/device \/dev entry$/;"	m	struct:_PedDevice
path	torrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER path;$/;"	m	struct:libtorrent::final
path	torrent/include/libtorrent/file_storage.hpp	/^		std::string path;$/;"	m	struct:libtorrent::file_entry
path	torrent/include/libtorrent/http_parser.hpp	/^		std::string const& path() const { return m_path; }$/;"	f	class:libtorrent::http_parser::std
path	torrent/include/libtorrent/storage_defs.hpp	/^		std::string const& path;$/;"	m	class:libtorrent::storage_params::std
path	torrent/include/libtorrent/upnp.hpp	/^		std::string path;$/;"	m	struct:libtorrent::final::rootdevice
path_append	torrent/bak/client_test.cpp	/^std::string path_append(std::string const& lhs, std::string const& rhs)$/;"	f
path_index	torrent/include/libtorrent/file_storage.hpp	/^		int path_index;$/;"	m	struct:libtorrent::internal_file_entry
path_index	torrent/src/file_storage.cpp	/^		, path_index(fe.path_index)$/;"	f	namespace:libtorrent
path_length	torrent/src/torrent_info.cpp	/^	int path_length(bdecode_node const& p, error_code& ec)$/;"	f	namespace:libtorrent::__anon87
paths	torrent/include/libtorrent/file_storage.hpp	/^		std::vector<std::string> const& paths() const { return m_paths; }$/;"	f	class:libtorrent::file_storage::std
pause	torrent/src/session_handle.cpp	/^	void session_handle::pause()$/;"	f	class:libtorrent::session_handle
pause	torrent/src/session_impl.cpp	/^	void session_impl::pause()$/;"	f	class:libtorrent::aux::session_impl
pause	torrent/src/torrent.cpp	/^	void torrent::pause(pause_flags_t const flags)$/;"	f	class:libtorrent::torrent
pause	torrent/src/torrent_handle.cpp	/^	void torrent_handle::pause(pause_flags_t const flags) const$/;"	f	class:libtorrent::torrent_handle
paused	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t paused = 4_bit;$/;"	m	namespace:libtorrent::torrent_flags
paused	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER paused = false;$/;"	m	struct:libtorrent::torrent_status
paused	torrent/include/libtorrent/tracker_manager.hpp	/^			paused$/;"	e	enum:libtorrent::tracker_request::event_t
payload_down_speed	torrent/include/libtorrent/peer_info.hpp	/^		int payload_down_speed;$/;"	m	struct:libtorrent::peer_info
payload_download_rate	torrent/include/libtorrent/session_status.hpp	/^		int payload_download_rate;$/;"	m	struct:libtorrent::session_status
payload_pkts_in	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t payload_pkts_in;$/;"	m	struct:libtorrent::utp_status
payload_pkts_out	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t payload_pkts_out;$/;"	m	struct:libtorrent::utp_status
payload_up_speed	torrent/include/libtorrent/peer_info.hpp	/^		int payload_up_speed;$/;"	m	struct:libtorrent::peer_info
payload_upload_rate	torrent/include/libtorrent/session_status.hpp	/^		int payload_upload_rate;$/;"	m	struct:libtorrent::session_status
pc	torrent/include/libtorrent/aux_/route.h	/^	void	*pc[CTRACE_STACK_SIZE];		\/* PC stack trace *\/$/;"	m	struct:ctrace
pclose	virt-p2v/include/gnulib/stdio.h	1321;"	d
pcp_address_mismatch	torrent/include/libtorrent/natpmp.hpp	/^			pcp_address_mismatch,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_cannot_provide_external	torrent/include/libtorrent/natpmp.hpp	/^			pcp_cannot_provide_external,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_category	torrent/src/natpmp.cpp	/^boost::system::error_category& pcp_category()$/;"	f	namespace:libtorrent
pcp_errors	torrent/include/libtorrent/natpmp.hpp	/^		enum pcp_errors$/;"	g	namespace:libtorrent::errors
pcp_excessive_remote_peers	torrent/include/libtorrent/natpmp.hpp	/^			pcp_excessive_remote_peers,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_malformed_option	torrent/include/libtorrent/natpmp.hpp	/^			pcp_malformed_option,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_malformed_request	torrent/include/libtorrent/natpmp.hpp	/^			pcp_malformed_request,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_network_failure	torrent/include/libtorrent/natpmp.hpp	/^			pcp_network_failure,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_no_resources	torrent/include/libtorrent/natpmp.hpp	/^			pcp_no_resources,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_not_authorized	torrent/include/libtorrent/natpmp.hpp	/^			pcp_not_authorized,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_opcode	torrent/include/libtorrent/natpmp.hpp	/^	enum pcp_opcode$/;"	g	struct:libtorrent::natpmp
pcp_success	torrent/include/libtorrent/natpmp.hpp	/^			pcp_success = 0,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_unsupp_opcode	torrent/include/libtorrent/natpmp.hpp	/^			pcp_unsupp_opcode,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_unsupp_option	torrent/include/libtorrent/natpmp.hpp	/^			pcp_unsupp_option,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_unsupp_protocol	torrent/include/libtorrent/natpmp.hpp	/^			pcp_unsupp_protocol,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_unsupp_version	torrent/include/libtorrent/natpmp.hpp	/^			pcp_unsupp_version,$/;"	e	enum:libtorrent::errors::pcp_errors
pcp_user_ex_quota	torrent/include/libtorrent/natpmp.hpp	/^			pcp_user_ex_quota,$/;"	e	enum:libtorrent::errors::pcp_errors
pcre_error	virt-p2v/include/miniexpect.h	/^  int pcre_error;$/;"	m	struct:mexp_h
pcre_error	virt-p2v/miniexpect/miniexpect.h	/^  int pcre_error;$/;"	m	struct:mexp_h
pdfdir	torrent/include/libtorrent/Makefile	/^pdfdir = ${docdir}$/;"	m
pe_settings	torrent/include/libtorrent/session_settings.hpp	/^		pe_settings()$/;"	f	struct:libtorrent::pe_settings
pe_settings	torrent/include/libtorrent/session_settings.hpp	/^	struct TORRENT_DEPRECATED_EXPORT pe_settings$/;"	s	namespace:libtorrent
pe_support	torrent/include/libtorrent/torrent_peer.hpp	/^		bool pe_support:1;$/;"	m	struct:libtorrent::torrent_peer
peak_queued	torrent/include/libtorrent/disk_io_thread.hpp	/^		int peak_queued;$/;"	m	struct:libtorrent::cache_status
peer	torrent/bak/client_test.cpp	/^std::string peer;$/;"	v
peer	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t peer = 1_bit;$/;"	m	namespace:libtorrent::alert_category
peer	torrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	std::shared_ptr<bandwidth_socket> peer;$/;"	m	struct:libtorrent::bw_request
peer	torrent/include/libtorrent/piece_picker.hpp	/^			torrent_peer* peer = nullptr;$/;"	m	struct:libtorrent::piece_picker::block_info
peer	torrent/include/libtorrent/torrent_handle.hpp	/^		tcp::endpoint peer() const$/;"	f	struct:libtorrent::block_info
peer	torrent/src/session_impl.cpp	/^			std::shared_ptr<peer_connection> const* peer;$/;"	m	class:libtorrent::aux::__anon49::opt_unchoke_candidate::std	file:
peer	torrent/src/smart_ban.cpp	/^			torrent_peer* peer;$/;"	m	struct:libtorrent::__anon85::final::block_entry	file:
peer_address_compare	torrent/include/libtorrent/torrent_peer.hpp	/^	struct peer_address_compare$/;"	s	namespace:libtorrent
peer_alert	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT peer_alert : torrent_alert$/;"	s	namespace:libtorrent
peer_alert	torrent/src/alert.cpp	/^	peer_alert::peer_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::peer_alert
peer_ban_alert	torrent/src/alert.cpp	/^	peer_ban_alert::peer_ban_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::peer_ban_alert
peer_banned	torrent/include/libtorrent/error_code.hpp	/^			peer_banned,$/;"	e	enum:libtorrent::errors::error_code_enum
peer_blocked_alert	torrent/src/alert.cpp	/^	peer_blocked_alert::peer_blocked_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::peer_blocked_alert
peer_churn	torrent/include/libtorrent/close_reason.hpp	/^		peer_churn,$/;"	m	class:libtorrent::close_reason_t
peer_class	torrent/include/libtorrent/peer_class.hpp	/^		explicit peer_class(std::string l)$/;"	f	struct:libtorrent::peer_class
peer_class	torrent/include/libtorrent/peer_class.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_class$/;"	s	namespace:libtorrent
peer_class	torrent/include/libtorrent/torrent.hpp	/^		peer_class_t peer_class() const { return m_peer_class; }$/;"	f	class:libtorrent::torrent
peer_class_info	torrent/include/libtorrent/peer_class.hpp	/^	struct TORRENT_EXPORT peer_class_info$/;"	s	namespace:libtorrent
peer_class_pool	torrent/include/libtorrent/peer_class.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_class_pool$/;"	s	namespace:libtorrent
peer_class_set	torrent/include/libtorrent/peer_class_set.hpp	/^		peer_class_set() : m_size(0) {}$/;"	f	struct:libtorrent::peer_class_set
peer_class_set	torrent/include/libtorrent/peer_class_set.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_class_set$/;"	s	namespace:libtorrent
peer_class_type_filter	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		peer_class_type_filter()$/;"	f	struct:libtorrent::peer_class_type_filter
peer_class_type_filter	torrent/include/libtorrent/peer_class_type_filter.hpp	/^	struct TORRENT_EXPORT peer_class_type_filter$/;"	s	namespace:libtorrent
peer_conn	torrent/bak/connection_tester.cpp	/^	peer_conn(io_service& ios, int num_pieces, int blocks_pp, tcp::endpoint const& ep$/;"	f	struct:peer_conn
peer_conn	torrent/bak/connection_tester.cpp	/^struct peer_conn$/;"	s	file:
peer_connect_alert	torrent/src/alert.cpp	/^	peer_connect_alert::peer_connect_alert(aux::stack_allocator& alloc, torrent_handle h$/;"	f	class:libtorrent::peer_connect_alert
peer_connect_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			peer_connect_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_connection	torrent/include/libtorrent/peer_connection.hpp	/^	class TORRENT_EXTRA_EXPORT peer_connection$/;"	c	namespace:libtorrent
peer_connection	torrent/include/libtorrent/udp_socket.hpp	/^		static constexpr udp_send_flags_t peer_connection = 0_bit;$/;"	m	class:libtorrent::udp_socket
peer_connection	torrent/src/peer_connection.cpp	/^	peer_connection::peer_connection(peer_connection_args const& pack)$/;"	f	class:libtorrent::peer_connection
peer_connection	torrent/src/udp_socket.cpp	/^constexpr udp_send_flags_t udp_socket::peer_connection;$/;"	m	class:libtorrent::udp_socket	file:
peer_connection_args	torrent/include/libtorrent/peer_connection.hpp	/^	struct peer_connection_args$/;"	s	namespace:libtorrent
peer_connection_handle	torrent/include/libtorrent/peer_connection_handle.hpp	/^	explicit peer_connection_handle(std::weak_ptr<peer_connection> impl)$/;"	f	struct:libtorrent::peer_connection_handle
peer_connection_handle	torrent/include/libtorrent/peer_connection_handle.hpp	/^struct TORRENT_EXPORT peer_connection_handle$/;"	s	namespace:libtorrent
peer_connection_hot_members	torrent/include/libtorrent/peer_connection.hpp	/^		peer_connection_hot_members($/;"	f	struct:libtorrent::peer_connection_hot_members
peer_connection_hot_members	torrent/include/libtorrent/peer_connection.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_connection_hot_members$/;"	s	namespace:libtorrent
peer_connection_interface	torrent/include/libtorrent/peer_connection_interface.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_connection_interface$/;"	s	namespace:libtorrent
peer_count	torrent/include/libtorrent/piece_picker.hpp	/^			int peer_count;$/;"	m	struct:libtorrent::piece_picker::piece_stats_t
peer_count	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint32_t peer_count : 26;$/;"	m	struct:libtorrent::piece_picker::piece_pos
peer_count_t	torrent/src/peer_connection.cpp	/^		peer_count_t(): num_peers(0), num_peers_with_timeouts(0), num_peers_with_nowant(0), num_not_requested(0) {}$/;"	f	struct:libtorrent::peer_count_t
peer_count_t	torrent/src/peer_connection.cpp	/^	struct peer_count_t$/;"	s	namespace:libtorrent	file:
peer_disconnected_alert	torrent/src/alert.cpp	/^	peer_disconnected_alert::peer_disconnected_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::peer_disconnected_alert
peer_disconnected_other	torrent/include/libtorrent/peer_connection.hpp	/^		void peer_disconnected_other()$/;"	f	class:libtorrent::peer_connection
peer_entry	torrent/include/libtorrent/peer.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_entry$/;"	s	namespace:libtorrent
peer_entry	torrent/kademlia/dht_storage.cpp	/^	struct peer_entry$/;"	s	namespace:libtorrent::dht::__anon153	file:
peer_error	torrent/src/peer_connection.cpp	/^	constexpr disconnect_severity_t peer_connection_interface::peer_error;$/;"	m	class:libtorrent::peer_connection_interface	file:
peer_error_alert	torrent/src/alert.cpp	/^	peer_error_alert::peer_error_alert(aux::stack_allocator& alloc, torrent_handle const& h$/;"	f	class:libtorrent::peer_error_alert
peer_exceeds_limit	torrent/include/libtorrent/peer_connection.hpp	/^		void peer_exceeds_limit()$/;"	f	class:libtorrent::peer_connection
peer_fingerprint	torrent/include/libtorrent/settings_pack.hpp	/^			peer_fingerprint,$/;"	e	enum:libtorrent::settings_pack::string_types
peer_has	torrent/src/torrent.cpp	/^	void torrent::peer_has(piece_index_t const index, peer_connection const* peer)$/;"	f	class:libtorrent::torrent
peer_has	torrent/src/torrent.cpp	/^	void torrent::peer_has(typed_bitfield<piece_index_t> const& bits$/;"	f	class:libtorrent::torrent
peer_has_all	torrent/src/torrent.cpp	/^	void torrent::peer_has_all(peer_connection const* peer)$/;"	f	class:libtorrent::torrent
peer_index	torrent/bak/client_test.cpp	/^int peer_index(lt::tcp::endpoint addr, std::vector<lt::peer_info> const& peers)$/;"	f
peer_index	torrent/src/torrent.cpp	/^	int peer_index(libtorrent::tcp::endpoint addr$/;"	f	namespace:libtorrent
peer_info	torrent/include/libtorrent/peer_info.hpp	/^	struct TORRENT_EXPORT peer_info$/;"	s	namespace:libtorrent
peer_interested	torrent/include/libtorrent/alert_types.hpp	/^		bool const peer_interested;$/;"	m	struct:libtorrent::final
peer_is_interesting	torrent/src/torrent.cpp	/^	void torrent::peer_is_interesting(peer_connection& c)$/;"	f	class:libtorrent::torrent
peer_list	torrent/include/libtorrent/peer_list.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_list : single_threaded$/;"	s	namespace:libtorrent
peer_list	torrent/src/peer_list.cpp	/^	peer_list::peer_list(torrent_peer_allocator_interface& alloc)$/;"	f	class:libtorrent::peer_list
peer_list_entry	torrent/include/libtorrent/peer_info.hpp	/^	struct TORRENT_EXTRA_EXPORT peer_list_entry$/;"	s	namespace:libtorrent
peer_log	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t peer_log = 15_bit;$/;"	m	namespace:libtorrent::alert_category
peer_log	torrent/src/peer_connection_handle.cpp	/^void peer_connection_handle::peer_log(peer_log_alert::direction_t direction$/;"	f	class:libtorrent::peer_connection_handle
peer_log_alert	torrent/src/alert.cpp	/^	peer_log_alert::peer_log_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::peer_log_alert
peer_log_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t peer_log_notification = 15_bit;$/;"	m	class:libtorrent::alert
peer_log_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::peer_log_notification;$/;"	m	class:libtorrent::alert	file:
peer_lost	torrent/src/torrent.cpp	/^	void torrent::peer_lost(piece_index_t const index, peer_connection const* peer)$/;"	f	class:libtorrent::torrent
peer_lost	torrent/src/torrent.cpp	/^	void torrent::peer_lost(typed_bitfield<piece_index_t> const& bits$/;"	f	class:libtorrent::torrent
peer_not_constructed	torrent/include/libtorrent/error_code.hpp	/^			peer_not_constructed,$/;"	e	enum:libtorrent::errors::error_code_enum
peer_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t peer_notification = 1_bit;$/;"	m	class:libtorrent::alert
peer_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::peer_notification;$/;"	m	class:libtorrent::alert	file:
peer_plugin	torrent/include/libtorrent/extensions.hpp	/^	struct TORRENT_EXPORT peer_plugin$/;"	s	namespace:libtorrent
peer_priority	torrent/src/torrent_peer.cpp	/^	std::uint32_t peer_priority(tcp::endpoint e1, tcp::endpoint e2)$/;"	f	namespace:libtorrent
peer_proxy	torrent/src/session_handle.cpp	/^	proxy_settings session_handle::peer_proxy() const$/;"	f	class:libtorrent::session_handle
peer_rank	torrent/include/libtorrent/torrent_peer.hpp	/^		mutable std::uint32_t peer_rank;$/;"	m	struct:libtorrent::torrent_peer
peer_rank	torrent/src/peer_connection.cpp	/^	std::uint32_t peer_connection::peer_rank() const$/;"	f	class:libtorrent::peer_connection
peer_request	torrent/include/libtorrent/peer_request.hpp	/^	struct TORRENT_EXPORT peer_request$/;"	s	namespace:libtorrent
peer_sent_empty_piece	torrent/include/libtorrent/error_code.hpp	/^			peer_sent_empty_piece,$/;"	e	enum:libtorrent::errors::error_code_enum
peer_snubbed_alert	torrent/src/alert.cpp	/^	peer_snubbed_alert::peer_snubbed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::peer_snubbed_alert
peer_source	torrent/include/libtorrent/torrent_peer.hpp	/^		peer_source_flags_t peer_source() const$/;"	f	struct:libtorrent::torrent_peer
peer_speedmsg	torrent/include/libtorrent/alert_types.hpp	/^		char const* TORRENT_DEPRECATED_MEMBER peer_speedmsg;$/;"	m	struct:libtorrent::final
peer_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			peer_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_tos	torrent/include/libtorrent/settings_pack.hpp	/^			peer_tos,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_turnover	torrent/include/libtorrent/settings_pack.hpp	/^			peer_turnover,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_turnover_cutoff	torrent/include/libtorrent/settings_pack.hpp	/^			peer_turnover_cutoff,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_turnover_interval	torrent/include/libtorrent/settings_pack.hpp	/^			peer_turnover_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
peer_type_t	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		enum peer_type_t$/;"	g	struct:libtorrent::torrent_peer_allocator_interface
peer_unsnubbed_alert	torrent/src/alert.cpp	/^	peer_unsnubbed_alert::peer_unsnubbed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::peer_unsnubbed_alert
peerinfo	torrent/include/libtorrent/peer_connection.hpp	/^		torrent_peer* peerinfo;$/;"	m	struct:libtorrent::peer_connection_args
peerlist_size	torrent/include/libtorrent/session_status.hpp	/^		int peerlist_size;$/;"	m	struct:libtorrent::session_status
peers	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<tcp::endpoint>> peers;$/;"	m	struct:libtorrent::add_torrent_params
peers	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^		std::int32_t peers = 0;$/;"	m	struct:libtorrent::dht::dht_storage_counters
peers	torrent/include/libtorrent/piece_picker.hpp	/^			std::set<torrent_peer*> peers;$/;"	m	struct:libtorrent::piece_picker::block_info
peers	torrent/include/libtorrent/torrent.hpp	/^		int peers;$/;"	m	struct:libtorrent::time_critical_piece
peers	torrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<peer_entry> peers;$/;"	m	struct:libtorrent::tracker_response
peers	torrent/src/alert.cpp	/^	std::vector<tcp::endpoint> dht_get_peers_reply_alert::peers() const$/;"	f	class:libtorrent::dht_get_peers_reply_alert
peers	torrent/src/alert.cpp	/^	void dht_get_peers_reply_alert::peers(std::vector<tcp::endpoint> &v) const$/;"	f	class:libtorrent::dht_get_peers_reply_alert
peers	torrent/src/torrent.cpp	/^		int peers;$/;"	m	struct:libtorrent::__anon114::busy_block_t	file:
peers4	torrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<ipv4_peer_entry> peers4;$/;"	m	struct:libtorrent::tracker_response
peers4	torrent/kademlia/dht_storage.cpp	/^		std::vector<peer_entry> peers4;$/;"	m	struct:libtorrent::dht::__anon153::torrent_entry	file:
peers6	torrent/include/libtorrent/tracker_manager.hpp	/^		std::vector<ipv6_peer_entry> peers6;$/;"	m	struct:libtorrent::tracker_response
peers6	torrent/kademlia/dht_storage.cpp	/^		std::vector<peer_entry> peers6;$/;"	m	struct:libtorrent::dht::__anon153::torrent_entry	file:
peers_erased	torrent/src/torrent.cpp	/^	void torrent::peers_erased(std::vector<torrent_peer*> const& peers)$/;"	f	class:libtorrent::torrent
peers_in_msg	torrent/src/ut_pex.cpp	/^		int peers_in_msg() const$/;"	f	struct:libtorrent::__anon35::final
pending	torrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t pending:1;$/;"	m	struct:libtorrent::cached_block_entry
pending	torrent/src/alert_manager.cpp	/^	bool alert_manager::pending() const$/;"	f	class:libtorrent::alert_manager
pending_block	torrent/include/libtorrent/peer_connection.hpp	/^		pending_block(piece_block const& b) \/\/ NOLINT$/;"	f	struct:libtorrent::pending_block
pending_block	torrent/include/libtorrent/peer_connection.hpp	/^	struct pending_block$/;"	s	namespace:libtorrent
pending_block_in_buffer	torrent/src/peer_connection.cpp	/^	bool pending_block_in_buffer(pending_block const& pb)$/;"	f	namespace:libtorrent::__anon83
pending_disk_bytes	torrent/include/libtorrent/peer_info.hpp	/^		int pending_disk_bytes;$/;"	m	struct:libtorrent::peer_info
pending_disk_read_bytes	torrent/include/libtorrent/peer_info.hpp	/^		int pending_disk_read_bytes;$/;"	m	struct:libtorrent::peer_info
pending_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		int pending_jobs;$/;"	m	struct:libtorrent::cache_status
performance_alert	torrent/src/alert.cpp	/^	performance_alert::performance_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::performance_alert
performance_warning	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t performance_warning = 9_bit;$/;"	m	class:libtorrent::alert
performance_warning	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t performance_warning = 9_bit;$/;"	m	namespace:libtorrent::alert_category
performance_warning	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::performance_warning;$/;"	m	class:libtorrent::alert	file:
performance_warning_t	torrent/include/libtorrent/alert_types.hpp	/^		enum performance_warning_t$/;"	g	struct:libtorrent::final
perm_peers	torrent/include/libtorrent/performance_counters.hpp	/^			perm_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
perror	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (perror);$/;"	v
perror	virt-p2v/include/gnulib/stdio.h	1345;"	d
pex	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t pex = 2_bit;$/;"	m	struct:libtorrent::peer_info
pex	torrent/src/peer_info.cpp	/^	constexpr peer_source_flags_t peer_info::pex;$/;"	m	class:libtorrent::peer_info	file:
pex_holepunch	torrent/include/libtorrent/pex_flags.hpp	/^	constexpr pex_flags_t pex_holepunch = 4_bit;$/;"	m	namespace:libtorrent
pex_message_too_big	torrent/include/libtorrent/close_reason.hpp	/^		pex_message_too_big,$/;"	m	class:libtorrent::close_reason_t
pex_message_too_large	torrent/include/libtorrent/error_code.hpp	/^			pex_message_too_large,$/;"	e	enum:libtorrent::errors::error_code_enum
pex_seed	torrent/include/libtorrent/pex_flags.hpp	/^	constexpr pex_flags_t pex_seed = 2_bit;$/;"	m	namespace:libtorrent
pex_utp	torrent/include/libtorrent/pex_flags.hpp	/^	constexpr pex_flags_t pex_utp = 3_bit;$/;"	m	namespace:libtorrent
phys_sector_size	include/device.h	/^    long long phys_sector_size; \/\/physical sector size$/;"	m	struct:_PedDevice
physicaldrive_offset	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t physicaldrive_offset() const {return m_physicaldrive_offset;}$/;"	f	class:libtorrent::file_storage
physicaldrive_offset	torrent/include/libtorrent/torrent_info.hpp	/^		std::uint64_t physicaldrive_offset() const {return m_files.physicaldrive_offset();}$/;"	f	class:libtorrent::torrent_info
pick_busy_blocks	torrent/src/torrent.cpp	/^	void pick_busy_blocks(piece_picker const* picker$/;"	f	namespace:libtorrent::__anon114
pick_least_important_item	torrent/kademlia/dht_storage.cpp	/^	typename std::map<node_id, Item>::const_iterator pick_least_important_item($/;"	f	namespace:libtorrent::dht::__anon153
pick_pieces	torrent/src/piece_picker.cpp	/^	picker_flags_t piece_picker::pick_pieces(typed_bitfield<piece_index_t> const& pieces$/;"	f	class:libtorrent::piece_picker
pick_time_critical_block	torrent/src/torrent.cpp	/^	void pick_time_critical_block(std::vector<peer_connection*>& peers$/;"	f	namespace:libtorrent::__anon114
picker	torrent/include/libtorrent/torrent.hpp	/^		piece_picker const& picker() const$/;"	f	class:libtorrent::torrent
picker	torrent/include/libtorrent/torrent.hpp	/^		piece_picker& picker()$/;"	f	class:libtorrent::torrent
picker_log	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t picker_log = 20_bit;$/;"	m	namespace:libtorrent::alert_category
picker_log_alert	torrent/src/alert.cpp	/^	picker_log_alert::picker_log_alert(aux::stack_allocator& alloc, torrent_handle const& h$/;"	f	class:libtorrent::picker_log_alert
picker_log_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t picker_log_notification = 20_bit;$/;"	m	class:libtorrent::alert
picker_log_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::picker_log_notification;$/;"	m	class:libtorrent::alert	file:
picker_options	torrent/include/libtorrent/peer_connection.hpp	/^		void picker_options(picker_options_t o) { m_picker_options = o; }$/;"	f	class:libtorrent::peer_connection
picker_options	torrent/src/peer_connection.cpp	/^	picker_options_t peer_connection::picker_options() const$/;"	f	class:libtorrent::peer_connection
pid	torrent/include/libtorrent/alert_types.hpp	/^		peer_id pid;$/;"	m	struct:libtorrent::peer_alert
pid	torrent/include/libtorrent/peer.hpp	/^		peer_id pid;$/;"	m	struct:libtorrent::peer_entry
pid	torrent/include/libtorrent/peer_info.hpp	/^		peer_id pid;$/;"	m	struct:libtorrent::peer_info
pid	torrent/include/libtorrent/tracker_manager.hpp	/^		peer_id pid;$/;"	m	struct:libtorrent::tracker_request
pid	torrent/src/peer_connection_handle.cpp	/^peer_id const& peer_connection_handle::pid() const$/;"	f	class:libtorrent::peer_connection_handle
pid	virt-p2v/include/miniexpect.h	/^  pid_t pid;$/;"	m	struct:mexp_h
pid	virt-p2v/miniexpect/miniexpect.h	/^  pid_t pid;$/;"	m	struct:mexp_h
piece	torrent/include/libtorrent/alert_types.hpp	/^		piece_index_t const piece;$/;"	m	struct:libtorrent::final
piece	torrent/include/libtorrent/disk_io_job.hpp	/^			piece_index_t piece;$/;"	m	union:libtorrent::disk_io_job::__anon30
piece	torrent/include/libtorrent/disk_io_thread.hpp	/^		piece_index_t piece;$/;"	m	struct:libtorrent::cached_piece_info
piece	torrent/include/libtorrent/peer_request.hpp	/^		piece_index_t piece;$/;"	m	struct:libtorrent::peer_request
piece	torrent/include/libtorrent/torrent.hpp	/^		piece_index_t piece;$/;"	m	struct:libtorrent::time_critical_piece
piece_availability	torrent/src/torrent.cpp	/^	void torrent::piece_availability(aux::vector<int, piece_index_t>& avail) const$/;"	f	class:libtorrent::torrent
piece_availability	torrent/src/torrent_handle.cpp	/^	void torrent_handle::piece_availability(std::vector<int>& avail) const$/;"	f	class:libtorrent::torrent_handle
piece_bar	torrent/bak/print.cpp	/^std::string const& piece_bar(lt::bitfield const& p, int width)$/;"	f	class:std
piece_block	torrent/include/libtorrent/piece_block.hpp	/^		piece_block(piece_index_t p_index, int b_index)$/;"	f	struct:libtorrent::piece_block
piece_block	torrent/include/libtorrent/piece_block.hpp	/^	struct TORRENT_EXTRA_EXPORT piece_block$/;"	s	namespace:libtorrent
piece_block_progress	torrent/include/libtorrent/piece_block_progress.hpp	/^	struct piece_block_progress$/;"	s	namespace:libtorrent
piece_cancelled	torrent/include/libtorrent/torrent.hpp	/^		piece_timed_out, piece_cancelled, piece_unknown, piece_seed$/;"	m	class:libtorrent::waste_reason
piece_closing	torrent/include/libtorrent/torrent.hpp	/^		, piece_end_game, piece_closing$/;"	m	class:libtorrent::waste_reason
piece_count	torrent/include/libtorrent/piece_picker.hpp	/^	struct piece_count$/;"	s	namespace:libtorrent
piece_counter	torrent/src/create_torrent.cpp	/^		piece_index_t piece_counter;$/;"	m	struct:libtorrent::__anon134::hash_state	file:
piece_data	torrent/include/libtorrent/torrent.hpp	/^			boost::shared_array<char> piece_data;$/;"	m	struct:libtorrent::torrent::read_piece_struct
piece_downloading	torrent/src/piece_picker.cpp	/^	constexpr download_queue_t piece_picker::piece_pos::piece_downloading;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
piece_downloading_reverse	torrent/src/piece_picker.cpp	/^	constexpr download_queue_t piece_picker::piece_pos::piece_downloading_reverse;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
piece_end_game	torrent/include/libtorrent/torrent.hpp	/^		, piece_end_game, piece_closing$/;"	m	class:libtorrent::waste_reason
piece_extent_affinity	torrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t piece_extent_affinity = 7_bit;$/;"	m	class:libtorrent::piece_picker
piece_extent_affinity	torrent/include/libtorrent/settings_pack.hpp	/^			piece_extent_affinity,$/;"	e	enum:libtorrent::settings_pack::bool_types
piece_extent_affinity	torrent/src/piece_picker.cpp	/^	constexpr picker_options_t piece_picker::piece_extent_affinity;$/;"	m	class:libtorrent::piece_picker	file:
piece_failed	torrent/include/libtorrent/peer_connection.hpp	/^		bool piece_failed;$/;"	m	class:libtorrent::peer_connection
piece_failed	torrent/src/torrent.cpp	/^	void torrent::piece_failed(piece_index_t const index)$/;"	f	class:libtorrent::torrent
piece_finished	torrent/src/piece_picker.cpp	/^	constexpr download_queue_t piece_picker::piece_pos::piece_finished;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
piece_finished_alert	torrent/src/alert.cpp	/^	piece_finished_alert::piece_finished_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::piece_finished_alert
piece_full	torrent/src/piece_picker.cpp	/^	constexpr download_queue_t piece_picker::piece_pos::piece_full;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
piece_full_reverse	torrent/src/piece_picker.cpp	/^	constexpr download_queue_t piece_picker::piece_pos::piece_full_reverse;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
piece_granularity	torrent/include/libtorrent/torrent_handle.hpp	/^			piece_granularity = 1$/;"	e	enum:libtorrent::torrent_handle::file_progress_flags_t
piece_hash	torrent/include/libtorrent/disk_io_job.hpp	/^			sha1_hash piece_hash;$/;"	m	union:libtorrent::disk_io_job::un
piece_index	torrent/include/libtorrent/alert_types.hpp	/^		piece_index_t const piece_index;$/;"	m	struct:libtorrent::final
piece_index	torrent/include/libtorrent/torrent_handle.hpp	/^		piece_index_t piece_index;$/;"	m	struct:libtorrent::partial_piece_info
piece_info	torrent/src/piece_picker.cpp	/^	void piece_picker::piece_info(piece_index_t const index, piece_picker::downloading_piece& st) const$/;"	f	class:libtorrent::piece_picker
piece_length	torrent/include/libtorrent/create_torrent.hpp	/^		int piece_length() const { return m_files.piece_length(); }$/;"	f	struct:libtorrent::create_torrent
piece_length	torrent/include/libtorrent/file_storage.hpp	/^		int piece_length() const { TORRENT_ASSERT(m_piece_length > 0); return m_piece_length; }$/;"	f	class:libtorrent::file_storage
piece_length	torrent/include/libtorrent/torrent_info.hpp	/^		int piece_length() const { return m_files.piece_length(); }$/;"	f	class:libtorrent::torrent_info
piece_log	torrent/include/libtorrent/block_cache.hpp	/^		aux::vector<piece_log_t> piece_log;$/;"	m	struct:libtorrent::cached_piece_entry
piece_log_t	torrent/include/libtorrent/block_cache.hpp	/^		explicit piece_log_t(artificial_jobs j, int b = -1): job(static_cast<job_action_t>(j)), block(b) {}$/;"	f	struct:libtorrent::piece_log_t
piece_log_t	torrent/include/libtorrent/block_cache.hpp	/^		explicit piece_log_t(job_action_t j, int b = -1): job(j), block(b) {}$/;"	f	struct:libtorrent::piece_log_t
piece_log_t	torrent/include/libtorrent/block_cache.hpp	/^	struct piece_log_t$/;"	s	namespace:libtorrent
piece_matrix	torrent/bak/print.cpp	/^std::string piece_matrix(lt::bitfield const& p, int width, int* height)$/;"	f
piece_open	torrent/src/piece_picker.cpp	/^	constexpr download_queue_t piece_picker::piece_pos::piece_open;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
piece_passed	torrent/src/piece_picker.cpp	/^	void piece_picker::piece_passed(piece_index_t const index)$/;"	f	class:libtorrent::piece_picker
piece_passed	torrent/src/torrent.cpp	/^	void torrent::piece_passed(piece_index_t const index)$/;"	f	class:libtorrent::torrent
piece_picker	torrent/include/libtorrent/piece_picker.hpp	/^	class TORRENT_EXTRA_EXPORT piece_picker$/;"	c	namespace:libtorrent
piece_picker	torrent/src/piece_picker.cpp	/^	piece_picker::piece_picker(int const blocks_per_piece$/;"	f	class:libtorrent::piece_picker
piece_picker_busy_loops	torrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_busy_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_partial_loops	torrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_partial_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_rand_loops	torrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_rand_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_rand_start_loops	torrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_rand_start_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_rare_loops	torrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_rare_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_reverse_rare_loops	torrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_reverse_rare_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_sequential_loops	torrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_sequential_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_picker_suggest_loops	torrent/include/libtorrent/performance_counters.hpp	/^			piece_picker_suggest_loops,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_pos	torrent/include/libtorrent/piece_picker.hpp	/^			piece_pos() {}$/;"	f	struct:libtorrent::piece_picker::piece_pos
piece_pos	torrent/include/libtorrent/piece_picker.hpp	/^			piece_pos(int const peer_count_, int const index_)$/;"	f	struct:libtorrent::piece_picker::piece_pos
piece_pos	torrent/include/libtorrent/piece_picker.hpp	/^		struct piece_pos$/;"	s	class:libtorrent::piece_picker
piece_priorities	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<download_priority_t>> piece_priorities;$/;"	m	struct:libtorrent::add_torrent_params
piece_priorities	torrent/src/piece_picker.cpp	/^	void piece_picker::piece_priorities(std::vector<download_priority_t>& pieces) const$/;"	f	class:libtorrent::piece_picker
piece_priorities	torrent/src/torrent.cpp	/^	void torrent::piece_priorities(aux::vector<download_priority_t, piece_index_t>* pieces) const$/;"	f	class:libtorrent::torrent
piece_priorities	torrent/src/torrent_handle.cpp	/^	std::vector<int> torrent_handle::piece_priorities() const$/;"	f	class:libtorrent::torrent_handle
piece_priority	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint32_t piece_priority : 3;$/;"	m	struct:libtorrent::piece_picker::piece_pos
piece_priority	torrent/src/piece_picker.cpp	/^	download_priority_t piece_picker::piece_priority(piece_index_t const index) const$/;"	f	class:libtorrent::piece_picker
piece_priority	torrent/src/torrent.cpp	/^	download_priority_t torrent::piece_priority(piece_index_t const index) const$/;"	f	class:libtorrent::torrent
piece_priority	torrent/src/torrent_handle.cpp	/^	download_priority_t torrent_handle::piece_priority(piece_index_t index) const$/;"	f	class:libtorrent::torrent_handle
piece_priority	torrent/src/torrent_handle.cpp	/^	void torrent_handle::piece_priority(piece_index_t index, download_priority_t priority) const$/;"	f	class:libtorrent::torrent_handle
piece_progress	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t piece_progress = 22_bit;$/;"	m	namespace:libtorrent::alert_category
piece_progress_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t piece_progress_notification = 22_bit;$/;"	m	class:libtorrent::alert
piece_progress_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::piece_progress_notification;$/;"	m	class:libtorrent::alert	file:
piece_range	torrent/include/libtorrent/torrent_info.hpp	/^		index_range<piece_index_t> piece_range() const$/;"	f	class:libtorrent::torrent_info
piece_refcount	torrent/include/libtorrent/block_cache.hpp	/^		std::uint16_t piece_refcount:7;$/;"	m	struct:libtorrent::cached_piece_entry
piece_refcount	torrent/src/torrent.cpp	/^		piece_refcount(piece_picker& p, piece_index_t piece)$/;"	f	struct:libtorrent::piece_refcount
piece_refcount	torrent/src/torrent.cpp	/^	struct piece_refcount$/;"	s	namespace:libtorrent	file:
piece_refcount_holder	torrent/src/disk_io_thread.cpp	/^		explicit piece_refcount_holder(cached_piece_entry* p) : m_pe(p)$/;"	f	struct:libtorrent::__anon122::piece_refcount_holder
piece_refcount_holder	torrent/src/disk_io_thread.cpp	/^	struct piece_refcount_holder$/;"	s	namespace:libtorrent::__anon122	file:
piece_rejects	torrent/include/libtorrent/performance_counters.hpp	/^			piece_rejects,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_requests	torrent/include/libtorrent/performance_counters.hpp	/^			piece_requests,$/;"	e	enum:libtorrent::counters::stats_counter_t
piece_seed	torrent/include/libtorrent/torrent.hpp	/^		piece_timed_out, piece_cancelled, piece_unknown, piece_seed$/;"	m	class:libtorrent::waste_reason
piece_size	torrent/include/libtorrent/create_torrent.hpp	/^		int piece_size(piece_index_t i) const { return m_files.piece_size(i); }$/;"	f	struct:libtorrent::create_torrent
piece_size	torrent/include/libtorrent/torrent_info.hpp	/^		int piece_size(piece_index_t index) const { return m_files.piece_size(index); }$/;"	f	class:libtorrent::torrent_info
piece_size	torrent/src/file_storage.cpp	/^	int file_storage::piece_size(piece_index_t const index) const$/;"	f	class:libtorrent::file_storage
piece_state	torrent/include/libtorrent/torrent_handle.hpp	/^		state_t TORRENT_DEPRECATED_MEMBER piece_state;$/;"	m	struct:libtorrent::partial_piece_info
piece_stats	torrent/src/piece_picker.cpp	/^	piece_picker::piece_stats_t piece_picker::piece_stats(piece_index_t const index) const$/;"	f	class:libtorrent::piece_picker
piece_stats_t	torrent/include/libtorrent/piece_picker.hpp	/^		struct piece_stats_t$/;"	s	class:libtorrent::piece_picker
piece_timed_out	torrent/include/libtorrent/torrent.hpp	/^		piece_timed_out, piece_cancelled, piece_unknown, piece_seed$/;"	m	class:libtorrent::waste_reason
piece_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			piece_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
piece_unknown	torrent/include/libtorrent/torrent.hpp	/^		piece_timed_out, piece_cancelled, piece_unknown, piece_seed$/;"	m	class:libtorrent::waste_reason
piece_zero_prio	torrent/src/piece_picker.cpp	/^	constexpr download_queue_t piece_picker::piece_pos::piece_zero_prio;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
pieces	torrent/bak/connection_tester.cpp	/^	std::vector<piece_index_t> pieces;$/;"	m	struct:peer_conn	file:
pieces	torrent/include/libtorrent/disk_io_thread.hpp	/^		std::vector<cached_piece_info> pieces;$/;"	m	struct:libtorrent::cache_status
pieces	torrent/include/libtorrent/peer_info.hpp	/^		typed_bitfield<piece_index_t> pieces;$/;"	m	struct:libtorrent::peer_info
pieces	torrent/include/libtorrent/torrent_status.hpp	/^		typed_bitfield<piece_index_t> pieces;$/;"	m	struct:libtorrent::torrent_status
pieces_need_reorder	torrent/include/libtorrent/error_code.hpp	/^			pieces_need_reorder,$/;"	e	enum:libtorrent::errors::error_code_enum
ping_observer	torrent/kademlia/node.cpp	/^	ping_observer($/;"	f	struct:libtorrent::dht::ping_observer
ping_observer	torrent/kademlia/node.cpp	/^struct ping_observer : observer$/;"	s	namespace:libtorrent::dht	file:
pinged	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	bool pinged() const { return timeout_count != 0xff; }$/;"	f	struct:libtorrent::dht::node_entry
pinned	torrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t pinned:15;$/;"	m	struct:libtorrent::cached_piece_entry
pinned	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER pinned = 14_bit;$/;"	m	namespace:libtorrent::torrent_flags
pinned_blocks	torrent/include/libtorrent/block_cache.hpp	/^		int pinned_blocks() const { return m_pinned_blocks; }$/;"	f	struct:libtorrent::block_cache
pinned_blocks	torrent/include/libtorrent/disk_io_thread.hpp	/^		int pinned_blocks;$/;"	m	struct:libtorrent::cache_status
pinned_blocks	torrent/include/libtorrent/performance_counters.hpp	/^			pinned_blocks,$/;"	e	enum:libtorrent::counters::stats_gauge_t
pipe	qt_pro/global.h	/^    PipeThread *pipe;$/;"	m	class:Global
pipe	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (pipe);$/;"	v
pipe	virt-p2v/include/gnulib/unistd.h	1707;"	d
pipe2	virt-p2v/include/gnulib/unistd.h	1736;"	d
pipe_bt	test/test.c	/^int pipe_bt[2];$/;"	v
pipe_buf	src/torrent.cpp	/^char *pipe_buf = NULL;$/;"	v
pipe_event	src/main.c	/^int pipe_event[2];$/;"	v
pipe_event	test/test.c	/^int pipe_event[2];$/;"	v
pipe_qt	qt_pro/pipethread.h	/^    int pipe_qt[2];$/;"	m	class:PipeThread
pipe_qt	src/main.c	/^int pipe_qt[2];$/;"	v
pipe_tcp	src/main.c	/^int pipe_tcp[2];$/;"	v
pipe_tcp	test/test.c	/^int pipe_tcp[2];$/;"	v
pipe_track	test/test.c	/^int pipe_track[2];$/;"	v
pipe_udp	src/main.c	/^int pipe_udp[2];$/;"	v
pipe_udp	test/test.c	/^int pipe_udp[2];$/;"	v
pk	torrent/include/libtorrent/kademlia/item.hpp	/^	public_key const& pk() const$/;"	f	class:libtorrent::dht::item
pkgdatadir	torrent/include/libtorrent/Makefile	/^pkgdatadir = $(datadir)\/libtorrent-rasterbar$/;"	m
pkgincludedir	torrent/include/libtorrent/Makefile	/^pkgincludedir = $(includedir)\/libtorrent-rasterbar$/;"	m
pkglibdir	torrent/include/libtorrent/Makefile	/^pkglibdir = $(libdir)\/libtorrent-rasterbar$/;"	m
pkglibexecdir	torrent/include/libtorrent/Makefile	/^pkglibexecdir = $(libexecdir)\/libtorrent-rasterbar$/;"	m
pkgpyexecdir	torrent/include/libtorrent/Makefile	/^pkgpyexecdir = $/;"	m
pkgpythondir	torrent/include/libtorrent/Makefile	/^pkgpythondir = $/;"	m
pkt_ack	torrent/src/utp_stream.cpp	/^	enum packet_flags_t { pkt_ack = 1, pkt_fin = 2 };$/;"	e	enum:libtorrent::utp_socket_impl::packet_flags_t	file:
pkt_buf	torrent/src/alert.cpp	/^	span<char const> dht_pkt_alert::pkt_buf() const$/;"	f	class:libtorrent::dht_pkt_alert
pkt_fin	torrent/src/utp_stream.cpp	/^	enum packet_flags_t { pkt_ack = 1, pkt_fin = 2 };$/;"	e	enum:libtorrent::utp_socket_impl::packet_flags_t	file:
plaintext	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^	enum class transport : std::uint8_t { plaintext, ssl };$/;"	m	class:libtorrent::aux::transport
plaintext	torrent/include/libtorrent/session_settings.hpp	/^			plaintext = 1,$/;"	e	enum:libtorrent::pe_settings::enc_level
plaintext_encrypted	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t plaintext_encrypted = 20_bit;$/;"	m	struct:libtorrent::peer_info
plaintext_encrypted	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::plaintext_encrypted;$/;"	m	class:libtorrent::peer_info	file:
platform	include/config.h	/^    unsigned char platform[12];     \/\/å¹³å° x86 arm $/;"	m	struct:terminal_info
platform	qt_pro/external.h	/^    unsigned char platform[12];     \/\/å¹³å° x86 arm$/;"	m	struct:terminal_info
plugin	torrent/include/libtorrent/extensions.hpp	/^	struct TORRENT_EXPORT plugin$/;"	s	namespace:libtorrent
plugins	torrent/src/session_impl.cpp	/^			std::vector<std::shared_ptr<plugin>>& plugins;$/;"	m	struct:libtorrent::aux::__anon49::last_optimistic_unchoke_cmp	file:
plugins_all_idx	torrent/include/libtorrent/aux_/session_impl.hpp	/^				plugins_all_idx = 0, \/\/ to store all plugins$/;"	e	enum:libtorrent::aux::final::__anon34
plugins_dht_request_idx	torrent/include/libtorrent/aux_/session_impl.hpp	/^				plugins_dht_request_idx = 3 \/\/ dht_request_feature$/;"	e	enum:libtorrent::aux::final::__anon34
plugins_optimistic_unchoke_idx	torrent/include/libtorrent/aux_/session_impl.hpp	/^				plugins_optimistic_unchoke_idx = 1, \/\/ optimistic_unchoke_feature$/;"	e	enum:libtorrent::aux::final::__anon34
plugins_tick_idx	torrent/include/libtorrent/aux_/session_impl.hpp	/^				plugins_tick_idx = 2, \/\/ tick_feature$/;"	e	enum:libtorrent::aux::final::__anon34
plus_one	torrent/include/libtorrent/ip_filter.hpp	/^	Addr plus_one(Addr const& a)$/;"	f	namespace:libtorrent::detail
plus_one	torrent/include/libtorrent/ip_filter.hpp	/^	inline std::uint16_t plus_one(std::uint16_t val) { return val + 1; }$/;"	f	namespace:libtorrent::detail
poll_interval	torrent/bak/client_test.cpp	/^int poll_interval = 5;$/;"	v
pool_thread_interface	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^	struct pool_thread_interface$/;"	s	namespace:libtorrent
pop	torrent/src/lazy_bdecode.cpp	/^	void lazy_entry::pop()$/;"	f	class:libtorrent::lazy_entry
pop_alert	torrent/src/session_impl.cpp	/^	alert const* session_impl::pop_alert()$/;"	f	class:libtorrent::aux::session_impl
pop_alerts	torrent/bak/client_test.cpp	/^void pop_alerts(torrent_view& view, session_view& ses_view$/;"	f
pop_alerts	torrent/src/session_handle.cpp	/^	void session_handle::pop_alerts(std::vector<alert*>* alerts)$/;"	f	class:libtorrent::session_handle
pop_alerts	torrent/src/session_impl.cpp	/^	void session_impl::pop_alerts()$/;"	f	class:libtorrent::aux::session_impl
pop_alerts	torrent/src/session_impl.cpp	/^	void session_impl::pop_alerts(std::vector<alert*>* alerts)$/;"	f	class:libtorrent::aux::session_impl
pop_front	torrent/include/libtorrent/tailqueue.hpp	/^		T* pop_front()$/;"	f	struct:libtorrent::tailqueue
pop_front	torrent/src/chained_buffer.cpp	/^	void chained_buffer::pop_front(int bytes_to_pop)$/;"	f	class:libtorrent::chained_buffer
popen	virt-p2v/include/gnulib/stdio.h	1369;"	d
populate_disks	virt-p2v/src/gui.c	/^populate_disks (GtkTreeView *disks_list)$/;"	f	file:
populate_interfaces	virt-p2v/src/gui.c	/^populate_interfaces (GtkTreeView *interfaces_list)$/;"	f	file:
populate_removable	virt-p2v/src/gui.c	/^populate_removable (GtkTreeView *removable_list)$/;"	f	file:
port	include/client.h	/^    int port;   $/;"	m	struct:client
port	include/config.h	/^    int port;$/;"	m	struct:server_info
port	include/socket.h	/^    unsigned int port;$/;"	m	struct:sock_udp
port	qt_pro/external.h	/^    int port;$/;"	m	struct:server_info
port	torrent/include/libtorrent/alert_types.hpp	/^		int const port;$/;"	m	namespace:libtorrent
port	torrent/include/libtorrent/alert_types.hpp	/^		int const port;$/;"	v
port	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^		std::uint16_t port = 0;$/;"	m	struct:libtorrent::aux::proxy_settings
port	torrent/include/libtorrent/aux_/session_impl.hpp	/^			int port;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
port	torrent/include/libtorrent/aux_/session_impl.hpp	/^		int port = 0;$/;"	m	struct:libtorrent::aux::listen_port_mapping
port	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	int port() const { return endpoint.port; }$/;"	f	struct:libtorrent::dht::node_entry
port	torrent/include/libtorrent/peer.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::ipv4_peer_entry
port	torrent/include/libtorrent/peer.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::ipv6_peer_entry
port	torrent/include/libtorrent/peer.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::peer_entry
port	torrent/include/libtorrent/peer_list.hpp	/^		int port = 0;$/;"	m	struct:libtorrent::torrent_state
port	torrent/include/libtorrent/string_util.hpp	/^		int port;$/;"	m	struct:libtorrent::listen_interface_t
port	torrent/include/libtorrent/torrent_handle.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::block_info
port	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::torrent_peer
port	torrent/include/libtorrent/union_endpoint.hpp	/^		std::uint16_t port;$/;"	m	struct:libtorrent::union_endpoint
port	torrent/include/libtorrent/upnp.hpp	/^		int port = 0;$/;"	m	struct:libtorrent::final::rootdevice
port	virt-p2v/include/p2v-config.h	/^  int port;$/;"	m	struct:remote_config
port_blocked	torrent/include/libtorrent/close_reason.hpp	/^		port_blocked,$/;"	m	class:libtorrent::close_reason_t
port_blocked	torrent/include/libtorrent/error_code.hpp	/^			port_blocked,$/;"	e	enum:libtorrent::errors::error_code_enum
port_entry	virt-p2v/src/gui.c	/^  *server_entry, *port_entry,$/;"	v	file:
port_filter	torrent/include/libtorrent/ip_filter.hpp	/^class TORRENT_EXPORT port_filter$/;"	c	namespace:libtorrent
port_filter_updated	torrent/src/torrent.cpp	/^	void torrent::port_filter_updated()$/;"	f	class:libtorrent::torrent
port_mapping	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t port_mapping = 2_bit;$/;"	m	namespace:libtorrent::alert_category
port_mapping_conflict	torrent/include/libtorrent/upnp.hpp	/^			port_mapping_conflict = 718,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
port_mapping_log	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t port_mapping_log = 19_bit;$/;"	m	namespace:libtorrent::alert_category
port_mapping_log_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t port_mapping_log_notification = 19_bit;$/;"	m	class:libtorrent::alert
port_mapping_log_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::port_mapping_log_notification;$/;"	m	class:libtorrent::alert	file:
port_mapping_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t port_mapping_notification = 2_bit;$/;"	m	class:libtorrent::alert
port_mapping_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::port_mapping_notification;$/;"	m	class:libtorrent::alert	file:
portfwd_re	virt-p2v/src/ssh.c	/^static pcre *portfwd_re;$/;"	v	file:
portmap_action	torrent/include/libtorrent/aux_/portmap.hpp	/^	enum class portmap_action : std::uint8_t$/;"	c	namespace:libtorrent::aux
portmap_alert	torrent/src/alert.cpp	/^	portmap_alert::portmap_alert(aux::stack_allocator&, port_mapping_t const i$/;"	f	class:libtorrent::portmap_alert
portmap_callback	torrent/include/libtorrent/aux_/portmap.hpp	/^	struct TORRENT_EXTRA_EXPORT portmap_callback$/;"	s	namespace:libtorrent::aux
portmap_error_alert	torrent/src/alert.cpp	/^	portmap_error_alert::portmap_error_alert(aux::stack_allocator&$/;"	f	class:libtorrent::portmap_error_alert
portmap_log_alert	torrent/src/alert.cpp	/^	portmap_log_alert::portmap_log_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::portmap_log_alert
portmap_protocol	torrent/include/libtorrent/portmap.hpp	/^	enum class portmap_protocol : std::uint8_t$/;"	c	namespace:libtorrent
portmap_transport	torrent/include/libtorrent/portmap.hpp	/^	enum class portmap_transport : std::uint8_t$/;"	c	namespace:libtorrent
pos	include/client.h	/^    int pos;$/;"	m	struct:client
pos	torrent/bak/session_view.cpp	/^int session_view::pos() const { return m_position; }$/;"	f	class:session_view
pos	torrent/include/libtorrent/receive_buffer.hpp	/^	int pos() const { return m_recv_pos; }$/;"	f	struct:libtorrent::receive_buffer
pos	torrent/src/receive_buffer.cpp	/^int crypto_receive_buffer::pos() const$/;"	f	class:libtorrent::crypto_receive_buffer
pos_at_end	torrent/include/libtorrent/receive_buffer.hpp	/^	bool pos_at_end() { return m_recv_pos == m_recv_end; }$/;"	f	struct:libtorrent::receive_buffer
posix_openpt	virt-p2v/include/gnulib/stdlib.h	984;"	d
post	torrent/include/libtorrent/aux_/deferred_handler.hpp	/^	void post(io_service& ios, Handler&& h)$/;"	f	struct:libtorrent::aux::deferred_handler
post	torrent/src/upnp.cpp	/^void upnp::post(upnp::rootdevice const& d, char const* soap$/;"	f	class:libtorrent::upnp
post_dht_stats	torrent/src/session_handle.cpp	/^	void session_handle::post_dht_stats()$/;"	f	class:libtorrent::session_handle
post_dht_stats	torrent/src/session_impl.cpp	/^	void session_impl::post_dht_stats()$/;"	f	class:libtorrent::aux::session_impl
post_session_stats	torrent/src/session_handle.cpp	/^	void session_handle::post_session_stats()$/;"	f	class:libtorrent::session_handle
post_session_stats	torrent/src/session_impl.cpp	/^	void session_impl::post_session_stats()$/;"	f	class:libtorrent::aux::session_impl
post_torrent_updates	torrent/src/session_handle.cpp	/^	void session_handle::post_torrent_updates(status_flags_t const flags)$/;"	f	class:libtorrent::session_handle
post_torrent_updates	torrent/src/session_impl.cpp	/^	void session_impl::post_torrent_updates(status_flags_t const flags)$/;"	f	class:libtorrent::aux::session_impl
postinc	torrent/include/libtorrent/tailqueue.hpp	/^	inline N* postinc(N*& e)$/;"	f	namespace:libtorrent
pread	virt-p2v/include/gnulib/unistd.h	1771;"	d
preadv	torrent/src/file.cpp	/^	int preadv(HANDLE fd, ::iovec const* bufs, int num_bufs, std::int64_t const file_offset)$/;"	f	namespace:__anon80
predicted_have_piece	torrent/src/torrent.cpp	/^	void torrent::predicted_have_piece(piece_index_t const index, int const milliseconds)$/;"	f	class:libtorrent::torrent
predictive_piece_announce	torrent/include/libtorrent/settings_pack.hpp	/^			predictive_piece_announce,$/;"	e	enum:libtorrent::settings_pack::int_types
predictive_pieces	torrent/include/libtorrent/torrent.hpp	/^		std::vector<piece_index_t> const& predictive_pieces() const$/;"	f	class:libtorrent::torrent::std
preemptive_unchoke	torrent/src/session_impl.cpp	/^	bool session_impl::preemptive_unchoke() const$/;"	f	class:libtorrent::aux::session_impl
prefer_contiguous	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::prefer_contiguous;$/;"	m	class:libtorrent::picker_log_alert	file:
prefer_contiguous_blocks	torrent/include/libtorrent/peer_connection.hpp	/^		int prefer_contiguous_blocks() const$/;"	f	class:libtorrent::peer_connection
prefer_contiguous_blocks	torrent/include/libtorrent/peer_connection.hpp	/^		void prefer_contiguous_blocks(int num)$/;"	f	class:libtorrent::peer_connection
prefer_rc4	torrent/include/libtorrent/session_settings.hpp	/^		bool prefer_rc4;$/;"	m	struct:libtorrent::pe_settings
prefer_rc4	torrent/include/libtorrent/settings_pack.hpp	/^			prefer_rc4,$/;"	e	enum:libtorrent::settings_pack::bool_types
prefer_udp_trackers	torrent/include/libtorrent/settings_pack.hpp	/^			prefer_udp_trackers,$/;"	e	enum:libtorrent::settings_pack::bool_types
prefer_verified_node_ids	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool prefer_verified_node_ids = true;$/;"	m	struct:libtorrent::dht::settings
preferred	torrent/include/libtorrent/enum_net.hpp	/^		bool preferred = true;$/;"	m	struct:libtorrent::ip_interface
prefix	torrent/include/libtorrent/Makefile	/^prefix = \/home\/ysr\/project\/libtorrent\/build$/;"	m
preformatted	torrent/src/entry.cpp	/^	entry::preformatted_type const& entry::preformatted() const$/;"	f	class:libtorrent::entry::entry
preformatted	torrent/src/entry.cpp	/^	entry::preformatted_type& entry::preformatted()$/;"	f	class:libtorrent::entry
preformatted_t	torrent/include/libtorrent/entry.hpp	/^			preformatted_t$/;"	e	enum:libtorrent::entry::data_type
prepend	torrent/include/libtorrent/tailqueue.hpp	/^		void prepend(tailqueue<T>& rhs)$/;"	f	struct:libtorrent::tailqueue
prepend_buffer	torrent/include/libtorrent/chained_buffer.hpp	/^		void prepend_buffer(Holder buffer, int used_size)$/;"	f	namespace:libtorrent
prev	cJSON/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
prev	include/cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
prev	torrent/include/libtorrent/linked_list.hpp	/^		T* prev;$/;"	m	struct:libtorrent::list_node
prev	torrent/include/libtorrent/linked_list.hpp	/^		void prev() { m_current = m_current->prev; }$/;"	f	struct:libtorrent::list_iterator
prev	torrent/include/libtorrent/units.hpp	/^	strong_typedef<T, Tag> prev(strong_typedef<T, Tag> v)$/;"	f	namespace:libtorrent::aux
prev_amount_download	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t prev_amount_download;$/;"	m	struct:libtorrent::torrent_peer
prev_amount_upload	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t prev_amount_upload;$/;"	m	struct:libtorrent::torrent_peer
prev_state	torrent/include/libtorrent/alert_types.hpp	/^		torrent_status::state_t const prev_state;$/;"	m	class:libtorrent::final::torrent_status
prevent_request	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	static constexpr traversal_flags_t prevent_request = 0_bit;$/;"	m	struct:libtorrent::dht::traversal_algorithm
prevent_request	torrent/kademlia/traversal_algorithm.cpp	/^constexpr traversal_flags_t traversal_algorithm::prevent_request;$/;"	m	class:libtorrent::dht::traversal_algorithm	file:
print	torrent/bak/print.cpp	/^void print(char const* buf)$/;"	f
print_address	torrent/src/socket_io.cpp	/^	std::string print_address(address const& addr)$/;"	f	namespace:libtorrent
print_alert	torrent/bak/client_test.cpp	/^void print_alert(lt::alert const* a, std::string& str)$/;"	f
print_alert	torrent/bak/upnp_test.cpp	/^void print_alert(lt::alert const* a)$/;"	f	namespace:__anon143
print_array	cJSON/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt)$/;"	f	file:
print_array	src/cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt)$/;"	f	file:
print_backtrace	torrent/src/assert.cpp	/^TORRENT_EXPORT void print_backtrace(char* out, int len, int max_depth$/;"	f	namespace:libtorrent
print_backtrace	torrent/src/assert.cpp	/^TORRENT_EXPORT void print_backtrace(char* out, int len, int max_depth, void*)$/;"	f	namespace:libtorrent
print_basis	virt-p2v/src/p2v_config.c	/^print_basis (enum basis v, FILE *fp)$/;"	f	file:
print_block	torrent/bak/client_test.cpp	/^bool print_block = false;$/;"	v
print_config	virt-p2v/src/p2v_config.c	/^print_config (struct config *c, FILE *fp)$/;"	f
print_connecting_peers	torrent/bak/client_test.cpp	/^bool print_connecting_peers = false;$/;"	v
print_dict	torrent/src/entry.cpp	/^	void print_dict(std::string& out, entry const& e$/;"	f	namespace:libtorrent::__anon63
print_disk_stats	torrent/bak/client_test.cpp	/^bool print_disk_stats = false;$/;"	v
print_downloads	torrent/bak/client_test.cpp	/^bool print_downloads = false;$/;"	v
print_endpoint	torrent/bak/client_test.cpp	/^std::string print_endpoint(lt::tcp::endpoint const& ep)$/;"	f
print_endpoint	torrent/src/socket_io.cpp	/^	std::string print_endpoint(address const& addr, int port)$/;"	f	namespace:libtorrent
print_endpoint	torrent/src/socket_io.cpp	/^	std::string print_endpoint(tcp::endpoint const& ep)$/;"	f	namespace:libtorrent
print_endpoint	torrent/src/socket_io.cpp	/^	std::string print_endpoint(udp::endpoint const& ep)$/;"	f	namespace:libtorrent
print_entry	torrent/src/bdecode.cpp	/^	std::string print_entry(bdecode_node const& e$/;"	f	namespace:libtorrent
print_entry	torrent/src/lazy_bdecode.cpp	/^	std::string print_entry(lazy_entry const& e, bool single_line, int indent)$/;"	f	namespace:libtorrent
print_error	torrent/src/error_code.cpp	/^	std::string print_error(error_code const& ec)$/;"	f	namespace:libtorrent
print_fails	torrent/bak/client_test.cpp	/^bool print_fails = false;$/;"	v
print_file_progress	torrent/bak/client_test.cpp	/^bool print_file_progress = false;$/;"	v
print_headers	torrent/bak/torrent_view.cpp	/^void torrent_view::print_headers()$/;"	f	class:torrent_view
print_ip	torrent/bak/client_test.cpp	/^bool print_ip = true;$/;"	v
print_list	torrent/src/entry.cpp	/^	void print_list(std::string& out, entry const& e$/;"	f	namespace:libtorrent::__anon63
print_listen_interfaces	torrent/src/string_util.cpp	/^	std::string print_listen_interfaces(std::vector<listen_interface_t> const& in)$/;"	f	namespace:libtorrent
print_local_ip	torrent/bak/client_test.cpp	/^bool print_local_ip = false;$/;"	v
print_log	torrent/bak/client_test.cpp	/^bool print_log = false;$/;"	v
print_matrix	torrent/bak/client_test.cpp	/^bool print_matrix = false;$/;"	v
print_number	cJSON/cJSON.c	/^static char *print_number(cJSON *item)$/;"	f	file:
print_number	src/cJSON.c	/^static char *print_number(cJSON *item)$/;"	f	file:
print_object	cJSON/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt)$/;"	f	file:
print_object	src/cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt)$/;"	f	file:
print_output_allocation	virt-p2v/src/p2v_config.c	/^print_output_allocation (enum output_allocation v, FILE *fp)$/;"	f	file:
print_peer_info	torrent/bak/client_test.cpp	/^int print_peer_info(std::string& out$/;"	f
print_peers	torrent/bak/client_test.cpp	/^bool print_peers = false;$/;"	v
print_piece	torrent/bak/client_test.cpp	/^void print_piece(lt::partial_piece_info const* pp$/;"	f
print_piece	torrent/src/torrent.cpp	/^	void print_piece(libtorrent::partial_piece_info* pp$/;"	f	namespace:libtorrent
print_piece_log	torrent/src/block_cache.cpp	/^	void print_piece_log(aux::vector<piece_log_t> const& piece_log)$/;"	f	namespace:libtorrent
print_pieces	torrent/src/piece_picker.cpp	/^	void print_pieces(piece_picker const& p)$/;"	f	namespace:libtorrent
print_qcow2	src/qcow2.c	/^void print_qcow2(PedDevice *dev)$/;"	f
print_quoted	virt-p2v/src/conversion.c	/^print_quoted (FILE *fp, const char *s)$/;"	f	file:
print_send_bufs	torrent/bak/client_test.cpp	/^bool print_send_bufs = true;$/;"	v
print_settings	torrent/bak/client_test.cpp	/^void print_settings(int const start, int const num$/;"	f
print_string	cJSON/cJSON.c	/^static char *print_string(cJSON *item)	{return print_string_ptr(item->valuestring);}$/;"	f	file:
print_string	src/cJSON.c	/^static char *print_string(cJSON *item)	{return print_string_ptr(item->valuestring);}$/;"	f	file:
print_string	torrent/src/bdecode.cpp	/^	void print_string(std::string& ret, string_view str, bool single_line)$/;"	f	namespace:libtorrent::__anon41
print_string	torrent/src/entry.cpp	/^	std::string print_string(std::string const& str)$/;"	f	namespace:libtorrent::__anon63
print_string	torrent/src/lazy_bdecode.cpp	/^	void print_string(std::string& ret, char const* str, int const len, bool single_line)$/;"	f	namespace:libtorrent::__anon78
print_string_ptr	cJSON/cJSON.c	/^static char *print_string_ptr(const char *str)$/;"	f	file:
print_string_ptr	src/cJSON.c	/^static char *print_string_ptr(const char *str)$/;"	f	file:
print_tabs	torrent/bak/torrent_view.cpp	/^void torrent_view::print_tabs()$/;"	f	class:torrent_view
print_timers	torrent/bak/client_test.cpp	/^bool print_timers = false;$/;"	v
print_torrent	torrent/bak/torrent_view.cpp	/^void torrent_view::print_torrent(lt::torrent_status const& s, bool selected)$/;"	f	class:torrent_view
print_trackers	torrent/bak/client_test.cpp	/^bool print_trackers = false;$/;"	v
print_usage	torrent/bak/connection_tester.cpp	/^void print_usage()$/;"	f
print_usage	torrent/bak/make_torrent.cpp	/^void print_usage()$/;"	f
print_value	cJSON/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt)$/;"	f	file:
print_value	src/cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt)$/;"	f	file:
printf	torrent/bak/udp_tracker.cpp	/^	bool printf(const char * format,...)$/;"	f	class:CDataStream
printf	virt-p2v/include/gnulib/stdio.h	1420;"	d
prio_factor	torrent/include/libtorrent/piece_picker.hpp	/^			prio_factor = 3,$/;"	e	enum:libtorrent::piece_picker::__anon19
prio_sequential_pieces	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::prio_sequential_pieces;$/;"	m	class:libtorrent::picker_log_alert	file:
priorities	torrent/include/libtorrent/storage_defs.hpp	/^		aux::vector<download_priority_t, file_index_t> const& priorities;$/;"	m	class:libtorrent::storage_params::aux
prioritize_connections	torrent/src/session_impl.cpp	/^	void session_impl::prioritize_connections(std::weak_ptr<torrent> t)$/;"	f	class:libtorrent::aux::session_impl
prioritize_dht	torrent/src/session_impl.cpp	/^	void session_impl::prioritize_dht(std::weak_ptr<torrent> t)$/;"	f	class:libtorrent::aux::session_impl
prioritize_files	torrent/src/torrent.cpp	/^	void torrent::prioritize_files(aux::vector<download_priority_t, file_index_t> files)$/;"	f	class:libtorrent::torrent
prioritize_files	torrent/src/torrent_handle.cpp	/^	void torrent_handle::prioritize_files(std::vector<download_priority_t> const& files) const$/;"	f	class:libtorrent::torrent_handle
prioritize_files	torrent/src/torrent_handle.cpp	/^	void torrent_handle::prioritize_files(std::vector<int> const& files) const$/;"	f	class:libtorrent::torrent_handle
prioritize_partial_pieces	torrent/include/libtorrent/settings_pack.hpp	/^			prioritize_partial_pieces,$/;"	e	enum:libtorrent::settings_pack::bool_types
prioritize_partials	torrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t prioritize_partials = 3_bit;$/;"	m	class:libtorrent::piece_picker
prioritize_partials	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::prioritize_partials;$/;"	m	class:libtorrent::picker_log_alert	file:
prioritize_partials	torrent/src/piece_picker.cpp	/^	constexpr picker_options_t piece_picker::prioritize_partials;$/;"	m	class:libtorrent::piece_picker	file:
prioritize_piece_list	torrent/src/torrent.cpp	/^	void torrent::prioritize_piece_list(std::vector<std::pair<piece_index_t$/;"	f	class:libtorrent::torrent
prioritize_pieces	torrent/src/torrent.cpp	/^	void torrent::prioritize_pieces(aux::vector<download_priority_t, piece_index_t> const& pieces)$/;"	f	class:libtorrent::torrent
prioritize_pieces	torrent/src/torrent_handle.cpp	/^	void torrent_handle::prioritize_pieces(std::vector<download_priority_t> const& pieces) const$/;"	f	class:libtorrent::torrent_handle
prioritize_pieces	torrent/src/torrent_handle.cpp	/^	void torrent_handle::prioritize_pieces(std::vector<int> const& pieces) const$/;"	f	class:libtorrent::torrent_handle
prioritize_pieces	torrent/src/torrent_handle.cpp	/^	void torrent_handle::prioritize_pieces(std::vector<std::pair<piece_index_t$/;"	f	class:libtorrent::torrent_handle
prioritize_pieces	torrent/src/torrent_handle.cpp	/^	void torrent_handle::prioritize_pieces(std::vector<std::pair<piece_index_t, int>> const& pieces) const$/;"	f	class:libtorrent::torrent_handle
prioritize_udp_trackers	torrent/src/torrent.cpp	/^	void torrent::prioritize_udp_trackers()$/;"	f	class:libtorrent::torrent
priority	torrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	int priority;$/;"	m	struct:libtorrent::bw_request
priority	torrent/include/libtorrent/peer_class.hpp	/^		int priority[2];$/;"	m	struct:libtorrent::peer_class
priority	torrent/include/libtorrent/piece_picker.hpp	/^			int priority(piece_picker const* picker) const$/;"	f	struct:libtorrent::piece_picker::piece_pos
priority	torrent/include/libtorrent/piece_picker.hpp	/^			int priority;$/;"	m	struct:libtorrent::piece_picker::piece_stats_t
priority	torrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER priority = 0;$/;"	m	struct:libtorrent::torrent_status
priority	torrent/src/torrent.cpp	/^	int torrent::priority() const$/;"	f	class:libtorrent::torrent
priority_begin	torrent/src/piece_picker.cpp	/^	prio_index_t piece_picker::priority_begin(int const prio) const$/;"	f	class:libtorrent::piece_picker
priority_end	torrent/src/piece_picker.cpp	/^	prio_index_t piece_picker::priority_end(int const prio) const$/;"	f	class:libtorrent::piece_picker
priority_levels	torrent/include/libtorrent/piece_picker.hpp	/^			priority_levels = 8,$/;"	e	enum:libtorrent::piece_picker::__anon19
priority_range	torrent/src/piece_picker.cpp	/^	std::pair<prio_index_t, prio_index_t> piece_picker::priority_range(int const prio) const$/;"	f	class:libtorrent::piece_picker
priority_undetermined	torrent/src/session_impl.cpp	/^		uint64_t const priority_undetermined = std::numeric_limits<uint64_t>::max() - 1;$/;"	m	namespace:libtorrent::aux::__anon49	file:
priv	torrent/include/libtorrent/create_torrent.hpp	/^		bool priv() const { return m_private; }$/;"	f	struct:libtorrent::create_torrent
priv	torrent/include/libtorrent/torrent_info.hpp	/^		bool priv() const { return (m_flags & private_torrent) != 0; }$/;"	f	class:libtorrent::torrent_info
privacy_lookups	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool privacy_lookups = false;$/;"	m	struct:libtorrent::dht::dht_settings
private_torrent	torrent/include/libtorrent/tracker_manager.hpp	/^		bool private_torrent;$/;"	m	struct:libtorrent::tracker_request
process_event_msg	src/event.c	/^static void process_event_msg(char *buf, int len)$/;"	f	file:
process_msg	src/client.c	/^static int process_msg(struct client *cli)$/;"	f	file:
process_msg	test/test.c	/^static int process_msg(struct client *cli)$/;"	f	file:
process_path_lowercase	torrent/src/file_storage.cpp	/^		void process_path_lowercase($/;"	f	namespace:libtorrent::__anon58
process_pipe	qt_pro/pipethread.cpp	/^void PipeThread::process_pipe(unsigned char *msg, int len)$/;"	f	class:PipeThread
process_qt_msg	src/event.c	/^static void process_qt_msg(char *buf, int len)$/;"	f	file:
process_string_lowercase	torrent/src/file_storage.cpp	/^		void process_string_lowercase(CRC& crc, string_view str)$/;"	f	namespace:libtorrent::__anon58
process_string_lowercase	torrent/src/torrent_info.cpp	/^	void process_string_lowercase(CRC& crc, string_view str)$/;"	f	namespace:libtorrent::__anon88
program_name	src/main.c	/^const char program_name[] = "rescue";$/;"	v
program_name	test/test.c	/^const char program_name[] = "bt_server";$/;"	v
program_transform_name	torrent/include/libtorrent/Makefile	/^program_transform_name = s,x,x,$/;"	m
progress	include/torrent.h	/^    unsigned int long progress;$/;"	m	struct:progress_info
progress	qt_pro/downloadwindow.h	/^   QRoundProgressBar *progress;$/;"	m	class:DownloadWindow
progress	qt_pro/global.h	/^    unsigned int long progress;$/;"	m	struct:progress_info
progress	qt_pro/uploadwindow.h	/^    QRoundProgressBar *progress;$/;"	m	class:Uploadwindow
progress	torrent/include/libtorrent/peer_info.hpp	/^		float progress; \/\/ [0, 1]$/;"	m	struct:libtorrent::peer_info
progress	torrent/include/libtorrent/torrent_status.hpp	/^		float progress = 0.f;$/;"	m	struct:libtorrent::torrent_status
progress	virt-p2v/src/conversion.c	/^    unsigned int long progress;$/;"	m	struct:progress_info	file:
progress_bar	torrent/bak/print.cpp	/^std::string const& progress_bar(int progress, int width, color_code c$/;"	f	class:std
progress_info	include/torrent.h	/^struct progress_info{$/;"	s
progress_info	include/torrent.h	/^typedef struct progress_info progress_info;$/;"	t	typeref:struct:progress_info
progress_info	qt_pro/global.h	/^struct progress_info{$/;"	s
progress_info	virt-p2v/src/conversion.c	/^struct progress_info{$/;"	s	file:
progress_invert	torrent/bak/print.hpp	/^enum { progress_invert = 1};$/;"	e	enum:__anon145
progress_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t TORRENT_DEPRECATED_MEMBER progress_notification = 7_bit;$/;"	m	class:libtorrent::alert
progress_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::progress_notification;$/;"	m	class:libtorrent::alert	file:
progress_ppm	torrent/include/libtorrent/peer_info.hpp	/^		int progress_ppm;$/;"	m	struct:libtorrent::peer_info
progress_ppm	torrent/include/libtorrent/torrent_status.hpp	/^		int progress_ppm = 0;$/;"	m	struct:libtorrent::torrent_status
prompt_re	virt-p2v/src/ssh.c	/^static pcre *prompt_re;$/;"	v	file:
protocol	torrent/include/libtorrent/aux_/portmap.hpp	/^		portmap_protocol protocol = portmap_protocol::none;$/;"	m	struct:libtorrent::aux::base_mapping
protocol	torrent/include/libtorrent/http_parser.hpp	/^		std::string const& protocol() const { return m_protocol; }$/;"	f	class:libtorrent::http_parser::std
protocol	torrent/include/libtorrent/kademlia/node.hpp	/^		udp protocol;$/;"	m	struct:libtorrent::dht::node::protocol_descriptor
protocol	torrent/include/libtorrent/kademlia/node.hpp	/^	udp protocol() const { return m_protocol.protocol; }$/;"	f	class:libtorrent::dht::node
protocol	torrent/include/libtorrent/netlink.hpp	/^		int protocol() const$/;"	f	class:libtorrent::netlink
protocol	torrent/include/libtorrent/netlink.hpp	/^		protocol_type protocol() const$/;"	f	class:libtorrent::basic_nl_endpoint
protocol	torrent/include/libtorrent/upnp.hpp	/^		portmap_protocol protocol = portmap_protocol::none;$/;"	m	struct:libtorrent::final::global_mapping_t
protocol_blocked	torrent/include/libtorrent/close_reason.hpp	/^		protocol_blocked,$/;"	m	class:libtorrent::close_reason_t
protocol_descriptor	torrent/include/libtorrent/kademlia/node.hpp	/^	struct protocol_descriptor$/;"	s	class:libtorrent::dht::node
protocol_family_name	torrent/include/libtorrent/kademlia/node.hpp	/^	char const* protocol_family_name() const { return m_protocol.family_name; }$/;"	f	class:libtorrent::dht::node
protocol_nodes_key	torrent/include/libtorrent/kademlia/node.hpp	/^	char const* protocol_nodes_key() const { return m_protocol.nodes_key; }$/;"	f	class:libtorrent::dht::node
protocol_str	torrent/src/alert.cpp	/^	char const* const protocol_str[] = {"none", "TCP", "UDP"};$/;"	m	namespace:libtorrent::__anon98	file:
protocol_version	torrent/include/libtorrent/natpmp.hpp	/^	enum protocol_version$/;"	g	struct:libtorrent::natpmp
proxy	torrent/include/libtorrent/aux_/session_impl.hpp	/^		static constexpr listen_socket_flags_t proxy = 3_bit;$/;"	m	struct:libtorrent::aux::listen_socket_t
proxy	torrent/src/i2p_stream.cpp	/^	aux::proxy_settings i2p_connection::proxy() const$/;"	f	class:libtorrent::i2p_connection
proxy	torrent/src/session_handle.cpp	/^	proxy_settings session_handle::proxy() const$/;"	f	class:libtorrent::session_handle
proxy	torrent/src/session_impl.cpp	/^	constexpr listen_socket_flags_t listen_socket_t::proxy;$/;"	m	class:libtorrent::aux::listen_socket_t	file:
proxy	torrent/src/session_impl.cpp	/^	proxy_settings session_impl::proxy() const$/;"	f	class:libtorrent::aux::session_impl
proxy_base	torrent/include/libtorrent/proxy_base.hpp	/^class proxy_base$/;"	c	namespace:libtorrent
proxy_base	torrent/src/proxy_base.cpp	/^	proxy_base::proxy_base(io_service& io_service)$/;"	f	class:libtorrent::proxy_base
proxy_hostname	torrent/include/libtorrent/settings_pack.hpp	/^			proxy_hostname,$/;"	e	enum:libtorrent::settings_pack::string_types
proxy_hostnames	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^		bool proxy_hostnames = true;$/;"	m	struct:libtorrent::aux::proxy_settings
proxy_hostnames	torrent/include/libtorrent/settings_pack.hpp	/^			proxy_hostnames,$/;"	e	enum:libtorrent::settings_pack::bool_types
proxy_password	torrent/include/libtorrent/settings_pack.hpp	/^			proxy_password,$/;"	e	enum:libtorrent::settings_pack::string_types
proxy_peer_connections	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^		bool proxy_peer_connections = true;$/;"	m	struct:libtorrent::aux::proxy_settings
proxy_peer_connections	torrent/include/libtorrent/settings_pack.hpp	/^			proxy_peer_connections,$/;"	e	enum:libtorrent::settings_pack::bool_types
proxy_port	torrent/include/libtorrent/settings_pack.hpp	/^			proxy_port,$/;"	e	enum:libtorrent::settings_pack::int_types
proxy_settings	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^	struct TORRENT_EXPORT proxy_settings$/;"	s	namespace:libtorrent::aux
proxy_settings	torrent/src/proxy_settings.cpp	/^proxy_settings::proxy_settings(aux::session_settings const& sett)$/;"	f	class:libtorrent::aux::proxy_settings
proxy_settings	torrent/src/proxy_settings.cpp	/^proxy_settings::proxy_settings(settings_pack const& sett)$/;"	f	class:libtorrent::aux::proxy_settings
proxy_tracker_connections	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^		bool proxy_tracker_connections = true;$/;"	m	struct:libtorrent::aux::proxy_settings
proxy_tracker_connections	torrent/include/libtorrent/settings_pack.hpp	/^			proxy_tracker_connections,$/;"	e	enum:libtorrent::settings_pack::bool_types
proxy_type	torrent/include/libtorrent/settings_pack.hpp	/^			proxy_type,$/;"	e	enum:libtorrent::settings_pack::int_types
proxy_username	torrent/include/libtorrent/settings_pack.hpp	/^			proxy_username,$/;"	e	enum:libtorrent::settings_pack::string_types
prune_empty_bucket	torrent/kademlia/routing_table.cpp	/^void routing_table::prune_empty_bucket()$/;"	f	class:libtorrent::dht::routing_table
psdir	torrent/include/libtorrent/Makefile	/^psdir = ${docdir}$/;"	m
pthread_client	src/event.c	/^pthread_t pthread_client;$/;"	v
pthread_event	src/main.c	/^pthread_t pthread_qt, pthread_event, pthread_task;$/;"	v
pthread_qt	src/main.c	/^pthread_t pthread_qt, pthread_event, pthread_task;$/;"	v
pthread_server	test/test.c	/^pthread_t pthread_server, pthread_torrent, pthread_track;$/;"	v
pthread_task	src/main.c	/^pthread_t pthread_qt, pthread_event, pthread_task;$/;"	v
pthread_torrent	test/test.c	/^pthread_t pthread_server, pthread_torrent, pthread_track;$/;"	v
pthread_track	test/test.c	/^pthread_t pthread_server, pthread_torrent, pthread_track;$/;"	v
ptr	torrent/include/libtorrent/lazy_entry.hpp	/^		char const* ptr;$/;"	m	struct:libtorrent::pascal_string
ptr	torrent/src/stack_allocator.cpp	/^	char const* stack_allocator::ptr(allocation_slot const idx) const$/;"	f	class:libtorrent::aux::stack_allocator
ptr	torrent/src/stack_allocator.cpp	/^	char* stack_allocator::ptr(allocation_slot const idx)$/;"	f	class:libtorrent::aux::stack_allocator
ptsname	virt-p2v/include/gnulib/stdlib.h	1009;"	d
ptsname_r	virt-p2v/include/gnulib/stdlib.h	/^_GL_CXXALIASWARN (ptsname_r);$/;"	v
ptsname_r	virt-p2v/include/gnulib/stdlib.h	1035;"	d
public_key	torrent/include/libtorrent/kademlia/types.hpp	/^		explicit public_key(char const* b)$/;"	f	struct:libtorrent::dht::public_key
public_key	torrent/include/libtorrent/kademlia/types.hpp	/^	struct public_key$/;"	s	namespace:libtorrent::dht
puff	torrent/src/puff.cpp	/^int puff(unsigned char *dest,           \/* pointer to destination pointer *\/$/;"	f
purge_peers	torrent/kademlia/dht_storage.cpp	/^		void purge_peers(std::vector<peer_entry>& peers)$/;"	f	class:libtorrent::dht::__anon153::final	file:
push_back	torrent/include/libtorrent/linked_list.hpp	/^		void push_back(T* e)$/;"	f	struct:libtorrent::linked_list
push_back	torrent/include/libtorrent/tailqueue.hpp	/^		void push_back(T* e)$/;"	f	struct:libtorrent::tailqueue
push_front	torrent/include/libtorrent/linked_list.hpp	/^		void push_front(T* e)$/;"	f	struct:libtorrent::linked_list
push_front	torrent/include/libtorrent/tailqueue.hpp	/^		void push_front(T* e)$/;"	f	struct:libtorrent::tailqueue
put	torrent/kademlia/node.cpp	/^void put(std::vector<std::pair<node_entry, std::string>> const& nodes$/;"	f	namespace:libtorrent::dht::__anon149
put_data	torrent/include/libtorrent/kademlia/put_data.hpp	/^struct put_data: traversal_algorithm$/;"	s	namespace:libtorrent::dht
put_data	torrent/kademlia/put_data.cpp	/^put_data::put_data(node& dht_node, put_callback const& callback)$/;"	f	class:libtorrent::dht::put_data
put_data_cb	torrent/kademlia/node.cpp	/^void put_data_cb(item const& i, bool auth$/;"	f	namespace:libtorrent::dht::__anon149
put_data_observer	torrent/include/libtorrent/kademlia/put_data.hpp	/^	put_data_observer($/;"	f	struct:libtorrent::dht::put_data_observer
put_data_observer	torrent/include/libtorrent/kademlia/put_data.hpp	/^struct put_data_observer : traversal_observer$/;"	s	namespace:libtorrent::dht
put_immutable_item_callback	torrent/kademlia/dht_tracker.cpp	/^	void put_immutable_item_callback(int responses, std::shared_ptr<put_item_ctx> ctx$/;"	f	namespace:libtorrent::dht::__anon151
put_item	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::put_item(entry const& data$/;"	f	class:libtorrent::dht::dht_tracker
put_item	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::put_item(public_key const& key$/;"	f	class:libtorrent::dht::dht_tracker
put_item	torrent/kademlia/node.cpp	/^void node::put_item(public_key const& pk, std::string const& salt$/;"	f	class:libtorrent::dht::node
put_item	torrent/kademlia/node.cpp	/^void node::put_item(sha1_hash const& target, entry const& data, std::function<void(int)> f)$/;"	f	class:libtorrent::dht::node
put_item_ctx	torrent/kademlia/dht_tracker.cpp	/^		explicit put_item_ctx(int traversals)$/;"	f	struct:libtorrent::dht::__anon151::put_item_ctx
put_item_ctx	torrent/kademlia/dht_tracker.cpp	/^	struct put_item_ctx$/;"	s	namespace:libtorrent::dht::__anon151	file:
put_mutable_callback	torrent/src/session_impl.cpp	/^		void put_mutable_callback(dht::item& i$/;"	f	namespace:libtorrent::aux::__anon52
put_mutable_item_callback	torrent/kademlia/dht_tracker.cpp	/^	void put_mutable_item_callback(item const& it, int responses, std::shared_ptr<put_item_ctx> ctx$/;"	f	namespace:libtorrent::dht::__anon151
putc	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (putc);$/;"	v
putc_unlocked	virt-p2v/include/gnulib/stdio.h	640;"	d
putchar	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (putchar);$/;"	v
putenv	virt-p2v/include/gnulib/stdlib.h	/^_GL_CXXALIASWARN (putenv);$/;"	v
puts	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (puts);$/;"	v
pwrite	virt-p2v/include/gnulib/unistd.h	1806;"	d
pwritev	torrent/src/file.cpp	/^	int pwritev(HANDLE fd, ::iovec const* bufs, int num_bufs, std::int64_t const file_offset)$/;"	f	namespace:__anon80
pyexecdir	torrent/include/libtorrent/Makefile	/^pyexecdir = $/;"	m
pythondir	torrent/include/libtorrent/Makefile	/^pythondir = $/;"	m
qcow	include/qcow2.h	/^    YZYGUID qcow;$/;"	m	struct:_YZY_DISK_BACK_FILE
qcow	test/check.c	/^    YZYGUID qcow;$/;"	m	struct:_YZY_DISK_BACK_FILE	file:
qcowCount	include/StoreConfig.h	/^    uint32_t            qcowCount; \/\/qcowæ¡ç®æ°$/;"	m	struct:_YZY_STORE_CONFIG
qcow_change_backing_file	test/check.c	/^static int qcow_change_backing_file(yzy_string path, yzy_string backing_file, uint32_t len, uint64_t startOffset)$/;"	f	file:
qsort_r	virt-p2v/include/gnulib/stdlib.h	1087;"	d
qt_meta_data_DownloadWindow	qt_pro/moc_downloadwindow.cpp	/^static const uint qt_meta_data_DownloadWindow[] = {$/;"	v	file:
qt_meta_data_ErroDialog	qt_pro/moc_errodialog.cpp	/^static const uint qt_meta_data_ErroDialog[] = {$/;"	v	file:
qt_meta_stringdata_DownloadWindow	qt_pro/moc_downloadwindow.cpp	/^static const char qt_meta_stringdata_DownloadWindow[] = {$/;"	v	file:
qt_meta_stringdata_ErroDialog	qt_pro/moc_errodialog.cpp	/^static const char qt_meta_stringdata_ErroDialog[] = {$/;"	v	file:
qt_metacall	qt_pro/moc_downloadwindow.cpp	/^int DownloadWindow::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:DownloadWindow
qt_metacall	qt_pro/moc_errodialog.cpp	/^int ErroDialog::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:ErroDialog
qt_metacast	qt_pro/moc_downloadwindow.cpp	/^void *DownloadWindow::qt_metacast(const char *_clname)$/;"	f	class:DownloadWindow
qt_metacast	qt_pro/moc_errodialog.cpp	/^void *ErroDialog::qt_metacast(const char *_clname)$/;"	f	class:ErroDialog
qtobj	Makefile	/^qtobj := qt$/;"	m
query_accurate_download_counters	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_accurate_download_counters = 1_bit;$/;"	m	struct:libtorrent::torrent_handle
query_accurate_download_counters	torrent/src/torrent_handle.cpp	/^	constexpr status_flags_t torrent_handle::query_accurate_download_counters;$/;"	m	class:libtorrent::torrent_handle	file:
query_distributed_copies	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_distributed_copies = 0_bit;$/;"	m	struct:libtorrent::torrent_handle
query_distributed_copies	torrent/src/torrent_handle.cpp	/^	constexpr status_flags_t torrent_handle::query_distributed_copies;$/;"	m	class:libtorrent::torrent_handle	file:
query_last_seen_complete	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_last_seen_complete = 2_bit;$/;"	m	struct:libtorrent::torrent_handle
query_last_seen_complete	torrent/src/torrent_handle.cpp	/^	constexpr status_flags_t torrent_handle::query_last_seen_complete;$/;"	m	class:libtorrent::torrent_handle	file:
query_name	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_name = 6_bit;$/;"	m	struct:libtorrent::torrent_handle
query_name	torrent/src/torrent_handle.cpp	/^	constexpr status_flags_t torrent_handle::query_name;$/;"	m	class:libtorrent::torrent_handle	file:
query_pieces	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_pieces = 3_bit;$/;"	m	struct:libtorrent::torrent_handle
query_pieces	torrent/src/torrent_handle.cpp	/^	constexpr status_flags_t torrent_handle::query_pieces;$/;"	m	class:libtorrent::torrent_handle	file:
query_save_path	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_save_path = 7_bit;$/;"	m	struct:libtorrent::torrent_handle
query_save_path	torrent/src/torrent_handle.cpp	/^	constexpr status_flags_t torrent_handle::query_save_path;$/;"	m	class:libtorrent::torrent_handle	file:
query_torrent_file	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_torrent_file = 5_bit;$/;"	m	struct:libtorrent::torrent_handle
query_torrent_file	torrent/src/torrent_handle.cpp	/^	constexpr status_flags_t torrent_handle::query_torrent_file;$/;"	m	class:libtorrent::torrent_handle	file:
query_verified_pieces	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr status_flags_t query_verified_pieces = 4_bit;$/;"	m	struct:libtorrent::torrent_handle
query_verified_pieces	torrent/src/torrent_handle.cpp	/^	constexpr status_flags_t torrent_handle::query_verified_pieces;$/;"	m	class:libtorrent::torrent_handle	file:
queue_bytes	torrent/include/libtorrent/peer_info.hpp	/^		int queue_bytes;$/;"	m	struct:libtorrent::peer_info
queue_down	torrent/src/torrent.cpp	/^	void torrent::queue_down()$/;"	f	class:libtorrent::torrent
queue_position	torrent/include/libtorrent/torrent.hpp	/^		queue_position_t queue_position() const { return m_sequence_number; }$/;"	f	class:libtorrent::torrent
queue_position	torrent/src/torrent_handle.cpp	/^	queue_position_t torrent_handle::queue_position() const$/;"	f	class:libtorrent::torrent_handle
queue_position_bottom	torrent/src/torrent_handle.cpp	/^	void torrent_handle::queue_position_bottom() const$/;"	f	class:libtorrent::torrent_handle
queue_position_down	torrent/src/torrent_handle.cpp	/^	void torrent_handle::queue_position_down() const$/;"	f	class:libtorrent::torrent_handle
queue_position_set	torrent/src/torrent_handle.cpp	/^	void torrent_handle::queue_position_set(queue_position_t const p) const$/;"	f	class:libtorrent::torrent_handle
queue_position_top	torrent/src/torrent_handle.cpp	/^	void torrent_handle::queue_position_top() const$/;"	f	class:libtorrent::torrent_handle
queue_position_up	torrent/src/torrent_handle.cpp	/^	void torrent_handle::queue_position_up() const$/;"	f	class:libtorrent::torrent_handle
queue_request	torrent/src/tracker_manager.cpp	/^	void tracker_manager::queue_request($/;"	f	class:libtorrent::tracker_manager
queue_size	torrent/src/bandwidth_manager.cpp	/^	int bandwidth_manager::queue_size() const$/;"	f	class:libtorrent::bandwidth_manager
queue_tracker_request	torrent/src/session_impl.cpp	/^	void session_impl::queue_tracker_request(tracker_request&& req$/;"	f	class:libtorrent::aux::session_impl
queue_up	torrent/src/torrent.cpp	/^	void torrent::queue_up()$/;"	f	class:libtorrent::torrent
queued	torrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER static constexpr peer_flags_t queued = 8_bit;$/;"	m	struct:libtorrent::peer_info
queued	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::queued;$/;"	m	class:libtorrent::peer_info	file:
queued_bytes	torrent/include/libtorrent/disk_io_thread.hpp	/^		mutable std::int64_t queued_bytes;$/;"	m	struct:libtorrent::cache_status
queued_bytes	torrent/src/bandwidth_manager.cpp	/^	std::int64_t bandwidth_manager::queued_bytes() const$/;"	f	class:libtorrent::bandwidth_manager
queued_disk_jobs	torrent/include/libtorrent/performance_counters.hpp	/^			queued_disk_jobs,$/;"	e	enum:libtorrent::counters::stats_gauge_t
queued_for_checking	torrent/include/libtorrent/torrent_status.hpp	/^			queued_for_checking TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::torrent_status::state_t
queued_jobs	torrent/include/libtorrent/disk_io_thread.hpp	/^		int queued_jobs;$/;"	m	struct:libtorrent::cache_status
queued_write_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			queued_write_bytes,$/;"	e	enum:libtorrent::counters::stats_gauge_t
quit	torrent/bak/client_test.cpp	/^bool quit = false;$/;"	v
quot	virt-p2v/include/gnulib/inttypes.in.h	/^typedef struct { intmax_t quot; intmax_t rem; } imaxdiv_t;$/;"	m	struct:__anon160
quota_left	torrent/src/bandwidth_limit.cpp	/^	int bandwidth_channel::quota_left() const$/;"	f	class:libtorrent::bandwidth_channel
r	virt-p2v/include/miniexpect.h	/^  int r;$/;"	m	struct:mexp_regexp
r	virt-p2v/miniexpect/miniexpect.h	/^  int r;$/;"	m	struct:mexp_regexp
r0	include/StoreConfig.h	/^    uint8_t             r0; $/;"	m	struct:_YZY_STORE_CONFIG
r1	include/StoreConfig.h	/^    uint16_t            r1; $/;"	m	struct:_YZY_STORE_CONFIG
raise_fence	torrent/src/disk_job_fence.cpp	/^	int disk_job_fence::raise_fence(disk_io_job* j, disk_io_job* fj$/;"	f	class:libtorrent::aux::disk_job_fence
random	torrent/src/random.cpp	/^	std::uint32_t random(std::uint32_t const max)$/;"	f	namespace:libtorrent
random	virt-p2v/include/gnulib/stdlib.h	1122;"	d
random_access	torrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t random_access = 5_bit;$/;"	m	namespace:libtorrent::file_open_mode
random_access	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t random_access = 4_bit;$/;"	m	namespace:libtorrent::open_mode
random_bytes	torrent/src/random.cpp	/^		void random_bytes(span<char> buffer)$/;"	f	namespace:libtorrent::aux
random_engine	torrent/src/random.cpp	/^		std::mt19937& random_engine()$/;"	f	namespace:libtorrent::aux
random_pieces	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::random_pieces;$/;"	m	class:libtorrent::picker_log_alert	file:
random_r	virt-p2v/include/gnulib/stdlib.h	1229;"	d
random_shuffle	torrent/include/libtorrent/random.hpp	/^	void random_shuffle(Range& range)$/;"	f	namespace:libtorrent::aux
rangbar_2	qt_pro/ui_downloadwindow.h	/^    QWidget *rangbar_2;$/;"	m	class:Ui_DownloadWindow
range	torrent/include/libtorrent/aux_/range.hpp	/^	iterator_range<Iter> range(Iter begin, Iter end)$/;"	f	namespace:libtorrent::aux
range	torrent/include/libtorrent/aux_/range.hpp	/^	iterator_range<T const*> range(vector<T, IndexType> const& vec$/;"	f	namespace:libtorrent::aux
range	torrent/include/libtorrent/aux_/range.hpp	/^	iterator_range<T*> range(vector<T, IndexType>& vec$/;"	f	namespace:libtorrent::aux
range	torrent/include/libtorrent/ip_filter.hpp	/^			range(Addr addr, std::uint32_t a = 0) : start(addr), access(a) {} \/\/ NOLINT$/;"	f	struct:libtorrent::detail::filter_impl::range
range	torrent/include/libtorrent/ip_filter.hpp	/^		struct range$/;"	s	class:libtorrent::detail::filter_impl
rank	torrent/src/torrent_peer.cpp	/^	std::uint32_t torrent_peer::rank(external_ip const& external, int external_port) const$/;"	f	class:libtorrent::torrent_peer
rarest_first	torrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t rarest_first = 0_bit;$/;"	m	class:libtorrent::piece_picker
rarest_first	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::rarest_first;$/;"	m	class:libtorrent::picker_log_alert	file:
rarest_first	torrent/src/piece_picker.cpp	/^	constexpr picker_options_t piece_picker::rarest_first;$/;"	m	class:libtorrent::piece_picker	file:
rarest_first_partials	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::rarest_first_partials;$/;"	m	class:libtorrent::picker_log_alert	file:
rate	torrent/include/libtorrent/stat.hpp	/^		std::int32_t rate() const { return m_5_sec_average; }$/;"	f	class:libtorrent::stat_channel
rate_based_choker	torrent/include/libtorrent/settings_pack.hpp	/^			rate_based_choker = 2,$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
rate_choker_initial_threshold	torrent/include/libtorrent/settings_pack.hpp	/^			rate_choker_initial_threshold,$/;"	e	enum:libtorrent::settings_pack::int_types
rate_limit	torrent/include/libtorrent/http_connection.hpp	/^	int rate_limit() const$/;"	f	struct:libtorrent::http_connection
rate_limit	torrent/src/http_connection.cpp	/^void http_connection::rate_limit(int limit)$/;"	f	class:libtorrent::http_connection
rate_limit	torrent/src/session_impl.cpp	/^	int session_impl::rate_limit(peer_class_t c, int channel) const$/;"	f	class:libtorrent::aux::session_impl
rate_limit_ip_overhead	torrent/include/libtorrent/settings_pack.hpp	/^			rate_limit_ip_overhead,$/;"	e	enum:libtorrent::settings_pack::bool_types
rate_limit_utp	torrent/include/libtorrent/settings_pack.hpp	/^			rate_limit_utp TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
rawmemchr	virt-p2v/include/gnulib/string.h	744;"	d
rbegin	torrent/include/libtorrent/file_storage.hpp	/^		reverse_iterator rbegin() const { return m_files.rbegin(); }$/;"	f	class:libtorrent::file_storage
rbegin_deprecated	torrent/include/libtorrent/file_storage.hpp	/^		reverse_iterator rbegin_deprecated() const { return m_files.rbegin(); }$/;"	f	class:libtorrent::file_storage
rbegin_files	torrent/include/libtorrent/torrent_info.hpp	/^		reverse_file_iterator rbegin_files() const { return m_files.rbegin_deprecated(); }$/;"	f	class:libtorrent::torrent_info
rc4	torrent/include/libtorrent/pe_crypto.hpp	/^	struct rc4 {$/;"	s	namespace:libtorrent
rc4	torrent/include/libtorrent/session_settings.hpp	/^			rc4 = 2,$/;"	e	enum:libtorrent::pe_settings::enc_level
rc4_decrypt	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::rc4_decrypt(span<char> buf)$/;"	f	class:libtorrent::bt_peer_connection
rc4_encrypt	torrent/src/pe_crypto.cpp	/^std::size_t rc4_encrypt(unsigned char *out, std::size_t outlen, rc4 *state)$/;"	f	namespace:libtorrent
rc4_encrypted	torrent/include/libtorrent/bt_peer_connection.hpp	/^		bool rc4_encrypted() const$/;"	f	class:libtorrent::bt_peer_connection
rc4_encrypted	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t rc4_encrypted = 19_bit;$/;"	m	struct:libtorrent::peer_info
rc4_encrypted	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::rc4_encrypted;$/;"	m	class:libtorrent::peer_info	file:
rc4_handler	torrent/include/libtorrent/pe_crypto.hpp	/^	struct TORRENT_EXTRA_EXPORT rc4_handler : crypto_plugin$/;"	s	namespace:libtorrent
rc4_handler	torrent/src/pe_crypto.cpp	/^	rc4_handler::rc4_handler()$/;"	f	class:libtorrent::rc4_handler
rc4_init	torrent/src/pe_crypto.cpp	/^void rc4_init(const unsigned char* in, std::size_t len, rc4 *state)$/;"	f	namespace:libtorrent
re	virt-p2v/include/miniexpect.h	/^  const pcre *re;$/;"	m	struct:mexp_regexp
re	virt-p2v/miniexpect/miniexpect.h	/^  const pcre *re;$/;"	m	struct:mexp_regexp
read	torrent/include/libtorrent/aux_/dev_random.hpp	/^		void read(span<char> buffer)$/;"	f	struct:libtorrent::aux::dev_random
read	torrent/include/libtorrent/disk_io_job.hpp	/^		read$/;"	m	class:libtorrent::job_action_t
read	torrent/src/udp_socket.cpp	/^int udp_socket::read(span<packet> pkts, error_code& ec)$/;"	f	class:libtorrent::udp_socket
read_accept_response	torrent/include/libtorrent/i2p_stream.hpp	/^		read_accept_response,$/;"	e	enum:libtorrent::i2p_stream::state_t
read_body	torrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	e	enum:libtorrent::http_parser::__anon22
read_buffer_size	torrent/src/utp_stream.cpp	/^int utp_stream::read_buffer_size() const$/;"	f	class:libtorrent::utp_stream
read_cache	torrent/include/libtorrent/disk_io_thread.hpp	/^		enum kind_t { read_cache = 0, write_cache = 1, volatile_read_cache = 2 };$/;"	e	enum:libtorrent::cached_piece_info::kind_t
read_cache_blocks	torrent/include/libtorrent/performance_counters.hpp	/^			read_cache_blocks,$/;"	e	enum:libtorrent::counters::stats_gauge_t
read_cache_line_size	torrent/include/libtorrent/settings_pack.hpp	/^			read_cache_line_size,$/;"	e	enum:libtorrent::settings_pack::int_types
read_cache_size	torrent/include/libtorrent/block_cache.hpp	/^		int read_cache_size() const { return m_read_cache_size; }$/;"	f	struct:libtorrent::block_cache
read_cache_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int read_cache_size;$/;"	m	struct:libtorrent::cache_status
read_connect_response	torrent/include/libtorrent/i2p_stream.hpp	/^		read_connect_response,$/;"	e	enum:libtorrent::i2p_stream::state_t
read_dht_settings	torrent/kademlia/dht_settings.cpp	/^	dht_settings read_dht_settings(bdecode_node const& e)$/;"	f	namespace:libtorrent::dht
read_dht_state	torrent/kademlia/dht_state.cpp	/^	dht_state read_dht_state(bdecode_node const& e)$/;"	f	namespace:libtorrent::dht
read_endpoint_list	torrent/include/libtorrent/socket_io.hpp	/^		std::vector<EndpointType> read_endpoint_list(libtorrent::bdecode_node const& n)$/;"	f	namespace:libtorrent::detail
read_gpt	src/gpt.c	/^int read_gpt(DiskDriver* pdd)$/;"	f
read_header	torrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	e	enum:libtorrent::http_parser::__anon22
read_hello_response	torrent/include/libtorrent/i2p_stream.hpp	/^		read_hello_response,$/;"	e	enum:libtorrent::i2p_stream::state_t
read_impl	torrent/include/libtorrent/aux_/io.hpp	/^	read_impl(span<Byte>& view, type<T>)$/;"	f	namespace:libtorrent::aux
read_impl	torrent/include/libtorrent/aux_/io.hpp	/^	read_impl(span<Byte>& view, type<std::int8_t>)$/;"	f	namespace:libtorrent::aux
read_impl	torrent/include/libtorrent/aux_/io.hpp	/^	read_impl(span<Byte>& view, type<std::uint8_t>)$/;"	f	namespace:libtorrent::aux
read_impl	torrent/include/libtorrent/io.hpp	/^		inline T read_impl(InIt& start, type<T>)$/;"	f	namespace:libtorrent::detail
read_impl	torrent/include/libtorrent/io.hpp	/^		std::int8_t read_impl(InIt& start, type<std::int8_t>)$/;"	f	namespace:libtorrent::detail
read_impl	torrent/include/libtorrent/io.hpp	/^		std::uint8_t read_impl(InIt& start, type<std::uint8_t>)$/;"	f	namespace:libtorrent::detail
read_int16	torrent/include/libtorrent/aux_/io.hpp	/^	std::int16_t read_int16(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_int16	torrent/include/libtorrent/io.hpp	/^		std::int16_t read_int16(InIt& start)$/;"	f	namespace:libtorrent::detail
read_int32	torrent/include/libtorrent/aux_/io.hpp	/^	std::int32_t read_int32(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_int32	torrent/include/libtorrent/io.hpp	/^		std::int32_t read_int32(InIt& start)$/;"	f	namespace:libtorrent::detail
read_int64	torrent/include/libtorrent/aux_/io.hpp	/^	std::int64_t read_int64(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_int64	torrent/include/libtorrent/io.hpp	/^		std::int64_t read_int64(InIt& start)$/;"	f	namespace:libtorrent::detail
read_int8	torrent/include/libtorrent/aux_/io.hpp	/^	std::int8_t read_int8(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_int8	torrent/include/libtorrent/io.hpp	/^		std::int8_t read_int8(InIt& start)$/;"	f	namespace:libtorrent::detail
read_jobs	torrent/include/libtorrent/block_cache.hpp	/^		tailqueue<disk_io_job> read_jobs;$/;"	m	struct:libtorrent::cached_piece_entry
read_jobs_in_use	torrent/include/libtorrent/disk_job_pool.hpp	/^		int read_jobs_in_use() const { return m_read_jobs; }$/;"	f	struct:libtorrent::disk_job_pool
read_line	torrent/src/i2p_stream.cpp	/^	void i2p_stream::read_line(error_code const& e, handler_type& h)$/;"	f	class:libtorrent::i2p_stream
read_lru1	torrent/include/libtorrent/block_cache.hpp	/^			read_lru1,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
read_lru1_ghost	torrent/include/libtorrent/block_cache.hpp	/^			read_lru1_ghost,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
read_lru2	torrent/include/libtorrent/block_cache.hpp	/^			read_lru2,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
read_lru2_ghost	torrent/include/libtorrent/block_cache.hpp	/^			read_lru2_ghost,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
read_mbr	src/gpt.c	/^int read_mbr(DiskDriver* pdd)$/;"	f
read_msg_order	qt_pro/pipethread.cpp	/^unsigned short read_msg_order(unsigned char * buf)$/;"	f
read_msg_order	src/socket.c	/^unsigned short read_msg_order(unsigned char *buf)$/;"	f
read_msg_size	src/socket.c	/^int read_msg_size(unsigned char *buf)$/;"	f
read_msg_syn	src/socket.c	/^unsigned char read_msg_syn(unsigned char *buf)$/;"	f
read_name_lookup_response	torrent/include/libtorrent/i2p_stream.hpp	/^		read_name_lookup_response$/;"	e	enum:libtorrent::i2p_stream::state_t
read_nl_sock	torrent/src/enum_net.cpp	/^	int read_nl_sock(int sock, span<char> buf, std::uint32_t const seq, std::uint32_t const pid)$/;"	f	namespace:libtorrent::__anon102
read_node_endpoint	torrent/include/libtorrent/kademlia/io.hpp	/^	node_endpoint read_node_endpoint(udp protocol, InIt&& in)$/;"	f	namespace:libtorrent::dht
read_nodes	torrent/src/alert.cpp	/^	std::vector<std::pair<sha1_hash, udp::endpoint>> read_nodes($/;"	f	namespace:libtorrent::__anon101
read_only	include/device.h	/^    int read_only;$/;"	m	struct:_PedDevice
read_only	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool read_only = false;$/;"	m	struct:libtorrent::dht::dht_settings
read_packet_order	src/socket.c	/^unsigned short read_packet_order(unsigned char *buf)$/;"	f
read_packet_size	src/socket.c	/^uint32_t read_packet_size(unsigned char *buf)$/;"	f
read_packet_supplementary	src/socket.c	/^unsigned short read_packet_supplementary(unsigned char *buf)$/;"	f
read_packet_token	src/socket.c	/^unsigned short read_packet_token(unsigned char *buf)$/;"	f
read_piece	torrent/src/torrent.cpp	/^	void torrent::read_piece(piece_index_t const piece)$/;"	f	class:libtorrent::torrent
read_piece	torrent/src/torrent_handle.cpp	/^	void torrent_handle::read_piece(piece_index_t piece) const$/;"	f	class:libtorrent::torrent_handle
read_piece_alert	torrent/src/alert.cpp	/^	read_piece_alert::read_piece_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::read_piece_alert
read_piece_struct	torrent/include/libtorrent/torrent.hpp	/^		struct read_piece_struct$/;"	s	class:libtorrent::torrent
read_pos	torrent/bak/connection_tester.cpp	/^	int read_pos;$/;"	m	struct:peer_conn	file:
read_profile_int	src/inirw.c	/^int read_profile_int( const char *section, const char *key,int default_value,$/;"	f
read_profile_string	src/inirw.c	/^int read_profile_string( const char *section, const char *key,char *value,$/;"	f
read_queue_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int read_queue_size;$/;"	m	struct:libtorrent::cache_status
read_resume_data	torrent/src/read_resume_data.cpp	/^	add_torrent_params read_resume_data(bdecode_node const& rd)$/;"	f	namespace:libtorrent
read_resume_data	torrent/src/read_resume_data.cpp	/^	add_torrent_params read_resume_data(bdecode_node const& rd, error_code& ec)$/;"	f	namespace:libtorrent
read_resume_data	torrent/src/read_resume_data.cpp	/^	add_torrent_params read_resume_data(span<char const> buffer)$/;"	f	namespace:libtorrent
read_resume_data	torrent/src/read_resume_data.cpp	/^	add_torrent_params read_resume_data(span<char const> buffer, error_code& ec)$/;"	f	namespace:libtorrent
read_sector	include/gpt.h	/^    int (*read_sector)(void* hd, uint64_t lba, uint8_t* buffer);$/;"	m	struct:_DiskDriver
read_sector	src/linux.c	/^int read_sector(PedDevice const *dev, PedSector start, void **buf)$/;"	f
read_session_create_response	torrent/include/libtorrent/i2p_stream.hpp	/^		read_session_create_response,$/;"	e	enum:libtorrent::i2p_stream::state_t
read_session_params	torrent/src/session.cpp	/^	session_params read_session_params(bdecode_node const& e, save_state_flags_t const flags)$/;"	f	namespace:libtorrent
read_size	virt-p2v/include/miniexpect.h	/^  size_t read_size;$/;"	m	struct:mexp_h
read_size	virt-p2v/miniexpect/miniexpect.h	/^  size_t read_size;$/;"	m	struct:mexp_h
read_some	torrent/include/libtorrent/aux_/socket_type.hpp	/^		std::size_t read_some(Mutable_Buffers const& buffers)$/;"	f	struct:libtorrent::aux::socket_type
read_some	torrent/include/libtorrent/aux_/socket_type.hpp	/^		std::size_t read_some(Mutable_Buffers const& buffers, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
read_some	torrent/include/libtorrent/proxy_base.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers)$/;"	f	class:libtorrent::proxy_base
read_some	torrent/include/libtorrent/proxy_base.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers, error_code& ec)$/;"	f	class:libtorrent::proxy_base
read_some	torrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers)$/;"	f	class:libtorrent::ssl_stream
read_some	torrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
read_some	torrent/include/libtorrent/utp_stream.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers)$/;"	f	struct:libtorrent::utp_stream
read_some	torrent/include/libtorrent/utp_stream.hpp	/^	std::size_t read_some(Mutable_Buffers const& buffers, error_code& ec)$/;"	f	struct:libtorrent::utp_stream
read_some	torrent/src/utp_stream.cpp	/^std::size_t utp_stream::read_some(bool const clear_buffers)$/;"	f	class:libtorrent::utp_stream
read_state	torrent/include/libtorrent/peer_info.hpp	/^		bandwidth_state_flags_t read_state;$/;"	m	struct:libtorrent::peer_info
read_status	torrent/include/libtorrent/http_parser.hpp	/^		enum { read_status, read_header, read_body, error_state } m_state = read_status;$/;"	e	enum:libtorrent::http_parser::__anon22
read_string	torrent/include/libtorrent/bencode.hpp	/^		void read_string(InIt& in, InIt end, int len, std::string& str, bool& err)$/;"	f	namespace:libtorrent::detail
read_uint16	torrent/include/libtorrent/aux_/io.hpp	/^	std::uint16_t read_uint16(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_uint16	torrent/include/libtorrent/io.hpp	/^		std::uint16_t read_uint16(InIt& start)$/;"	f	namespace:libtorrent::detail
read_uint32	torrent/include/libtorrent/aux_/io.hpp	/^	std::uint32_t read_uint32(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_uint32	torrent/include/libtorrent/io.hpp	/^		std::uint32_t read_uint32(InIt& start)$/;"	f	namespace:libtorrent::detail
read_uint64	torrent/include/libtorrent/aux_/io.hpp	/^	std::uint64_t read_uint64(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_uint64	torrent/include/libtorrent/io.hpp	/^		std::uint64_t read_uint64(InIt& start)$/;"	f	namespace:libtorrent::detail
read_uint8	torrent/include/libtorrent/aux_/io.hpp	/^	std::uint8_t read_uint8(span<Byte>& view)$/;"	f	namespace:libtorrent::aux
read_uint8	torrent/include/libtorrent/io.hpp	/^		std::uint8_t read_uint8(InIt& start)$/;"	f	namespace:libtorrent::detail
read_until	torrent/include/libtorrent/bencode.hpp	/^		std::string read_until(InIt& in, InIt end, char end_token, bool& err)$/;"	f	namespace:libtorrent::detail
read_until	torrent/src/escape_string.cpp	/^	std::string read_until(char const*& str, char const delim, char const* end)$/;"	f	namespace:libtorrent
read_v4_address	torrent/include/libtorrent/socket_io.hpp	/^		address read_v4_address(InIt&& in)$/;"	f	namespace:libtorrent::detail
read_v4_endpoint	torrent/include/libtorrent/socket_io.hpp	/^		Endpoint read_v4_endpoint(InIt&& in)$/;"	f	namespace:libtorrent::detail
read_v6_address	torrent/include/libtorrent/socket_io.hpp	/^		address read_v6_address(InIt&& in)$/;"	f	namespace:libtorrent::detail
read_v6_endpoint	torrent/include/libtorrent/socket_io.hpp	/^		Endpoint read_v6_endpoint(InIt&& in)$/;"	f	namespace:libtorrent::detail
read_write	torrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t read_write = 1_bit;$/;"	m	namespace:libtorrent::file_open_mode
read_write	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t read_write = 1_bit;$/;"	m	namespace:libtorrent::open_mode
readbyte	torrent/bak/udp_tracker.cpp	/^	BYTE readbyte()$/;"	f	class:CDataStream
readdata	torrent/bak/udp_tracker.cpp	/^	BYTE * readdata(DWORD dwLen)$/;"	f	class:CDataStream
readdword	torrent/bak/udp_tracker.cpp	/^	DWORD readdword()$/;"	f	class:CDataStream
reading_count	torrent/include/libtorrent/block_cache.hpp	/^		int reading_count = 0;$/;"	m	struct:libtorrent::cached_block_entry
readint64	torrent/bak/udp_tracker.cpp	/^	__int64 readint64()$/;"	f	class:CDataStream
readlink	virt-p2v/include/gnulib/unistd.h	1862;"	d
readlinkat	virt-p2v/include/gnulib/unistd.h	1891;"	d
reads	torrent/include/libtorrent/disk_io_thread.hpp	/^		int reads;$/;"	m	struct:libtorrent::cache_status
readstring	torrent/bak/udp_tracker.cpp	/^	char * readstring()$/;"	f	class:CDataStream
readv	torrent/src/file.cpp	/^	std::int64_t file::readv(std::int64_t file_offset, span<iovec_t const> bufs$/;"	f	class:libtorrent::file
readv	torrent/src/part_file.cpp	/^	int part_file::readv(span<iovec_t const> bufs$/;"	f	class:libtorrent::part_file
readv	torrent/src/storage.cpp	/^	int default_storage::readv(span<iovec_t const> bufs$/;"	f	class:libtorrent::default_storage
readword	torrent/bak/udp_tracker.cpp	/^	WORD readword()$/;"	f	class:CDataStream
readwritev	torrent/src/storage_utils.cpp	/^	int readwritev(file_storage const& files, span<iovec_t const> const bufs$/;"	f	namespace:libtorrent::aux
ready_for_connections	torrent/include/libtorrent/torrent.hpp	/^		bool ready_for_connections() const$/;"	f	class:libtorrent::torrent
realLba	include/StoreConfig.h	/^    uint64_t    realLba;  \/\/qcowå®¹é$/;"	m	struct:_YZY_QCOW_ENTRY
real_size	include/packet.h	/^    unsigned long long real_size;$/;"	m	struct:yzy_torrent
real_size	test/test.c	/^    unsigned long long real_size;$/;"	m	struct:yzy_torrent	file:
realloc	virt-p2v/include/gnulib/stdlib.h	1348;"	d
reallocarray	virt-p2v/include/gnulib/stdlib.h	1364;"	d
realpath	virt-p2v/include/gnulib/stdlib.h	1388;"	d
reap_idle_threads	torrent/src/disk_io_thread_pool.cpp	/^	void disk_io_thread_pool::reap_idle_threads(error_code const& ec)$/;"	f	class:libtorrent::disk_io_thread_pool
reason	torrent/include/libtorrent/alert_types.hpp	/^		close_reason_t const reason;$/;"	m	struct:libtorrent::final
reason_t	torrent/include/libtorrent/block_cache.hpp	/^		enum reason_t { ref_hashing = 0, ref_reading = 1, ref_flushing = 2 };$/;"	g	struct:libtorrent::block_cache
reboot_clicked	virt-p2v/src/gui.c	/^reboot_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
rebuild	include/StoreConfig.h	/^    void (*rebuild)(); \/\/å¨å é¤èç¹åï¼éè¦è¿è¡éå»ºï¼éå»ºåæææéå¤±æï¼éè¦éæ°scan$/;"	m	struct:_StoreDriver
rebuildDataBrushIfNeeded	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::rebuildDataBrushIfNeeded()$/;"	f	class:QRoundProgressBar
recalc_share_mode	torrent/src/torrent.cpp	/^	void torrent::recalc_share_mode()$/;"	f	class:libtorrent::torrent
recalculate_auto_managed_torrents	torrent/src/session_impl.cpp	/^	void session_impl::recalculate_auto_managed_torrents()$/;"	f	class:libtorrent::aux::session_impl
recalculate_connect_candidates	torrent/src/peer_list.cpp	/^	void peer_list::recalculate_connect_candidates(torrent_state* state)$/;"	f	class:libtorrent::peer_list
recalculate_optimistic_unchoke_slots	torrent/src/session_impl.cpp	/^	void session_impl::recalculate_optimistic_unchoke_slots()$/;"	f	class:libtorrent::aux::session_impl
recalculate_unchoke_slots	torrent/src/session_impl.cpp	/^	void session_impl::recalculate_unchoke_slots()$/;"	f	class:libtorrent::aux::session_impl
receive_buffer	torrent/include/libtorrent/receive_buffer.hpp	/^struct TORRENT_EXTRA_EXPORT receive_buffer$/;"	s	namespace:libtorrent
receive_buffer_size	torrent/include/libtorrent/peer_info.hpp	/^		int receive_buffer_size;$/;"	m	struct:libtorrent::peer_info
receive_buffer_watermark	torrent/include/libtorrent/peer_info.hpp	/^		int receive_buffer_watermark;$/;"	m	struct:libtorrent::peer_info
receive_quota	torrent/include/libtorrent/peer_info.hpp	/^		int receive_quota;$/;"	m	struct:libtorrent::peer_info
received	torrent/include/libtorrent/receive_buffer.hpp	/^	void received(int bytes_transferred)$/;"	f	struct:libtorrent::receive_buffer
received_buffer	torrent/src/session_impl.cpp	/^	void session_impl::received_buffer(int s)$/;"	f	class:libtorrent::aux::session_impl
received_bytes	torrent/include/libtorrent/stat.hpp	/^		void received_bytes(int bytes_payload, int bytes_protocol)$/;"	f	class:libtorrent::stat
received_bytes	torrent/src/peer_connection.cpp	/^	void peer_connection::received_bytes(int const bytes_payload, int const bytes_protocol)$/;"	f	class:libtorrent::peer_connection
received_bytes	torrent/src/session_impl.cpp	/^	void session_impl::received_bytes(int bytes_payload, int bytes_protocol)$/;"	f	class:libtorrent::aux::session_impl
received_bytes	torrent/src/torrent.cpp	/^	void torrent::received_bytes(int const bytes_payload, int const bytes_protocol)$/;"	f	class:libtorrent::torrent
received_bytes	torrent/src/tracker_manager.cpp	/^	void tracker_connection::received_bytes(int bytes)$/;"	f	class:libtorrent::tracker_connection
received_bytes	torrent/src/tracker_manager.cpp	/^	void tracker_manager::received_bytes(int bytes)$/;"	f	class:libtorrent::tracker_manager
received_invalid_data	torrent/src/peer_connection.cpp	/^	bool peer_connection::received_invalid_data(piece_index_t const index, bool single_peer)$/;"	f	class:libtorrent::peer_connection
received_invalid_data	torrent/src/web_peer_connection.cpp	/^bool web_peer_connection::received_invalid_data(piece_index_t const index, bool single_peer)$/;"	f	class:libtorrent::web_peer_connection
received_listen_port	torrent/include/libtorrent/peer_connection.hpp	/^		bool received_listen_port() const { return m_received_listen_port; }$/;"	f	class:libtorrent::peer_connection
received_listen_port	torrent/include/libtorrent/peer_connection.hpp	/^		void received_listen_port()$/;"	f	class:libtorrent::peer_connection
received_metadata	torrent/src/ut_metadata.cpp	/^	bool ut_metadata_plugin::received_metadata(ut_metadata_peer_plugin& source$/;"	f	class:libtorrent::__anon72::ut_metadata_plugin
received_piece	torrent/src/peer_connection.cpp	/^	void peer_connection::received_piece(piece_index_t const index)$/;"	f	class:libtorrent::peer_connection
received_synack	torrent/include/libtorrent/stat.hpp	/^		void received_synack(bool ipv6)$/;"	f	class:libtorrent::stat
received_synack	torrent/src/peer_connection.cpp	/^	void peer_connection::received_synack(bool const ipv6)$/;"	f	class:libtorrent::peer_connection
received_synack	torrent/src/session_impl.cpp	/^	void session_impl::received_synack(bool ipv6)$/;"	f	class:libtorrent::aux::session_impl
received_synack	torrent/src/torrent.cpp	/^	void torrent::received_synack(bool const ipv6)$/;"	f	class:libtorrent::torrent
received_valid_data	torrent/src/peer_connection.cpp	/^	void peer_connection::received_valid_data(piece_index_t const index)$/;"	f	class:libtorrent::peer_connection
receiving_message	torrent/bak/connection_tester.cpp	/^		receiving_message$/;"	e	enum:peer_conn::state_t	file:
reclaim_block	torrent/src/block_cache.cpp	/^void block_cache::reclaim_block(storage_interface* st, aux::block_cache_reference const& ref)$/;"	f	class:libtorrent::block_cache
reclaim_blocks	torrent/src/disk_io_thread.cpp	/^	void disk_io_thread::reclaim_blocks(span<aux::block_cache_reference> refs)$/;"	f	class:disk_io_thread
record_downloading_piece	torrent/src/piece_picker.cpp	/^	void piece_picker::record_downloading_piece(piece_index_t const p)$/;"	f	class:libtorrent::piece_picker
recursive_copy	torrent/src/path.cpp	/^	void recursive_copy(std::string const& old_path, std::string const& new_path, error_code& ec)$/;"	f	namespace:libtorrent
recv_addr	include/socket.h	/^    struct sockaddr_in recv_addr;$/;"	m	struct:sock_udp	typeref:struct:sock_udp::sockaddr_in
recv_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			recv_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_cancel_send_desktop	src/client.c	/^static int recv_cancel_send_desktop(struct client *cli)$/;"	f	file:
recv_clear_all_desktop	src/client.c	/^static int recv_clear_all_desktop(struct client *cli)$/;"	f	file:
recv_config_version	src/client.c	/^static int recv_config_version(struct client *cli)$/;"	f	file:
recv_delay	torrent/src/utp_stream.cpp	/^int utp_stream::recv_delay() const$/;"	f	class:libtorrent::utp_stream
recv_delete	src/client.c	/^static int recv_delete(struct client *cli)$/;"	f	file:
recv_desktop	src/client.c	/^static int recv_desktop(struct client *cli)$/;"	f	file:
recv_down_torrent	src/client.c	/^static int recv_down_torrent(struct client *cli)$/;"	f	file:
recv_failed_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			recv_failed_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_get_config	src/client.c	/^static int recv_get_config(struct client *cli)$/;"	f	file:
recv_get_desktop_group_list	src/client.c	/^static int recv_get_desktop_group_list(struct client *cli)$/;"	f	file:
recv_get_diff_torrent	src/client.c	/^static int recv_get_diff_torrent(struct client *cli)$/;"	f	file:
recv_heartbeat	src/client.c	/^static int recv_heartbeat(struct client *cli)$/;"	f	file:
recv_ip_overhead_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			recv_ip_overhead_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_login	src/client.c	/^static int recv_login(struct client *cli)$/;"	f	file:
recv_login	test/test.c	/^static int recv_login(struct client *cli)$/;"	f	file:
recv_msg	src/socket.c	/^int recv_msg(const int fd, char *buf, const int len)$/;"	f
recv_p2v_progress	src/client.c	/^static int recv_p2v_progress(struct client *cli)$/;"	f	file:
recv_p2v_transform	src/client.c	/^static int recv_p2v_transform(struct client *cli)$/;"	f	file:
recv_payload_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			recv_payload_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_reboot	src/client.c	/^static int recv_reboot(struct client *cli, int flag)$/;"	f	file:
recv_redundant_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			recv_redundant_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_set_update_config	src/client.c	/^static int recv_set_update_config(struct client *cli)$/;"	f	file:
recv_socket_buffer_size	torrent/include/libtorrent/settings_pack.hpp	/^			recv_socket_buffer_size,$/;"	e	enum:libtorrent::settings_pack::int_types
recv_tracker_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			recv_tracker_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
recv_update_config	src/client.c	/^static int recv_update_config(struct client *cli)$/;"	f	file:
recv_update_diff_disk	src/client.c	/^static int recv_update_diff_disk(struct client *cli)$/;"	f	file:
recv_update_ip	src/client.c	/^static int recv_update_ip(struct client *cli)$/;"	f	file:
recv_update_name	src/client.c	/^static int recv_update_name(struct client *cli)$/;"	f	file:
recv_upgrad	src/client.c	/^static int recv_upgrad(struct client *cli)$/;"	f	file:
redirecting	torrent/include/libtorrent/error_code.hpp	/^			redirecting,$/;"	e	enum:libtorrent::errors::error_code_enum
redirects	torrent/include/libtorrent/torrent.hpp	/^		std::map<file_index_t, std::string> redirects;$/;"	m	struct:libtorrent::web_seed_t
redundant	torrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t redundant;$/;"	m	struct:libtorrent::tracker_request
redundant_pkts_in	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t redundant_pkts_in;$/;"	m	struct:libtorrent::utp_status
ref_flushing	torrent/include/libtorrent/block_cache.hpp	/^		enum reason_t { ref_hashing = 0, ref_reading = 1, ref_flushing = 2 };$/;"	e	enum:libtorrent::block_cache::reason_t
ref_hashing	torrent/include/libtorrent/block_cache.hpp	/^		enum reason_t { ref_hashing = 0, ref_reading = 1, ref_flushing = 2 };$/;"	e	enum:libtorrent::block_cache::reason_t
ref_reading	torrent/include/libtorrent/block_cache.hpp	/^		enum reason_t { ref_hashing = 0, ref_reading = 1, ref_flushing = 2 };$/;"	e	enum:libtorrent::block_cache::reason_t
refcount	torrent/include/libtorrent/block_cache.hpp	/^		std::int32_t refcount = 0;$/;"	m	struct:libtorrent::cached_piece_entry
refcount	torrent/include/libtorrent/block_cache.hpp	/^		std::uint32_t refcount:29;$/;"	m	struct:libtorrent::cached_block_entry
refcount_table_clusters	include/qcow2.h	/^    uint32_t refcount_table_clusters;$/;"	m	struct:_QCowHeader
refcount_table_clusters	test/check.c	/^    uint32_t refcount_table_clusters;$/;"	m	struct:_QCowHeader	file:
refcount_table_offset	include/qcow2.h	/^    uint64_t refcount_table_offset;$/;"	m	struct:_QCowHeader
refcount_table_offset	test/check.c	/^    uint64_t refcount_table_offset;$/;"	m	struct:_QCowHeader	file:
references	torrent/include/libtorrent/peer_class.hpp	/^		int references;$/;"	m	struct:libtorrent::peer_class
refresh_infohashes_sample	torrent/kademlia/dht_storage.cpp	/^		void refresh_infohashes_sample()$/;"	f	class:libtorrent::dht::__anon153::final	file:
refresh_key	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::refresh_key(error_code const& e)$/;"	f	class:libtorrent::dht::dht_tracker
refresh_timeout	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::refresh_timeout(error_code const& e)$/;"	f	class:libtorrent::dht::dht_tracker
refresh_torrent_status	torrent/src/session_handle.cpp	/^	void session_handle::refresh_torrent_status(std::vector<torrent_status>* ret$/;"	f	class:libtorrent::session_handle
refresh_torrent_status	torrent/src/session_impl.cpp	/^	void session_impl::refresh_torrent_status(std::vector<torrent_status>* ret$/;"	f	class:libtorrent::aux::session_impl
refs	torrent/include/libtorrent/debug.hpp	/^		int refs;$/;"	m	struct:libtorrent::async_t
regular_file	torrent/include/libtorrent/aux_/path.hpp	/^			regular_file = 0x8000  \/\/ regular$/;"	e	enum:libtorrent::file_status::__anon31
reject_piece	torrent/src/peer_connection.cpp	/^	void peer_connection::reject_piece(piece_index_t const index)$/;"	f	class:libtorrent::peer_connection
reject_piece_picks	torrent/include/libtorrent/performance_counters.hpp	/^			reject_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
release	torrent/include/libtorrent/lazy_entry.hpp	/^		void release()$/;"	f	struct:libtorrent::lazy_entry
release	torrent/include/libtorrent/packet_pool.hpp	/^		void release(packet_ptr p)$/;"	f	struct:libtorrent::packet_pool
release	torrent/src/disk_io_thread.cpp	/^		void release()$/;"	f	struct:libtorrent::__anon122::piece_refcount_holder
release	torrent/src/file_pool.cpp	/^	void file_pool::release()$/;"	f	class:libtorrent::file_pool
release	torrent/src/file_pool.cpp	/^	void file_pool::release(storage_index_t const st)$/;"	f	class:libtorrent::file_pool
release	torrent/src/file_pool.cpp	/^	void file_pool::release(storage_index_t const st, file_index_t file_index)$/;"	f	class:libtorrent::file_pool
release_files	torrent/include/libtorrent/disk_io_job.hpp	/^		, release_files$/;"	m	class:libtorrent::job_action_t
release_files	torrent/src/storage.cpp	/^	void default_storage::release_files(storage_error&)$/;"	f	class:libtorrent::default_storage
release_packet	torrent/include/libtorrent/utp_socket_manager.hpp	/^		void release_packet(packet_ptr p) { m_packet_pool.release(std::move(p)); }$/;"	f	struct:libtorrent::utp_socket_manager
release_packet	torrent/src/utp_stream.cpp	/^	void release_packet(packet_ptr p) { m_sm.release_packet(std::move(p)); }$/;"	f	struct:libtorrent::utp_socket_impl
rem	virt-p2v/include/gnulib/inttypes.in.h	/^typedef struct { intmax_t quot; intmax_t rem; } imaxdiv_t;$/;"	m	struct:__anon160
remap_files	torrent/src/torrent_info.cpp	/^	void torrent_info::remap_files(file_storage const& f)$/;"	f	class:libtorrent::torrent_info
remap_natpmp	torrent/include/libtorrent/aux_/session_impl.hpp	/^				remap_natpmp = 1,$/;"	e	enum:libtorrent::aux::final::remap_port_mask_t
remap_natpmp_and_upnp	torrent/include/libtorrent/aux_/session_impl.hpp	/^				remap_natpmp_and_upnp = 3$/;"	e	enum:libtorrent::aux::final::remap_port_mask_t
remap_port_mask_t	torrent/include/libtorrent/aux_/session_impl.hpp	/^			enum remap_port_mask_t$/;"	g	struct:libtorrent::aux::final
remap_ports	torrent/src/session_impl.cpp	/^	void session_impl::remap_ports(remap_port_mask_t const mask$/;"	f	class:libtorrent::aux::session_impl
remap_upnp	torrent/include/libtorrent/aux_/session_impl.hpp	/^				remap_upnp = 2,$/;"	e	enum:libtorrent::aux::final::remap_port_mask_t
remote	torrent/include/libtorrent/broadcast_socket.hpp	/^			udp::endpoint remote;$/;"	m	struct:libtorrent::broadcast_socket::socket_entry
remote	torrent/src/peer_connection_handle.cpp	/^tcp::endpoint const& peer_connection_handle::remote() const$/;"	f	class:libtorrent::tcp::peer_connection_handle
remote	virt-p2v/include/p2v-config.h	/^  struct remote_config remote;$/;"	m	struct:config	typeref:struct:config::remote_config
remote_choked	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t remote_choked = 3_bit;$/;"	m	struct:libtorrent::peer_info
remote_choked	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::remote_choked;$/;"	m	class:libtorrent::peer_info	file:
remote_config	virt-p2v/include/p2v-config.h	/^struct remote_config {$/;"	s
remote_dl_rate	torrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER int remote_dl_rate;$/;"	m	struct:libtorrent::peer_info
remote_endpoint	torrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type remote_endpoint() const$/;"	f	class:libtorrent::proxy_base
remote_endpoint	torrent/include/libtorrent/proxy_base.hpp	/^	endpoint_type remote_endpoint(error_code& ec) const$/;"	f	class:libtorrent::proxy_base
remote_endpoint	torrent/include/libtorrent/ssl_stream.hpp	/^	endpoint_type remote_endpoint() const$/;"	f	class:libtorrent::ssl_stream
remote_endpoint	torrent/include/libtorrent/ssl_stream.hpp	/^	endpoint_type remote_endpoint(error_code& ec) const$/;"	f	class:libtorrent::ssl_stream
remote_endpoint	torrent/include/libtorrent/utp_stream.hpp	/^	endpoint_type remote_endpoint() const$/;"	f	struct:libtorrent::utp_stream
remote_endpoint	torrent/src/socket_type.cpp	/^	socket_type::endpoint_type socket_type::remote_endpoint() const$/;"	f	class:libtorrent::aux::socket_type
remote_endpoint	torrent/src/socket_type.cpp	/^	socket_type::endpoint_type socket_type::remote_endpoint(error_code& ec) const$/;"	f	class:libtorrent::aux::socket_type
remote_endpoint	torrent/src/utp_stream.cpp	/^	tcp::endpoint remote_endpoint(error_code& ec) const$/;"	f	struct:libtorrent::utp_socket_impl
remote_endpoint	torrent/src/utp_stream.cpp	/^utp_stream::endpoint_type utp_stream::remote_endpoint(error_code& ec) const$/;"	f	class:libtorrent::utp_stream
remote_host_must_be_wildcard	torrent/include/libtorrent/upnp.hpp	/^			remote_host_must_be_wildcard = 726,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
remote_interested	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t remote_interested = 2_bit;$/;"	m	struct:libtorrent::peer_info
remote_interested	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::remote_interested;$/;"	m	class:libtorrent::peer_info	file:
removable	virt-p2v/include/p2v-config.h	/^  char **removable;$/;"	m	struct:config
removable_list	virt-p2v/src/gui.c	/^  *disks_list, *removable_list, *interfaces_list,$/;"	v	file:
remove	torrent/include/libtorrent/peer_class_type_filter.hpp	/^		void remove(socket_type_t const st, peer_class_t const peer_class)$/;"	f	namespace:libtorrent
remove	torrent/src/packet_buffer.cpp	/^	packet_ptr packet_buffer::remove(index_type idx)$/;"	f	class:libtorrent::packet_buffer
remove	torrent/src/path.cpp	/^	void remove(std::string const& inf, error_code& ec)$/;"	f	namespace:libtorrent
remove	torrent/src/piece_picker.cpp	/^	void piece_picker::remove(int priority, prio_index_t elem_index)$/;"	f	class:libtorrent::piece_picker
remove	virt-p2v/include/gnulib/stdio.h	1491;"	d
remove_all	torrent/src/path.cpp	/^	void remove_all(std::string const& f, error_code& ec)$/;"	f	namespace:libtorrent
remove_buffer_in_use	torrent/src/disk_buffer_pool.cpp	/^	void disk_buffer_pool::remove_buffer_in_use(char* buf)$/;"	f	class:libtorrent::disk_buffer_pool
remove_class	torrent/src/peer_class_set.cpp	/^	void peer_class_set::remove_class(peer_class_pool& pool, peer_class_t const c)$/;"	f	class:libtorrent::peer_class_set
remove_connection	torrent/src/torrent.cpp	/^	void torrent::remove_connection(peer_connection const* p)$/;"	f	class:libtorrent::torrent
remove_extension	torrent/src/path.cpp	/^	std::string remove_extension(std::string const& f)$/;"	f	namespace:libtorrent
remove_extension	torrent/src/torrent.cpp	/^	void torrent::remove_extension(std::shared_ptr<torrent_plugin> ext)$/;"	f	class:libtorrent::torrent
remove_http_seed	torrent/src/torrent_handle.cpp	/^	void torrent_handle::remove_http_seed(std::string const& url) const$/;"	f	class:libtorrent::torrent_handle
remove_node	torrent/kademlia/routing_table.cpp	/^void routing_table::remove_node(node_entry* n, bucket_t* b)$/;"	f	class:libtorrent::dht::routing_table
remove_oldest	torrent/src/file_pool.cpp	/^	file_handle file_pool::remove_oldest(std::unique_lock<std::mutex>&)$/;"	f	class:libtorrent::file_pool
remove_piece	torrent/src/storage_piece_set.cpp	/^	void storage_piece_set::remove_piece(cached_piece_entry* p)$/;"	f	class:libtorrent::aux::storage_piece_set
remove_request	torrent/src/tracker_manager.cpp	/^	void tracker_manager::remove_request(http_tracker_connection const* c)$/;"	f	class:libtorrent::tracker_manager
remove_request	torrent/src/tracker_manager.cpp	/^	void tracker_manager::remove_request(udp_tracker_connection const* c)$/;"	f	class:libtorrent::tracker_manager
remove_sack_header	torrent/src/utp_stream.cpp	/^void utp_socket_impl::remove_sack_header(packet* p)$/;"	f	class:libtorrent::utp_socket_impl
remove_socket	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::remove_socket(std::uint16_t const id)$/;"	f	class:libtorrent::utp_socket_manager
remove_time_critical_piece	torrent/src/torrent.cpp	/^	void torrent::remove_time_critical_piece(piece_index_t const piece, bool const finished)$/;"	f	class:libtorrent::torrent
remove_time_critical_pieces	torrent/src/torrent.cpp	/^	void torrent::remove_time_critical_pieces(aux::vector<download_priority_t, piece_index_t> const& priority)$/;"	f	class:libtorrent::torrent
remove_torrent	torrent/bak/torrent_view.cpp	/^void torrent_view::remove_torrent(lt::torrent_handle h)$/;"	f	class:torrent_view
remove_torrent	torrent/src/disk_io_thread.cpp	/^	void disk_io_thread::remove_torrent(storage_index_t const idx)$/;"	f	class:disk_io_thread
remove_torrent	torrent/src/session_handle.cpp	/^	void session_handle::remove_torrent(const torrent_handle& h, remove_flags_t const options)$/;"	f	class:libtorrent::session_handle
remove_torrent	torrent/src/session_impl.cpp	/^	void session_impl::remove_torrent(const torrent_handle& h$/;"	f	class:libtorrent::aux::session_impl
remove_torrent_impl	torrent/src/session_impl.cpp	/^	void session_impl::remove_torrent_impl(std::shared_ptr<torrent> tptr$/;"	f	class:libtorrent::aux::session_impl
remove_traversal_algorithm	torrent/include/libtorrent/kademlia/node.hpp	/^	void remove_traversal_algorithm(traversal_algorithm* a)$/;"	f	class:libtorrent::dht::node
remove_udp_socket	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::remove_udp_socket(std::weak_ptr<utp_socket_interface> sock)$/;"	f	class:libtorrent::utp_socket_manager
remove_url_seed	torrent/src/torrent_handle.cpp	/^	void torrent_handle::remove_url_seed(std::string const& url) const$/;"	f	class:libtorrent::torrent_handle
remove_usb	src/tools.c	/^int remove_usb(char *buf)$/;"	f
remove_web_seed	torrent/src/torrent.cpp	/^	void torrent::remove_web_seed(std::string const& url, web_seed_entry::type_t const type)$/;"	f	class:libtorrent::torrent
remove_web_seed_conn	torrent/src/torrent.cpp	/^	void torrent::remove_web_seed_conn(peer_connection* p, error_code const& ec$/;"	f	class:libtorrent::torrent
remove_web_seed_iter	torrent/src/torrent.cpp	/^	void torrent::remove_web_seed_iter(std::list<web_seed_t>::iterator web)$/;"	f	class:libtorrent::torrent
removed	torrent/include/libtorrent/torrent.hpp	/^		bool removed = false;$/;"	m	struct:libtorrent::web_seed_t
removed	torrent/include/libtorrent/torrent.hpp	/^		void removed()$/;"	f	class:libtorrent::torrent
rename	torrent/src/path.cpp	/^	void rename(std::string const& inf, std::string const& newf, error_code& ec)$/;"	f	namespace:libtorrent
rename	virt-p2v/include/gnulib/stdio.h	1516;"	d
rename_file	torrent/include/libtorrent/disk_io_job.hpp	/^		, rename_file$/;"	m	class:libtorrent::job_action_t
rename_file	torrent/include/libtorrent/torrent_info.hpp	/^		void rename_file(file_index_t index, std::string const& new_filename)$/;"	f	class:libtorrent::torrent_info
rename_file	torrent/src/file_storage.cpp	/^	void file_storage::rename_file(file_index_t const index$/;"	f	class:libtorrent::file_storage
rename_file	torrent/src/file_storage.cpp	/^	void file_storage::rename_file(file_index_t index, std::wstring const& new_filename)$/;"	f	class:libtorrent::file_storage
rename_file	torrent/src/storage.cpp	/^	void default_storage::rename_file(file_index_t const index, std::string const& new_filename$/;"	f	class:libtorrent::default_storage
rename_file	torrent/src/torrent.cpp	/^	void torrent::rename_file(file_index_t const index, std::string name)$/;"	f	class:libtorrent::torrent
rename_file	torrent/src/torrent_handle.cpp	/^	void torrent_handle::rename_file(file_index_t index, std::string const& new_name) const$/;"	f	class:libtorrent::torrent_handle
rename_file	torrent/src/torrent_handle.cpp	/^	void torrent_handle::rename_file(file_index_t index, std::wstring const& new_name) const$/;"	f	class:libtorrent::torrent_handle
rename_file	torrent/src/torrent_info.cpp	/^	void torrent_info::rename_file(file_index_t index, std::wstring const& new_filename)$/;"	f	class:libtorrent::torrent_info
rename_file_deprecated	torrent/src/file_storage.cpp	/^	void file_storage::rename_file_deprecated(file_index_t index, std::wstring const& new_filename)$/;"	f	class:libtorrent::file_storage
renameat	virt-p2v/include/gnulib/stdio.h	1544;"	d
renamed_files	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::map<file_index_t, std::string>> renamed_files;$/;"	m	struct:libtorrent::add_torrent_params
rend	torrent/include/libtorrent/file_storage.hpp	/^		reverse_iterator rend() const { return m_files.rend(); }$/;"	f	class:libtorrent::file_storage
rend_deprecated	torrent/include/libtorrent/file_storage.hpp	/^		reverse_iterator rend_deprecated() const { return m_files.rend(); }$/;"	f	class:libtorrent::file_storage
rend_files	torrent/include/libtorrent/torrent_info.hpp	/^		reverse_file_iterator rend_files() const { return m_files.rend_deprecated(); }$/;"	f	class:libtorrent::torrent_info
render	torrent/bak/session_view.cpp	/^void session_view::render()$/;"	f	class:session_view
render	torrent/bak/torrent_view.cpp	/^void torrent_view::render()$/;"	f	class:torrent_view
render_lsd_packet	torrent/src/lsd.cpp	/^int render_lsd_packet(char* dst, int const len, int const listen_port$/;"	f	namespace:libtorrent::__anon131
rendezvous	torrent/include/libtorrent/bt_peer_connection.hpp	/^			rendezvous = 0,$/;"	m	class:libtorrent::bt_peer_connection::hp_message
reopen_listen_sockets	torrent/src/session_impl.cpp	/^	void session_impl::reopen_listen_sockets(bool const map_ports)$/;"	f	class:libtorrent::aux::session_impl
reopen_map_ports	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr reopen_network_flags_t reopen_map_ports = 0_bit;$/;"	m	struct:libtorrent::session_handle
reopen_map_ports	torrent/src/session_handle.cpp	/^	constexpr reopen_network_flags_t session_handle::reopen_map_ports;$/;"	m	class:libtorrent::session_handle	file:
reopen_network_sockets	torrent/src/session_handle.cpp	/^	void session_handle::reopen_network_sockets(reopen_network_flags_t const options)$/;"	f	class:libtorrent::session_handle
reopen_network_sockets	torrent/src/session_impl.cpp	/^	void session_impl::reopen_network_sockets(reopen_network_flags_t const options)$/;"	f	class:libtorrent::aux::session_impl
reorder_file	torrent/src/file_storage.cpp	/^	void file_storage::reorder_file(int const index, int const dst)$/;"	f	class:libtorrent::file_storage
repeat_lengths_with_no_first_length	torrent/include/libtorrent/gzip.hpp	/^			repeat_lengths_with_no_first_length,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
repeat_more_than_specified_lengths	torrent/include/libtorrent/gzip.hpp	/^			repeat_more_than_specified_lengths,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
replace_node_impl	torrent/kademlia/routing_table.cpp	/^routing_table::add_node_status_t replace_node_impl(node_entry const& e$/;"	f	namespace:libtorrent::dht
replace_trackers	torrent/src/torrent.cpp	/^	void torrent::replace_trackers(std::vector<announce_entry> const& urls)$/;"	f	class:libtorrent::torrent
replace_trackers	torrent/src/torrent_handle.cpp	/^	void torrent_handle::replace_trackers($/;"	f	class:libtorrent::torrent_handle
replacements	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	bucket_t replacements;$/;"	m	struct:libtorrent::dht::routing_table_node
reply	torrent/kademlia/find_data.cpp	/^void find_data_observer::reply(msg const& m)$/;"	f	class:libtorrent::dht::find_data_observer
reply	torrent/kademlia/get_item.cpp	/^void get_item_observer::reply(msg const& m)$/;"	f	class:libtorrent::dht::get_item_observer
reply	torrent/kademlia/get_peers.cpp	/^void get_peers_observer::reply(msg const& m)$/;"	f	class:libtorrent::dht::get_peers_observer
reply	torrent/kademlia/get_peers.cpp	/^void obfuscated_get_peers_observer::reply(msg const& m)$/;"	f	class:libtorrent::dht::obfuscated_get_peers_observer
reply	torrent/kademlia/sample_infohashes.cpp	/^void sample_infohashes_observer::reply(msg const& m)$/;"	f	class:libtorrent::dht::sample_infohashes_observer
reply	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_observer::reply(msg const& m)$/;"	f	class:libtorrent::dht::traversal_observer
repopulate_output_combo	virt-p2v/src/gui.c	/^repopulate_output_combo (struct config *config)$/;"	f	file:
report_redundant_bytes	torrent/include/libtorrent/settings_pack.hpp	/^			report_redundant_bytes,$/;"	e	enum:libtorrent::settings_pack::bool_types
report_true_downloaded	torrent/include/libtorrent/settings_pack.hpp	/^			report_true_downloaded,$/;"	e	enum:libtorrent::settings_pack::bool_types
report_web_seed_downloads	torrent/include/libtorrent/settings_pack.hpp	/^			report_web_seed_downloads,$/;"	e	enum:libtorrent::settings_pack::bool_types
reqOrRes	include/packet.h	/^    u8_t   reqOrRes;            \/\/è¯·æ±è¿æ¯ååº   ä¾å¦ 0x01: è¯·æ± 0x02: ååº$/;"	m	struct:yzy_packet
req_head	include/socket.h	/^}req_head;$/;"	t	typeref:struct:_req_head
req_head	qt_pro/pipethread.cpp	/^}req_head;$/;"	t	typeref:struct:_req_head	file:
request	torrent/include/libtorrent/alert_types.hpp	/^		peer_request const request;$/;"	m	struct:libtorrent::final
request_a_block	torrent/src/request_blocks.cpp	/^	bool request_a_block(torrent& t, peer_connection& c)$/;"	f	namespace:libtorrent
request_bandwidth	torrent/src/bandwidth_manager.cpp	/^	int bandwidth_manager::request_bandwidth(std::shared_ptr<bandwidth_socket> peer$/;"	f	class:libtorrent::bandwidth_manager
request_bandwidth	torrent/src/peer_connection.cpp	/^	int peer_connection::request_bandwidth(int const channel, int bytes)$/;"	f	class:libtorrent::peer_connection
request_callback	torrent/include/libtorrent/tracker_manager.hpp	/^		request_callback() {}$/;"	f	struct:libtorrent::request_callback
request_callback	torrent/include/libtorrent/tracker_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT request_callback$/;"	s	namespace:libtorrent
request_code	include/packet.h	/^    u32_t  request_code;        \/\/è¯·æ±ç¼å·       ä¾å¦ 0x00000001  ç¨äºåºå«æ¯ä¸ªé¾æ¥æ¯æ¬¡è¯·æ±çå¯ä¸æ§$/;"	m	struct:yzy_packet
request_dropped_alert	torrent/src/alert.cpp	/^	request_dropped_alert::request_dropped_alert(aux::stack_allocator& alloc, torrent_handle h$/;"	f	class:libtorrent::request_dropped_alert
request_large_blocks	torrent/include/libtorrent/peer_connection.hpp	/^		bool request_large_blocks() const$/;"	f	class:libtorrent::peer_connection
request_large_blocks	torrent/include/libtorrent/peer_connection.hpp	/^		void request_large_blocks(bool b)$/;"	f	class:libtorrent::peer_connection
request_latency	torrent/include/libtorrent/performance_counters.hpp	/^			request_latency,$/;"	e	enum:libtorrent::counters::stats_gauge_t
request_queue	torrent/src/peer_connection.cpp	/^	std::vector<pending_block> const& peer_connection::request_queue() const$/;"	f	class:libtorrent::std::peer_connection
request_queue_time	torrent/include/libtorrent/settings_pack.hpp	/^			request_queue_time,$/;"	e	enum:libtorrent::settings_pack::int_types
request_size	torrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	int request_size;$/;"	m	struct:libtorrent::bw_request
request_size_overhead	torrent/src/web_peer_connection.cpp	/^constexpr int request_size_overhead = 5000;$/;"	m	namespace:libtorrent	file:
request_time_critical_pieces	torrent/src/torrent.cpp	/^	void torrent::request_time_critical_pieces()$/;"	f	class:libtorrent::torrent
request_timeout	torrent/include/libtorrent/peer_info.hpp	/^		int request_timeout;$/;"	m	struct:libtorrent::peer_info
request_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			request_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
request_timeout	torrent/src/peer_connection.cpp	/^	int peer_connection::request_timeout() const$/;"	f	class:libtorrent::peer_connection
request_when_choked	torrent/include/libtorrent/close_reason.hpp	/^		request_when_choked,$/;"	m	class:libtorrent::close_reason_t
requested	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t requested:15;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
requested	torrent/include/libtorrent/torrent_handle.hpp	/^			requested,$/;"	e	enum:libtorrent::block_info::block_state_t
requested	torrent/include/libtorrent/torrent_handle.hpp	/^		int requested;$/;"	m	struct:libtorrent::partial_piece_info
requested_from	torrent/src/piece_picker.cpp	/^	std::tuple<bool, bool, int, int> piece_picker::requested_from($/;"	f	class:libtorrent::piece_picker
requester	torrent/src/tracker_manager.cpp	/^	std::shared_ptr<request_callback> tracker_connection::requester() const$/;"	f	class:libtorrent::tracker_connection
requests_in_buffer	torrent/include/libtorrent/peer_info.hpp	/^		int requests_in_buffer;$/;"	m	struct:libtorrent::peer_info
requires_ssl_connection	torrent/include/libtorrent/error_code.hpp	/^			requires_ssl_connection,$/;"	e	enum:libtorrent::errors::error_code_enum
resend_announce	torrent/src/lsd.cpp	/^void lsd::resend_announce(error_code const& e, sha1_hash const& info_hash$/;"	f	class:libtorrent::lsd
resend_packet	torrent/src/utp_stream.cpp	/^bool utp_socket_impl::resend_packet(packet* p, bool fast_resend)$/;"	f	class:libtorrent::utp_socket_impl
resend_request	torrent/src/natpmp.cpp	/^void natpmp::resend_request(port_mapping_t const i)$/;"	f	class:libtorrent::natpmp
resend_request	torrent/src/upnp.cpp	/^void upnp::resend_request(error_code const& ec)$/;"	f	class:libtorrent::upnp
reserve	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void reserve(std::size_t s)$/;"	f	struct:libtorrent::aux::container_wrapper
reserve	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void reserve(underlying_index s)$/;"	f	struct:libtorrent::aux::container_wrapper
reserve	torrent/src/bdecode.cpp	/^	void bdecode_node::reserve(int tokens)$/;"	f	class:libtorrent::bdecode_node
reserve	torrent/src/file_storage.cpp	/^	void file_storage::reserve(int num_files)$/;"	f	class:libtorrent::file_storage
reserve	torrent/src/packet_buffer.cpp	/^	void packet_buffer::reserve(std::uint32_t size)$/;"	f	class:libtorrent::packet_buffer
reserve	torrent/src/receive_buffer.cpp	/^span<char> receive_buffer::reserve(int const size)$/;"	f	class:libtorrent::receive_buffer
reserve	torrent/src/stat_cache.cpp	/^	void stat_cache::reserve(int num_files)$/;"	f	class:libtorrent::stat_cache
reserved	include/gpt.h	/^    uint32_t  reserved;$/;"	m	struct:__anon6
reserved	torrent/include/libtorrent/error_code.hpp	/^			reserved,$/;"	e	enum:libtorrent::errors::error_code_enum
reset	torrent/bak/udp_tracker.cpp	/^	void reset()$/;"	f	class:CDataStream
reset	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		void reset()$/;"	f	struct:libtorrent::aux::crypt_hash
reset	torrent/include/libtorrent/copy_ptr.hpp	/^		void reset(T* t = nullptr) { m_ptr.reset(t); }$/;"	f	struct:libtorrent::copy_ptr
reset	torrent/include/libtorrent/disk_interface.hpp	/^		void reset()$/;"	f	struct:libtorrent::storage_holder
reset	torrent/kademlia/dht_storage.cpp	/^void dht_storage_counters::reset()$/;"	f	class:libtorrent::dht::dht_storage_counters
reset	torrent/src/announce_entry.cpp	/^	void announce_endpoint::reset()$/;"	f	class:libtorrent::announce_endpoint
reset	torrent/src/announce_entry.cpp	/^	void announce_entry::reset()$/;"	f	class:libtorrent::announce_entry
reset	torrent/src/disk_buffer_holder.cpp	/^	void disk_buffer_holder::reset(aux::block_cache_reference const& ref, char* buf, std::size_t const sz)$/;"	f	class:libtorrent::disk_buffer_holder
reset	torrent/src/disk_buffer_holder.cpp	/^	void disk_buffer_holder::reset(char* const buf, std::size_t const sz)$/;"	f	class:libtorrent::disk_buffer_holder
reset	torrent/src/hasher.cpp	/^	void hasher::reset()$/;"	f	class:libtorrent::hasher
reset	torrent/src/hasher512.cpp	/^	void hasher512::reset()$/;"	f	class:libtorrent::hasher512
reset	torrent/src/http_parser.cpp	/^	void http_parser::reset()$/;"	f	class:libtorrent::http_parser
reset	torrent/src/receive_buffer.cpp	/^void crypto_receive_buffer::reset(int packet_size)$/;"	f	class:libtorrent::crypto_receive_buffer
reset	torrent/src/receive_buffer.cpp	/^void receive_buffer::reset(int const packet_size)$/;"	f	class:libtorrent::receive_buffer
reset	torrent/src/stack_allocator.cpp	/^	void stack_allocator::reset()$/;"	f	class:libtorrent::aux::stack_allocator
resetFormat	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::resetFormat()$/;"	f	class:QRoundProgressBar
reset_choke_counters	torrent/src/peer_connection.cpp	/^	void peer_connection::reset_choke_counters()$/;"	f	class:libtorrent::peer_connection
reset_fail_count	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	void reset_fail_count() { if (pinged()) timeout_count = 0; }$/;"	f	struct:libtorrent::dht::node_entry
reset_piece_deadline	torrent/src/torrent.cpp	/^	void torrent::reset_piece_deadline(piece_index_t piece)$/;"	f	class:libtorrent::torrent
reset_piece_deadline	torrent/src/torrent_handle.cpp	/^	void torrent_handle::reset_piece_deadline(piece_index_t index) const$/;"	f	class:libtorrent::torrent_handle
resize	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void resize(std::size_t s)$/;"	f	struct:libtorrent::aux::container_wrapper
resize	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void resize(std::size_t s, T const& v)$/;"	f	struct:libtorrent::aux::container_wrapper
resize	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void resize(underlying_index s)$/;"	f	struct:libtorrent::aux::container_wrapper
resize	torrent/include/libtorrent/aux_/container_wrapper.hpp	/^		void resize(underlying_index s, T const& v)$/;"	f	struct:libtorrent::aux::container_wrapper
resize	torrent/src/bitfield.cpp	/^	void bitfield::resize(int const bits)$/;"	f	class:libtorrent::bitfield
resize	torrent/src/bitfield.cpp	/^	void bitfield::resize(int const bits, bool const val)$/;"	f	class:libtorrent::bitfield
resize	torrent/src/file_pool.cpp	/^	void file_pool::resize(int size)$/;"	f	class:libtorrent::file_pool
resize	torrent/src/piece_picker.cpp	/^	void piece_picker::resize(int const blocks_per_piece$/;"	f	class:libtorrent::piece_picker
resize_to_bit_size	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         inline void resize_to_bit_size(cpp_int_backend<MinBits, MaxBits, SignType, Checked, Allocator>& newval, unsigned bits, const mpl::false_&)$/;"	f	namespace:boost::multiprecision::detail
resize_to_bit_size	torrent/include/libtorrent/aux_/cppint_import_export.hpp	/^         inline void resize_to_bit_size(cpp_int_backend<MinBits, MaxBits, SignType, Checked, Allocator>& newval, unsigned, const mpl::true_&)$/;"	f	namespace:boost::multiprecision::detail
resolve_duplicate_filenames	torrent/src/torrent_info.cpp	/^	void torrent_info::resolve_duplicate_filenames()$/;"	f	class:libtorrent::torrent_info
resolve_duplicate_filenames_slow	torrent/src/torrent_info.cpp	/^	void torrent_info::resolve_duplicate_filenames_slow()$/;"	f	class:libtorrent::torrent_info
resolve_file_url	torrent/src/escape_string.cpp	/^	std::string resolve_file_url(std::string const& url)$/;"	f	namespace:libtorrent
resolve_filename	torrent/src/torrent.cpp	/^	std::string torrent::resolve_filename(file_index_t const file) const$/;"	f	class:libtorrent::torrent
resolve_links	torrent/include/libtorrent/resolve_links.hpp	/^	struct TORRENT_EXTRA_EXPORT resolve_links$/;"	s	namespace:libtorrent
resolve_links	torrent/src/resolve_links.cpp	/^resolve_links::resolve_links(std::shared_ptr<torrent_info> ti)$/;"	f	class:libtorrent::resolve_links
resolve_redirect_location	torrent/src/http_parser.cpp	/^	std::string resolve_redirect_location(std::string referrer$/;"	f	namespace:libtorrent
resolver	torrent/src/resolver.cpp	/^	resolver::resolver(io_service& ios)$/;"	f	class:libtorrent::resolver
resolver_cache_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			resolver_cache_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
resolver_interface	torrent/include/libtorrent/resolver_interface.hpp	/^struct TORRENT_EXTRA_EXPORT resolver_interface$/;"	s	namespace:libtorrent
resolving	torrent/include/libtorrent/torrent.hpp	/^		bool resolving = false;$/;"	m	struct:libtorrent::web_seed_t
resort_result	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::resort_result(observer* o)$/;"	f	class:libtorrent::dht::traversal_algorithm
response	torrent/src/alert.cpp	/^	bdecode_node dht_direct_response_alert::response() const$/;"	f	class:libtorrent::dht_direct_response_alert
response_count	torrent/kademlia/dht_tracker.cpp	/^		int response_count;$/;"	m	struct:libtorrent::dht::__anon151::put_item_ctx	file:
response_data_free	virt-p2v/include/gui-gtk2-compat.h	/^response_data_free (gpointer data)$/;"	f
response_id	virt-p2v/include/gui-gtk2-compat.h	/^  gint response_id;$/;"	m	struct:_ResponseData
restart	virt-p2v/include/gnulib/msvc-inval.h	/^  jmp_buf restart;$/;"	m	struct:gl_msvc_inval_per_thread
restart_piece	torrent/include/libtorrent/torrent.hpp	/^		std::vector<char> restart_piece;$/;"	m	struct:libtorrent::web_seed_t
restart_read_timeout	torrent/src/tracker_manager.cpp	/^	void timeout_handler::restart_read_timeout()$/;"	f	class:libtorrent::timeout_handler
restart_request	torrent/include/libtorrent/torrent.hpp	/^		peer_request restart_request = { piece_index_t(-1), -1, -1};$/;"	m	struct:libtorrent::web_seed_t
restart_valid	virt-p2v/include/gnulib/msvc-inval.h	/^  int restart_valid;$/;"	m	struct:gl_msvc_inval_per_thread
restarting	torrent/bak/connection_tester.cpp	/^	bool restarting;$/;"	m	struct:peer_conn	file:
restore_piece	torrent/src/piece_picker.cpp	/^	void piece_picker::restore_piece(piece_index_t const index)$/;"	f	class:libtorrent::piece_picker
restrict	virt-p2v/include/config.h	1091;"	d
restrict_mtu	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int restrict_mtu() const$/;"	f	struct:libtorrent::utp_socket_manager
restrict_mtu	torrent/include/libtorrent/utp_socket_manager.hpp	/^		void restrict_mtu(int const mtu)$/;"	f	struct:libtorrent::utp_socket_manager
restrict_routing_ips	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool restrict_routing_ips = true;$/;"	m	struct:libtorrent::dht::dht_settings
restrict_search_ips	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		bool restrict_search_ips = true;$/;"	m	struct:libtorrent::dht::dht_settings
resume	torrent/src/session_handle.cpp	/^	void session_handle::resume()$/;"	f	class:libtorrent::session_handle
resume	torrent/src/session_impl.cpp	/^	void session_impl::resume()$/;"	f	class:libtorrent::aux::session_impl
resume	torrent/src/torrent.cpp	/^	void torrent::resume()$/;"	f	class:libtorrent::torrent
resume	torrent/src/torrent_handle.cpp	/^	void torrent_handle::resume() const$/;"	f	class:libtorrent::torrent_handle
resume_data	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<char>> TORRENT_DEPRECATED_MEMBER resume_data;$/;"	m	struct:libtorrent::add_torrent_params
resume_data	torrent/include/libtorrent/alert_types.hpp	/^		std::shared_ptr<entry> TORRENT_DEPRECATED_MEMBER resume_data;$/;"	m	struct:libtorrent::final
resume_data	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t resume_data = 4_bit;$/;"	m	struct:libtorrent::peer_info
resume_data	torrent/src/peer_info.cpp	/^	constexpr peer_source_flags_t peer_info::resume_data;$/;"	m	class:libtorrent::peer_info	file:
resume_data_not_modified	torrent/include/libtorrent/error_code.hpp	/^			resume_data_not_modified,$/;"	e	enum:libtorrent::errors::error_code_enum
resume_download	torrent/src/torrent.cpp	/^	void torrent::resume_download()$/;"	f	class:libtorrent::torrent
resume_file	torrent/bak/client_test.cpp	/^std::string resume_file(lt::sha1_hash const& info_hash)$/;"	f
ret	torrent/include/libtorrent/disk_io_job.hpp	/^		status_t ret = status_t::no_error;$/;"	m	struct:libtorrent::disk_io_job
retranslateUi	qt_pro/ui_downloadwindow.h	/^    void retranslateUi(QWidget *DownloadWindow)$/;"	f	class:Ui_DownloadWindow
retranslateUi	qt_pro/ui_errodialog.h	/^    void retranslateUi(QDialog *ErroDialog)$/;"	f	class:Ui_ErroDialog
retry	torrent/include/libtorrent/torrent.hpp	/^		time_point32 retry = aux::time_now32();$/;"	m	struct:libtorrent::web_seed_t
retry_connection	torrent/src/udp_socket.cpp	/^void socks5::retry_connection()$/;"	f	class:libtorrent::socks5
retry_job	torrent/src/disk_io_thread.cpp	/^	constexpr status_t retry_job = static_cast<status_t>(201);$/;"	m	namespace:libtorrent::__anon122	file:
retry_web_seed	torrent/src/torrent.cpp	/^	void torrent::retry_web_seed(peer_connection* p, boost::optional<seconds32> const retry)$/;"	f	class:libtorrent::torrent
return_error	torrent/src/upnp.cpp	/^void upnp::return_error(port_mapping_t const mapping, int const code)$/;"	f	class:libtorrent::upnp
return_quota	torrent/src/bandwidth_limit.cpp	/^	void bandwidth_channel::return_quota(int const amount)$/;"	f	class:libtorrent::bandwidth_channel
reverse	torrent/include/libtorrent/piece_picker.hpp	/^			bool reverse() const$/;"	f	struct:libtorrent::piece_picker::piece_pos
reverse	torrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t reverse = 1_bit;$/;"	m	class:libtorrent::piece_picker
reverse	torrent/src/piece_picker.cpp	/^	constexpr picker_options_t piece_picker::reverse;$/;"	m	class:libtorrent::piece_picker	file:
reverse_cursor	torrent/include/libtorrent/piece_picker.hpp	/^		piece_index_t reverse_cursor() const { return m_reverse_cursor; }$/;"	f	class:libtorrent::piece_picker
reverse_pieces	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::reverse_pieces;$/;"	m	class:libtorrent::picker_log_alert	file:
reverse_rarest_first	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::reverse_rarest_first;$/;"	m	class:libtorrent::picker_log_alert	file:
reverse_sequential	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::reverse_sequential;$/;"	m	class:libtorrent::picker_log_alert	file:
revision_version	torrent/include/libtorrent/fingerprint.hpp	/^		int revision_version;$/;"	m	struct:libtorrent::fingerprint
rhs	torrent/include/libtorrent/alert.hpp	/^		alert(alert const& rhs) = delete;$/;"	m	class:libtorrent::alert
rhs	torrent/include/libtorrent/aux_/noexcept_movable.hpp	/^		noexcept_movable& operator=(noexcept_movable&& rhs) = default;$/;"	m	struct:libtorrent::aux::noexcept_movable
rhs	torrent/include/libtorrent/aux_/string_ptr.hpp	/^		string_ptr& operator=(string_ptr const& rhs) = delete;$/;"	m	struct:libtorrent::aux::string_ptr
rhs	torrent/include/libtorrent/aux_/string_ptr.hpp	/^		string_ptr(string_ptr const& rhs) = delete;$/;"	m	struct:libtorrent::aux::string_ptr
rlim_infinity	torrent/src/platform_util.cpp	/^const rlim_t rlim_infinity = RLIM_INFINITY;$/;"	v
rlimit_as	torrent/src/platform_util.cpp	/^const rlim_t rlimit_as = RLIMIT_AS;$/;"	v
rlimit_nofile	torrent/src/platform_util.cpp	/^const rlim_t rlimit_nofile = RLIMIT_NOFILE;$/;"	v
rmdir	virt-p2v/include/gnulib/unistd.h	1912;"	d
rmx_expire	torrent/include/libtorrent/aux_/route.h	/^	int32_t		rmx_expire;	\/* lifetime for route, e.g. redirect *\/$/;"	m	struct:rt_metrics
rmx_filler	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_filler[4];	\/* will be used for T\/TCP later *\/$/;"	m	struct:rt_metrics
rmx_hopcount	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_hopcount;	\/* max hops expected *\/$/;"	m	struct:rt_metrics
rmx_locks	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_locks;	\/* Kernel must leave these values alone *\/$/;"	m	struct:rt_metrics
rmx_mtu	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_mtu;	\/* MTU for this path *\/$/;"	m	struct:rt_metrics
rmx_pksent	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_pksent;	\/* packets sent using this route *\/$/;"	m	struct:rt_metrics
rmx_recvpipe	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_recvpipe;	\/* inbound delay-bandwidth product *\/$/;"	m	struct:rt_metrics
rmx_rtt	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_rtt;	\/* estimated round trip time *\/$/;"	m	struct:rt_metrics
rmx_rttvar	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_rttvar;	\/* estimated rtt variance *\/$/;"	m	struct:rt_metrics
rmx_sendpipe	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_sendpipe;	\/* outbound delay-bandwidth product *\/$/;"	m	struct:rt_metrics
rmx_ssthresh	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t	rmx_ssthresh;	\/* outbound gateway buffer limit *\/$/;"	m	struct:rt_metrics
rng_mutex	torrent/src/random.cpp	/^	std::mutex rng_mutex;$/;"	m	namespace:__anon92	file:
rnh_lock	torrent/include/libtorrent/aux_/route.h	/^__private_extern__ lck_mtx_t *rnh_lock;$/;"	v
ro_dst	torrent/include/libtorrent/aux_/route.h	/^	struct sockaddr	ro_dst;$/;"	m	struct:route	typeref:struct:route::sockaddr
ro_flags	torrent/include/libtorrent/aux_/route.h	/^	uint32_t	ro_flags;	\/* route flags (see below) *\/$/;"	m	struct:route
ro_rt	torrent/include/libtorrent/aux_/route.h	/^	struct rtentry	*ro_rt;$/;"	m	struct:route	typeref:struct:route::rtentry
rol	torrent/src/sha1.cpp	40;"	d	file:
rootdevice	torrent/include/libtorrent/upnp.hpp	/^	struct rootdevice$/;"	s	struct:libtorrent::final
rotl16	virt-p2v/include/gnulib/bitrotate.h	/^rotl16 (uint16_t x, int n)$/;"	f
rotl32	virt-p2v/include/gnulib/bitrotate.h	/^rotl32 (uint32_t x, int n)$/;"	f
rotl64	virt-p2v/include/gnulib/bitrotate.h	/^rotl64 (uint64_t x, int n)$/;"	f
rotl8	virt-p2v/include/gnulib/bitrotate.h	/^rotl8 (uint8_t x, int n)$/;"	f
rotl_sz	virt-p2v/include/gnulib/bitrotate.h	/^rotl_sz (size_t x, int n)$/;"	f
rotr16	virt-p2v/include/gnulib/bitrotate.h	/^rotr16 (uint16_t x, int n)$/;"	f
rotr32	virt-p2v/include/gnulib/bitrotate.h	/^rotr32 (uint32_t x, int n)$/;"	f
rotr64	virt-p2v/include/gnulib/bitrotate.h	/^rotr64 (uint64_t x, int n)$/;"	f
rotr8	virt-p2v/include/gnulib/bitrotate.h	/^rotr8 (uint8_t x, int n)$/;"	f
rotr_sz	virt-p2v/include/gnulib/bitrotate.h	/^rotr_sz (size_t x, int n)$/;"	f
round_up	torrent/src/part_file.cpp	/^	int round_up(int n)$/;"	f	namespace:__anon42
route	torrent/include/libtorrent/aux_/route.h	/^struct route {$/;"	s
route_cb	torrent/include/libtorrent/aux_/route.h	/^struct route_cb {$/;"	s
route_generation	torrent/include/libtorrent/aux_/route.h	/^__private_extern__ uint32_t route_generation;$/;"	v
router_model	torrent/include/libtorrent/upnp.hpp	/^	std::string router_model()$/;"	f	struct:libtorrent::final
routing_table	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^			routing_table,$/;"	e	enum:libtorrent::dht::dht_logger::module_t
routing_table	torrent/include/libtorrent/kademlia/routing_table.hpp	/^class TORRENT_EXTRA_EXPORT routing_table$/;"	c	namespace:libtorrent::dht
routing_table	torrent/kademlia/routing_table.cpp	/^routing_table::routing_table(node_id const& id, udp const proto, int const bucket_size$/;"	f	class:libtorrent::dht::routing_table
routing_table_node	torrent/include/libtorrent/kademlia/routing_table.hpp	/^struct routing_table_node$/;"	s	namespace:libtorrent::dht
rpc_manager	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^			rpc_manager,$/;"	e	enum:libtorrent::dht::dht_logger::module_t
rpc_manager	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^class TORRENT_EXTRA_EXPORT rpc_manager$/;"	c	namespace:libtorrent::dht
rpc_manager	torrent/kademlia/rpc_manager.cpp	/^rpc_manager::rpc_manager(node_id const& our_id$/;"	f	class:libtorrent::dht::rpc_manager
rpl_environ	virt-p2v/include/gnulib/unistd.h	/^rpl_environ (void)$/;"	f
rpmatch	virt-p2v/include/gnulib/stdlib.h	1404;"	d
rsplit_path	torrent/src/path.cpp	/^	std::pair<string_view, string_view> rsplit_path(string_view p)$/;"	f	namespace:libtorrent
rss_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t TORRENT_DEPRECATED_MEMBER rss_notification = 12_bit;$/;"	m	class:libtorrent::alert
rss_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::rss_notification;$/;"	m	class:libtorrent::alert	file:
rt_addrinfo	torrent/include/libtorrent/aux_/route.h	/^struct rt_addrinfo {$/;"	s
rt_flags	torrent/include/libtorrent/aux_/route.h	/^	uint32_t rt_flags;		\/* up\/down?, host\/net *\/$/;"	m	struct:rtentry
rt_gateway	torrent/include/libtorrent/aux_/route.h	/^	struct	sockaddr *rt_gateway;	\/* value *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::sockaddr
rt_genmask	torrent/include/libtorrent/aux_/route.h	/^	struct	sockaddr *rt_genmask;	\/* for generation of cloned routes *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::sockaddr
rt_gwroute	torrent/include/libtorrent/aux_/route.h	/^	struct	rtentry *rt_gwroute;	\/* implied entry for gatewayed routes *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::rtentry
rt_ifa	torrent/include/libtorrent/aux_/route.h	/^	struct	ifaddr *rt_ifa;		\/* the answer: interface addr to use *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::ifaddr
rt_ifp	torrent/include/libtorrent/aux_/route.h	/^	struct	ifnet *rt_ifp;		\/* the answer: interface to use *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::ifnet
rt_key	torrent/include/libtorrent/aux_/route.h	143;"	d
rt_llinfo	torrent/include/libtorrent/aux_/route.h	/^	void	*rt_llinfo;		\/* pointer to link level info cache *\/$/;"	m	struct:rtentry
rt_llinfo_free	torrent/include/libtorrent/aux_/route.h	/^	void	(*rt_llinfo_free)(void *); \/* link level info free function *\/$/;"	m	struct:rtentry
rt_mask	torrent/include/libtorrent/aux_/route.h	144;"	d
rt_metrics	torrent/include/libtorrent/aux_/route.h	/^struct rt_metrics {$/;"	s
rt_msghdr	torrent/include/libtorrent/aux_/route.h	/^struct rt_msghdr {$/;"	s
rt_msghdr2	torrent/include/libtorrent/aux_/route.h	/^struct rt_msghdr2 {$/;"	s
rt_nodes	torrent/include/libtorrent/aux_/route.h	/^	struct	radix_node rt_nodes[2];	\/* tree glue, and other values *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::radix_node
rt_parent	torrent/include/libtorrent/aux_/route.h	/^	struct	rtentry *rt_parent;	\/* cloning parent of this route *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::rtentry
rt_refcnt	torrent/include/libtorrent/aux_/route.h	/^	int32_t	rt_refcnt;		\/* # held references *\/$/;"	m	struct:rtentry
rt_rmx	torrent/include/libtorrent/aux_/route.h	/^	struct	rt_metrics rt_rmx;	\/* metrics used by rx'ing protocols *\/$/;"	m	struct:rtentry	typeref:struct:rtentry::rt_metrics
rt_use	torrent/include/libtorrent/aux_/route.h	165;"	d
rtc	virt-p2v/include/p2v-config.h	/^  struct rtc_config rtc;$/;"	m	struct:config	typeref:struct:config::rtc_config
rtc_config	virt-p2v/include/p2v-config.h	/^struct rtc_config {$/;"	s
rte_debug	torrent/include/libtorrent/aux_/route.h	/^__private_extern__ unsigned int rte_debug;$/;"	v
rtentry	torrent/include/libtorrent/aux_/route.h	/^struct rtentry {$/;"	s
rti_addrs	torrent/include/libtorrent/aux_/route.h	/^	int	rti_addrs;$/;"	m	struct:rt_addrinfo
rti_info	torrent/include/libtorrent/aux_/route.h	/^	struct	sockaddr *rti_info[RTAX_MAX];$/;"	m	struct:rt_addrinfo	typeref:struct:rt_addrinfo::sockaddr
rtm_addrs	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_addrs;		\/* bitmask identifying sockaddrs in msg *\/$/;"	m	struct:rt_msghdr
rtm_addrs	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_addrs;		\/* bitmask identifying sockaddrs in msg *\/$/;"	m	struct:rt_msghdr2
rtm_errno	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_errno;		\/* why failed *\/$/;"	m	struct:rt_msghdr
rtm_flags	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_flags;		\/* flags, incl. kern & message, e.g. DONE *\/$/;"	m	struct:rt_msghdr
rtm_flags	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_flags;		\/* flags, incl. kern & message, e.g. DONE *\/$/;"	m	struct:rt_msghdr2
rtm_index	torrent/include/libtorrent/aux_/route.h	/^	u_short	rtm_index;		\/* index for associated ifp *\/$/;"	m	struct:rt_msghdr
rtm_index	torrent/include/libtorrent/aux_/route.h	/^	u_short	rtm_index;		\/* index for associated ifp *\/$/;"	m	struct:rt_msghdr2
rtm_inits	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t rtm_inits;		\/* which metrics we are initializing *\/$/;"	m	struct:rt_msghdr
rtm_inits	torrent/include/libtorrent/aux_/route.h	/^	u_int32_t rtm_inits;		\/* which metrics we are initializing *\/$/;"	m	struct:rt_msghdr2
rtm_msglen	torrent/include/libtorrent/aux_/route.h	/^	u_short	rtm_msglen;		\/* to skip over non-understood messages *\/$/;"	m	struct:rt_msghdr
rtm_msglen	torrent/include/libtorrent/aux_/route.h	/^	u_short	rtm_msglen;		\/* to skip over non-understood messages *\/$/;"	m	struct:rt_msghdr2
rtm_parentflags	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_parentflags;	\/* flags of the parent route *\/$/;"	m	struct:rt_msghdr2
rtm_pid	torrent/include/libtorrent/aux_/route.h	/^	pid_t	rtm_pid;		\/* identify sender *\/$/;"	m	struct:rt_msghdr
rtm_refcnt	torrent/include/libtorrent/aux_/route.h	/^	int32_t	rtm_refcnt;		\/* reference count *\/$/;"	m	struct:rt_msghdr2
rtm_reserved	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_reserved;		\/* reserved field set to 0 *\/$/;"	m	struct:rt_msghdr2
rtm_rmx	torrent/include/libtorrent/aux_/route.h	/^	struct rt_metrics rtm_rmx;	\/* metrics themselves *\/$/;"	m	struct:rt_msghdr	typeref:struct:rt_msghdr::rt_metrics
rtm_rmx	torrent/include/libtorrent/aux_/route.h	/^	struct rt_metrics rtm_rmx;	\/* metrics themselves *\/$/;"	m	struct:rt_msghdr2	typeref:struct:rt_msghdr2::rt_metrics
rtm_seq	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_seq;		\/* for sender to identify action *\/$/;"	m	struct:rt_msghdr
rtm_type	torrent/include/libtorrent/aux_/route.h	/^	u_char	rtm_type;		\/* message type *\/$/;"	m	struct:rt_msghdr
rtm_type	torrent/include/libtorrent/aux_/route.h	/^	u_char	rtm_type;		\/* message type *\/$/;"	m	struct:rt_msghdr2
rtm_use	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_use;		\/* from rtentry *\/$/;"	m	struct:rt_msghdr
rtm_use	torrent/include/libtorrent/aux_/route.h	/^	int	rtm_use;		\/* from rtentry *\/$/;"	m	struct:rt_msghdr2
rtm_version	torrent/include/libtorrent/aux_/route.h	/^	u_char	rtm_version;		\/* future binary compatibility *\/$/;"	m	struct:rt_msghdr
rtm_version	torrent/include/libtorrent/aux_/route.h	/^	u_char	rtm_version;		\/* future binary compatibility *\/$/;"	m	struct:rt_msghdr2
rts_badredirect	torrent/include/libtorrent/aux_/route.h	/^	short	rts_badredirect;	\/* bogus redirect calls *\/$/;"	m	struct:rtstat
rts_dynamic	torrent/include/libtorrent/aux_/route.h	/^	short	rts_dynamic;		\/* routes created by redirects *\/$/;"	m	struct:rtstat
rts_newgateway	torrent/include/libtorrent/aux_/route.h	/^	short	rts_newgateway;		\/* routes modified by redirects *\/$/;"	m	struct:rtstat
rts_unreach	torrent/include/libtorrent/aux_/route.h	/^	short	rts_unreach;		\/* lookups which failed *\/$/;"	m	struct:rtstat
rts_wildcard	torrent/include/libtorrent/aux_/route.h	/^	short	rts_wildcard;		\/* lookups satisfied by a wildcard *\/$/;"	m	struct:rtstat
rtstat	torrent/include/libtorrent/aux_/route.h	/^struct	rtstat {$/;"	s
rtt	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	std::uint16_t rtt = 0xffff;$/;"	m	struct:libtorrent::dht::node_entry
rtt	torrent/include/libtorrent/peer_info.hpp	/^		int rtt;$/;"	m	struct:libtorrent::peer_info
rttrash	torrent/include/libtorrent/aux_/route.h	/^__private_extern__ int rttrash;$/;"	v
run	qt_pro/pipethread.cpp	/^void PipeThread::run()$/;"	f	class:PipeThread
run_all_updates	torrent/src/settings_pack.cpp	/^	void run_all_updates(aux::session_impl& ses)$/;"	f	namespace:libtorrent
run_command	virt-p2v/src/kernel.c	/^run_command (const char *stage, const char *command)$/;"	f	file:
run_dlg	virt-p2v/src/gui.c	/^static GtkWidget *run_dlg,$/;"	v	file:
run_flag	qt_pro/pipethread.h	/^    int run_flag;$/;"	m	class:PipeThread
run_flag	test/test.c	/^int run_flag = 0;$/;"	v
runcount	virt-p2v/include/gnulib/windows-rwlock.h	/^          int runcount; \/* number of readers running, or -1 when a writer runs *\/$/;"	m	struct:__anon164
running	virt-p2v/src/conversion.c	/^static int running = 0;$/;"	v	file:
running_mutex	virt-p2v/src/conversion.c	/^static pthread_mutex_t running_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
runstatedir	torrent/include/libtorrent/Makefile	/^runstatedir = ${localstatedir}\/run$/;"	m
rw_mask	torrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t rw_mask = read_only | write_only | read_write;$/;"	m	namespace:libtorrent::file_open_mode
rw_mask	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t rw_mask = read_only | write_only | read_write;$/;"	m	namespace:libtorrent::open_mode
s	torrent/bak/connection_tester.cpp	/^	tcp::socket s;$/;"	m	struct:peer_conn	file:
s	torrent/include/libtorrent/peer_connection.hpp	/^		std::shared_ptr<aux::socket_type> s;$/;"	m	struct:libtorrent::peer_connection_args
salt	torrent/include/libtorrent/kademlia/item.hpp	/^	std::string const& salt() const { return m_salt; }$/;"	f	class:libtorrent::dht::item::std
salt	torrent/kademlia/dht_storage.cpp	/^		std::string salt;$/;"	m	struct:libtorrent::dht::__anon153::dht_mutable_item	file:
sam_connecting	torrent/include/libtorrent/i2p_stream.hpp	/^		sam_connecting,$/;"	e	enum:libtorrent::i2p_connection::state_t
sam_idle	torrent/include/libtorrent/i2p_stream.hpp	/^		sam_idle$/;"	e	enum:libtorrent::i2p_connection::state_t
sam_name_lookup	torrent/include/libtorrent/i2p_stream.hpp	/^		sam_name_lookup,$/;"	e	enum:libtorrent::i2p_connection::state_t
sample_infohashes	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::sample_infohashes(udp::endpoint const& ep, sha1_hash const& target$/;"	f	class:libtorrent::dht::dht_tracker
sample_infohashes	torrent/kademlia/node.cpp	/^void node::sample_infohashes(udp::endpoint const& ep, sha1_hash const& target$/;"	f	class:libtorrent::dht::node
sample_infohashes	torrent/kademlia/sample_infohashes.cpp	/^sample_infohashes::sample_infohashes(node& dht_node$/;"	f	class:libtorrent::dht::sample_infohashes
sample_infohashes_interval	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int sample_infohashes_interval = 21600;$/;"	m	struct:libtorrent::dht::dht_settings
sample_infohashes_interval_max	torrent/kademlia/dht_storage.cpp	/^	constexpr int sample_infohashes_interval_max = 21600;$/;"	m	namespace:libtorrent::dht::__anon153	file:
sample_infohashes_observer	torrent/kademlia/sample_infohashes.cpp	/^sample_infohashes_observer::sample_infohashes_observer($/;"	f	class:libtorrent::dht::sample_infohashes_observer
samples	torrent/kademlia/dht_storage.cpp	/^		aux::vector<sha1_hash> samples;$/;"	m	struct:libtorrent::dht::__anon153::infohashes_sample	file:
samples	torrent/src/alert.cpp	/^	std::vector<sha1_hash> dht_sample_infohashes_alert::samples() const$/;"	f	class:libtorrent::dht_sample_infohashes_alert
samples_above_target	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t samples_above_target;$/;"	m	struct:libtorrent::utp_status
samples_below_target	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t samples_below_target;$/;"	m	struct:libtorrent::utp_status
sanitize_append_path_element	torrent/src/torrent_info.cpp	/^	void sanitize_append_path_element(std::string& path, string_view element)$/;"	f	namespace:libtorrent
sanitize_symlinks	torrent/src/file_storage.cpp	/^	void file_storage::sanitize_symlinks()$/;"	f	class:libtorrent::file_storage
save	include/StoreConfig.h	/^    int (*save)(yzy_file_t hd);$/;"	m	struct:_StoreDriver
save_as_map	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_as_map = 4_bit;$/;"	m	struct:libtorrent::session_handle
save_config	src/config.c	/^int save_config()$/;"	f
save_dht_proxy	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_dht_proxy = 7_bit;$/;"	m	struct:libtorrent::session_handle
save_dht_settings	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t save_dht_settings = 1_bit;$/;"	m	struct:libtorrent::session_handle
save_dht_settings	torrent/kademlia/dht_settings.cpp	/^	entry save_dht_settings(dht_settings const& settings)$/;"	f	namespace:libtorrent::dht
save_dht_settings	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_dht_settings;$/;"	m	class:libtorrent::session_handle	file:
save_dht_state	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t save_dht_state = 2_bit;$/;"	m	struct:libtorrent::session_handle
save_dht_state	torrent/kademlia/dht_state.cpp	/^	entry save_dht_state(dht_state const& state)$/;"	f	namespace:libtorrent::dht
save_dht_state	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_dht_state;$/;"	m	class:libtorrent::session_handle	file:
save_encryption_settings	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_encryption_settings = 3_bit;$/;"	m	struct:libtorrent::session_handle
save_encryption_settings	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_encryption_settings;$/;"	m	class:libtorrent::session_handle	file:
save_file	torrent/bak/client_test.cpp	/^int save_file(std::string const& filename, std::vector<char> const& v)$/;"	f
save_i2p_proxy	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_i2p_proxy = 6_bit;$/;"	m	struct:libtorrent::session_handle
save_info_dict	torrent/include/libtorrent/torrent_handle.hpp	/^		static constexpr resume_data_flags_t save_info_dict = 1_bit;$/;"	m	struct:libtorrent::torrent_handle
save_info_dict	torrent/src/torrent_handle.cpp	/^	constexpr resume_data_flags_t torrent_handle::save_info_dict;$/;"	m	class:libtorrent::torrent_handle	file:
save_nodes	torrent/kademlia/dht_state.cpp	/^	entry save_nodes(std::vector<udp::endpoint> const& nodes)$/;"	f	namespace:libtorrent::dht::__anon154
save_nodes	torrent/kademlia/dht_tracker.cpp	/^	std::vector<udp::endpoint> save_nodes(node const& dht)$/;"	f	namespace:libtorrent::dht::__anon152
save_path	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::string save_path;$/;"	m	struct:libtorrent::add_torrent_params
save_path	torrent/include/libtorrent/resolve_links.hpp	/^			std::string save_path;$/;"	m	struct:libtorrent::resolve_links::link_t
save_path	torrent/include/libtorrent/torrent_status.hpp	/^		std::string save_path;$/;"	m	struct:libtorrent::torrent_status
save_path	torrent/src/torrent.cpp	/^	std::string torrent::save_path() const$/;"	f	class:libtorrent::torrent
save_path	torrent/src/torrent_handle.cpp	/^	std::string torrent_handle::save_path() const$/;"	f	class:libtorrent::torrent_handle
save_peer_proxy	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_peer_proxy = 8_bit;$/;"	m	struct:libtorrent::session_handle
save_proxy	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_proxy = 5_bit;$/;"	m	struct:libtorrent::session_handle
save_resume_data	torrent/src/torrent.cpp	/^	void torrent::save_resume_data(resume_data_flags_t const flags)$/;"	f	class:libtorrent::torrent
save_resume_data	torrent/src/torrent_handle.cpp	/^	void torrent_handle::save_resume_data(resume_data_flags_t f) const$/;"	f	class:libtorrent::torrent_handle
save_resume_data_alert	torrent/src/alert.cpp	/^	save_resume_data_alert::save_resume_data_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::save_resume_data_alert
save_resume_data_failed_alert	torrent/src/alert.cpp	/^	save_resume_data_failed_alert::save_resume_data_failed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::save_resume_data_failed_alert
save_settings	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t save_settings = 0_bit;$/;"	m	struct:libtorrent::session_handle
save_settings	torrent/src/session_handle.cpp	/^	constexpr save_state_flags_t session_handle::save_settings;$/;"	m	class:libtorrent::session_handle	file:
save_settings_to_dict	torrent/src/settings_pack.cpp	/^	void save_settings_to_dict(aux::session_settings const& sett, entry::dictionary_type& out)$/;"	f	namespace:libtorrent
save_state	torrent/include/libtorrent/extensions.hpp	/^		virtual void save_state(entry&) {}$/;"	f	struct:libtorrent::plugin
save_state	torrent/src/session_handle.cpp	/^	void session_handle::save_state(entry& e, save_state_flags_t const flags) const$/;"	f	class:libtorrent::session_handle
save_state	torrent/src/session_impl.cpp	/^	void session_impl::save_state(entry* eptr, save_state_flags_t const flags) const$/;"	f	class:libtorrent::aux::session_impl
save_tracker_proxy	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_tracker_proxy = 10_bit;$/;"	m	struct:libtorrent::session_handle
save_web_proxy	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr save_state_flags_t TORRENT_DEPRECATED_MEMBER save_web_proxy = 9_bit;$/;"	m	struct:libtorrent::session_handle
sbindir	torrent/include/libtorrent/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sc_muladd	torrent/ed25519/sc.cpp	/^void sc_muladd(unsigned char *s, const unsigned char *a, const unsigned char *b, const unsigned char *c) {$/;"	f
sc_reduce	torrent/ed25519/sc.cpp	/^void sc_reduce(unsigned char *s) {$/;"	f
scan	include/StoreConfig.h	/^    PYZY_QCOW_ENTRY(*scan)$/;"	m	struct:_StoreDriver
scan_dir	torrent/bak/client_test.cpp	/^void scan_dir(std::string const& dir_path, lt::session& ses)$/;"	f
scan_qcow2	src/qcow2.c	/^PYZY_QCOW_ENTRY scan_qcow2(char *name, uint32_t difLevel)$/;"	f
scan_yzy_gpt	src/gpt.c	/^int scan_yzy_gpt(DiskDriver* pdd)$/;"	f
scanf	virt-p2v/include/gnulib/stdio.h	/^_GL_CXXALIASWARN (scanf);$/;"	v
scatter_copy	torrent/src/file.cpp	/^	void scatter_copy(span<iovec_t const> bufs, char const* src)$/;"	f	namespace:libtorrent::__anon81
scope_end	torrent/include/libtorrent/aux_/scope_end.hpp	/^	scope_end_impl<Fun> scope_end(Fun f) { return scope_end_impl<Fun>(std::move(f)); }$/;"	f	namespace:libtorrent::aux
scope_end_impl	torrent/include/libtorrent/aux_/scope_end.hpp	/^		explicit scope_end_impl(Fun f) : m_fun(std::move(f)) {}$/;"	f	struct:libtorrent::aux::scope_end_impl
scope_end_impl	torrent/include/libtorrent/aux_/scope_end.hpp	/^	struct scope_end_impl$/;"	s	namespace:libtorrent::aux
scoped_unlock	torrent/src/disk_io_thread.cpp	/^	scoped_unlocker_impl<Lock> scoped_unlock(Lock& l)$/;"	f	namespace:libtorrent
scoped_unlocker_impl	torrent/src/disk_io_thread.cpp	/^		explicit scoped_unlocker_impl(Lock& l) : m_lock(&l) { m_lock->unlock(); }$/;"	f	struct:libtorrent::__anon122::scoped_unlocker_impl
scoped_unlocker_impl	torrent/src/disk_io_thread.cpp	/^	struct scoped_unlocker_impl$/;"	s	namespace:libtorrent::__anon122	file:
scp_file	virt-p2v/src/ssh.c	/^scp_file (struct config *config, const char *target, const char *local, ...)$/;"	f
scrape	torrent/include/libtorrent/udp_tracker_connection.hpp	/^			scrape,$/;"	m	class:libtorrent::udp_tracker_connection::action_t
scrape_complete	torrent/include/libtorrent/announce_entry.hpp	/^		int scrape_complete = -1;$/;"	m	struct:libtorrent::announce_endpoint
scrape_downloaded	torrent/include/libtorrent/announce_entry.hpp	/^		int scrape_downloaded = -1;$/;"	m	struct:libtorrent::announce_endpoint
scrape_failed_alert	torrent/src/alert.cpp	/^	scrape_failed_alert::scrape_failed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::scrape_failed_alert
scrape_incomplete	torrent/include/libtorrent/announce_entry.hpp	/^		int scrape_incomplete = -1;$/;"	m	struct:libtorrent::announce_endpoint
scrape_not_available	torrent/include/libtorrent/error_code.hpp	/^			scrape_not_available = 170,$/;"	e	enum:libtorrent::errors::error_code_enum
scrape_reply_alert	torrent/src/alert.cpp	/^	scrape_reply_alert::scrape_reply_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::scrape_reply_alert
scrape_request	torrent/include/libtorrent/tracker_manager.hpp	/^			scrape_request = 1,$/;"	e	enum:libtorrent::tracker_request::kind_t
scrape_tracker	torrent/src/torrent.cpp	/^	void torrent::scrape_tracker(int idx, bool const user_triggered)$/;"	f	class:libtorrent::torrent
scrape_tracker	torrent/src/torrent_handle.cpp	/^	void torrent_handle::scrape_tracker(int idx) const$/;"	f	class:libtorrent::torrent_handle
scrolled_window_add_with_viewport	virt-p2v/include/gui-gtk3-compat.h	90;"	d
scrolled_window_add_with_viewport	virt-p2v/include/gui-gtk3-compat.h	93;"	d
search	torrent/src/string_util.cpp	/^	int search(span<char const> src, span<char const> target)$/;"	f	namespace:libtorrent
search_branching	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int search_branching = 5;$/;"	m	struct:libtorrent::dht::dht_settings
search_id	torrent/include/libtorrent/kademlia/node.hpp	/^	std::uint32_t search_id() { return m_search_id++; }$/;"	f	class:libtorrent::dht::node
second_tick	torrent/include/libtorrent/stat.hpp	/^		void second_tick(int tick_interval_ms)$/;"	f	class:libtorrent::stat
second_tick	torrent/src/peer_connection.cpp	/^	void peer_connection::second_tick(int const tick_interval_ms)$/;"	f	class:libtorrent::peer_connection
second_tick	torrent/src/stat.cpp	/^void stat_channel::second_tick(int tick_interval_ms)$/;"	f	class:libtorrent::stat_channel
second_tick	torrent/src/torrent.cpp	/^	void torrent::second_tick(int const tick_interval_ms)$/;"	f	class:libtorrent::torrent
secret	torrent/kademlia/node_id.cpp	/^static std::uint32_t secret = 0;$/;"	m	namespace:libtorrent::dht	file:
secret_key	torrent/include/libtorrent/kademlia/types.hpp	/^		explicit secret_key(char const* b)$/;"	f	struct:libtorrent::dht::secret_key
secret_key	torrent/include/libtorrent/kademlia/types.hpp	/^	struct secret_key$/;"	s	namespace:libtorrent::dht
sector_size	include/device.h	/^    long long sector_size;      \/\/logical sector size$/;"	m	struct:_PedDevice
sectors	include/device.h	/^    int sectors;$/;"	m	struct:_PedCHSGeometry
sectors	src/linux.c	/^        unsigned char sectors;$/;"	m	struct:hd_geometry	file:
secure_getenv	virt-p2v/include/gnulib/stdlib.h	1420;"	d
seed	torrent/bak/connection_tester.cpp	/^	bool seed;$/;"	m	struct:peer_conn	file:
seed	torrent/include/libtorrent/kademlia/announce_flags.hpp	/^constexpr announce_flags_t seed = 0_bit;$/;"	m	namespace:libtorrent::dht::announce
seed	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t seed = 10_bit;$/;"	m	struct:libtorrent::peer_info
seed	torrent/include/libtorrent/torrent_peer.hpp	/^		bool seed:1;$/;"	m	struct:libtorrent::torrent_peer
seed	torrent/kademlia/dht_storage.cpp	/^		bool seed = 0;$/;"	m	struct:libtorrent::dht::__anon153::peer_entry	file:
seed	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::seed;$/;"	m	class:libtorrent::peer_info	file:
seed_choking_algorithm	torrent/include/libtorrent/settings_pack.hpp	/^			seed_choking_algorithm,$/;"	e	enum:libtorrent::settings_pack::int_types
seed_mode	torrent/bak/client_test.cpp	/^bool seed_mode = false;$/;"	v
seed_mode	torrent/include/libtorrent/torrent.hpp	/^		bool seed_mode() const { return m_seed_mode; }$/;"	f	class:libtorrent::torrent
seed_mode	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t seed_mode = 0_bit;$/;"	m	namespace:libtorrent::torrent_flags
seed_mode	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER seed_mode = false;$/;"	m	struct:libtorrent::torrent_status
seed_mode_t	torrent/include/libtorrent/torrent.hpp	/^		enum class seed_mode_t { check_files, skip_checking };$/;"	c	class:libtorrent::torrent
seed_rank	torrent/include/libtorrent/torrent_status.hpp	/^		int seed_rank = 0;$/;"	m	struct:libtorrent::torrent_status
seed_rank	torrent/src/torrent.cpp	/^	int torrent::seed_rank(aux::session_settings const& s) const$/;"	f	class:libtorrent::torrent
seed_time_limit	torrent/include/libtorrent/settings_pack.hpp	/^			seed_time_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
seed_time_ratio_limit	torrent/include/libtorrent/settings_pack.hpp	/^			seed_time_ratio_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
seeding	torrent/include/libtorrent/torrent_status.hpp	/^			seeding,$/;"	e	enum:libtorrent::torrent_status::state_t
seeding_duration	torrent/include/libtorrent/torrent_status.hpp	/^		seconds seeding_duration;$/;"	m	struct:libtorrent::torrent_status
seeding_outgoing_connections	torrent/include/libtorrent/settings_pack.hpp	/^			seeding_outgoing_connections,$/;"	e	enum:libtorrent::settings_pack::bool_types
seeding_piece_quota	torrent/include/libtorrent/settings_pack.hpp	/^			seeding_piece_quota,$/;"	e	enum:libtorrent::settings_pack::int_types
seeding_time	torrent/include/libtorrent/add_torrent_params.hpp	/^		int seeding_time = 0;$/;"	m	struct:libtorrent::add_torrent_params
seeding_time	torrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER seeding_time = 0;$/;"	m	struct:libtorrent::torrent_status
seeding_time	torrent/src/torrent.cpp	/^	seconds32 torrent::seeding_time() const$/;"	f	class:libtorrent::torrent
seen_complete	torrent/include/libtorrent/torrent.hpp	/^		void seen_complete() { m_last_seen_complete = ::time(nullptr); }$/;"	f	class:libtorrent::torrent
select	torrent/ed25519/ge.cpp	/^static void select(ge_precomp *t, int pos, signed char b) {$/;"	f	file:
self	torrent/include/libtorrent/invariant_check.hpp	/^		T const& self;$/;"	m	struct:libtorrent::invariant_checker_impl
self	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		std::shared_ptr<dht_tracker> self()$/;"	f	struct:libtorrent::dht::final
self	torrent/include/libtorrent/kademlia/observer.hpp	/^	std::shared_ptr<observer> self()$/;"	f	struct:libtorrent::dht::observer
self	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	std::shared_ptr<traversal_algorithm> self()$/;"	f	struct:libtorrent::dht::traversal_algorithm
self	torrent/include/libtorrent/lsd.hpp	/^	std::shared_ptr<lsd> self() { return shared_from_this(); }$/;"	f	struct:libtorrent::lsd
self	torrent/include/libtorrent/natpmp.hpp	/^	std::shared_ptr<natpmp> self() { return shared_from_this(); }$/;"	f	struct:libtorrent::natpmp
self	torrent/include/libtorrent/peer_connection.hpp	/^		std::shared_ptr<peer_connection> self()$/;"	f	class:libtorrent::peer_connection
self	torrent/include/libtorrent/upnp.hpp	/^	std::shared_ptr<upnp> self() { return shared_from_this(); }$/;"	f	struct:libtorrent::final
self	torrent/src/udp_socket.cpp	/^	std::shared_ptr<socks5> self() { return shared_from_this(); }$/;"	f	struct:libtorrent::socks5	file:
self_connection	torrent/include/libtorrent/close_reason.hpp	/^		self_connection,$/;"	m	class:libtorrent::close_reason_t
self_connection	torrent/include/libtorrent/error_code.hpp	/^			self_connection,$/;"	e	enum:libtorrent::errors::error_code_enum
send	torrent/src/broadcast_socket.cpp	/^	void broadcast_socket::send(char const* buffer, int const size$/;"	f	class:libtorrent::broadcast_socket
send	torrent/src/tracker_manager.cpp	/^	void tracker_manager::send(aux::listen_socket_handle const& sock$/;"	f	class:libtorrent::tracker_manager
send	torrent/src/udp_socket.cpp	/^void udp_socket::send(udp::endpoint const& ep, span<char const> p$/;"	f	class:libtorrent::udp_socket
send_accept	torrent/src/i2p_stream.cpp	/^	void i2p_stream::send_accept(handler_type h)$/;"	f	class:libtorrent::i2p_stream
send_addr	include/socket.h	/^    struct sockaddr_in send_addr;$/;"	m	struct:sock_udp	typeref:struct:sock_udp::sockaddr_in
send_allowed_set	torrent/src/peer_connection.cpp	/^	void peer_connection::send_allowed_set()$/;"	f	class:libtorrent::peer_connection
send_block_requests	torrent/src/peer_connection.cpp	/^	void peer_connection::send_block_requests()$/;"	f	class:libtorrent::peer_connection
send_buffer	torrent/src/peer_connection.cpp	/^	void peer_connection::send_buffer(span<char const> buf)$/;"	f	class:libtorrent::peer_connection
send_buffer	torrent/src/peer_connection_handle.cpp	/^void peer_connection_handle::send_buffer(char const* begin, int size)$/;"	f	class:libtorrent::peer_connection_handle
send_buffer_capacity	torrent/include/libtorrent/peer_connection.hpp	/^		int send_buffer_capacity() const$/;"	f	class:libtorrent::peer_connection
send_buffer_limit	torrent/src/ut_metadata.cpp	/^		send_buffer_limit = 0x4000 * 10,$/;"	e	enum:libtorrent::__anon72::__anon73	file:
send_buffer_low_watermark	torrent/include/libtorrent/settings_pack.hpp	/^			send_buffer_low_watermark,$/;"	e	enum:libtorrent::settings_pack::int_types
send_buffer_offset	torrent/include/libtorrent/peer_connection.hpp	/^		std::uint32_t send_buffer_offset:29;$/;"	m	struct:libtorrent::pending_block
send_buffer_size	torrent/include/libtorrent/peer_connection.hpp	/^		int send_buffer_size() const$/;"	f	class:libtorrent::peer_connection
send_buffer_size	torrent/include/libtorrent/peer_info.hpp	/^		int send_buffer_size;$/;"	m	struct:libtorrent::peer_info
send_buffer_watermark	torrent/include/libtorrent/settings_pack.hpp	/^			send_buffer_watermark,$/;"	e	enum:libtorrent::settings_pack::int_types
send_buffer_watermark_factor	torrent/include/libtorrent/settings_pack.hpp	/^			send_buffer_watermark_factor,$/;"	e	enum:libtorrent::settings_pack::int_types
send_buffer_watermark_too_low	torrent/include/libtorrent/alert_types.hpp	/^			send_buffer_watermark_too_low,$/;"	e	enum:libtorrent::final::performance_warning_t
send_cancel_send_desktop	src/client.c	/^static int send_cancel_send_desktop(struct client *cli, int batch_no)$/;"	f	file:
send_choke	torrent/src/peer_connection.cpp	/^	bool peer_connection::send_choke()$/;"	f	class:libtorrent::peer_connection
send_clear_all_desktop	src/client.c	/^static int send_clear_all_desktop(struct client *cli, int batch_no, int flag)$/;"	f	file:
send_code	test/test.c	/^static int send_code(struct client *cli, int code)$/;"	f	file:
send_config_pipe	src/config.c	/^int send_config_pipe()$/;"	f
send_config_version	src/client.c	/^static int send_config_version(struct client *cli)$/;"	f	file:
send_connect	torrent/src/i2p_stream.cpp	/^	void i2p_stream::send_connect(handler_type h)$/;"	f	class:libtorrent::i2p_stream
send_delay	torrent/src/utp_stream.cpp	/^int utp_stream::send_delay() const$/;"	f	class:libtorrent::utp_stream
send_delete	src/client.c	/^static int send_delete(struct client *cli, int batch_no)$/;"	f	file:
send_desktop	src/client.c	/^static int send_desktop(struct client *cli, int batch_no, int flag)$/;"	f	file:
send_down_torrent	src/client.c	/^static int send_down_torrent(struct client *cli, char *task_uuid,  int flag)$/;"	f	file:
send_error_msg	src/error.c	/^int send_error_msg(int err_type)$/;"	f
send_fin	torrent/src/utp_stream.cpp	/^void utp_socket_impl::send_fin()$/;"	f	class:libtorrent::utp_socket_impl
send_get_config	src/client.c	/^static int send_get_config(struct client *cli)$/;"	f	file:
send_get_desktop_group_list	src/client.c	/^static int send_get_desktop_group_list(struct client *cli)$/;"	f	file:
send_get_diff_torrent	src/client.c	/^static int send_get_diff_torrent(struct client *cli, char *group_uuid, char *diff_uuid, int diff)$/;"	f	file:
send_get_ip_address_request	torrent/src/natpmp.cpp	/^void natpmp::send_get_ip_address_request()$/;"	f	class:libtorrent::natpmp
send_heartbeat	src/client.c	/^int send_heartbeat(struct client *cli)$/;"	f
send_hostname	torrent/src/tracker_manager.cpp	/^	void tracker_manager::send_hostname(aux::listen_socket_handle const& sock$/;"	f	class:libtorrent::tracker_manager
send_hostname	torrent/src/udp_socket.cpp	/^void udp_socket::send_hostname(char const* hostname, int const port$/;"	f	class:libtorrent::udp_socket
send_interested	torrent/src/peer_connection.cpp	/^	void peer_connection::send_interested()$/;"	f	class:libtorrent::peer_connection
send_login	src/client.c	/^static int send_login(struct client *cli)$/;"	f	file:
send_map_request	torrent/src/natpmp.cpp	/^void natpmp::send_map_request(port_mapping_t const i)$/;"	f	class:libtorrent::natpmp
send_message	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void send_message(message_type const type$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
send_msg	src/socket.c	/^int send_msg(const int fd, const char *buf, const int len)$/;"	f
send_name_lookup	torrent/src/i2p_stream.cpp	/^	void i2p_stream::send_name_lookup(handler_type h)$/;"	f	class:libtorrent::i2p_stream
send_not_interested	torrent/src/peer_connection.cpp	/^	void peer_connection::send_not_interested()$/;"	f	class:libtorrent::peer_connection
send_not_sent_low_watermark	torrent/include/libtorrent/settings_pack.hpp	/^			send_not_sent_low_watermark,$/;"	e	enum:libtorrent::settings_pack::int_types
send_p2v_progress	src/client.c	/^int send_p2v_progress(struct client *cli, char *buf)$/;"	f
send_p2v_transform	src/client.c	/^int send_p2v_transform(struct client *cli, char *data)$/;"	f
send_packet	src/socket.c	/^int send_packet(struct client *cli)$/;"	f
send_packet	torrent/kademlia/dht_tracker.cpp	/^	bool dht_tracker::send_packet(aux::listen_socket_handle const& s, entry& e, udp::endpoint const& addr)$/;"	f	class:libtorrent::dht::dht_tracker
send_packet	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::send_packet(std::weak_ptr<utp_socket_interface> sock$/;"	f	class:libtorrent::utp_socket_manager
send_peer	torrent/src/ut_pex.cpp	/^	bool send_peer(peer_connection const& p)$/;"	f	namespace:libtorrent::__anon35
send_piece_suggestions	torrent/src/peer_connection.cpp	/^	void peer_connection::send_piece_suggestions(int const num)$/;"	f	class:libtorrent::peer_connection
send_pipe	qt_pro/pipethread.cpp	/^int PipeThread::send_pipe(char *buf, short cmd, int size)$/;"	f	class:PipeThread
send_pipe	src/socket.c	/^int send_pipe(char *buf, short cmd, int size, int type)$/;"	f
send_pipe	src/torrent.cpp	/^static int send_pipe(char *buf, short cmd, int size)$/;"	f	file:
send_pipe	virt-p2v/src/conversion.c	/^static int send_pipe(char *buf, short cmd, int size)$/;"	f	file:
send_pkt	torrent/src/utp_stream.cpp	/^bool utp_socket_impl::send_pkt(int const flags)$/;"	f	class:libtorrent::utp_socket_impl
send_quota	torrent/include/libtorrent/peer_info.hpp	/^		int send_quota;$/;"	m	struct:libtorrent::peer_info
send_reboot	src/client.c	/^static int send_reboot(struct client *cli, int batch_no, int flag)$/;"	f	file:
send_redundant_have	torrent/include/libtorrent/settings_pack.hpp	/^			send_redundant_have,$/;"	e	enum:libtorrent::settings_pack::bool_types
send_request	src/socket.c	/^int send_request(struct client *cli)$/;"	f
send_reset	torrent/src/utp_stream.cpp	/^void utp_socket_impl::send_reset(utp_header const* ph)$/;"	f	class:libtorrent::utp_socket_impl
send_session_create	torrent/src/i2p_stream.cpp	/^	void i2p_stream::send_session_create(handler_type h)$/;"	f	class:libtorrent::i2p_stream
send_set_update_config	src/client.c	/^static int send_set_update_config(struct client *cli)$/;"	f	file:
send_share_mode	torrent/src/torrent.cpp	/^	void torrent::send_share_mode()$/;"	f	class:libtorrent::torrent
send_single_refresh	torrent/kademlia/node.cpp	/^void node::send_single_refresh(udp::endpoint const& ep, int const bucket$/;"	f	class:libtorrent::dht::node
send_socket_buffer_size	torrent/include/libtorrent/settings_pack.hpp	/^			send_socket_buffer_size,$/;"	e	enum:libtorrent::settings_pack::int_types
send_stats	torrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER send_stats:1;$/;"	m	struct:libtorrent::announce_entry
send_suggest	torrent/src/peer_connection.cpp	/^	void peer_connection::send_suggest(piece_index_t const piece)$/;"	f	class:libtorrent::peer_connection
send_syn	torrent/src/utp_stream.cpp	/^void utp_socket_impl::send_syn()$/;"	f	class:libtorrent::utp_socket_impl
send_time	torrent/include/libtorrent/packet_pool.hpp	/^		time_point send_time;$/;"	m	struct:libtorrent::packet
send_to	torrent/src/broadcast_socket.cpp	/^	void broadcast_socket::send_to(char const* buffer, int size$/;"	f	class:libtorrent::broadcast_socket
send_udp_announce	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::send_udp_announce()$/;"	f	class:libtorrent::udp_tracker_connection
send_udp_connect	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::send_udp_connect()$/;"	f	class:libtorrent::udp_tracker_connection
send_udp_packet	torrent/src/session_impl.cpp	/^	void session_impl::send_udp_packet(std::weak_ptr<utp_socket_interface> sock$/;"	f	class:libtorrent::aux::session_impl
send_udp_packet_hostname	torrent/src/session_impl.cpp	/^	void session_impl::send_udp_packet_hostname(std::weak_ptr<utp_socket_interface> sock$/;"	f	class:libtorrent::aux::session_impl
send_udp_packet_hostname_listen	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void send_udp_packet_hostname_listen(aux::listen_socket_handle const& sock$/;"	f	struct:libtorrent::aux::final
send_udp_packet_listen	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void send_udp_packet_listen(aux::listen_socket_handle const& sock$/;"	f	struct:libtorrent::aux::final
send_udp_scrape	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::send_udp_scrape()$/;"	f	class:libtorrent::udp_tracker_connection
send_unchoke	torrent/src/peer_connection.cpp	/^	bool peer_connection::send_unchoke()$/;"	f	class:libtorrent::peer_connection
send_update_config	src/client.c	/^static int send_update_config(struct client *cli, int batch_no)$/;"	f	file:
send_update_diff_disk	src/client.c	/^static int send_update_diff_disk(struct client *cli, int batch_no)$/;"	f	file:
send_update_ip	src/client.c	/^static int send_update_ip(struct client *cli, int batch_no)$/;"	f	file:
send_update_name	src/client.c	/^static int send_update_name(struct client *cli, int batch_no)$/;"	f	file:
send_upgrad	src/client.c	/^static int send_upgrad(struct client *cli)$/;"	f	file:
send_upload_only	torrent/src/peer_connection.cpp	/^	void peer_connection::send_upload_only(bool const enabled)$/;"	f	class:libtorrent::peer_connection
send_upload_only	torrent/src/torrent.cpp	/^	void torrent::send_upload_only()$/;"	f	class:libtorrent::torrent
send_ut_peer_diff	torrent/src/ut_pex.cpp	/^		void send_ut_peer_diff()$/;"	f	struct:libtorrent::__anon35::final
send_ut_peer_list	torrent/src/ut_pex.cpp	/^		void send_ut_peer_list()$/;"	f	struct:libtorrent::__anon35::final
sending_request	torrent/bak/connection_tester.cpp	/^		sending_request,$/;"	e	enum:peer_conn::state_t	file:
sent	torrent/include/libtorrent/kademlia/observer.hpp	/^	time_point sent() const { return m_sent; }$/;"	f	struct:libtorrent::dht::observer
sent_announce	torrent/src/torrent.cpp	/^			bool sent_announce = false;$/;"	m	struct:libtorrent::__anon105::announce_state	file:
sent_buffer	torrent/src/session_impl.cpp	/^	void session_impl::sent_buffer(int s)$/;"	f	class:libtorrent::aux::session_impl
sent_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			sent_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
sent_bytes	torrent/include/libtorrent/stat.hpp	/^		void sent_bytes(int bytes_payload, int bytes_protocol)$/;"	f	class:libtorrent::stat
sent_bytes	torrent/src/peer_connection.cpp	/^	void peer_connection::sent_bytes(int const bytes_payload, int const bytes_protocol)$/;"	f	class:libtorrent::peer_connection
sent_bytes	torrent/src/session_impl.cpp	/^	void session_impl::sent_bytes(int bytes_payload, int bytes_protocol)$/;"	f	class:libtorrent::aux::session_impl
sent_bytes	torrent/src/torrent.cpp	/^	void torrent::sent_bytes(int const bytes_payload, int const bytes_protocol)$/;"	f	class:libtorrent::torrent
sent_bytes	torrent/src/tracker_manager.cpp	/^	void tracker_connection::sent_bytes(int bytes)$/;"	f	class:libtorrent::tracker_connection
sent_bytes	torrent/src/tracker_manager.cpp	/^	void tracker_manager::sent_bytes(int bytes)$/;"	f	class:libtorrent::tracker_manager
sent_ip_overhead_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			sent_ip_overhead_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
sent_payload	torrent/include/libtorrent/extensions.hpp	/^		virtual void sent_payload(int \/* bytes *\/) {}$/;"	f	struct:libtorrent::peer_plugin
sent_payload_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			sent_payload_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
sent_syn	torrent/include/libtorrent/stat.hpp	/^		void sent_syn(bool ipv6)$/;"	f	class:libtorrent::stat
sent_syn	torrent/src/peer_connection.cpp	/^	void peer_connection::sent_syn(bool const ipv6)$/;"	f	class:libtorrent::peer_connection
sent_syn	torrent/src/session_impl.cpp	/^	void session_impl::sent_syn(bool ipv6)$/;"	f	class:libtorrent::aux::session_impl
sent_syn	torrent/src/torrent.cpp	/^	void torrent::sent_syn(bool const ipv6)$/;"	f	class:libtorrent::torrent
sent_tracker_bytes	torrent/include/libtorrent/performance_counters.hpp	/^			sent_tracker_bytes,$/;"	e	enum:libtorrent::counters::stats_counter_t
sent_unchoke	torrent/include/libtorrent/extensions.hpp	/^		virtual void sent_unchoke() {}$/;"	f	struct:libtorrent::peer_plugin
seq	torrent/include/libtorrent/kademlia/item.hpp	/^	sequence_number seq() const { return m_seq; }$/;"	f	class:libtorrent::dht::item
seq_nr	torrent/include/libtorrent/utp_stream.hpp	/^	be_uint16 seq_nr;$/;"	m	struct:libtorrent::utp_header
sequence_number	torrent/include/libtorrent/kademlia/types.hpp	/^		explicit sequence_number(std::int64_t v) : value(v) {}$/;"	f	struct:libtorrent::dht::sequence_number
sequence_number	torrent/include/libtorrent/kademlia/types.hpp	/^		sequence_number() : value(0) {}$/;"	f	struct:libtorrent::dht::sequence_number
sequence_number	torrent/include/libtorrent/kademlia/types.hpp	/^	struct sequence_number$/;"	s	namespace:libtorrent::dht
sequence_number	torrent/include/libtorrent/torrent.hpp	/^		queue_position_t sequence_number() const { return m_sequence_number; }$/;"	f	class:libtorrent::torrent
sequential	torrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t sequential = 4_bit;$/;"	m	class:libtorrent::piece_picker
sequential	torrent/src/piece_picker.cpp	/^	constexpr picker_options_t piece_picker::sequential;$/;"	m	class:libtorrent::piece_picker	file:
sequential_access	torrent/include/libtorrent/disk_interface.hpp	/^		static constexpr disk_job_flags_t sequential_access = 3_bit;$/;"	m	struct:libtorrent::disk_interface
sequential_access	torrent/src/disk_io_thread.cpp	/^constexpr disk_job_flags_t disk_interface::sequential_access;$/;"	m	class:disk_interface	file:
sequential_download	torrent/bak/client_test.cpp	/^bool sequential_download = false;$/;"	v
sequential_download	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t sequential_download = 9_bit;$/;"	m	namespace:libtorrent::torrent_flags
sequential_download	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER sequential_download = false;$/;"	m	struct:libtorrent::torrent_status
sequential_pieces	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::sequential_pieces;$/;"	m	class:libtorrent::picker_log_alert	file:
server	include/config.h	/^    server_info server;$/;"	m	struct:config
server	qt_pro/external.h	/^    server_info server;$/;"	m	struct:config
server	virt-p2v/include/p2v-config.h	/^  char *server;$/;"	m	struct:remote_config
serverIP	include/StoreConfig.h	/^    uint64_t            serverIP;$/;"	m	struct:_YZY_STORE_CONFIG
server_entry	virt-p2v/src/gui.c	/^  *server_entry, *port_entry,$/;"	v	file:
server_info	include/config.h	/^struct server_info {$/;"	s
server_info	include/config.h	/^typedef struct server_info server_info;$/;"	t	typeref:struct:server_info
server_info	qt_pro/external.h	/^struct server_info {$/;"	s
server_info	qt_pro/external.h	/^typedef struct server_info server_info;$/;"	t	typeref:struct:server_info
server_ip	include/task.h	/^    char server_ip[32];$/;"	m	struct:p2v_task
server_s	src/client.c	/^static int server_s = -1;$/;"	v	file:
server_url	torrent/src/alert.cpp	/^	char const* url_seed_alert::server_url() const$/;"	f	class:libtorrent::url_seed_alert
servername_callback	torrent/src/session_impl.cpp	/^	int servername_callback(SSL* s, int*, void* arg)$/;"	f	namespace:libtorrent::aux::__anon46
service_code	include/packet.h	/^    u32_t  service_code;        \/\/è¯·æ±çæå¡ç¼å·  ä¾å¦ 0xff00ff01$/;"	m	struct:yzy_packet
service_namespace	torrent/include/libtorrent/upnp.hpp	/^		std::string service_namespace;$/;"	m	struct:libtorrent::final::rootdevice
service_port	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int service_port = 0;$/;"	m	struct:libtorrent::dht::dht_settings
service_type	torrent/include/libtorrent/upnp.hpp	/^	std::string service_type;$/;"	m	struct:libtorrent::parse_state
service_unavailable	torrent/include/libtorrent/error_code.hpp	/^			service_unavailable = 503$/;"	e	enum:libtorrent::errors::http_errors
ses	torrent/include/libtorrent/peer_connection.hpp	/^		aux::session_interface* ses;$/;"	m	struct:libtorrent::peer_connection_args
session	torrent/include/libtorrent/session.hpp	/^		explicit session(session_params const& params)$/;"	f	class:libtorrent::session
session	torrent/include/libtorrent/session.hpp	/^		explicit session(session_params&& params)$/;"	f	class:libtorrent::session
session	torrent/include/libtorrent/session.hpp	/^		session()$/;"	f	class:libtorrent::session
session	torrent/include/libtorrent/session.hpp	/^		session(fingerprint const& print$/;"	f	class:libtorrent::session
session	torrent/include/libtorrent/session.hpp	/^		session(session_params const& params, io_service& ios)$/;"	f	class:libtorrent::session
session	torrent/include/libtorrent/session.hpp	/^		session(session_params&& params, io_service& ios)$/;"	f	class:libtorrent::session
session	torrent/include/libtorrent/session.hpp	/^		session(settings_pack const& pack$/;"	f	class:libtorrent::session
session	torrent/include/libtorrent/session.hpp	/^		session(settings_pack&& pack$/;"	f	class:libtorrent::session
session	torrent/include/libtorrent/session.hpp	/^	class TORRENT_EXPORT session : public session_handle$/;"	c	namespace:libtorrent
session	torrent/include/libtorrent/torrent.hpp	/^		aux::session_interface& session() { return m_ses; }$/;"	f	class:libtorrent::torrent
session_closing	torrent/include/libtorrent/error_code.hpp	/^			session_closing,$/;"	e	enum:libtorrent::errors::error_code_enum
session_error_alert	torrent/src/alert.cpp	/^	session_error_alert::session_error_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::session_error_alert
session_handle	torrent/include/libtorrent/session_handle.hpp	/^		explicit session_handle(std::weak_ptr<aux::session_impl> impl)$/;"	f	struct:libtorrent::session_handle
session_handle	torrent/include/libtorrent/session_handle.hpp	/^	struct TORRENT_EXPORT session_handle$/;"	s	namespace:libtorrent
session_id	torrent/include/libtorrent/i2p_stream.hpp	/^	char const* session_id() const { return m_session_id.c_str(); }$/;"	f	class:libtorrent::i2p_connection
session_impl	torrent/src/session_impl.cpp	/^	session_impl::session_impl(io_service& ios, settings_pack const& pack)$/;"	f	class:libtorrent::aux::session_impl
session_interface	torrent/include/libtorrent/aux_/session_interface.hpp	/^	struct TORRENT_EXTRA_EXPORT session_interface$/;"	s	namespace:libtorrent::aux
session_is_closing	torrent/include/libtorrent/error_code.hpp	/^			session_is_closing,$/;"	e	enum:libtorrent::errors::error_code_enum
session_log	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t session_log = 13_bit;$/;"	m	namespace:libtorrent::alert_category
session_log_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t session_log_notification = 13_bit;$/;"	m	class:libtorrent::alert
session_log_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::session_log_notification;$/;"	m	class:libtorrent::alert	file:
session_logger	torrent/include/libtorrent/aux_/session_interface.hpp	/^	struct TORRENT_EXTRA_EXPORT session_logger$/;"	s	namespace:libtorrent::aux
session_params	torrent/include/libtorrent/session.hpp	/^	struct TORRENT_EXPORT session_params$/;"	s	namespace:libtorrent
session_params	torrent/src/session.cpp	/^	session_params::session_params()$/;"	f	class:libtorrent::session_params
session_params	torrent/src/session.cpp	/^	session_params::session_params(settings_pack const& sp$/;"	f	class:libtorrent::session_params
session_params	torrent/src/session.cpp	/^	session_params::session_params(settings_pack const& sp)$/;"	f	class:libtorrent::session_params
session_params	torrent/src/session.cpp	/^	session_params::session_params(settings_pack&& sp$/;"	f	class:libtorrent::session_params
session_params	torrent/src/session.cpp	/^	session_params::session_params(settings_pack&& sp)$/;"	f	class:libtorrent::session_params
session_plugin_wrapper	torrent/include/libtorrent/aux_/session_impl.hpp	/^				explicit session_plugin_wrapper(ext_function_t f) : m_f(std::move(f)) {}$/;"	f	struct:libtorrent::aux::final::session_plugin_wrapper
session_plugin_wrapper	torrent/include/libtorrent/aux_/session_impl.hpp	/^			struct session_plugin_wrapper : plugin$/;"	s	struct:libtorrent::aux::final
session_proxy	torrent/include/libtorrent/session.hpp	/^	class TORRENT_EXPORT session_proxy$/;"	c	namespace:libtorrent
session_proxy	torrent/src/session.cpp	/^	session_proxy::session_proxy(std::shared_ptr<io_service> ios$/;"	f	class:libtorrent::session_proxy
session_settings	torrent/include/libtorrent/aux_/session_settings.hpp	/^	struct TORRENT_EXTRA_EXPORT session_settings$/;"	s	namespace:libtorrent::aux
session_settings	torrent/src/session_settings.cpp	/^	session_settings::session_settings(settings_pack const& p)$/;"	f	class:libtorrent::aux::session_settings
session_settings_single_thread	torrent/include/libtorrent/aux_/session_settings.hpp	/^	struct TORRENT_EXTRA_EXPORT session_settings_single_thread$/;"	s	namespace:libtorrent::aux
session_settings_single_thread	torrent/src/session_settings.cpp	/^	session_settings_single_thread::session_settings_single_thread()$/;"	f	class:libtorrent::aux::session_settings_single_thread
session_stats_alert	torrent/src/alert.cpp	/^	session_stats_alert::session_stats_alert(aux::stack_allocator&, struct counters const& cnt)$/;"	f	class:libtorrent::session_stats_alert
session_stats_header_alert	torrent/src/alert.cpp	/^	session_stats_header_alert::session_stats_header_alert(aux::stack_allocator&)$/;"	f	class:libtorrent::session_stats_header_alert
session_stats_metrics	torrent/src/session_stats.cpp	/^	std::vector<stats_metric> session_stats_metrics()$/;"	f	namespace:libtorrent
session_status	torrent/include/libtorrent/session_status.hpp	/^	struct TORRENT_DEPRECATED_EXPORT session_status$/;"	s	namespace:libtorrent
session_udp_socket	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		explicit session_udp_socket(io_service& ios, listen_socket_handle ls)$/;"	f	struct:libtorrent::aux::session_udp_socket
session_udp_socket	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^	struct session_udp_socket$/;"	s	namespace:libtorrent::aux
session_view	torrent/bak/session_view.cpp	/^session_view::session_view()$/;"	f	class:session_view
session_view	torrent/bak/session_view.hpp	/^struct session_view$/;"	s
set	torrent/include/libtorrent/aux_/session_settings.hpp	/^		void set(Container& c, int const name, T val$/;"	f	struct:libtorrent::aux::session_settings_single_thread
set	torrent/include/libtorrent/bloom_filter.hpp	/^		void set(sha1_hash const& k)$/;"	f	struct:libtorrent::bloom_filter
setBarStyle	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setBarStyle(QRoundProgressBar::BarStyle style)$/;"	f	class:QRoundProgressBar
setBoot	include/StoreConfig.h	/^    void (*setBoot)(int idx, PYZY_QCOW_ENTRY pQe);        \/\/idx: 0ç³»ç»çï¼1æ°æ®çï¼2å±äº«ç   leve è®¾ç½®ä¸º-1è¡¨ç¤ºå½åä¸ä½¿ç¨$/;"	m	struct:_StoreDriver
setConfig	qt_pro/global.cpp	/^void Global::setConfig(struct config *info)$/;"	f	class:Global
setConfigWindow	qt_pro/global.cpp	/^void Global::setConfigWindow(ConfigWindow *w)$/;"	f	class:Global
setCurrentIndex	qt_pro/global.cpp	/^void Global::setCurrentIndex(int index)$/;"	f	class:Global
setDataColors	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setDataColors(const QGradientStops &stopPoints)$/;"	f	class:QRoundProgressBar
setDataPenWidth	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setDataPenWidth(double penWidth)$/;"	f	class:QRoundProgressBar
setDecimals	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setDecimals(int count)$/;"	f	class:QRoundProgressBar
setDesktopRect	qt_pro/global.cpp	/^void Global::setDesktopRect(QRect rect)$/;"	f	class:Global
setDialogWindow	qt_pro/global.cpp	/^void Global::setDialogWindow(DialogWindow *w)$/;"	f	class:Global
setDiskSizeLba	include/StoreConfig.h	/^    int (*setDiskSizeLba)(PYZYGUID diskName, uint64_t size_lba);$/;"	m	struct:_StoreDriver
setDisplay	qt_pro/global.cpp	/^void Global::setDisplay(int index)$/;"	f	class:Global
setDownLoadFlag	qt_pro/global.cpp	/^void Global::setDownLoadFlag(int flag)$/;"	f	class:Global
setDownloadWindow	qt_pro/global.cpp	/^void Global::setDownloadWindow(DownloadWindow *w)$/;"	f	class:Global
setErrorMsg	qt_pro/global.cpp	/^void Global::setErrorMsg(const char *msg)$/;"	f	class:Global
setErrorText	qt_pro/dialogwindow.cpp	/^void DialogWindow::setErrorText(const char *msg)$/;"	f	class:DialogWindow
setFormat	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setFormat(const QString &format)$/;"	f	class:QRoundProgressBar
setInnerOuterRate	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setInnerOuterRate(float innerOuterRate)$/;"	f	class:QRoundProgressBar
setInstallFlag	qt_pro/global.cpp	/^void Global::setInstallFlag(int flag)$/;"	f	class:Global
setLba	include/StoreConfig.h	/^    void (*setLba)(uint64_t lba);                \/\/ä¼ å¥ä¸ä¸ä¸ªååºEND_LBA$/;"	m	struct:_StoreDriver
setMainWindow	qt_pro/global.cpp	/^void Global::setMainWindow(MainWindow *w)$/;"	f	class:Global
setMaximum	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setMaximum(double max)$/;"	f	class:QRoundProgressBar
setMinimum	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setMinimum(double min)$/;"	f	class:QRoundProgressBar
setNetState	qt_pro/global.cpp	/^void Global::setNetState(NET_STATE state)$/;"	f	class:Global
setNullPosition	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setNullPosition(double position)$/;"	f	class:QRoundProgressBar
setOSWindow	qt_pro/global.cpp	/^void Global::setOSWindow(OSWindow *w)$/;"	f	class:Global
setOutlinePenWidth	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setOutlinePenWidth(double penWidth)$/;"	f	class:QRoundProgressBar
setPipe	qt_pro/global.cpp	/^void Global::setPipe(int fd[2])$/;"	f	class:Global
setProgressValue	qt_pro/global.cpp	/^void Global::setProgressValue(struct progress_info *info)$/;"	f	class:Global
setProgressValue	qt_pro/uploadwindow.cpp	/^void Uploadwindow::setProgressValue(struct progress_info *info)$/;"	f	class:Uploadwindow
setRange	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setRange(double min, double max)$/;"	f	class:QRoundProgressBar
setType	qt_pro/dialogwindow.cpp	/^void DialogWindow::setType(int type)$/;"	f	class:DialogWindow
setUploadWindow	qt_pro/global.cpp	/^void Global::setUploadWindow(Uploadwindow *w)$/;"	f	class:Global
setValue	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setValue(double val)$/;"	f	class:QRoundProgressBar
setValue	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::setValue(int val)$/;"	f	class:QRoundProgressBar
setWindowFlag	qt_pro/global.cpp	/^void Global::setWindowFlag(int flag)$/;"	f	class:Global
set_alert_mask	torrent/src/session_handle.cpp	/^	void session_handle::set_alert_mask(std::uint32_t m)$/;"	f	class:libtorrent::session_handle
set_alert_notify	torrent/src/session_handle.cpp	/^	void session_handle::set_alert_notify(std::function<void()> const& fun)$/;"	f	class:libtorrent::session_handle
set_alert_queue_size_limit	torrent/src/alert_manager.cpp	/^	int alert_manager::set_alert_queue_size_limit(int queue_size_limit_)$/;"	f	class:libtorrent::alert_manager
set_alert_queue_size_limit	torrent/src/session_handle.cpp	/^	size_t session_handle::set_alert_queue_size_limit(size_t queue_size_limit_)$/;"	f	class:libtorrent::session_handle
set_alert_queue_size_limit	torrent/src/session_impl.cpp	/^	std::size_t session_impl::set_alert_queue_size_limit(std::size_t queue_size_limit_)$/;"	f	class:libtorrent::aux::session_impl
set_alignment	virt-p2v/include/gui-gtk3-compat.h	119;"	d
set_alignment	virt-p2v/include/gui-gtk3-compat.h	137;"	d
set_announce_to_dht	torrent/include/libtorrent/torrent.hpp	/^		void set_announce_to_dht(bool b) { m_announce_to_dht = b; }$/;"	f	class:libtorrent::torrent
set_announce_to_lsd	torrent/include/libtorrent/torrent.hpp	/^		void set_announce_to_lsd(bool b) { m_announce_to_lsd = b; }$/;"	f	class:libtorrent::torrent
set_announce_to_trackers	torrent/include/libtorrent/torrent.hpp	/^		void set_announce_to_trackers(bool b) { m_announce_to_trackers = b; }$/;"	f	class:libtorrent::torrent
set_apply_ip_filter	torrent/src/torrent.cpp	/^	void torrent::set_apply_ip_filter(bool b)$/;"	f	class:libtorrent::torrent
set_bit	torrent/include/libtorrent/bitfield.hpp	/^		void set_bit(IndexType const index)$/;"	f	namespace:libtorrent
set_bits	torrent/src/bloom_filter.cpp	/^	void set_bits(std::uint8_t const* k, std::uint8_t* bits, int const len)$/;"	f	namespace:libtorrent
set_block_timer	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		void set_block_timer(int t)$/;"	f	struct:libtorrent::dht::dos_blocker
set_bool	torrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_bool(int name, bool value)$/;"	f	struct:libtorrent::aux::session_settings
set_bool	torrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_bool(int name, bool value)$/;"	f	struct:libtorrent::aux::session_settings_single_thread
set_bool	torrent/src/settings_pack.cpp	/^	void settings_pack::set_bool(int const name, bool const val)$/;"	f	class:libtorrent::settings_pack
set_boot_qcow2	src/qcow2.c	/^int set_boot_qcow2(PedDevice *dev, uint32_t diff, int disk_type, char *name)$/;"	f
set_cache	torrent/src/stat_cache.cpp	/^	void stat_cache::set_cache(file_index_t const i, std::int64_t const size)$/;"	f	class:libtorrent::stat_cache
set_cache_impl	torrent/src/stat_cache.cpp	/^	void stat_cache::set_cache_impl(file_index_t const i, std::int64_t const size)$/;"	f	class:libtorrent::stat_cache
set_cache_timeout	torrent/src/resolver.cpp	/^	void resolver::set_cache_timeout(seconds const timeout)$/;"	f	class:libtorrent::resolver
set_cancel_requested	virt-p2v/src/conversion.c	/^set_cancel_requested (int r)$/;"	f	file:
set_close_reason	torrent/src/socket_type.cpp	/^	void socket_type::set_close_reason(close_reason_t code)$/;"	f	class:libtorrent::aux::socket_type
set_close_reason	torrent/src/utp_stream.cpp	/^void utp_socket_impl::set_close_reason(close_reason_t code)$/;"	f	class:libtorrent::utp_socket_impl
set_close_reason	torrent/src/utp_stream.cpp	/^void utp_stream::set_close_reason(close_reason_t code)$/;"	f	class:libtorrent::utp_stream
set_command	torrent/include/libtorrent/i2p_stream.hpp	/^	void set_command(command_t c) { m_command = c; }$/;"	f	class:libtorrent::i2p_stream
set_command	torrent/include/libtorrent/socks5_stream.hpp	/^	void set_command(int c)$/;"	f	class:libtorrent::socks5_stream
set_comment	torrent/src/create_torrent.cpp	/^	void create_torrent::set_comment(char const* str)$/;"	f	class:libtorrent::create_torrent
set_config	qt_pro/external.cpp	/^int set_config(struct config *conf)$/;"	f
set_config_defaults	virt-p2v/src/p2v.c	/^set_config_defaults (struct config *config)$/;"	f	file:
set_config_defaults	virt-p2v/src/p2v_transform.c	/^set_config_defaults (struct config *config)$/;"	f	file:
set_connection	torrent/src/peer_list.cpp	/^	void peer_list::set_connection(torrent_peer* p, peer_connection_interface* c)$/;"	f	class:libtorrent::peer_list
set_control_h	virt-p2v/src/conversion.c	/^set_control_h (mexp_h *new_h)$/;"	f	file:
set_conversion_error	virt-p2v/src/conversion.c	/^set_conversion_error (const char *fs, ...)$/;"	f	file:
set_creator	torrent/src/create_torrent.cpp	/^	void create_torrent::set_creator(char const* str)$/;"	f	class:libtorrent::create_torrent
set_cursor_pos	torrent/bak/print.cpp	/^void set_cursor_pos(int x, int y)$/;"	f
set_data	torrent/include/libtorrent/kademlia/put_data.hpp	/^	void set_data(item&& data) { m_data = std::move(data); }$/;"	f	struct:libtorrent::dht::put_data
set_destination	torrent/include/libtorrent/i2p_stream.hpp	/^	void set_destination(string_view d) { m_dest = d.to_string(); }$/;"	f	class:libtorrent::i2p_stream
set_dht_proxy	torrent/src/session_handle.cpp	/^	void session_handle::set_dht_proxy(proxy_settings const&)$/;"	f	class:libtorrent::session_handle
set_dht_settings	torrent/src/session_handle.cpp	/^	void session_handle::set_dht_settings(dht::dht_settings const& settings)$/;"	f	class:libtorrent::session_handle
set_dht_settings	torrent/src/session_impl.cpp	/^	void session_impl::set_dht_settings(dht::dht_settings const& settings)$/;"	f	class:libtorrent::aux::session_impl
set_dht_state	torrent/src/session_impl.cpp	/^	void session_impl::set_dht_state(dht::dht_state&& state)$/;"	f	class:libtorrent::aux::session_impl
set_dht_storage	torrent/src/session_handle.cpp	/^	void session_handle::set_dht_storage(dht::dht_storage_constructor_type sc)$/;"	f	class:libtorrent::session_handle
set_dht_storage	torrent/src/session_impl.cpp	/^	void session_impl::set_dht_storage(dht::dht_storage_constructor_type sc)$/;"	f	class:libtorrent::aux::session_impl
set_dirty	torrent/src/stat_cache.cpp	/^	void stat_cache::set_dirty(file_index_t const i)$/;"	f	class:libtorrent::stat_cache
set_disks_from_ui	virt-p2v/src/gui.c	/^set_disks_from_ui (struct config *config)$/;"	f	file:
set_dont_frag	torrent/src/udp_socket.cpp	/^	set_dont_frag(udp::socket& sock, bool const df)$/;"	f	struct:libtorrent::set_dont_frag
set_dont_frag	torrent/src/udp_socket.cpp	/^struct set_dont_frag$/;"	s	namespace:libtorrent	file:
set_dont_frag	torrent/src/udp_socket.cpp	/^{ set_dont_frag(udp::socket&, int) {} };$/;"	f	struct:libtorrent::set_dont_frag
set_download_limit	torrent/src/peer_class.cpp	/^	void peer_class::set_download_limit(int limit)$/;"	f	class:libtorrent::peer_class
set_download_limit	torrent/src/torrent.cpp	/^	void torrent::set_download_limit(int const limit)$/;"	f	class:libtorrent::torrent
set_download_limit	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_download_limit(int limit) const$/;"	f	class:libtorrent::torrent_handle
set_download_rate_limit	torrent/src/session_handle.cpp	/^	void session_handle::set_download_rate_limit(int bytes_per_second)$/;"	f	class:libtorrent::session_handle
set_download_rate_limit	torrent/src/session_impl.cpp	/^	void session_impl::set_download_rate_limit(peer_class_t c, int limit)$/;"	f	class:libtorrent::aux::session_impl
set_download_rate_limit_depr	torrent/src/session_impl.cpp	/^	void session_impl::set_download_rate_limit_depr(int bytes_per_second)$/;"	f	class:libtorrent::aux::session_impl
set_dst_name	torrent/include/libtorrent/http_stream.hpp	/^	void set_dst_name(std::string const& host)$/;"	f	class:libtorrent::http_stream
set_dst_name	torrent/include/libtorrent/socks5_stream.hpp	/^	void set_dst_name(std::string const& host)$/;"	f	class:libtorrent::socks5_stream
set_end	torrent/include/libtorrent/lazy_entry.hpp	/^		void set_end(char const* end)$/;"	f	struct:libtorrent::lazy_entry
set_endgame	torrent/src/peer_connection.cpp	/^	void peer_connection::set_endgame(bool b)$/;"	f	class:libtorrent::peer_connection
set_error	torrent/src/stat_cache.cpp	/^	void stat_cache::set_error(file_index_t const i, error_code const& ec)$/;"	f	class:libtorrent::stat_cache
set_error	torrent/src/torrent.cpp	/^	void torrent::set_error(error_code const& ec, file_index_t const error_file)$/;"	f	class:libtorrent::torrent
set_error_impl	torrent/src/stat_cache.cpp	/^	void stat_cache::set_error_impl(file_index_t const i, error_code const& ec)$/;"	f	class:libtorrent::stat_cache
set_external_address	torrent/src/session_impl.cpp	/^	void session_impl::set_external_address($/;"	f	class:libtorrent::aux::session_impl
set_external_address	torrent/src/session_impl.cpp	/^	void session_impl::set_external_address(aux::listen_socket_handle const& iface$/;"	f	class:libtorrent::aux::session_impl
set_external_address	torrent/src/session_impl.cpp	/^	void session_impl::set_external_address(std::shared_ptr<listen_socket_t> const& sock$/;"	f	class:libtorrent::aux::session_impl
set_failcount	torrent/src/peer_list.cpp	/^	void peer_list::set_failcount(torrent_peer* p, int const f)$/;"	f	class:libtorrent::peer_list
set_file_hash	torrent/src/create_torrent.cpp	/^	void create_torrent::set_file_hash(file_index_t index, sha1_hash const& h)$/;"	f	class:libtorrent::create_torrent
set_file_priority	torrent/src/storage.cpp	/^	void default_storage::set_file_priority($/;"	f	class:libtorrent::default_storage
set_file_priority	torrent/src/torrent.cpp	/^	void torrent::set_file_priority(file_index_t const index$/;"	f	class:libtorrent::torrent
set_file_valid_data	torrent/src/file.cpp	/^	void set_file_valid_data(HANDLE f, std::int64_t size)$/;"	f	namespace:libtorrent
set_filter	torrent/bak/torrent_view.cpp	/^void torrent_view::set_filter(int filter)$/;"	f	class:torrent_view
set_flags	torrent/src/torrent.cpp	/^	void torrent::set_flags(torrent_flags_t const flags$/;"	f	class:libtorrent::torrent
set_flags	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_flags(torrent_flags_t const flags$/;"	f	class:libtorrent::torrent_handle
set_flags	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_flags(torrent_flags_t const flags) const$/;"	f	class:libtorrent::torrent_handle
set_from_ui_generic	virt-p2v/src/gui.c	/^set_from_ui_generic (char **all, char ***ret, GtkTreeView *list)$/;"	f	file:
set_has_metadata	torrent/include/libtorrent/peer_connection.hpp	/^		void set_has_metadata(bool m) { m_has_metadata = m; }$/;"	f	class:libtorrent::peer_connection
set_hash	torrent/src/create_torrent.cpp	/^	void create_torrent::set_hash(piece_index_t index, sha1_hash const& h)$/;"	f	class:libtorrent::create_torrent
set_have	torrent/include/libtorrent/piece_picker.hpp	/^			void set_have() { index = we_have_index; TORRENT_ASSERT(have()); }$/;"	f	struct:libtorrent::piece_picker::piece_pos
set_holepunch_mode	torrent/src/peer_connection.cpp	/^	void peer_connection::set_holepunch_mode()$/;"	f	class:libtorrent::peer_connection
set_host_name	torrent/include/libtorrent/ssl_stream.hpp	/^	void set_host_name(std::string const& name)$/;"	f	class:libtorrent::ssl_stream
set_i2p_proxy	torrent/src/session_handle.cpp	/^	void session_handle::set_i2p_proxy(proxy_settings const& s)$/;"	f	class:libtorrent::session_handle
set_id	torrent/kademlia/rpc_manager.cpp	/^void observer::set_id(node_id const& id)$/;"	f	class:libtorrent::dht::observer
set_impl	torrent/src/utp_stream.cpp	/^void utp_stream::set_impl(utp_socket_impl* impl)$/;"	f	class:libtorrent::utp_stream
set_incoming_key	torrent/src/pe_crypto.cpp	/^	void rc4_handler::set_incoming_key(span<char const> key)$/;"	f	class:libtorrent::rc4_handler
set_info	torrent/src/peer_class.cpp	/^	void peer_class::set_info(peer_class_info const* pci)$/;"	f	class:libtorrent::peer_class
set_info_label	virt-p2v/src/gui.c	/^set_info_label (void)$/;"	f	file:
set_int	torrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_int(int name, int value)$/;"	f	struct:libtorrent::aux::session_settings
set_int	torrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_int(int name, int value)$/;"	f	struct:libtorrent::aux::session_settings_single_thread
set_int	torrent/include/libtorrent/settings_pack.hpp	/^		void set_int(int name, flags::bitfield_flag<Type, Tag> const val)$/;"	f	struct:libtorrent::settings_pack
set_int	torrent/src/settings_pack.cpp	/^	void settings_pack::set_int(int const name, int const val)$/;"	f	class:libtorrent::settings_pack
set_interfaces_from_ui	virt-p2v/src/gui.c	/^set_interfaces_from_ui (struct config *config)$/;"	f	file:
set_ip_filter	torrent/src/session_handle.cpp	/^	void session_handle::set_ip_filter(ip_filter const& f)$/;"	f	class:libtorrent::session_handle
set_ip_filter	torrent/src/session_impl.cpp	/^	void session_impl::set_ip_filter(std::shared_ptr<ip_filter> const& f)$/;"	f	class:libtorrent::aux::session_impl
set_ip_filter	torrent/src/torrent.cpp	/^	void torrent::set_ip_filter(std::shared_ptr<const ip_filter> ipf)$/;"	f	class:libtorrent::torrent
set_key	torrent/src/session_handle.cpp	/^	void session_handle::set_key(std::uint32_t)$/;"	f	class:libtorrent::session_handle
set_last_seen_complete	torrent/include/libtorrent/peer_connection.hpp	/^		void set_last_seen_complete(int ago) { m_last_seen_complete = ::time(nullptr) - ago; }$/;"	f	class:libtorrent::peer_connection
set_limit_impl	torrent/src/torrent.cpp	/^	void torrent::set_limit_impl(int limit, int const channel, bool const state_update)$/;"	f	class:libtorrent::torrent
set_load_function	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void set_load_function(user_load_function_t fun)$/;"	f	struct:libtorrent::aux::final
set_load_function	torrent/src/session_handle.cpp	/^	void session_handle::set_load_function(user_load_function_t fun)$/;"	f	class:libtorrent::session_handle
set_local_download_rate_limit	torrent/src/session_handle.cpp	/^	void session_handle::set_local_download_rate_limit(int bytes_per_second)$/;"	f	class:libtorrent::session_handle
set_local_download_rate_limit	torrent/src/session_impl.cpp	/^	void session_impl::set_local_download_rate_limit(int bytes_per_second)$/;"	f	class:libtorrent::aux::session_impl
set_local_endpoint	torrent/src/i2p_stream.cpp	/^	void i2p_connection::set_local_endpoint(error_code const& ec, char const* dest$/;"	f	class:libtorrent::i2p_connection
set_local_upload_rate_limit	torrent/src/session_handle.cpp	/^	void session_handle::set_local_upload_rate_limit(int bytes_per_second)$/;"	f	class:libtorrent::session_handle
set_local_upload_rate_limit	torrent/src/session_impl.cpp	/^	void session_impl::set_local_upload_rate_limit(int bytes_per_second)$/;"	f	class:libtorrent::aux::session_impl
set_log_dir	virt-p2v/src/gui.c	/^set_log_dir (gpointer user_data)$/;"	f	file:
set_low_prio_io	torrent/include/libtorrent/file_pool.hpp	/^		void set_low_prio_io(bool b) { m_low_prio_io = b; }$/;"	f	struct:libtorrent::file_pool
set_low_priority	torrent/src/file_pool.cpp	/^	void set_low_priority(file_handle const& f)$/;"	f	namespace:libtorrent
set_max_connections	torrent/src/session_handle.cpp	/^	void session_handle::set_max_connections(int limit)$/;"	f	class:libtorrent::session_handle
set_max_connections	torrent/src/session_impl.cpp	/^	void session_impl::set_max_connections(int limit)$/;"	f	class:libtorrent::aux::session_impl
set_max_connections	torrent/src/torrent.cpp	/^	void torrent::set_max_connections(int limit, bool const state_update)$/;"	f	class:libtorrent::torrent
set_max_connections	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_max_connections(int max_connections) const$/;"	f	class:libtorrent::torrent_handle
set_max_failcount	torrent/src/peer_list.cpp	/^	void peer_list::set_max_failcount(torrent_state* state)$/;"	f	class:libtorrent::peer_list
set_max_half_open_connections	torrent/src/session_handle.cpp	/^	void session_handle::set_max_half_open_connections(int) {}$/;"	f	class:libtorrent::session_handle
set_max_threads	torrent/src/disk_io_thread_pool.cpp	/^	void disk_io_thread_pool::set_max_threads(int const i)$/;"	f	class:libtorrent::disk_io_thread_pool
set_max_uploads	torrent/src/session_handle.cpp	/^	void session_handle::set_max_uploads(int limit)$/;"	f	class:libtorrent::session_handle
set_max_uploads	torrent/src/session_impl.cpp	/^	void session_impl::set_max_uploads(int limit)$/;"	f	class:libtorrent::aux::session_impl
set_max_uploads	torrent/src/torrent.cpp	/^	void torrent::set_max_uploads(int limit, bool const state_update)$/;"	f	class:libtorrent::torrent
set_max_uploads	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_max_uploads(int max_uploads) const$/;"	f	class:libtorrent::torrent_handle
set_merkle_tree	torrent/include/libtorrent/torrent_info.hpp	/^		void set_merkle_tree(std::vector<sha1_hash>& h)$/;"	f	class:libtorrent::torrent_info
set_metadata	torrent/include/libtorrent/torrent_handle.hpp	/^		bool set_metadata(char const* metadata, int size) const$/;"	f	struct:libtorrent::torrent_handle
set_metadata	torrent/src/torrent.cpp	/^	bool torrent::set_metadata(span<char const> metadata_buf)$/;"	f	class:libtorrent::torrent
set_metadata	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::set_metadata(span<char const> metadata) const$/;"	f	class:libtorrent::torrent_handle
set_name	torrent/include/libtorrent/file_storage.hpp	/^		void set_name(std::string const& n) { m_name = n; }$/;"	f	class:libtorrent::file_storage
set_name	torrent/src/file_storage.cpp	/^	void file_storage::set_name(std::wstring const& n)$/;"	f	class:libtorrent::file_storage
set_name	torrent/src/file_storage.cpp	/^	void internal_file_entry::set_name(string_view n, bool const borrow_string)$/;"	f	class:libtorrent::internal_file_entry
set_name_lookup	torrent/include/libtorrent/i2p_stream.hpp	/^	void set_name_lookup(char const* name) { m_name_lookup = name; }$/;"	f	class:libtorrent::i2p_stream
set_nbd_error	virt-p2v/src/nbd.c	/^set_nbd_error (const char *fs, ...)$/;"	f	file:
set_nbd_option	virt-p2v/src/nbd.c	/^set_nbd_option (const char *opt)$/;"	f
set_need_save_resume	torrent/include/libtorrent/torrent.hpp	/^		void set_need_save_resume()$/;"	f	class:libtorrent::torrent
set_need_tick	torrent/include/libtorrent/storage.hpp	/^		bool set_need_tick()$/;"	f	struct:libtorrent::storage_interface
set_network	src/socket.c	/^int set_network(const char *ip, const char *netmask)$/;"	f
set_network_map_from_ui	virt-p2v/src/gui.c	/^set_network_map_from_ui (struct config *config)$/;"	f	file:
set_no_connect	torrent/include/libtorrent/http_stream.hpp	/^	void set_no_connect(bool c) { m_no_connect = c; }$/;"	f	class:libtorrent::http_stream
set_not_have	torrent/include/libtorrent/piece_picker.hpp	/^			void set_not_have() { index = prio_index_t(0); TORRENT_ASSERT(!have()); }$/;"	f	struct:libtorrent::piece_picker::piece_pos
set_notify_function	torrent/src/alert_manager.cpp	/^	void alert_manager::set_notify_function(std::function<void()> const& fun)$/;"	f	class:libtorrent::alert_manager
set_num_pieces	torrent/include/libtorrent/file_storage.hpp	/^		void set_num_pieces(int n) { m_num_pieces = n; }$/;"	f	class:libtorrent::file_storage
set_option	torrent/include/libtorrent/aux_/socket_type.hpp	/^		error_code set_option(SettableSocketOption const& opt, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
set_option	torrent/include/libtorrent/aux_/socket_type.hpp	/^		void set_option(SettableSocketOption const& opt)$/;"	f	struct:libtorrent::aux::socket_type
set_option	torrent/include/libtorrent/proxy_base.hpp	/^	error_code set_option(SettableSocketOption const& opt, error_code& ec)$/;"	f	class:libtorrent::proxy_base
set_option	torrent/include/libtorrent/proxy_base.hpp	/^	void set_option(SettableSocketOption const& opt)$/;"	f	class:libtorrent::proxy_base
set_option	torrent/include/libtorrent/ssl_stream.hpp	/^	error_code set_option(SettableSocketOption const& opt, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
set_option	torrent/include/libtorrent/ssl_stream.hpp	/^	void set_option(SettableSocketOption const& opt)$/;"	f	class:libtorrent::ssl_stream
set_option	torrent/include/libtorrent/udp_socket.hpp	/^		void set_option(SocketOption const& opt, error_code& ec)$/;"	f	class:libtorrent::udp_socket
set_option	torrent/include/libtorrent/utp_stream.hpp	/^	error_code set_option(SettableSocketOption const&, error_code& ec) { return ec; }$/;"	f	struct:libtorrent::utp_stream
set_option	torrent/include/libtorrent/utp_stream.hpp	/^	void set_option(SettableSocketOption const&) {}$/;"	f	struct:libtorrent::utp_stream
set_outgoing_key	torrent/src/pe_crypto.cpp	/^	void rc4_handler::set_outgoing_key(span<char const> key)$/;"	f	class:libtorrent::rc4_handler
set_outstanding_jobs	torrent/include/libtorrent/block_cache.hpp	/^			set_outstanding_jobs,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
set_owner	torrent/include/libtorrent/storage.hpp	/^		void set_owner(std::shared_ptr<void> const& tor) { m_torrent = tor; }$/;"	f	struct:libtorrent::storage_interface
set_packet_head	src/socket.c	/^void set_packet_head(char *buf, int cmd, int data_size, char data_type, int req_flag)$/;"	f
set_packet_token	src/client.c	/^static int set_packet_token(struct client *cli)$/;"	f	file:
set_padding	virt-p2v/include/gui-gtk3-compat.h	108;"	d
set_padding	virt-p2v/include/gui-gtk3-compat.h	135;"	d
set_paused	torrent/src/torrent.cpp	/^	void torrent::set_paused(bool const b, pause_flags_t flags)$/;"	f	class:libtorrent::torrent
set_pe_settings	torrent/src/session_handle.cpp	/^	void session_handle::set_pe_settings(pe_settings const& r)$/;"	f	class:libtorrent::session_handle
set_peer	torrent/include/libtorrent/torrent_handle.hpp	/^		void set_peer(tcp::endpoint const& ep)$/;"	f	struct:libtorrent::block_info
set_peer_class	torrent/src/session_handle.cpp	/^	void session_handle::set_peer_class(peer_class_t cid, peer_class_info const& pci)$/;"	f	class:libtorrent::session_handle
set_peer_class	torrent/src/session_impl.cpp	/^	void session_impl::set_peer_class(peer_class_t const cid, peer_class_info const& pci)$/;"	f	class:libtorrent::aux::session_impl
set_peer_class_filter	torrent/src/session_handle.cpp	/^	void session_handle::set_peer_class_filter(ip_filter const& f)$/;"	f	class:libtorrent::session_handle
set_peer_class_filter	torrent/src/session_impl.cpp	/^	void session_impl::set_peer_class_filter(ip_filter const& f)$/;"	f	class:libtorrent::aux::session_impl
set_peer_class_type_filter	torrent/src/session_handle.cpp	/^	void session_handle::set_peer_class_type_filter(peer_class_type_filter const& f)$/;"	f	class:libtorrent::session_handle
set_peer_class_type_filter	torrent/src/session_impl.cpp	/^	void session_impl::set_peer_class_type_filter(peer_class_type_filter f)$/;"	f	class:libtorrent::aux::session_impl
set_peer_classes	torrent/src/session_impl.cpp	/^	void session_impl::set_peer_classes(peer_class_set* s, address const& a, int const st)$/;"	f	class:libtorrent::aux::session_impl
set_peer_download_limit	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_peer_download_limit(tcp::endpoint, int \/* limit *\/) const {}$/;"	f	class:libtorrent::torrent_handle
set_peer_id	torrent/src/session_handle.cpp	/^	void session_handle::set_peer_id(peer_id const& id)$/;"	f	class:libtorrent::session_handle
set_peer_proxy	torrent/src/session_handle.cpp	/^	void session_handle::set_peer_proxy(proxy_settings const& s)$/;"	f	class:libtorrent::session_handle
set_peer_upload_limit	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_peer_upload_limit(tcp::endpoint, int \/* limit *\/) const {}$/;"	f	class:libtorrent::torrent_handle
set_physicaldrive_offset	torrent/include/libtorrent/file_storage.hpp	/^		void set_physicaldrive_offset(const std::uint64_t physicaldrive_offset) $/;"	f	class:libtorrent::file_storage
set_physicaldrive_offset	torrent/include/libtorrent/torrent_info.hpp	/^        void set_physicaldrive_offset(const std::uint64_t physicaldrive_offset) $/;"	f	class:libtorrent::torrent_info
set_pid	torrent/include/libtorrent/peer_connection.hpp	/^		void set_pid(peer_id const& peer_id) { m_peer_id = peer_id; }$/;"	f	class:libtorrent::peer_connection
set_piece_deadline	torrent/src/torrent.cpp	/^	void torrent::set_piece_deadline(piece_index_t const piece, int const t$/;"	f	class:libtorrent::torrent
set_piece_deadline	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_piece_deadline(piece_index_t index, int deadline$/;"	f	class:libtorrent::torrent_handle
set_piece_hashes	torrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t$/;"	f	namespace:libtorrent
set_piece_hashes	torrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::string const& p$/;"	f	namespace:libtorrent
set_piece_hashes	torrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::string const& p)$/;"	f	namespace:libtorrent
set_piece_hashes	torrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::string const& p, error_code& ec)$/;"	f	namespace:libtorrent
set_piece_hashes	torrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::wstring const& p$/;"	f	namespace:libtorrent
set_piece_hashes	torrent/include/libtorrent/create_torrent.hpp	/^	inline void set_piece_hashes(create_torrent& t, std::wstring const& p)$/;"	f	namespace:libtorrent
set_piece_hashes	torrent/src/create_torrent.cpp	/^	void set_piece_hashes(create_torrent& t, std::string const& p$/;"	f	namespace:libtorrent
set_piece_hashes	torrent/src/create_torrent.cpp	/^	void set_piece_hashes(create_torrent& t, std::wstring const& p$/;"	f	namespace:libtorrent
set_piece_hashes_deprecated	torrent/src/create_torrent.cpp	/^	void set_piece_hashes_deprecated(create_torrent& t, std::wstring const& p$/;"	f	namespace:libtorrent
set_piece_length	torrent/include/libtorrent/file_storage.hpp	/^		void set_piece_length(int l)  { m_piece_length = l; }$/;"	f	class:libtorrent::file_storage
set_piece_priority	torrent/src/piece_picker.cpp	/^	bool piece_picker::set_piece_priority(piece_index_t const index$/;"	f	class:libtorrent::piece_picker
set_piece_priority	torrent/src/torrent.cpp	/^	void torrent::set_piece_priority(piece_index_t const index$/;"	f	class:libtorrent::torrent
set_pinged	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	void set_pinged() { if (timeout_count == 0xff) timeout_count = 0; }$/;"	f	struct:libtorrent::dht::node_entry
set_pinned	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_pinned(bool) const {}$/;"	f	class:libtorrent::torrent_handle
set_pipe	qt_pro/external.cpp	/^int set_pipe(int pipe[2])$/;"	f
set_port_filter	torrent/src/session_handle.cpp	/^	void session_handle::set_port_filter(port_filter const& f)$/;"	f	class:libtorrent::session_handle
set_port_filter	torrent/src/session_impl.cpp	/^	void session_impl::set_port_filter(port_filter const& f)$/;"	f	class:libtorrent::aux::session_impl
set_pos	torrent/bak/session_view.cpp	/^void session_view::set_pos(int pos)$/;"	f	class:session_view
set_priority	torrent/src/torrent.cpp	/^	void torrent::set_priority(int const prio)$/;"	f	class:libtorrent::torrent
set_priority	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_priority(int const p) const$/;"	f	class:libtorrent::torrent_handle
set_priv	torrent/include/libtorrent/create_torrent.hpp	/^		void set_priv(bool p) { m_private = p; }$/;"	f	struct:libtorrent::create_torrent
set_progress_ppm	torrent/include/libtorrent/torrent.hpp	/^		void set_progress_ppm(int p) { m_progress_ppm = std::uint32_t(p); }$/;"	f	class:libtorrent::torrent
set_proxy	torrent/include/libtorrent/proxy_base.hpp	/^	void set_proxy(std::string hostname, int port)$/;"	f	class:libtorrent::proxy_base
set_proxy	torrent/src/session_handle.cpp	/^	void session_handle::set_proxy(proxy_settings const& s)$/;"	f	class:libtorrent::session_handle
set_proxy_settings	torrent/src/udp_socket.cpp	/^void udp_socket::set_proxy_settings(aux::proxy_settings const& ps$/;"	f	class:libtorrent::udp_socket
set_queue_position	torrent/src/session_impl.cpp	/^	void session_impl::set_queue_position(torrent* me, queue_position_t p)$/;"	f	class:libtorrent::aux::session_impl
set_queue_position	torrent/src/torrent.cpp	/^	void torrent::set_queue_position(queue_position_t const p)$/;"	f	class:libtorrent::torrent
set_queue_position_impl	torrent/include/libtorrent/torrent.hpp	/^		void set_queue_position_impl(queue_position_t const p)$/;"	f	class:libtorrent::torrent
set_rate_limit	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^		void set_rate_limit(int l)$/;"	f	struct:libtorrent::dht::dos_blocker
set_rate_limit	torrent/src/session_impl.cpp	/^	void session_impl::set_rate_limit(peer_class_t c, int channel, int limit)$/;"	f	class:libtorrent::aux::session_impl
set_ratio	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_ratio(float) const {}$/;"	f	class:libtorrent::torrent_handle
set_removable_from_ui	virt-p2v/src/gui.c	/^set_removable_from_ui (struct config *config)$/;"	f	file:
set_request_head	qt_pro/pipethread.cpp	/^void set_request_head(char *buf, char encrypt_flag, short cmd, int data_size)$/;"	f
set_request_head	src/socket.c	/^void set_request_head(char *buf, char encrypt_flag, short cmd, int data_size)$/;"	f
set_request_head	src/torrent.cpp	/^void set_request_head(char *buf, char encrypt_flag, short cmd, int data_size)$/;"	f
set_root_cert	torrent/src/create_torrent.cpp	/^	void create_torrent::set_root_cert(string_view cert)$/;"	f	class:libtorrent::create_torrent
set_running	virt-p2v/src/conversion.c	/^set_running (int r)$/;"	f	file:
set_seed	torrent/src/peer_list.cpp	/^	void peer_list::set_seed(torrent_peer* p, bool s)$/;"	f	class:libtorrent::peer_list
set_seed	torrent/src/torrent.cpp	/^	void torrent::set_seed(torrent_peer* p, bool const s)$/;"	f	class:libtorrent::torrent
set_send_barrier	torrent/include/libtorrent/peer_connection.hpp	/^		void set_send_barrier(int bytes)$/;"	f	class:libtorrent::peer_connection
set_sequential_download	torrent/src/torrent.cpp	/^	void torrent::set_sequential_download(bool const sd)$/;"	f	class:libtorrent::torrent
set_sequential_download	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_sequential_download(bool sd) const$/;"	f	class:libtorrent::torrent_handle
set_session_id	torrent/include/libtorrent/i2p_stream.hpp	/^	void set_session_id(char const* id) { m_id = id; }$/;"	f	class:libtorrent::i2p_stream
set_session_paused	torrent/src/torrent.cpp	/^	void torrent::set_session_paused(bool const b)$/;"	f	class:libtorrent::torrent
set_settings	torrent/src/block_cache.cpp	/^void block_cache::set_settings(aux::session_settings const& sett)$/;"	f	class:libtorrent::block_cache
set_settings	torrent/src/disk_buffer_pool.cpp	/^	void disk_buffer_pool::set_settings(aux::session_settings const& sett)$/;"	f	class:libtorrent::disk_buffer_pool
set_severity_level	torrent/src/session_handle.cpp	/^	void session_handle::set_severity_level(alert::severity_t s)$/;"	f	class:libtorrent::session_handle
set_share_mode	torrent/src/peer_connection.cpp	/^	void peer_connection::set_share_mode(bool u)$/;"	f	class:libtorrent::peer_connection
set_share_mode	torrent/src/torrent.cpp	/^	void torrent::set_share_mode(bool s)$/;"	f	class:libtorrent::torrent
set_share_mode	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_share_mode(bool b) const$/;"	f	class:libtorrent::torrent_handle
set_size	torrent/bak/torrent_view.cpp	/^void torrent_view::set_size(int width, int height)$/;"	f	class:torrent_view
set_size	torrent/src/file.cpp	/^	bool file::set_size(std::int64_t s, error_code& ec)$/;"	f	class:libtorrent::file
set_socket_buffer_size	torrent/include/libtorrent/aux_/set_socket_buffer.hpp	/^	void set_socket_buffer_size(Socket& s, session_settings const& sett, error_code& ec)$/;"	f	namespace:libtorrent::aux
set_source_feed_url	torrent/include/libtorrent/torrent.hpp	/^		void set_source_feed_url(std::string const& s) { m_source_feed_url = s; }$/;"	f	class:libtorrent::torrent
set_ssh_error	virt-p2v/src/ssh.c	/^set_ssh_error (const char *fs, ...)$/;"	f	file:
set_ssh_internal_error	virt-p2v/src/ssh.c	98;"	d	file:
set_ssh_mexp_error	virt-p2v/src/ssh.c	101;"	d	file:
set_ssh_pcre_error	virt-p2v/src/ssh.c	103;"	d	file:
set_ssh_unexpected_eof	virt-p2v/src/ssh.c	106;"	d	file:
set_ssh_unexpected_timeout	virt-p2v/src/ssh.c	109;"	d	file:
set_ssl_cert	torrent/src/torrent.cpp	/^	void torrent::set_ssl_cert(std::string const& certificate$/;"	f	class:libtorrent::torrent
set_ssl_cert_buffer	torrent/src/torrent.cpp	/^	void torrent::set_ssl_cert_buffer(std::string const& certificate$/;"	f	class:libtorrent::torrent
set_ssl_certificate	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_ssl_certificate($/;"	f	class:libtorrent::torrent_handle
set_ssl_certificate_buffer	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_ssl_certificate_buffer($/;"	f	class:libtorrent::torrent_handle
set_state	torrent/src/torrent.cpp	/^	void torrent::set_state(torrent_status::state_t const s)$/;"	f	class:libtorrent::torrent
set_state	torrent/src/utp_stream.cpp	/^void utp_socket_impl::set_state(int s)$/;"	f	class:libtorrent::utp_socket_impl
set_status	virt-p2v/src/gui.c	/^set_status (gpointer user_data)$/;"	f	file:
set_storage_index	torrent/include/libtorrent/storage.hpp	/^		void set_storage_index(storage_index_t st) { m_storage_index = st; }$/;"	f	struct:libtorrent::storage_interface
set_str	torrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_str(int name, std::string value)$/;"	f	struct:libtorrent::aux::session_settings
set_str	torrent/include/libtorrent/aux_/session_settings.hpp	/^		void set_str(int name, std::string value)$/;"	f	struct:libtorrent::aux::session_settings_single_thread
set_str	torrent/src/settings_pack.cpp	/^	void settings_pack::set_str(int const name, std::string val)$/;"	f	class:libtorrent::settings_pack
set_super_seeding	torrent/src/torrent.cpp	/^	void torrent::set_super_seeding(bool on)$/;"	f	class:libtorrent::torrent
set_target	torrent/kademlia/rpc_manager.cpp	/^void observer::set_target(udp::endpoint const& ep)$/;"	f	class:libtorrent::dht::observer
set_targets	torrent/kademlia/put_data.cpp	/^void put_data::set_targets(std::vector<std::pair<node_entry, std::string>> const& targets)$/;"	f	class:libtorrent::dht::put_data
set_timeout	torrent/src/tracker_manager.cpp	/^	void timeout_handler::set_timeout(int completion_timeout, int read_timeout)$/;"	f	class:libtorrent::timeout_handler
set_torrent_params	torrent/bak/client_test.cpp	/^void set_torrent_params(lt::add_torrent_params& p)$/;"	f
set_tos	torrent/src/session_impl.cpp	/^		void set_tos(Socket& s, int v, error_code& ec)$/;"	f	namespace:libtorrent::aux::__anon53
set_tracker_login	torrent/src/torrent.cpp	/^	void torrent::set_tracker_login(std::string const& name$/;"	f	class:libtorrent::torrent
set_tracker_login	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_tracker_login(std::string const& name$/;"	f	class:libtorrent::torrent_handle
set_tracker_proxy	torrent/src/session_handle.cpp	/^	void session_handle::set_tracker_proxy(proxy_settings const& s)$/;"	f	class:libtorrent::session_handle
set_upload_limit	torrent/src/peer_class.cpp	/^	void peer_class::set_upload_limit(int limit)$/;"	f	class:libtorrent::peer_class
set_upload_limit	torrent/src/torrent.cpp	/^	void torrent::set_upload_limit(int const limit)$/;"	f	class:libtorrent::torrent
set_upload_limit	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_upload_limit(int limit) const$/;"	f	class:libtorrent::torrent_handle
set_upload_mode	torrent/src/torrent.cpp	/^	void torrent::set_upload_mode(bool b)$/;"	f	class:libtorrent::torrent
set_upload_mode	torrent/src/torrent_handle.cpp	/^	void torrent_handle::set_upload_mode(bool b) const$/;"	f	class:libtorrent::torrent_handle
set_upload_only	torrent/src/peer_connection.cpp	/^	void peer_connection::set_upload_only(bool u)$/;"	f	class:libtorrent::peer_connection
set_upload_rate_limit	torrent/src/session_handle.cpp	/^	void session_handle::set_upload_rate_limit(int bytes_per_second)$/;"	f	class:libtorrent::session_handle
set_upload_rate_limit	torrent/src/session_impl.cpp	/^	void session_impl::set_upload_rate_limit(peer_class_t c, int limit)$/;"	f	class:libtorrent::aux::session_impl
set_upload_rate_limit_depr	torrent/src/session_impl.cpp	/^	void session_impl::set_upload_rate_limit_depr(int bytes_per_second)$/;"	f	class:libtorrent::aux::session_impl
set_url	torrent/include/libtorrent/torrent.hpp	/^		void set_url(std::string const& s) { m_url = s; }$/;"	f	class:libtorrent::torrent
set_username	torrent/include/libtorrent/http_stream.hpp	/^	void set_username(std::string const& user$/;"	f	class:libtorrent::http_stream
set_username	torrent/include/libtorrent/socks5_stream.hpp	/^	void set_username(std::string const& user$/;"	f	class:libtorrent::socks5_stream
set_ut_pex	torrent/include/libtorrent/bt_peer_connection.hpp	/^		void set_ut_pex(std::weak_ptr<ut_pex_peer_store> ut_pex)$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
set_utp_stream_logging	torrent/src/utp_stream.cpp	/^void set_utp_stream_logging(bool enable) {$/;"	f	namespace:libtorrent
set_uuid	torrent/include/libtorrent/torrent.hpp	/^		void set_uuid(std::string const& s) { m_uuid = s; }$/;"	f	class:libtorrent::torrent
set_value	torrent/kademlia/dht_storage.cpp	/^	void set_value(dht_immutable_item& item, span<char const> buf)$/;"	f	namespace:libtorrent::dht::__anon153
set_verify_callback	torrent/include/libtorrent/ssl_stream.hpp	/^	void set_verify_callback(T const& fun, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
set_version	torrent/include/libtorrent/socks5_stream.hpp	/^	void set_version(int v) { m_version = v; }$/;"	f	class:libtorrent::socks5_stream
set_web_seed_proxy	torrent/src/session_handle.cpp	/^	void session_handle::set_web_seed_proxy(proxy_settings const&)$/;"	f	class:libtorrent::session_handle
set_web_seeds	torrent/src/torrent_info.cpp	/^	void torrent_info::set_web_seeds(std::vector<web_seed_entry> seeds)$/;"	f	class:libtorrent::torrent_info
set_width	torrent/bak/session_view.cpp	/^void session_view::set_width(int width)$/;"	f	class:session_view
setenv	virt-p2v/include/gnulib/stdlib.h	/^_GL_CXXALIASWARN (setenv);$/;"	v
setenv	virt-p2v/include/gnulib/stdlib.h	1453;"	d
sethostname	virt-p2v/include/gnulib/unistd.h	1939;"	d
setstate	virt-p2v/include/gnulib/stdlib.h	1203;"	d
setstate_r	virt-p2v/include/gnulib/stdlib.h	1324;"	d
sett	torrent/include/libtorrent/peer_connection.hpp	/^		aux::session_settings const* sett;$/;"	m	class:libtorrent::peer_connection_args::aux
setting_by_name	torrent/src/settings_pack.cpp	/^	int setting_by_name(string_view const key)$/;"	f	namespace:libtorrent
settings	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^	struct settings : dht_settings$/;"	s	namespace:libtorrent::dht
settings	torrent/include/libtorrent/kademlia/node.hpp	/^	dht::settings const& settings() const { return m_settings; }$/;"	f	class:libtorrent::dht::node::dht
settings	torrent/include/libtorrent/session.hpp	/^		settings_pack settings;$/;"	m	struct:libtorrent::session_params
settings	torrent/include/libtorrent/storage.hpp	/^		aux::session_settings const& settings() const { return *m_settings; }$/;"	f	class:libtorrent::storage_interface::aux
settings	torrent/include/libtorrent/tracker_manager.hpp	/^		aux::session_settings const& settings() const { return m_settings; }$/;"	f	class:libtorrent::final::aux
settings	torrent/src/torrent.cpp	/^	aux::session_settings const& torrent::settings() const$/;"	f	class:libtorrent::aux::torrent
settings_pack	torrent/include/libtorrent/settings_pack.hpp	/^	struct TORRENT_EXPORT settings_pack$/;"	s	namespace:libtorrent
settings_updated	torrent/src/disk_io_thread.cpp	/^	void disk_io_thread::settings_updated()$/;"	f	class:disk_io_thread
setupUi	qt_pro/ui_downloadwindow.h	/^    void setupUi(QWidget *DownloadWindow)$/;"	f	class:Ui_DownloadWindow
setupUi	qt_pro/ui_errodialog.h	/^    void setupUi(QDialog *ErroDialog)$/;"	f	class:Ui_ErroDialog
setup_listener	torrent/src/session_impl.cpp	/^	std::shared_ptr<listen_socket_t> session_impl::setup_listener($/;"	f	class:libtorrent::aux::session_impl
setup_peer_class	torrent/src/torrent.cpp	/^	void torrent::setup_peer_class()$/;"	f	class:libtorrent::torrent
setup_receive	torrent/src/peer_connection.cpp	/^	void peer_connection::setup_receive()$/;"	f	class:libtorrent::peer_connection
setup_send	torrent/src/peer_connection.cpp	/^	void peer_connection::setup_send()$/;"	f	class:libtorrent::peer_connection
setup_ssl_hostname	torrent/src/socket_type.cpp	/^	void setup_ssl_hostname(socket_type& s, std::string const& hostname, error_code& ec)$/;"	f	namespace:libtorrent::aux
setusershell	virt-p2v/include/gnulib/unistd.h	1515;"	d
severity	torrent/include/libtorrent/alert.hpp	/^		severity_t severity() const { return warning; }$/;"	f	class:libtorrent::alert
severity_t	torrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	g	class:libtorrent::alert
sha1_ctx	torrent/include/libtorrent/sha1.hpp	/^	struct sha1_ctx$/;"	s	namespace:libtorrent
sha512_compress	torrent/src/sha512.cpp	/^static int sha512_compress(sha512_ctx *md, unsigned char *buf)$/;"	f	namespace:libtorrent
sha512_ctx	torrent/include/libtorrent/sha512.hpp	/^	struct sha512_ctx$/;"	s	namespace:libtorrent
shareData	include/StoreConfig.h	/^    YZYGUID             shareData;      \/\/å±äº«æ°æ®ç GUID$/;"	m	struct:_YZY_STORE_CONFIG
shareLevel	include/StoreConfig.h	/^    uint32_t            shareLevel; $/;"	m	struct:_YZY_STORE_CONFIG
share_mode	torrent/bak/client_test.cpp	/^bool share_mode = false;$/;"	v
share_mode	torrent/include/libtorrent/peer_connection.hpp	/^		bool share_mode() const { return m_share_mode; }$/;"	f	class:libtorrent::peer_connection
share_mode	torrent/include/libtorrent/torrent.hpp	/^		bool share_mode() const { return m_share_mode; }$/;"	f	class:libtorrent::torrent
share_mode	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t share_mode = 2_bit;$/;"	m	namespace:libtorrent::torrent_flags
share_mode	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER share_mode = false;$/;"	m	struct:libtorrent::torrent_status
share_mode_msg	torrent/include/libtorrent/bt_peer_connection.hpp	/^			share_mode_msg = 8$/;"	e	enum:libtorrent::bt_peer_connection::__anon16
share_mode_target	torrent/include/libtorrent/settings_pack.hpp	/^			share_mode_target,$/;"	e	enum:libtorrent::settings_pack::int_types
share_ratio_limit	torrent/include/libtorrent/settings_pack.hpp	/^			share_ratio_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
shared_from_this	torrent/include/libtorrent/http_tracker_connection.hpp	/^		std::shared_ptr<http_tracker_connection> shared_from_this()$/;"	f	class:libtorrent::http_tracker_connection
shared_from_this	torrent/include/libtorrent/tracker_manager.hpp	/^		std::shared_ptr<tracker_connection> shared_from_this()$/;"	f	struct:libtorrent::tracker_connection
shared_from_this	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::shared_ptr<udp_tracker_connection> shared_from_this()$/;"	f	class:libtorrent::udp_tracker_connection
sharedstatedir	torrent/include/libtorrent/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
shift_left	torrent/ed25519/fe.cpp	/^static inline i64 shift_left(i64 v, int s) {$/;"	f	file:
shift_left	torrent/ed25519/sc.cpp	/^static inline i64 shift_left(i64 v, int s) {$/;"	f	file:
short_timeout	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	static constexpr traversal_flags_t short_timeout = 1_bit;$/;"	m	struct:libtorrent::dht::traversal_algorithm
short_timeout	torrent/kademlia/rpc_manager.cpp	/^void observer::short_timeout()$/;"	f	class:libtorrent::dht::observer
short_timeout	torrent/kademlia/traversal_algorithm.cpp	/^constexpr traversal_flags_t traversal_algorithm::short_timeout;$/;"	m	class:libtorrent::dht::traversal_algorithm	file:
should_announce_dht	torrent/src/torrent.cpp	/^	bool torrent::should_announce_dht() const$/;"	f	class:libtorrent::torrent
should_check_files	torrent/src/torrent.cpp	/^	bool torrent::should_check_files() const$/;"	f	class:libtorrent::torrent
should_delete	torrent/src/utp_stream.cpp	/^bool should_delete(utp_socket_impl* s)$/;"	f	namespace:libtorrent
should_delete	torrent/src/utp_stream.cpp	/^bool utp_socket_impl::should_delete() const$/;"	f	class:libtorrent::utp_socket_impl
should_erase_immediately	torrent/src/peer_list.cpp	/^	bool peer_list::should_erase_immediately(torrent_peer const& p) const$/;"	f	class:libtorrent::peer_list
should_exit	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		bool should_exit() { return m_threads_to_exit > 0; }$/;"	f	struct:libtorrent::disk_io_thread_pool
should_log	torrent/src/lsd.cpp	/^bool lsd::should_log() const$/;"	f	class:libtorrent::lsd
should_log	torrent/src/natpmp.cpp	/^bool natpmp::should_log() const$/;"	f	class:libtorrent::natpmp
should_log	torrent/src/peer_connection.cpp	/^	bool peer_connection::should_log(peer_log_alert::direction_t) const$/;"	f	class:libtorrent::peer_connection
should_log	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::should_log(peer_log_alert::direction_t direction) const$/;"	f	class:libtorrent::peer_connection_handle
should_log	torrent/src/session_impl.cpp	/^		bool tracker_logger::should_log() const$/;"	f	class:libtorrent::aux::tracker_logger
should_log	torrent/src/session_impl.cpp	/^	bool session_impl::should_log() const$/;"	f	class:libtorrent::aux::session_impl
should_log	torrent/src/session_impl.cpp	/^	bool session_impl::should_log(module_t) const$/;"	f	class:libtorrent::aux::session_impl
should_log	torrent/src/torrent.cpp	/^	bool torrent::should_log() const$/;"	f	class:libtorrent::torrent
should_log	torrent/src/upnp.cpp	/^bool upnp::should_log() const$/;"	f	class:libtorrent::upnp
should_log_lsd	torrent/src/session_impl.cpp	/^	bool session_impl::should_log_lsd() const$/;"	f	class:libtorrent::aux::session_impl
should_log_portmap	torrent/src/session_impl.cpp	/^	bool session_impl::should_log_portmap(portmap_transport) const$/;"	f	class:libtorrent::aux::session_impl
should_post	torrent/include/libtorrent/alert_manager.hpp	/^		bool should_post() const$/;"	f	class:libtorrent::alert_manager
showErrorDialog	qt_pro/uploadwindow.cpp	/^void Uploadwindow::showErrorDialog(char *err_msg)$/;"	f	class:Uploadwindow
showEvent	qt_pro/configwindow.cpp	/^void ConfigWindow::showEvent(QShowEvent *e)$/;"	f	class:ConfigWindow
showEvent	qt_pro/dialogwindow.cpp	/^void DialogWindow::showEvent(QShowEvent *e)$/;"	f	class:DialogWindow
showEvent	qt_pro/uploadwindow.cpp	/^void Uploadwindow::showEvent(QShowEvent *e)$/;"	f	class:Uploadwindow
show_connection_dialog	virt-p2v/src/gui.c	/^show_connection_dialog (void)$/;"	f	file:
show_conversion_dialog	virt-p2v/src/gui.c	/^show_conversion_dialog (void)$/;"	f	file:
show_dht_status	torrent/bak/client_test.cpp	/^bool show_dht_status = false;$/;"	v
show_pad_files	torrent/bak/client_test.cpp	/^bool show_pad_files = false;$/;"	v
show_running_dialog	virt-p2v/src/gui.c	/^show_running_dialog (void)$/;"	f	file:
show_torrent	torrent/bak/torrent_view.cpp	/^bool torrent_view::show_torrent(lt::torrent_status const& st)$/;"	f	class:torrent_view
shrink_factor	virt-p2v/include/gnulib/hash.h	/^    float shrink_factor;        \/* ratio of new smaller size to original size *\/$/;"	m	struct:hash_tuning
shrink_threshold	virt-p2v/include/gnulib/hash.h	/^    float shrink_threshold;     \/* ratio of used buckets to trigger a shrink *\/$/;"	m	struct:hash_tuning
shuffle	torrent/src/piece_picker.cpp	/^	void piece_picker::shuffle(int const priority, prio_index_t const elem_index)$/;"	f	class:libtorrent::piece_picker
shutdown	torrent/include/libtorrent/ssl_stream.hpp	/^	void shutdown(error_code& ec)$/;"	f	class:libtorrent::ssl_stream
shutdown_actions	virt-p2v/src/gui.c	/^static const GActionEntry shutdown_actions[] = {$/;"	v	file:
shutdown_button	virt-p2v/src/gui.c	/^  *cancel_button, *shutdown_button;$/;"	v	file:
shutdown_button_clicked	virt-p2v/src/gui.c	/^shutdown_button_clicked (GtkToolButton *w, gpointer data)$/;"	f	file:
shutdown_clicked	virt-p2v/src/gui.c	/^shutdown_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
sig	torrent/include/libtorrent/kademlia/item.hpp	/^	signature const& sig() const$/;"	f	class:libtorrent::dht::item
sig_quit_listen	src/main.c	/^static void sig_quit_listen(int e)$/;"	f	file:
sig_quit_listen	test/test.c	/^static void sig_quit_listen(int e)$/;"	f	file:
sign_mutable_item	torrent/kademlia/item.cpp	/^signature sign_mutable_item($/;"	f	namespace:libtorrent::dht
signal_handler	torrent/bak/client_test.cpp	/^void signal_handler(int)$/;"	f
signature	include/gpt.h	/^    uint64_t  signature;$/;"	m	struct:__anon6
signature	torrent/include/libtorrent/kademlia/types.hpp	/^		explicit signature(char const* b)$/;"	f	struct:libtorrent::dht::signature
signature	torrent/include/libtorrent/kademlia/types.hpp	/^	struct signature$/;"	s	namespace:libtorrent::dht
sim	torrent/include/libtorrent/io_service_fwd.hpp	/^namespace sim { namespace asio {$/;"	n
similar_torrents	torrent/src/torrent_info.cpp	/^	std::vector<sha1_hash> torrent_info::similar_torrents() const$/;"	f	class:libtorrent::torrent_info
single_element	virt-p2v/include/libxml2-writer-macros.h	89;"	d
single_element	virt-p2v/libguestfs/libxml2-writer-macros.h	89;"	d
single_element_format	virt-p2v/include/libxml2-writer-macros.h	104;"	d
single_element_format	virt-p2v/libguestfs/libxml2-writer-macros.h	104;"	d
single_threaded	torrent/include/libtorrent/debug.hpp	/^		single_threaded(): m_id() {}$/;"	f	struct:libtorrent::single_threaded
single_threaded	torrent/include/libtorrent/debug.hpp	/^	struct TORRENT_EXTRA_EXPORT single_threaded$/;"	s	namespace:libtorrent
siocgifmtu	torrent/src/enum_net.cpp	/^const unsigned long siocgifmtu = SIOCGIFMTU;$/;"	v
size	include/gpt.h	/^    uint32_t  size;$/;"	m	struct:__anon4
size	include/qcow2.h	/^    uint64_t size; \/* in bytes *\/$/;"	m	struct:_QCowHeader
size	test/check.c	/^    uint64_t size; \/* in bytes *\/$/;"	m	struct:_QCowHeader	file:
size	torrent/bak/udp_tracker.cpp	/^	int size()$/;"	f	class:CDataStream
size	torrent/include/libtorrent/alert_types.hpp	/^		int const size;$/;"	m	struct:libtorrent::final
size	torrent/include/libtorrent/aux_/bind_to_device.hpp	/^		size_t size(Protocol const&) const { return strlen(m_value) + 1; }$/;"	f	struct:libtorrent::aux::bind_to_device
size	torrent/include/libtorrent/aux_/keepalive.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
size	torrent/include/libtorrent/aux_/keepalive.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
size	torrent/include/libtorrent/bloom_filter.hpp	/^		float size() const$/;"	f	struct:libtorrent::bloom_filter
size	torrent/include/libtorrent/buffer.hpp	/^	difference_type size() const { return m_size; }$/;"	f	class:libtorrent::buffer
size	torrent/include/libtorrent/chained_buffer.hpp	/^			int size = 0; \/\/ the total size of the buffer$/;"	m	struct:libtorrent::chained_buffer
size	torrent/include/libtorrent/chained_buffer.hpp	/^		int size() const { return m_bytes; }$/;"	f	namespace:libtorrent
size	torrent/include/libtorrent/disk_buffer_holder.hpp	/^		std::size_t size() const { return m_size; }$/;"	f	struct:libtorrent::disk_buffer_holder
size	torrent/include/libtorrent/file_storage.hpp	/^		std::int64_t size;$/;"	m	struct:libtorrent::file_entry
size	torrent/include/libtorrent/file_storage.hpp	/^		std::int64_t size;$/;"	m	struct:libtorrent::file_slice
size	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t size:48;$/;"	m	struct:libtorrent::internal_file_entry
size	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		int size() const { return m_num_items; }$/;"	f	struct:libtorrent::heterogeneous_queue
size	torrent/include/libtorrent/kademlia/msg.hpp	/^	int size;$/;"	m	struct:libtorrent::dht::key_desc_t
size	torrent/include/libtorrent/kademlia/node.hpp	/^	std::tuple<int, int, int> size() const { return m_table.size(); }$/;"	f	class:libtorrent::dht::node
size	torrent/include/libtorrent/kademlia/routing_table.hpp	/^	std::size_t size() const { return m_ip4s.size() + m_ip6s.size(); }$/;"	f	struct:libtorrent::dht::ip_set
size	torrent/include/libtorrent/linked_list.hpp	/^		int size() const { return m_size; }$/;"	f	struct:libtorrent::linked_list
size	torrent/include/libtorrent/netlink.hpp	/^		std::size_t size() const$/;"	f	class:libtorrent::basic_nl_endpoint
size	torrent/include/libtorrent/packet_buffer.hpp	/^		int size() const { return m_size; }$/;"	f	class:libtorrent::packet_buffer
size	torrent/include/libtorrent/packet_pool.hpp	/^		std::uint16_t size;$/;"	m	struct:libtorrent::packet
size	torrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::dont_fragment
size	torrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::exclusive_address_use
size	torrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::traffic_class
size	torrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::type_of_service
size	torrent/include/libtorrent/socket.hpp	/^		size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::v6_protection_level
size	torrent/include/libtorrent/socket.hpp	/^		std::size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::no_enobufs
size	torrent/include/libtorrent/socket.hpp	/^		std::size_t size(Protocol const&) const { return sizeof(m_value); }$/;"	f	struct:libtorrent::tcp_notsent_lowat
size	torrent/include/libtorrent/tailqueue.hpp	/^		int size() const { TORRENT_ASSERT(m_size >= 0); return m_size; }$/;"	f	struct:libtorrent::tailqueue
size	torrent/kademlia/dht_storage.cpp	/^		int size = 0;$/;"	m	struct:libtorrent::dht::__anon153::dht_immutable_item	file:
size	torrent/kademlia/routing_table.cpp	/^std::tuple<int, int, int> routing_table::size() const$/;"	f	class:libtorrent::dht::routing_table
size_divisible	torrent/include/libtorrent/kademlia/msg.hpp	/^		size_divisible = 8$/;"	e	enum:libtorrent::dht::key_desc_t::__anon28
size_limit	torrent/include/libtorrent/file_pool.hpp	/^		int size_limit() const { return m_size; }$/;"	f	struct:libtorrent::file_pool
sizeof	torrent/include/libtorrent/piece_picker.hpp	/^		static_assert(sizeof(piece_pos) == sizeof(char) * 8, "unexpected struct size");$/;"	m	class:libtorrent::piece_picker
skip	cJSON/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:
skip	src/cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:
sleep	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (sleep);$/;"	v
sleep	virt-p2v/include/gnulib/unistd.h	1967;"	d
sleep_and_input	torrent/bak/client_test.cpp	/^bool sleep_and_input(int* c, lt::time_duration const sleep)$/;"	f
slide	torrent/ed25519/ge.cpp	/^static void slide(signed char *r, const unsigned char *a) {$/;"	f	file:
sliding_average	torrent/include/libtorrent/sliding_average.hpp	/^	sliding_average(): m_mean(0), m_average_deviation(0), m_num_samples(0) {}$/;"	f	struct:libtorrent::sliding_average
sliding_average	torrent/include/libtorrent/sliding_average.hpp	/^struct sliding_average$/;"	s	namespace:libtorrent
slot_offset	torrent/include/libtorrent/part_file.hpp	/^		std::int64_t slot_offset(slot_index_t const slot) const$/;"	f	struct:libtorrent::part_file
slots_dhcpable	qt_pro/configwindow.cpp	/^void ConfigWindow::slots_dhcpable()$/;"	f	class:ConfigWindow
slots_dhcpable	qt_pro/dialogwindow.cpp	/^void DialogWindow::slots_dhcpable()$/;"	f	class:DialogWindow
slow	torrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	e	enum:libtorrent::partial_piece_info::state_t
smart_ban_plugin	torrent/src/smart_ban.cpp	/^		explicit smart_ban_plugin(torrent& t)$/;"	f	struct:libtorrent::__anon85::final
smooth_connects	torrent/include/libtorrent/settings_pack.hpp	/^			smooth_connects,$/;"	e	enum:libtorrent::settings_pack::bool_types
snapshots_offset	include/qcow2.h	/^    uint64_t snapshots_offset;$/;"	m	struct:_QCowHeader
snapshots_offset	test/check.c	/^    uint64_t snapshots_offset;$/;"	m	struct:_QCowHeader	file:
snprintf	virt-p2v/include/gnulib/stdio.h	1607;"	d
snub_peer	torrent/src/peer_connection.cpp	/^	void peer_connection::snub_peer()$/;"	f	class:libtorrent::peer_connection
snubbed	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t snubbed = 12_bit;$/;"	m	struct:libtorrent::peer_info
snubbed	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::snubbed;$/;"	m	class:libtorrent::peer_info	file:
snubbed_piece_picks	torrent/include/libtorrent/performance_counters.hpp	/^			snubbed_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
sock	torrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<tcp::acceptor> sock;$/;"	m	struct:libtorrent::aux::listen_socket_t
sock	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		udp_socket sock;$/;"	m	struct:libtorrent::aux::session_udp_socket
sock	torrent/src/socket_type.cpp	/^		socket_type* sock;$/;"	m	struct:libtorrent::aux::socket_closer	file:
sock_accept	torrent/include/libtorrent/operations.hpp	/^		sock_accept,$/;"	m	class:libtorrent::operation_t
sock_bind	torrent/include/libtorrent/operations.hpp	/^		sock_bind,$/;"	m	class:libtorrent::operation_t
sock_bind_to_device	torrent/include/libtorrent/operations.hpp	/^		sock_bind_to_device,$/;"	m	class:libtorrent::operation_t
sock_listen	torrent/include/libtorrent/operations.hpp	/^		sock_listen,$/;"	m	class:libtorrent::operation_t
sock_open	torrent/include/libtorrent/operations.hpp	/^		sock_open,$/;"	m	class:libtorrent::operation_t
sock_option	torrent/include/libtorrent/operations.hpp	/^		sock_option,$/;"	m	class:libtorrent::operation_t
sock_read	torrent/include/libtorrent/operations.hpp	/^		sock_read,$/;"	m	class:libtorrent::operation_t
sock_type	torrent/include/libtorrent/alert_types.hpp	/^		socket_type_t TORRENT_DEPRECATED_MEMBER sock_type;$/;"	m	namespace:libtorrent
sock_type	torrent/include/libtorrent/alert_types.hpp	/^		socket_type_t TORRENT_DEPRECATED_MEMBER sock_type;$/;"	v
sock_type_idx	torrent/src/alert.cpp	/^	int sock_type_idx(socket_type_t type)$/;"	f	namespace:libtorrent::__anon98
sock_type_str	torrent/src/alert.cpp	/^	char const* sock_type_str(socket_type_t type)$/;"	f	namespace:libtorrent::__anon98
sock_udp	include/socket.h	/^struct sock_udp$/;"	s
sock_write	torrent/include/libtorrent/operations.hpp	/^		sock_write,$/;"	m	class:libtorrent::operation_t
sockaddr_len	torrent/src/enum_net.cpp	/^	int sockaddr_len(sockaddr const* sin)$/;"	f	namespace:libtorrent::__anon102
sockaddr_to_address	torrent/src/enum_net.cpp	/^	address sockaddr_to_address(sockaddr const* sin, int assume_family = -1)$/;"	f	namespace:libtorrent::__anon102
socket	torrent/include/libtorrent/announce_entry.hpp	/^		aux::listen_socket_handle socket;$/;"	m	struct:libtorrent::announce_endpoint
socket	torrent/include/libtorrent/broadcast_socket.hpp	/^			std::shared_ptr<udp::socket> socket;$/;"	m	struct:libtorrent::broadcast_socket::socket_entry
socket	torrent/include/libtorrent/http_connection.hpp	/^	aux::socket_type const& socket() const { return m_sock; }$/;"	f	class:libtorrent::http_connection::aux
socket	torrent/src/torrent.cpp	/^			aux::listen_socket_handle socket;$/;"	m	struct:libtorrent::__anon105::announce_state	file:
socket	torrent/src/torrent.cpp	/^			aux::listen_socket_handle socket;$/;"	m	struct:libtorrent::__anon112::timer_state	file:
socket_activation	virt-p2v/src/nbd.c	/^socket_activation (int *fds, size_t nr_fds)$/;"	f	file:
socket_closer	torrent/src/socket_type.cpp	/^		socket_closer(io_service& e$/;"	f	struct:libtorrent::aux::socket_closer
socket_closer	torrent/src/socket_type.cpp	/^	struct socket_closer$/;"	s	namespace:libtorrent::aux	file:
socket_drained	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::socket_drained()$/;"	f	class:libtorrent::utp_socket_manager
socket_entry	torrent/include/libtorrent/broadcast_socket.hpp	/^			explicit socket_entry(std::shared_ptr<udp::socket> s)$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
socket_entry	torrent/include/libtorrent/broadcast_socket.hpp	/^			socket_entry(std::shared_ptr<udp::socket> s$/;"	f	struct:libtorrent::broadcast_socket::socket_entry
socket_entry	torrent/include/libtorrent/broadcast_socket.hpp	/^		struct socket_entry$/;"	s	class:libtorrent::broadcast_socket
socket_manager	torrent/include/libtorrent/kademlia/node.hpp	/^struct socket_manager$/;"	s	namespace:libtorrent::dht
socket_recv_size10	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size10,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size11	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size11,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size12	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size12,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size13	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size13,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size14	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size14,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size15	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size15,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size16	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size16,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size17	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size17,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size18	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size18,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size19	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size19,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size20	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size20,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size3	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size3,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size4	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size4,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size5	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size5,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size6	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size6,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size7	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size7,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size8	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size8,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_recv_size9	torrent/include/libtorrent/performance_counters.hpp	/^			socket_recv_size9,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size10	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size10,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size11	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size11,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size12	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size12,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size13	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size13,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size14	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size14,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size15	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size15,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size16	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size16,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size17	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size17,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size18	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size18,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size19	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size19,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size20	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size20,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size3	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size3,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size4	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size4,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size5	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size5,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size6	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size6,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size7	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size7,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size8	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size8,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_send_size9	torrent/include/libtorrent/performance_counters.hpp	/^			socket_send_size9,$/;"	e	enum:libtorrent::counters::stats_counter_t
socket_state_names	torrent/src/utp_stream.cpp	/^static char const* socket_state_names[] = { "NONE", "SYN_SENT", "CONNECTED", "FIN_SENT", "ERROR", "DELETE" };$/;"	m	namespace:libtorrent	file:
socket_type	torrent/include/libtorrent/alert_types.hpp	/^		int const socket_type;$/;"	m	struct:libtorrent::final
socket_type	torrent/include/libtorrent/alert_types.hpp	/^		lt::socket_type_t const socket_type;$/;"	m	class:libtorrent::lt
socket_type	torrent/include/libtorrent/alert_types.hpp	/^		lt::socket_type_t const socket_type;$/;"	m	class:lt
socket_type	torrent/include/libtorrent/aux_/socket_type.hpp	/^		explicit socket_type(io_service& ios): m_io_service(ios), m_type(0) {}$/;"	f	struct:libtorrent::aux::socket_type
socket_type	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct TORRENT_EXTRA_EXPORT socket_type$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<http_stream>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<i2p_stream>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<socks5_stream>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<ssl_stream<http_stream>>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<ssl_stream<socks5_stream>>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<ssl_stream<tcp::socket>>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<ssl_stream<utp_stream>>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<tcp::socket>$/;"	s	namespace:libtorrent::aux
socket_type_int_impl	torrent/include/libtorrent/aux_/socket_type.hpp	/^	struct socket_type_int_impl<utp_stream>$/;"	s	namespace:libtorrent::aux
socket_type_str	torrent/src/alert.cpp	/^	char const* const socket_type_str[] = {$/;"	m	namespace:libtorrent::__anon98	file:
socket_type_t	torrent/include/libtorrent/alert_types.hpp	/^	enum class socket_type_t : std::uint8_t$/;"	c	namespace:libtorrent
sockets	virt-p2v/include/p2v-config.h	/^  unsigned sockets;$/;"	m	struct:cpu_config
socks5	torrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
socks5	torrent/src/udp_socket.cpp	/^	explicit socks5(io_service& ios, aux::listen_socket_handle ls$/;"	f	struct:libtorrent::socks5
socks5	torrent/src/udp_socket.cpp	/^struct socks5 : std::enable_shared_from_this<socks5>$/;"	s	namespace:libtorrent	file:
socks5_alert	torrent/src/alert.cpp	/^	socks5_alert::socks5_alert(aux::stack_allocator&$/;"	f	class:libtorrent::socks5_alert
socks5_connect	torrent/include/libtorrent/socks5_stream.hpp	/^		socks5_connect = 1,$/;"	e	enum:libtorrent::socks5_stream::__anon17
socks5_stream	torrent/include/libtorrent/socks5_stream.hpp	/^	explicit socks5_stream(io_service& io_service)$/;"	f	class:libtorrent::socks5_stream
socks5_stream	torrent/include/libtorrent/socks5_stream.hpp	/^class socks5_stream : public proxy_base$/;"	c	namespace:libtorrent
socks5_udp_associate	torrent/include/libtorrent/socks5_stream.hpp	/^		socks5_udp_associate = 3$/;"	e	enum:libtorrent::socks5_stream::__anon17
socks_category	torrent/src/socks5_stream.cpp	/^	boost::system::error_category& socks_category()$/;"	f	namespace:libtorrent
socks_connect	torrent/src/socks5_stream.cpp	/^	void socks5_stream::socks_connect(handler_type h)$/;"	f	class:libtorrent::socks5_stream
socks_error	torrent/include/libtorrent/socks5_stream.hpp	/^namespace socks_error {$/;"	n	namespace:libtorrent
socks_error	torrent/src/socks5_stream.cpp	/^	namespace socks_error$/;"	n	namespace:libtorrent	file:
socks_error_code	torrent/include/libtorrent/socks5_stream.hpp	/^	enum socks_error_code$/;"	g	namespace:libtorrent::socks_error
socks_forward_udp	torrent/src/udp_socket.cpp	/^void socks5::socks_forward_udp()$/;"	f	class:libtorrent::socks5
sorted_insert	torrent/include/libtorrent/vector_utils.hpp	/^	void sorted_insert(std::vector<T>& container, U v)$/;"	f	namespace:libtorrent
source	torrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t source:4;$/;"	m	struct:libtorrent::announce_entry
source	torrent/include/libtorrent/peer_info.hpp	/^		peer_source_flags_t source;$/;"	m	struct:libtorrent::peer_info
source	torrent/include/libtorrent/peer_info.hpp	/^		std::uint8_t source;$/;"	m	struct:libtorrent::peer_list_entry
source	torrent/include/libtorrent/torrent_peer.hpp	/^		std::uint32_t source:6;$/;"	m	struct:libtorrent::torrent_peer
source	torrent/src/ut_metadata.cpp	/^			std::weak_ptr<ut_metadata_peer_plugin> source;$/;"	m	struct:libtorrent::__anon72::final::metadata_piece	file:
sourceExhausted	torrent/include/libtorrent/ConvertUTF.h	/^	sourceExhausted,  \/* partial character in source, but hit end *\/$/;"	e	enum:ConversionResult
sourceIllegal	torrent/include/libtorrent/ConvertUTF.h	/^	sourceIllegal     \/* source sequence is illegal\/malformed *\/$/;"	e	enum:ConversionResult
source_client	torrent/include/libtorrent/announce_entry.hpp	/^			source_client = 2,$/;"	e	enum:libtorrent::announce_entry::tracker_source
source_dht	torrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr ip_source_t source_dht = 1_bit;$/;"	m	struct:libtorrent::aux::session_interface
source_dht	torrent/src/session_impl.cpp	/^	constexpr ip_source_t session_interface::source_dht;$/;"	m	class:libtorrent::aux::session_interface	file:
source_exhausted	torrent/include/libtorrent/utf8.hpp	/^			source_exhausted,$/;"	e	enum:libtorrent::utf8_errors::error_code_enum
source_feed_url	torrent/include/libtorrent/torrent.hpp	/^		std::string const& source_feed_url() const { return m_source_feed_url; }$/;"	f	class:libtorrent::torrent::std
source_hint	torrent/include/libtorrent/enum_net.hpp	/^		address source_hint;$/;"	m	struct:libtorrent::ip_route
source_illegal	torrent/include/libtorrent/utf8.hpp	/^			source_illegal$/;"	e	enum:libtorrent::utf8_errors::error_code_enum
source_ip_cannot_be_wildcarded	torrent/include/libtorrent/upnp.hpp	/^			source_ip_cannot_be_wildcarded = 715,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
source_magnet_link	torrent/include/libtorrent/announce_entry.hpp	/^			source_magnet_link = 4,$/;"	e	enum:libtorrent::announce_entry::tracker_source
source_peer	torrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr ip_source_t source_peer = 2_bit;$/;"	m	struct:libtorrent::aux::session_interface
source_peer	torrent/src/session_impl.cpp	/^	constexpr ip_source_t session_interface::source_peer;$/;"	m	class:libtorrent::aux::session_interface	file:
source_rank	torrent/src/request_blocks.cpp	/^	int source_rank(peer_source_flags_t const source_bitmask)$/;"	f	namespace:libtorrent
source_router	torrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr ip_source_t source_router = 4_bit;$/;"	m	struct:libtorrent::aux::session_interface
source_router	torrent/src/session_impl.cpp	/^	constexpr ip_source_t session_interface::source_router;$/;"	m	class:libtorrent::aux::session_interface	file:
source_tex	torrent/include/libtorrent/announce_entry.hpp	/^			source_tex = 8$/;"	e	enum:libtorrent::announce_entry::tracker_source
source_torrent	torrent/include/libtorrent/announce_entry.hpp	/^			source_torrent = 1,$/;"	e	enum:libtorrent::announce_entry::tracker_source
source_tracker	torrent/include/libtorrent/aux_/session_interface.hpp	/^		static constexpr ip_source_t source_tracker = 3_bit;$/;"	m	struct:libtorrent::aux::session_interface
source_tracker	torrent/src/session_impl.cpp	/^	constexpr ip_source_t session_interface::source_tracker;$/;"	m	class:libtorrent::aux::session_interface	file:
space_exhausted	torrent/include/libtorrent/gzip.hpp	/^			space_exhausted,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
space_in_last_buffer	torrent/src/chained_buffer.cpp	/^	int chained_buffer::space_in_last_buffer()$/;"	f	class:libtorrent::chained_buffer
space_size	include/packet.h	/^    unsigned long long space_size;$/;"	m	struct:yzy_torrent
space_size	test/test.c	/^    unsigned long long  space_size;$/;"	m	struct:yzy_torrent	file:
span	torrent/include/libtorrent/packet_buffer.hpp	/^		index_type span() const { return (m_last - m_first) & 0xffff; }$/;"	f	class:libtorrent::packet_buffer
span	torrent/include/libtorrent/span.hpp	/^		span(Cont const& c) \/\/ NOLINT$/;"	f	struct:libtorrent::span
span	torrent/include/libtorrent/span.hpp	/^		span(Cont& c) \/\/ NOLINT$/;"	f	struct:libtorrent::span
span	torrent/include/libtorrent/span.hpp	/^	struct span$/;"	s	namespace:libtorrent
sparse	torrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t sparse = 2_bit;$/;"	m	namespace:libtorrent::file_open_mode
sparse	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t sparse = 2_bit;$/;"	m	namespace:libtorrent::open_mode
spec_revision	include/gpt.h	/^    uint32_t  spec_revision;$/;"	m	struct:__anon6
spinner	virt-p2v/src/gui.c	/^  *spinner,$/;"	v	file:
spinner_hbox	virt-p2v/src/gui.c	/^  *spinner_hbox,$/;"	v	file:
spinner_message	virt-p2v/src/gui.c	/^  *spinner_message, *next_button;$/;"	v	file:
split_bucket	torrent/kademlia/routing_table.cpp	/^void routing_table::split_bucket()$/;"	f	class:libtorrent::dht::routing_table
split_string	torrent/src/string_util.cpp	/^	std::pair<string_view, string_view> split_string(string_view last, char const sep)$/;"	f	namespace:libtorrent
split_url	torrent/src/parse_url.cpp	/^		split_url(std::string url, error_code& ec)$/;"	f	namespace:libtorrent
sprintf	virt-p2v/include/gnulib/stdio.h	1639;"	d
sqn	torrent/include/libtorrent/kademlia/types.hpp	/^		sequence_number(sequence_number const& sqn) = default;$/;"	m	struct:libtorrent::dht::sequence_number
sqrtm1	torrent/ed25519/ge.cpp	/^static const fe sqrtm1 = {$/;"	v	file:
srandom	virt-p2v/include/gnulib/stdlib.h	1147;"	d
srandom_r	virt-p2v/include/gnulib/stdlib.h	1258;"	d
src	torrent/include/libtorrent/kademlia/dos_blocker.hpp	/^			address src;$/;"	m	struct:libtorrent::dht::dos_blocker::node_ban_entry
srcdir	torrent/include/libtorrent/Makefile	/^srcdir = .$/;"	m
ssdp_multicast_addr	torrent/src/upnp.cpp	/^	address_v4 const ssdp_multicast_addr = make_address_v4("239.255.255.250");$/;"	m	namespace:libtorrent::__anon123	file:
ssdp_port	torrent/src/upnp.cpp	/^	int const ssdp_port = 1900;$/;"	m	namespace:libtorrent::__anon123	file:
sse42_support	torrent/src/cpuid.cpp	/^	bool const sse42_support = supports_sse42();$/;"	m	namespace:libtorrent::aux	file:
ssh_error	virt-p2v/src/ssh.c	/^static char *ssh_error;$/;"	v	file:
ssh_message_re	virt-p2v/src/ssh.c	/^static pcre *ssh_message_re;$/;"	v	file:
ssl	torrent/include/libtorrent/aux_/openssl.hpp	/^namespace ssl {$/;"	n	namespace:libtorrent
ssl	torrent/include/libtorrent/aux_/session_impl.hpp	/^			transport ssl;$/;"	m	struct:libtorrent::aux::listen_endpoint_t
ssl	torrent/include/libtorrent/aux_/session_impl.hpp	/^		transport ssl = transport::plaintext;$/;"	m	struct:libtorrent::aux::listen_socket_t
ssl	torrent/include/libtorrent/aux_/session_interface.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	torrent/include/libtorrent/http_connection.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	torrent/include/libtorrent/string_util.hpp	/^		bool ssl;$/;"	m	struct:libtorrent::listen_interface_t
ssl	torrent/include/libtorrent/torrent.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl	torrent/include/libtorrent/tracker_manager.hpp	/^namespace ssl {$/;"	n	namespace:boost::asio
ssl_cert	torrent/src/torrent_info.cpp	/^	string_view torrent_info::ssl_cert() const$/;"	f	class:libtorrent::torrent_info
ssl_ctx	torrent/include/libtorrent/torrent.hpp	/^		boost::asio::ssl::context* ssl_ctx() const { return m_ssl_ctx.get(); }$/;"	f	class:libtorrent::torrent
ssl_ctx	torrent/include/libtorrent/tracker_manager.hpp	/^		boost::asio::ssl::context* ssl_ctx = nullptr;$/;"	m	struct:libtorrent::tracker_request
ssl_handshake	torrent/include/libtorrent/operations.hpp	/^		ssl_handshake,$/;"	m	class:libtorrent::operation_t
ssl_handshake	torrent/src/session_impl.cpp	/^	void session_impl::ssl_handshake(error_code const& ec, std::shared_ptr<socket_type> s)$/;"	f	class:libtorrent::aux::session_impl
ssl_listen	torrent/include/libtorrent/settings_pack.hpp	/^			ssl_listen TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
ssl_listen_port	torrent/src/session_handle.cpp	/^	unsigned short session_handle::ssl_listen_port() const$/;"	f	class:libtorrent::session_handle
ssl_listen_port	torrent/src/session_impl.cpp	/^	std::uint16_t session_impl::ssl_listen_port() const$/;"	f	class:libtorrent::aux::session_impl
ssl_listen_port	torrent/src/session_impl.cpp	/^	std::uint16_t session_impl::ssl_listen_port(listen_socket_t* sock) const$/;"	f	class:libtorrent::aux::session_impl
ssl_socket	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t ssl_socket = 18_bit;$/;"	m	struct:libtorrent::peer_info
ssl_socket	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::ssl_socket;$/;"	m	class:libtorrent::peer_info	file:
ssl_stream	torrent/include/libtorrent/ssl_stream.hpp	/^	explicit ssl_stream(io_service& io_service, ssl::context& ctx)$/;"	f	class:libtorrent::ssl_stream
ssl_stream	torrent/include/libtorrent/ssl_stream.hpp	/^class ssl_stream$/;"	c	namespace:libtorrent
ssl_tcp_socket	torrent/include/libtorrent/peer_class_type_filter.hpp	/^			ssl_tcp_socket,$/;"	m	struct:libtorrent::peer_class_type_filter	typeref:enum:libtorrent::peer_class_type_filter::
ssl_torrent	torrent/include/libtorrent/kademlia/announce_flags.hpp	/^constexpr announce_flags_t ssl_torrent = 2_bit;$/;"	m	namespace:libtorrent::dht::announce
ssl_utp_socket	torrent/include/libtorrent/peer_class_type_filter.hpp	/^			ssl_utp_socket,$/;"	m	struct:libtorrent::peer_class_type_filter	typeref:enum:libtorrent::peer_class_type_filter::
stIndex	include/queue.h	/^  QUEUE_INDEX stIndex[MAX_QUEUESIZE];$/;"	m	struct:__anon2
stack	torrent/include/libtorrent/debug.hpp	/^		std::string stack;$/;"	m	struct:libtorrent::async_t
stackLayout	qt_pro/mainwindow.h	/^    QStackedLayout *stackLayout;$/;"	m	class:MainWindow
stack_allocator	torrent/include/libtorrent/stack_allocator.hpp	/^		stack_allocator() {}$/;"	f	struct:libtorrent::stack_allocator
stack_allocator	torrent/include/libtorrent/stack_allocator.hpp	/^	struct TORRENT_EXTRA_EXPORT stack_allocator$/;"	s	namespace:libtorrent
stack_frame	torrent/src/bdecode.cpp	/^		explicit stack_frame(int const t): token(std::uint32_t(t)), state(0) {}$/;"	f	struct:libtorrent::__anon40::stack_frame
stack_frame	torrent/src/bdecode.cpp	/^		stack_frame() : token(0), state(0) {}$/;"	f	struct:libtorrent::__anon40::stack_frame
stack_frame	torrent/src/bdecode.cpp	/^	struct stack_frame$/;"	s	namespace:libtorrent::__anon40	file:
standard_bittorrent	torrent/include/libtorrent/peer_info.hpp	/^			standard_bittorrent = 0,$/;"	e	enum:libtorrent::peer_info::connection_type_t
standard_servers	virt-p2v/src/nbd.c	/^static const enum nbd_server standard_servers[] =$/;"	v	typeref:enum:nbd_server	file:
start	src/linux.c	/^        unsigned long start;$/;"	m	struct:hd_geometry	file:
start	torrent/include/libtorrent/ip_filter.hpp	/^			Addr start;$/;"	m	struct:libtorrent::detail::filter_impl::range
start	torrent/include/libtorrent/lazy_entry.hpp	/^			char const* start;$/;"	m	union:libtorrent::lazy_entry::data_t
start	torrent/include/libtorrent/peer_request.hpp	/^		int start;$/;"	m	struct:libtorrent::peer_request
start	torrent/include/libtorrent/web_peer_connection.hpp	/^			std::int64_t start;$/;"	m	struct:libtorrent::web_peer_connection::file_request_t
start	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::start(find_data::nodes_callback const& f)$/;"	f	class:libtorrent::dht::dht_tracker
start	torrent/kademlia/find_data.cpp	/^void find_data::start()$/;"	f	class:libtorrent::dht::find_data
start	torrent/kademlia/put_data.cpp	/^void put_data::start()$/;"	f	class:libtorrent::dht::put_data
start	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::start()$/;"	f	class:libtorrent::dht::traversal_algorithm
start	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::start()$/;"	f	class:libtorrent::bt_peer_connection
start	torrent/src/http_connection.cpp	/^void http_connection::start(std::string const& hostname, int port$/;"	f	class:libtorrent::http_connection
start	torrent/src/http_tracker_connection.cpp	/^	void http_tracker_connection::start()$/;"	f	class:libtorrent::http_tracker_connection
start	torrent/src/lsd.cpp	/^void lsd::start(error_code& ec)$/;"	f	class:libtorrent::lsd
start	torrent/src/natpmp.cpp	/^void natpmp::start(ip_interface const& ip)$/;"	f	class:libtorrent::natpmp
start	torrent/src/peer_connection.cpp	/^	void peer_connection::start()$/;"	f	class:libtorrent::peer_connection
start	torrent/src/session.cpp	/^	void session::start(session_flags_t const flags, settings_pack&& sp, io_service* ios)$/;"	f	class:libtorrent::session
start	torrent/src/session.cpp	/^	void session::start(session_params&& params, io_service* ios)$/;"	f	class:libtorrent::session
start	torrent/src/torrent.cpp	/^	void torrent::start()$/;"	f	class:libtorrent::torrent
start	torrent/src/udp_socket.cpp	/^void socks5::start(aux::proxy_settings const& ps)$/;"	f	class:libtorrent::socks5
start	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::start()$/;"	f	class:libtorrent::udp_tracker_connection
start	torrent/src/upnp.cpp	/^void upnp::start()$/;"	f	class:libtorrent::upnp
start	torrent/src/web_connection_base.cpp	/^	void web_connection_base::start()$/;"	f	class:libtorrent::web_connection_base
startLba	include/StoreConfig.h	/^    uint64_t    startLba; \/\/qcowèµ·å§ä½ç½®$/;"	m	struct:_YZY_QCOW_ENTRY
startTimeOut	qt_pro/global.cpp	/^void Global::startTimeOut()$/;"	f	class:Global
start_announce	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::start_announce()$/;"	f	class:libtorrent::udp_tracker_connection
start_announcing	torrent/src/torrent.cpp	/^	void torrent::start_announcing()$/;"	f	class:libtorrent::torrent
start_bt	torrent/src/client.cpp	/^int start_bt(char *torrent, char *save_path, uint64_t physic_offset)$/;"	f
start_button	virt-p2v/src/gui.c	/^  *start_button;$/;"	v	file:
start_checking	torrent/src/torrent.cpp	/^	void torrent::start_checking()$/;"	f	class:libtorrent::torrent
start_chs	include/gpt.h	/^    uint8_t   start_chs[3];$/;"	m	struct:__anon4
start_conn	torrent/bak/connection_tester.cpp	/^	void start_conn()$/;"	f	struct:peer_conn
start_conversion	virt-p2v/src/conversion.c	/^start_conversion (struct config *config,$/;"	f
start_conversion_clicked	virt-p2v/src/gui.c	/^start_conversion_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
start_conversion_thread	virt-p2v/src/gui.c	/^start_conversion_thread (void *data)$/;"	f	file:
start_default_features	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr session_flags_t TORRENT_DEPRECATED_MEMBER start_default_features = 1_bit;$/;"	m	struct:libtorrent::session_handle
start_default_features	torrent/src/session_handle.cpp	/^	constexpr session_flags_t session_handle::start_default_features;$/;"	m	class:libtorrent::session_handle	file:
start_dht	torrent/src/session_handle.cpp	/^	void session_handle::start_dht()$/;"	f	class:libtorrent::session_handle
start_dht	torrent/src/session_handle.cpp	/^	void session_handle::start_dht(entry const& startup_state)$/;"	f	class:libtorrent::session_handle
start_dht	torrent/src/session_impl.cpp	/^	void session_impl::start_dht()$/;"	f	class:libtorrent::aux::session_impl
start_dht_deprecated	torrent/src/session_impl.cpp	/^	void session_impl::start_dht_deprecated(entry const& startup_state)$/;"	f	class:libtorrent::aux::session_impl
start_download_url	torrent/src/torrent.cpp	/^	void torrent::start_download_url()$/;"	f	class:libtorrent::torrent
start_element	virt-p2v/include/libxml2-writer-macros.h	58;"	d
start_element	virt-p2v/libguestfs/libxml2-writer-macros.h	58;"	d
start_ip_notifier	torrent/src/session_impl.cpp	/^	void session_impl::start_ip_notifier()$/;"	f	class:libtorrent::aux::session_impl
start_lba	include/gpt.h	/^    uint32_t  start_lba;$/;"	m	struct:__anon4
start_lba	include/gpt.h	/^    uint64_t    start_lba;$/;"	m	struct:__anon9
start_lba	include/gpt.h	/^    uint64_t  start_lba;$/;"	m	struct:__anon7
start_lsd	torrent/src/session_handle.cpp	/^	void session_handle::start_lsd()$/;"	f	class:libtorrent::session_handle
start_lsd	torrent/src/session_impl.cpp	/^	void session_impl::start_lsd()$/;"	f	class:libtorrent::aux::session_impl
start_natpmp	torrent/src/session_handle.cpp	/^	void session_handle::start_natpmp()$/;"	f	class:libtorrent::session_handle
start_natpmp	torrent/src/session_impl.cpp	/^	void session_impl::start_natpmp()$/;"	f	class:libtorrent::aux::session_impl
start_natpmp	torrent/src/session_impl.cpp	/^	void session_impl::start_natpmp(aux::listen_socket_t& s)$/;"	f	class:libtorrent::aux::session_impl
start_nbd_server	virt-p2v/src/nbd.c	/^start_nbd_server (const char **ipaddr, int *port, const char *device)$/;"	f
start_nbdkit	virt-p2v/src/nbd.c	/^start_nbdkit (const char *device,$/;"	f	file:
start_offset	torrent/include/libtorrent/bdecode.hpp	/^	int start_offset() const { TORRENT_ASSERT(type == string); return int(header) + 2; }$/;"	f	namespace:libtorrent::detail
start_qemu_nbd	virt-p2v/src/nbd.c	/^start_qemu_nbd (const char *device,$/;"	f	file:
start_read_line	torrent/src/i2p_stream.cpp	/^	void i2p_stream::start_read_line(error_code const& e, handler_type& h)$/;"	f	class:libtorrent::i2p_stream
start_receive_piece	torrent/src/peer_connection.cpp	/^	void peer_connection::start_receive_piece(peer_request const& r)$/;"	f	class:libtorrent::peer_connection
start_remote_connection	virt-p2v/src/ssh.c	/^start_remote_connection (struct config *config, const char *remote_dir)$/;"	f
start_sent	torrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER start_sent:1;$/;"	m	struct:libtorrent::announce_entry
start_sent	torrent/include/libtorrent/announce_entry.hpp	/^		bool start_sent : 1;$/;"	m	struct:libtorrent::announce_endpoint
start_session	torrent/src/session_impl.cpp	/^	void session_impl::start_session()$/;"	f	class:libtorrent::aux::session_impl
start_spinner	virt-p2v/src/gui.c	/^start_spinner (gpointer user_data)$/;"	f	file:
start_ssh	virt-p2v/src/ssh.c	/^start_ssh (unsigned spawn_flags, struct config *config,$/;"	f	file:
start_time	torrent/bak/connection_tester.cpp	/^	time_point start_time;$/;"	m	struct:peer_conn	file:
start_torrent	src/torrent.cpp	/^int start_torrent(char *torrent, char *save_path, char *file_name, uint64_t physical_offset)$/;"	f
start_upnp	torrent/src/session_handle.cpp	/^	void session_handle::start_upnp()$/;"	f	class:libtorrent::session_handle
start_upnp	torrent/src/session_impl.cpp	/^	void session_impl::start_upnp()$/;"	f	class:libtorrent::aux::session_impl
start_upnp	torrent/src/session_impl.cpp	/^	void session_impl::start_upnp(aux::listen_socket_t& s)$/;"	f	class:libtorrent::aux::session_impl
started	torrent/include/libtorrent/torrent.hpp	/^		time_point32 started() const { return m_started; }$/;"	f	class:libtorrent::torrent
started	torrent/include/libtorrent/tracker_manager.hpp	/^			started,$/;"	e	enum:libtorrent::tracker_request::event_t
started	virt-p2v/include/gnulib/windows-initguard.h	/^          volatile LONG started;$/;"	m	struct:__anon159
started	virt-p2v/include/gnulib/windows-once.h	/^          volatile LONG started;$/;"	m	struct:__anon157
stat	torrent/include/libtorrent/stat.hpp	/^	class TORRENT_EXTRA_EXPORT stat$/;"	c	namespace:libtorrent
stat_cache	torrent/include/libtorrent/stat_cache.hpp	/^	struct TORRENT_EXTRA_EXPORT stat_cache$/;"	s	namespace:libtorrent
stat_cache_t	torrent/include/libtorrent/stat_cache.hpp	/^			explicit stat_cache_t(std::int64_t s): file_size(s) {}$/;"	f	struct:libtorrent::stat_cache::stat_cache_t
stat_cache_t	torrent/include/libtorrent/stat_cache.hpp	/^		struct stat_cache_t$/;"	s	struct:libtorrent::stat_cache
stat_channel	torrent/include/libtorrent/stat.hpp	/^		stat_channel()$/;"	f	class:libtorrent::stat_channel
stat_channel	torrent/include/libtorrent/stat.hpp	/^	class TORRENT_EXTRA_EXPORT stat_channel$/;"	c	namespace:libtorrent
stat_file	torrent/src/path.cpp	/^	void stat_file(std::string const& inf, file_status* s$/;"	f	namespace:libtorrent
stat_to_array	torrent/src/alert.cpp	/^		std::array<int, stats_alert::num_channels> stat_to_array(stat const& s)$/;"	f	namespace:libtorrent::__anon99
state	include/torrent.h	/^    char state[12];$/;"	m	struct:progress_info
state	qt_pro/global.h	/^    char state[12];$/;"	m	struct:progress_info
state	src/torrent.cpp	/^char const* state(lt::torrent_status::state_t s)$/;"	f
state	torrent/bak/bt-get2.cpp	/^char const* state(lt::torrent_status::state_t s)$/;"	f
state	torrent/bak/connection_tester.cpp	/^	int state;$/;"	m	struct:peer_conn	file:
state	torrent/include/libtorrent/alert_types.hpp	/^		torrent_status::state_t const state;$/;"	m	class:libtorrent::final::torrent_status
state	torrent/include/libtorrent/aux_/session_impl.hpp	/^			void set_dht_state(dht::dht_state const& state) = delete;$/;"	m	struct:libtorrent::aux::final
state	torrent/include/libtorrent/piece_picker.hpp	/^			download_queue_t state() const { return download_queue_t(download_state); }$/;"	f	struct:libtorrent::piece_picker::piece_pos
state	torrent/include/libtorrent/piece_picker.hpp	/^			unsigned state:2;$/;"	m	struct:libtorrent::piece_picker::block_info
state	torrent/include/libtorrent/piece_picker.hpp	/^			void state(download_queue_t q) { download_state = static_cast<std::uint8_t>(q); }$/;"	f	struct:libtorrent::piece_picker::piece_pos
state	torrent/include/libtorrent/sha1.hpp	/^		std::uint32_t state[5];$/;"	m	struct:libtorrent::sha1_ctx
state	torrent/include/libtorrent/sha512.hpp	/^		std::uint64_t state[8];$/;"	m	struct:libtorrent::sha512_ctx
state	torrent/include/libtorrent/torrent.hpp	/^		torrent_status::state_t state() const$/;"	f	class:libtorrent::torrent
state	torrent/include/libtorrent/torrent_handle.hpp	/^		unsigned state:2;$/;"	m	struct:libtorrent::block_info
state	torrent/include/libtorrent/torrent_status.hpp	/^		state_t state = checking_resume_data;$/;"	m	struct:libtorrent::torrent_status
state	torrent/kademlia/dht_tracker.cpp	/^	dht_state dht_tracker::state() const$/;"	f	class:libtorrent::dht::dht_tracker
state	torrent/src/bdecode.cpp	/^		std::uint32_t state:1;$/;"	m	struct:libtorrent::__anon40::stack_frame	file:
state	torrent/src/client.cpp	/^char const* state(lt::torrent_status::state_t s)$/;"	f
state	torrent/src/puff.cpp	/^struct state {$/;"	s	file:
state	torrent/src/session_handle.cpp	/^	entry session_handle::state() const$/;"	f	class:libtorrent::session_handle
state	virt-p2v/src/conversion.c	/^    char state[12];$/;"	m	struct:progress_info	file:
state_changed_alert	torrent/src/alert.cpp	/^	state_changed_alert::state_changed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::state_changed_alert
state_finished	torrent/include/libtorrent/piece_picker.hpp	/^			enum { state_none, state_requested, state_writing, state_finished };$/;"	e	enum:libtorrent::piece_picker::block_info::__anon20
state_none	torrent/include/libtorrent/piece_picker.hpp	/^			enum { state_none, state_requested, state_writing, state_finished };$/;"	e	enum:libtorrent::piece_picker::block_info::__anon20
state_requested	torrent/include/libtorrent/piece_picker.hpp	/^			enum { state_none, state_requested, state_writing, state_finished };$/;"	e	enum:libtorrent::piece_picker::block_info::__anon20
state_t	torrent/bak/connection_tester.cpp	/^	enum state_t$/;"	g	struct:peer_conn	file:
state_t	torrent/include/libtorrent/i2p_stream.hpp	/^	enum state_t$/;"	g	class:libtorrent::i2p_connection
state_t	torrent/include/libtorrent/i2p_stream.hpp	/^	enum state_t$/;"	g	class:libtorrent::i2p_stream
state_t	torrent/include/libtorrent/torrent_handle.hpp	/^		enum state_t { none, slow, medium, fast };$/;"	g	struct:libtorrent::partial_piece_info
state_t	torrent/include/libtorrent/torrent_status.hpp	/^		enum state_t$/;"	g	struct:libtorrent::torrent_status
state_t	torrent/src/utp_stream.cpp	/^	enum state_t {$/;"	g	struct:libtorrent::utp_socket_impl	file:
state_update_alert	torrent/src/alert.cpp	/^	state_update_alert::state_update_alert(aux::stack_allocator&$/;"	f	class:libtorrent::state_update_alert
state_updated	torrent/src/torrent.cpp	/^	void torrent::state_updated()$/;"	f	class:libtorrent::torrent
state_writing	torrent/include/libtorrent/piece_picker.hpp	/^			enum { state_none, state_requested, state_writing, state_finished };$/;"	e	enum:libtorrent::piece_picker::block_info::__anon20
staticMetaObject	qt_pro/moc_downloadwindow.cpp	/^const QMetaObject DownloadWindow::staticMetaObject = {$/;"	m	class:DownloadWindow	file:
staticMetaObject	qt_pro/moc_errodialog.cpp	/^const QMetaObject ErroDialog::staticMetaObject = {$/;"	m	class:ErroDialog	file:
static_assert	virt-p2v/include/gnulib/verify.h	230;"	d
static_cast	torrent/include/libtorrent/span.hpp	/^			: m_ptr(&str[0]), m_len(static_cast<difference_type>(str.size())) {}$/;"	f	struct:libtorrent::span
static_cast	torrent/include/libtorrent/span.hpp	/^			: m_ptr(arr.data()), m_len(static_cast<difference_type>(arr.size())) {}$/;"	f	struct:libtorrent::span
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::connect;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::dht | alert_category::tracker;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::error;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::peer | alert_category::error;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::peer;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::performance_warning;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::status | alert_category::error;$/;"	m	namespace:libtorrent
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::status$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::status;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::status;$/;"	v
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::storage$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::storage;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::tracker | alert_category::error;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category = alert_category::tracker;$/;"	m	struct:libtorrent::final
static_category	torrent/include/libtorrent/alert_types.hpp	/^		static constexpr alert_category_t static_category =$/;"	m	struct:libtorrent::final
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t add_torrent_alert::static_category;$/;"	m	class:libtorrent::add_torrent_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t alerts_dropped_alert::static_category;$/;"	m	class:libtorrent::alerts_dropped_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t anonymous_mode_alert::static_category;$/;"	m	class:libtorrent::anonymous_mode_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t block_downloading_alert::static_category;$/;"	m	class:libtorrent::block_downloading_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t block_finished_alert::static_category;$/;"	m	class:libtorrent::block_finished_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t block_timeout_alert::static_category;$/;"	m	class:libtorrent::block_timeout_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t block_uploaded_alert::static_category;$/;"	m	class:libtorrent::block_uploaded_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t cache_flushed_alert::static_category;$/;"	m	class:libtorrent::cache_flushed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_announce_alert::static_category;$/;"	m	class:libtorrent::dht_announce_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_bootstrap_alert::static_category;$/;"	m	class:libtorrent::dht_bootstrap_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_direct_response_alert::static_category;$/;"	m	class:libtorrent::dht_direct_response_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_error_alert::static_category;$/;"	m	class:libtorrent::dht_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_get_peers_alert::static_category;$/;"	m	class:libtorrent::dht_get_peers_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_get_peers_reply_alert::static_category;$/;"	m	class:libtorrent::dht_get_peers_reply_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_immutable_item_alert::static_category;$/;"	m	class:libtorrent::dht_immutable_item_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_live_nodes_alert::static_category;$/;"	m	class:libtorrent::dht_live_nodes_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_log_alert::static_category;$/;"	m	class:libtorrent::dht_log_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_mutable_item_alert::static_category;$/;"	m	class:libtorrent::dht_mutable_item_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_outgoing_get_peers_alert::static_category;$/;"	m	class:libtorrent::dht_outgoing_get_peers_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_pkt_alert::static_category;$/;"	m	class:libtorrent::dht_pkt_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_put_alert::static_category;$/;"	m	class:libtorrent::dht_put_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_reply_alert::static_category;$/;"	m	class:libtorrent::dht_reply_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_sample_infohashes_alert::static_category;$/;"	m	class:libtorrent::dht_sample_infohashes_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t dht_stats_alert::static_category;$/;"	m	class:libtorrent::dht_stats_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t external_ip_alert::static_category;$/;"	m	class:libtorrent::external_ip_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t fastresume_rejected_alert::static_category;$/;"	m	class:libtorrent::fastresume_rejected_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t file_completed_alert::static_category;$/;"	m	class:libtorrent::file_completed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t file_error_alert::static_category;$/;"	m	class:libtorrent::file_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t file_rename_failed_alert::static_category;$/;"	m	class:libtorrent::file_rename_failed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t file_renamed_alert::static_category;$/;"	m	class:libtorrent::file_renamed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t hash_failed_alert::static_category;$/;"	m	class:libtorrent::hash_failed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t i2p_alert::static_category;$/;"	m	class:libtorrent::i2p_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t incoming_connection_alert::static_category;$/;"	m	class:libtorrent::incoming_connection_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t incoming_request_alert::static_category;$/;"	m	class:libtorrent::incoming_request_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t invalid_request_alert::static_category;$/;"	m	class:libtorrent::invalid_request_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t listen_failed_alert::static_category;$/;"	m	class:libtorrent::listen_failed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t listen_succeeded_alert::static_category;$/;"	m	class:libtorrent::listen_succeeded_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t log_alert::static_category;$/;"	m	class:libtorrent::log_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t lsd_error_alert::static_category;$/;"	m	class:libtorrent::lsd_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t lsd_peer_alert::static_category;$/;"	m	class:libtorrent::lsd_peer_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t metadata_failed_alert::static_category;$/;"	m	class:libtorrent::metadata_failed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t metadata_received_alert::static_category;$/;"	m	class:libtorrent::metadata_received_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t mmap_cache_alert::static_category;$/;"	m	class:libtorrent::mmap_cache_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t peer_ban_alert::static_category;$/;"	m	class:libtorrent::peer_ban_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t peer_blocked_alert::static_category;$/;"	m	class:libtorrent::peer_blocked_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t peer_connect_alert::static_category;$/;"	m	class:libtorrent::peer_connect_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t peer_disconnected_alert::static_category;$/;"	m	class:libtorrent::peer_disconnected_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t peer_error_alert::static_category;$/;"	m	class:libtorrent::peer_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t peer_log_alert::static_category;$/;"	m	class:libtorrent::peer_log_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t peer_snubbed_alert::static_category;$/;"	m	class:libtorrent::peer_snubbed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t peer_unsnubbed_alert::static_category;$/;"	m	class:libtorrent::peer_unsnubbed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t performance_alert::static_category;$/;"	m	class:libtorrent::performance_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t picker_log_alert::static_category;$/;"	m	class:libtorrent::picker_log_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t piece_finished_alert::static_category;$/;"	m	class:libtorrent::piece_finished_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t portmap_alert::static_category;$/;"	m	class:libtorrent::portmap_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t portmap_error_alert::static_category;$/;"	m	class:libtorrent::portmap_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t portmap_log_alert::static_category;$/;"	m	class:libtorrent::portmap_log_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t read_piece_alert::static_category;$/;"	m	class:libtorrent::read_piece_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t request_dropped_alert::static_category;$/;"	m	class:libtorrent::request_dropped_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t save_resume_data_alert::static_category;$/;"	m	class:libtorrent::save_resume_data_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t save_resume_data_failed_alert::static_category;$/;"	m	class:libtorrent::save_resume_data_failed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t scrape_failed_alert::static_category;$/;"	m	class:libtorrent::scrape_failed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t scrape_reply_alert::static_category;$/;"	m	class:libtorrent::scrape_reply_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t session_error_alert::static_category;$/;"	m	class:libtorrent::session_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t session_stats_alert::static_category;$/;"	m	class:libtorrent::session_stats_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t session_stats_header_alert::static_category;$/;"	m	class:libtorrent::session_stats_header_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t socks5_alert::static_category;$/;"	m	class:libtorrent::socks5_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t state_changed_alert::static_category;$/;"	m	class:libtorrent::state_changed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t state_update_alert::static_category;$/;"	m	class:libtorrent::state_update_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t stats_alert::static_category;$/;"	m	class:libtorrent::stats_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t storage_moved_alert::static_category;$/;"	m	class:libtorrent::storage_moved_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t storage_moved_failed_alert::static_category;$/;"	m	class:libtorrent::storage_moved_failed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_added_alert::static_category;$/;"	m	class:libtorrent::torrent_added_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_checked_alert::static_category;$/;"	m	class:libtorrent::torrent_checked_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_delete_failed_alert::static_category;$/;"	m	class:libtorrent::torrent_delete_failed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_deleted_alert::static_category;$/;"	m	class:libtorrent::torrent_deleted_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_error_alert::static_category;$/;"	m	class:libtorrent::torrent_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_finished_alert::static_category;$/;"	m	class:libtorrent::torrent_finished_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_log_alert::static_category;$/;"	m	class:libtorrent::torrent_log_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_need_cert_alert::static_category;$/;"	m	class:libtorrent::torrent_need_cert_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_paused_alert::static_category;$/;"	m	class:libtorrent::torrent_paused_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_removed_alert::static_category;$/;"	m	class:libtorrent::torrent_removed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_resumed_alert::static_category;$/;"	m	class:libtorrent::torrent_resumed_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t torrent_update_alert::static_category;$/;"	m	class:libtorrent::torrent_update_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t tracker_announce_alert::static_category;$/;"	m	class:libtorrent::tracker_announce_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t tracker_error_alert::static_category;$/;"	m	class:libtorrent::tracker_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t tracker_reply_alert::static_category;$/;"	m	class:libtorrent::tracker_reply_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t tracker_warning_alert::static_category;$/;"	m	class:libtorrent::tracker_warning_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t trackerid_alert::static_category;$/;"	m	class:libtorrent::trackerid_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t udp_error_alert::static_category;$/;"	m	class:libtorrent::udp_error_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t unwanted_block_alert::static_category;$/;"	m	class:libtorrent::unwanted_block_alert	file:
static_category	torrent/src/alert.cpp	/^	constexpr alert_category_t url_seed_alert::static_category;$/;"	m	class:libtorrent::url_seed_alert	file:
statistics	torrent/include/libtorrent/torrent.hpp	/^		stat statistics() const { return m_stat; }$/;"	f	class:libtorrent::torrent
stats	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t stats = 11_bit;$/;"	m	namespace:libtorrent::alert_category
stats_alert	torrent/src/alert.cpp	/^	stats_alert::stats_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::stats_alert
stats_counter_t	torrent/include/libtorrent/performance_counters.hpp	/^		enum stats_counter_t$/;"	g	struct:libtorrent::counters
stats_counters	torrent/include/libtorrent/kademlia/node.hpp	/^	counters& stats_counters() const { return m_counters; }$/;"	f	class:libtorrent::dht::node
stats_counters	torrent/include/libtorrent/peer_connection.hpp	/^		counters& stats_counters() const { return m_counters; }$/;"	f	class:libtorrent::peer_connection
stats_counters	torrent/include/libtorrent/peer_connection.hpp	/^		counters* stats_counters;$/;"	m	struct:libtorrent::peer_connection_args
stats_enabled	torrent/bak/client_test.cpp	/^bool stats_enabled = false;$/;"	v
stats_gauge_t	torrent/include/libtorrent/performance_counters.hpp	/^		enum stats_gauge_t$/;"	g	struct:libtorrent::counters
stats_metric	torrent/include/libtorrent/session_stats.hpp	/^	struct TORRENT_EXPORT stats_metric$/;"	s	namespace:libtorrent
stats_metric_impl	torrent/src/session_stats.cpp	/^	struct stats_metric_impl$/;"	s	namespace:libtorrent::__anon117	file:
stats_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t stats_notification = 11_bit;$/;"	m	class:libtorrent::alert
stats_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::stats_notification;$/;"	m	class:libtorrent::alert	file:
status	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t status = 6_bit;$/;"	m	namespace:libtorrent::alert_category
status	torrent/kademlia/node.cpp	/^void node::status(session_status& s)$/;"	f	class:libtorrent::dht::node
status	torrent/kademlia/node.cpp	/^void node::status(std::vector<dht_routing_bucket>& table$/;"	f	class:libtorrent::dht::node
status	torrent/kademlia/routing_table.cpp	/^void routing_table::status(session_status& s) const$/;"	f	class:libtorrent::dht::routing_table
status	torrent/kademlia/routing_table.cpp	/^void routing_table::status(std::vector<dht_routing_bucket>& s) const$/;"	f	class:libtorrent::dht::routing_table
status	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::status(dht_lookup& l)$/;"	f	class:libtorrent::dht::traversal_algorithm
status	torrent/src/session_handle.cpp	/^	session_status session_handle::status() const$/;"	f	class:libtorrent::session_handle
status	torrent/src/session_impl.cpp	/^	session_status session_impl::status() const$/;"	f	class:libtorrent::aux::session_impl
status	torrent/src/torrent.cpp	/^	void torrent::status(torrent_status* st, status_flags_t const flags)$/;"	f	class:libtorrent::torrent
status	torrent/src/torrent_handle.cpp	/^	torrent_status torrent_handle::status(status_flags_t const flags) const$/;"	f	class:libtorrent::torrent_handle
status_code	torrent/include/libtorrent/alert_types.hpp	/^		int const TORRENT_DEPRECATED_MEMBER status_code;$/;"	m	struct:libtorrent::final
status_code	torrent/include/libtorrent/http_parser.hpp	/^		int status_code() const { return m_status_code; }$/;"	f	class:libtorrent::http_parser
status_label	virt-p2v/src/gui.c	/^  *v2v_output_sw, *v2v_output, *log_label, *status_label,$/;"	v	file:
status_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t status_notification = 6_bit;$/;"	m	class:libtorrent::alert
status_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::status_notification;$/;"	m	class:libtorrent::alert	file:
status_t	torrent/include/libtorrent/storage_defs.hpp	/^	enum class status_t : std::uint8_t$/;"	c	namespace:libtorrent
std	torrent/include/libtorrent/sha1_hash.hpp	/^namespace std$/;"	n
std	torrent/include/libtorrent/torrent_handle.hpp	/^namespace std$/;"	n
std	torrent/include/libtorrent/torrent_status.hpp	/^namespace std$/;"	n
std	torrent/include/libtorrent/units.hpp	/^namespace std {$/;"	n
step_session_time	torrent/src/torrent.cpp	/^	void torrent::step_session_time(int const seconds)$/;"	f	class:libtorrent::torrent
stop	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::stop()$/;"	f	class:libtorrent::dht::dht_tracker
stop_announcing	torrent/src/torrent.cpp	/^	void torrent::stop_announcing()$/;"	f	class:libtorrent::torrent
stop_dht	torrent/src/session_handle.cpp	/^	void session_handle::stop_dht()$/;"	f	class:libtorrent::session_handle
stop_dht	torrent/src/session_impl.cpp	/^	void session_impl::stop_dht()$/;"	f	class:libtorrent::aux::session_impl
stop_ip_notifier	torrent/src/session_impl.cpp	/^	void session_impl::stop_ip_notifier()$/;"	f	class:libtorrent::aux::session_impl
stop_lsd	torrent/src/session_handle.cpp	/^	void session_handle::stop_lsd()$/;"	f	class:libtorrent::session_handle
stop_lsd	torrent/src/session_impl.cpp	/^	void session_impl::stop_lsd()$/;"	f	class:libtorrent::aux::session_impl
stop_natpmp	torrent/src/session_handle.cpp	/^	void session_handle::stop_natpmp()$/;"	f	class:libtorrent::session_handle
stop_natpmp	torrent/src/session_impl.cpp	/^	void session_impl::stop_natpmp()$/;"	f	class:libtorrent::aux::session_impl
stop_spinner	virt-p2v/src/gui.c	/^stop_spinner (gpointer user_data)$/;"	f	file:
stop_threads	torrent/src/disk_io_thread_pool.cpp	/^	void disk_io_thread_pool::stop_threads(int num_to_stop)$/;"	f	class:libtorrent::disk_io_thread_pool
stop_torrent	src/torrent.cpp	/^void stop_torrent()$/;"	f
stop_torrent	torrent/include/libtorrent/disk_io_job.hpp	/^		, stop_torrent$/;"	m	class:libtorrent::job_action_t
stop_tracker_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			stop_tracker_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
stop_upnp	torrent/src/session_handle.cpp	/^	void session_handle::stop_upnp()$/;"	f	class:libtorrent::session_handle
stop_upnp	torrent/src/session_impl.cpp	/^	void session_impl::stop_upnp()$/;"	f	class:libtorrent::aux::session_impl
stop_when_ready	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t stop_when_ready = 10_bit;$/;"	m	namespace:libtorrent::torrent_flags
stop_when_ready	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER stop_when_ready = false;$/;"	m	struct:libtorrent::torrent_status
stop_when_ready	torrent/src/torrent.cpp	/^	void torrent::stop_when_ready(bool const b)$/;"	f	class:libtorrent::torrent
stop_when_ready	torrent/src/torrent_handle.cpp	/^	void torrent_handle::stop_when_ready(bool b) const$/;"	f	class:libtorrent::torrent_handle
stopped	torrent/include/libtorrent/tracker_manager.hpp	/^			stopped,$/;"	e	enum:libtorrent::tracker_request::event_t
stopping_torrent	torrent/include/libtorrent/error_code.hpp	/^			stopping_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
storage	include/task.h	/^    char storage[32];$/;"	m	struct:p2v_task
storage	include/torrent.h	/^	char storage[128];$/;"	m	struct:progress_info
storage	qt_pro/global.h	/^    char storage[36];$/;"	m	struct:progress_info
storage	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<storage_constructor_type> storage;$/;"	m	struct:libtorrent::add_torrent_params
storage	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t storage = 3_bit;$/;"	m	namespace:libtorrent::alert_category
storage	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		handler_storage<Size>& storage;$/;"	m	struct:libtorrent::aux::allocating_handler
storage	torrent/include/libtorrent/block_cache.hpp	/^		std::shared_ptr<storage_interface> storage;$/;"	m	struct:libtorrent::cached_piece_entry
storage	torrent/include/libtorrent/disk_io_job.hpp	/^		std::shared_ptr<storage_interface> storage;$/;"	m	struct:libtorrent::disk_io_job
storage	torrent/include/libtorrent/disk_io_thread.hpp	/^		storage_interface* storage;$/;"	m	struct:libtorrent::cached_piece_info
storage	torrent/include/libtorrent/torrent.hpp	/^		storage_index_t storage() const { return m_storage; }$/;"	f	class:libtorrent::torrent
storage	torrent/src/create_torrent.cpp	/^		storage_holder storage;$/;"	m	struct:libtorrent::__anon134::hash_state	file:
storage	virt-p2v/include/p2v-config.h	/^  char *storage;$/;"	m	struct:output_config
storage	virt-p2v/src/conversion.c	/^    char storage[128];$/;"	m	struct:progress_info	file:
storage_error	torrent/include/libtorrent/error_code.hpp	/^		explicit storage_error(error_code e): ec(e), file_idx(-1), operation(operation_t::unknown) {}$/;"	f	struct:libtorrent::storage_error
storage_error	torrent/include/libtorrent/error_code.hpp	/^		storage_error(): file_idx(-1), operation(operation_t::unknown) {}$/;"	f	struct:libtorrent::storage_error
storage_error	torrent/include/libtorrent/error_code.hpp	/^	struct TORRENT_EXPORT storage_error$/;"	s	namespace:libtorrent
storage_holder	torrent/include/libtorrent/disk_interface.hpp	/^		storage_holder(storage_index_t idx, disk_interface& disk_io)$/;"	f	struct:libtorrent::storage_holder
storage_holder	torrent/include/libtorrent/disk_interface.hpp	/^	struct storage_holder$/;"	s	namespace:libtorrent
storage_index	torrent/include/libtorrent/storage.hpp	/^		storage_index_t storage_index() const { return m_storage_index; }$/;"	f	struct:libtorrent::storage_interface
storage_interface	torrent/include/libtorrent/storage.hpp	/^		explicit storage_interface(file_storage const& fs) : m_files(fs) {}$/;"	f	struct:libtorrent::storage_interface
storage_interface	torrent/include/libtorrent/storage.hpp	/^	struct TORRENT_EXPORT storage_interface$/;"	s	namespace:libtorrent
storage_interface	torrent/include/libtorrent/storage_defs.hpp	/^	struct TORRENT_EXPORT storage_interface;$/;"	m	namespace:libtorrent	typeref:struct:libtorrent::TORRENT_EXPORT
storage_mode	torrent/include/libtorrent/add_torrent_params.hpp	/^		storage_mode_t storage_mode = storage_mode_sparse;$/;"	m	struct:libtorrent::add_torrent_params
storage_mode	torrent/include/libtorrent/torrent_status.hpp	/^		storage_mode_t storage_mode = storage_mode_sparse;$/;"	m	struct:libtorrent::torrent_status
storage_mode	torrent/src/torrent.cpp	/^	storage_mode_t torrent::storage_mode() const$/;"	f	class:libtorrent::torrent
storage_mode_allocate	torrent/include/libtorrent/storage_defs.hpp	/^		storage_mode_allocate,$/;"	e	enum:libtorrent::storage_mode_t
storage_mode_sparse	torrent/include/libtorrent/storage_defs.hpp	/^		storage_mode_sparse$/;"	e	enum:libtorrent::storage_mode_t
storage_mode_t	torrent/include/libtorrent/storage_defs.hpp	/^	enum storage_mode_t$/;"	g	namespace:libtorrent
storage_moved_alert	torrent/src/alert.cpp	/^	storage_moved_alert::storage_moved_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::storage_moved_alert
storage_moved_failed_alert	torrent/src/alert.cpp	/^	storage_moved_failed_alert::storage_moved_failed_alert($/;"	f	class:libtorrent::storage_moved_failed_alert
storage_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t storage_notification = 3_bit;$/;"	m	class:libtorrent::alert
storage_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::storage_notification;$/;"	m	class:libtorrent::alert	file:
storage_params	torrent/include/libtorrent/storage_defs.hpp	/^		storage_params(file_storage const& f, file_storage const* mf$/;"	f	struct:libtorrent::storage_params
storage_params	torrent/include/libtorrent/storage_defs.hpp	/^	struct TORRENT_EXPORT storage_params$/;"	s	namespace:libtorrent
storage_path	torrent/src/alert.cpp	/^	char const* storage_moved_alert::storage_path() const$/;"	f	class:libtorrent::storage_moved_alert
storage_piece_set	torrent/include/libtorrent/aux_/storage_piece_set.hpp	/^	struct TORRENT_EXPORT storage_piece_set$/;"	s	namespace:libtorrent::aux
storeDrv	src/StoreConfig.c	/^StoreDriver storeDrv = {$/;"	v
storeLba	include/StoreConfig.h	/^    uint64_t storeLba;           \/\/éç½®æ°æ®å¨å±ä½ç½®åç§»$/;"	m	struct:_StoreDriver
stored	torrent/src/puff.cpp	/^local int stored(struct state *s)$/;"	f
stpcpy	virt-p2v/include/gnulib/string.h	762;"	d
stpncpy	virt-p2v/include/gnulib/string.h	797;"	d
str2uuid	src/qcow2.c	/^int str2uuid(char *uuid, PYZYGUID GUID)$/;"	f
str_setting_entry_t	torrent/src/settings_pack.cpp	/^	struct str_setting_entry_t$/;"	s	namespace:libtorrent	file:
strcasestr	virt-p2v/include/gnulib/string.h	1149;"	d
strchr	virt-p2v/include/gnulib/string.h	807;"	d
strchrnul	virt-p2v/include/gnulib/string.h	846;"	d
strcpy	torrent/bak/udp_tracker.cpp	/^	bool strcpy(const char * szStr)$/;"	f	class:CDataStream
strcspn	virt-p2v/include/gnulib/string.h	966;"	d
strdup	virt-p2v/include/gnulib/string.h	874;"	d
strerror	virt-p2v/include/gnulib/string.h	/^_GL_CXXALIASWARN (strerror);$/;"	v
strerror	virt-p2v/include/gnulib/string.h	1463;"	d
strerror_override	virt-p2v/include/gnulib/strerror-override.h	53;"	d
strerror_r	virt-p2v/include/gnulib/string.h	/^_GL_CXXALIASWARN (strerror_r);$/;"	v
strerror_r	virt-p2v/include/gnulib/string.h	1474;"	d
strerror_r	virt-p2v/include/gnulib/string.h	1475;"	d
strerror_r	virt-p2v/include/gnulib/string.h	1491;"	d
strictConversion	torrent/include/libtorrent/ConvertUTF.h	/^	strictConversion = 0,$/;"	e	enum:__anon18
strict_end_game_mode	torrent/include/libtorrent/settings_pack.hpp	/^			strict_end_game_mode,$/;"	e	enum:libtorrent::settings_pack::bool_types
strict_super_seeding	torrent/include/libtorrent/settings_pack.hpp	/^			strict_super_seeding TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
string	cJSON/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
string	include/cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
string	torrent/include/libtorrent/aux_/escape_string.hpp	/^	namespace string$/;"	n	namespace:libtorrent
string	torrent/include/libtorrent/bdecode.hpp	/^	{ none, dict, list, string, integer, end };$/;"	m	struct:libtorrent::detail::bdecode_token	typeref:enum:libtorrent::detail::bdecode_token::
string	torrent/src/entry.cpp	/^	entry::string_type const& entry::string() const$/;"	f	class:libtorrent::entry::entry
string	torrent/src/entry.cpp	/^	entry::string_type& entry::string()$/;"	f	class:libtorrent::entry
string	virt-p2v/include/libxml2-writer-macros.h	157;"	d
string	virt-p2v/libguestfs/libxml2-writer-macros.h	157;"	d
string_begins_no_case	torrent/src/string_util.cpp	/^	bool string_begins_no_case(char const* s1, char const* s2)$/;"	f	namespace:libtorrent
string_cstr	torrent/include/libtorrent/lazy_entry.hpp	/^		char const* string_cstr() const$/;"	f	struct:libtorrent::lazy_entry
string_ends_with	torrent/src/string_util.cpp	/^	bool string_ends_with(string_view s1, string_view s2)$/;"	f	namespace:libtorrent
string_equal	torrent/src/lazy_bdecode.cpp	/^		bool string_equal(char const* str1, char const* str2, int len2)$/;"	f	namespace:libtorrent::__anon77
string_equal_no_case	torrent/src/string_util.cpp	/^	bool string_equal_no_case(string_view s1, string_view s2)$/;"	f	namespace:libtorrent
string_format	virt-p2v/include/libxml2-writer-macros.h	169;"	d
string_format	virt-p2v/libguestfs/libxml2-writer-macros.h	169;"	d
string_length	torrent/include/libtorrent/lazy_entry.hpp	/^		int string_length() const$/;"	f	struct:libtorrent::lazy_entry
string_length	torrent/src/bdecode.cpp	/^	int bdecode_node::string_length() const$/;"	f	class:libtorrent::bdecode_node
string_pstr	torrent/include/libtorrent/lazy_entry.hpp	/^		pascal_string string_pstr() const$/;"	f	struct:libtorrent::lazy_entry
string_ptr	torrent/include/libtorrent/aux_/string_ptr.hpp	/^		explicit string_ptr(string_view str) : m_ptr(new char[str.size() + 1])$/;"	f	struct:libtorrent::aux::string_ptr
string_ptr	torrent/include/libtorrent/aux_/string_ptr.hpp	/^		string_ptr(string_ptr&& rhs)$/;"	f	struct:libtorrent::aux::string_ptr
string_ptr	torrent/include/libtorrent/aux_/string_ptr.hpp	/^	struct string_ptr$/;"	s	namespace:libtorrent::aux
string_ptr	torrent/include/libtorrent/lazy_entry.hpp	/^		char const* string_ptr() const$/;"	f	struct:libtorrent::lazy_entry
string_ptr	torrent/src/bdecode.cpp	/^	char const* bdecode_node::string_ptr() const$/;"	f	class:libtorrent::bdecode_node
string_t	torrent/include/libtorrent/bdecode.hpp	/^		string_t,$/;"	e	enum:bdecode_node::type_t
string_t	torrent/include/libtorrent/entry.hpp	/^			string_t,$/;"	e	enum:libtorrent::entry::data_type
string_t	torrent/include/libtorrent/lazy_entry.hpp	/^			none_t, dict_t, list_t, string_t, int_t$/;"	e	enum:libtorrent::lazy_entry::entry_type_t
string_type_base	torrent/include/libtorrent/settings_pack.hpp	/^			string_type_base = 0x0000,$/;"	e	enum:libtorrent::settings_pack::type_bases
string_types	torrent/include/libtorrent/settings_pack.hpp	/^		enum string_types$/;"	g	struct:libtorrent::settings_pack
string_value	torrent/include/libtorrent/lazy_entry.hpp	/^		std::string string_value() const$/;"	f	struct:libtorrent::lazy_entry
string_value	torrent/src/bdecode.cpp	/^	string_view bdecode_node::string_value() const$/;"	f	class:libtorrent::bdecode_node
strip_string	torrent/src/string_util.cpp	/^	string_view strip_string(string_view in)$/;"	f	namespace:libtorrent
strncat	virt-p2v/include/gnulib/string.h	898;"	d
strndup	virt-p2v/include/gnulib/string.h	924;"	d
strnlen	virt-p2v/include/gnulib/string.h	954;"	d
strong_typedef	torrent/include/libtorrent/units.hpp	/^		constexpr explicit strong_typedef(UnderlyingType val) : m_val(val) {}$/;"	f	struct:libtorrent::aux::strong_typedef
strong_typedef	torrent/include/libtorrent/units.hpp	/^		constexpr strong_typedef(UnderlyingType val) : m_val(val) {}$/;"	f	struct:libtorrent::aux::strong_typedef
strong_typedef	torrent/include/libtorrent/units.hpp	/^	struct strong_typedef$/;"	s	namespace:libtorrent::aux
strpbrk	virt-p2v/include/gnulib/string.h	1005;"	d
strrchr	virt-p2v/include/gnulib/string.h	1025;"	d
strsep	virt-p2v/include/gnulib/string.h	1064;"	d
strsignal	virt-p2v/include/gnulib/string.h	1515;"	d
strspn	virt-p2v/include/gnulib/string.h	1015;"	d
strstr	virt-p2v/include/gnulib/string.h	1101;"	d
strtod	virt-p2v/include/gnulib/stdlib.h	1481;"	d
strtoimax	virt-p2v/include/gnulib/inttypes.h	1580;"	d
strtoimax	virt-p2v/include/gnulib/inttypes.in.h	/^_GL_CXXALIASWARN (strtoimax);$/;"	v
strtoimax	virt-p2v/include/gnulib/inttypes.in.h	1090;"	d
strtoimax	virt-p2v/include/gnulib/inttypes.in.h	1091;"	d
strtoimax	virt-p2v/include/gnulib/inttypes.in.h	1098;"	d
strtoimax	virt-p2v/include/gnulib/inttypes.in.h	1106;"	d
strtok_r	virt-p2v/include/gnulib/string.h	1215;"	d
strtol_error	include/xstrtol.h	/^enum strtol_error$/;"	g
strtol_error	include/xstrtol.h	/^typedef enum strtol_error strtol_error;$/;"	t	typeref:enum:strtol_error
strtol_error	virt-p2v/include/gnulib/xstrtol.h	/^enum strtol_error$/;"	g
strtol_error	virt-p2v/include/gnulib/xstrtol.h	/^typedef enum strtol_error strtol_error;$/;"	t	typeref:enum:strtol_error
strtold	virt-p2v/include/gnulib/stdlib.h	1507;"	d
strtoll	virt-p2v/include/gnulib/stdlib.h	/^_GL_CXXALIASWARN (strtoll);$/;"	v
strtoll	virt-p2v/include/gnulib/stdlib.h	1532;"	d
strtoull	virt-p2v/include/gnulib/stdlib.h	/^_GL_CXXALIASWARN (strtoull);$/;"	v
strtoull	virt-p2v/include/gnulib/stdlib.h	1557;"	d
strtoumax	virt-p2v/include/gnulib/inttypes.h	1606;"	d
strtoumax	virt-p2v/include/gnulib/inttypes.in.h	/^_GL_CXXALIASWARN (strtoumax);$/;"	v
strtoumax	virt-p2v/include/gnulib/inttypes.in.h	1116;"	d
strtoumax	virt-p2v/include/gnulib/inttypes.in.h	1117;"	d
strtoumax	virt-p2v/include/gnulib/inttypes.in.h	1124;"	d
strtoumax	virt-p2v/include/gnulib/inttypes.in.h	1132;"	d
strupr	src/tools.c	/^char *strupr(char *str){$/;"	f
strverscmp	virt-p2v/include/gnulib/string.h	1531;"	d
strview_less	torrent/include/libtorrent/entry.hpp	/^		struct strview_less$/;"	s	namespace:libtorrent::aux
stype	include/StoreConfig.h	/^    uint8_t     stype;   $/;"	m	struct:_YZY_QCOW_ENTRY
subdir	torrent/include/libtorrent/Makefile	/^subdir = include\/libtorrent$/;"	m
submit_disk_jobs	torrent/src/session_impl.cpp	/^	void session_impl::submit_disk_jobs()$/;"	f	class:libtorrent::aux::session_impl
subscribe_drained	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::subscribe_drained(utp_socket_impl* s)$/;"	f	class:libtorrent::utp_socket_manager
subscribe_drained	torrent/src/utp_stream.cpp	/^void utp_socket_impl::subscribe_drained()$/;"	f	class:libtorrent::utp_socket_impl
subscribe_writable	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::subscribe_writable(utp_socket_impl* s)$/;"	f	class:libtorrent::utp_socket_manager
subspan	torrent/include/libtorrent/span.hpp	/^		span<T> subspan(index_type const offset) const$/;"	f	struct:libtorrent::span
subspan	torrent/include/libtorrent/span.hpp	/^		span<T> subspan(index_type const offset, difference_type const count) const$/;"	f	struct:libtorrent::span
sudo	virt-p2v/include/p2v-config.h	/^  bool sudo;$/;"	m	struct:auth_config
sudo_button	virt-p2v/src/gui.c	/^  *username_entry, *password_entry, *identity_entry, *sudo_button,$/;"	v	file:
sudo_password_re	virt-p2v/src/ssh.c	/^static pcre *sudo_password_re;$/;"	v	file:
suffix_object	cJSON/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:
suffix_object	src/cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:
suggest_mode	torrent/include/libtorrent/settings_pack.hpp	/^			suggest_mode,$/;"	e	enum:libtorrent::settings_pack::int_types
suggest_piece	torrent/include/libtorrent/aux_/suggest_piece.hpp	/^struct suggest_piece$/;"	s	namespace:libtorrent::aux
suggest_read_cache	torrent/include/libtorrent/settings_pack.hpp	/^		enum suggest_mode_t : std::uint8_t { no_piece_suggestions = 0, suggest_read_cache = 1 };$/;"	m	struct:libtorrent::settings_pack	typeref:enum:libtorrent::settings_pack::
suggested_pieces	torrent/bak/connection_tester.cpp	/^	std::vector<piece_index_t> suggested_pieces;$/;"	m	struct:peer_conn	file:
suggested_pieces	torrent/include/libtorrent/peer_connection.hpp	/^		std::vector<piece_index_t> const& suggested_pieces() const { return m_suggested_pieces; }$/;"	f	class:libtorrent::peer_connection::std
suggested_pieces	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::suggested_pieces;$/;"	m	class:libtorrent::picker_log_alert	file:
super_seeded_piece	torrent/include/libtorrent/peer_connection.hpp	/^		bool super_seeded_piece(piece_index_t index) const$/;"	f	class:libtorrent::peer_connection
super_seeding	torrent/include/libtorrent/torrent.hpp	/^		bool super_seeding() const$/;"	f	class:libtorrent::torrent
super_seeding	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t super_seeding = 8_bit;$/;"	m	namespace:libtorrent::torrent_flags
super_seeding	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER super_seeding = false;$/;"	m	struct:libtorrent::torrent_status
super_seeding	torrent/src/torrent_handle.cpp	/^	bool torrent_handle::super_seeding() const$/;"	f	class:libtorrent::torrent_handle
super_seeding	torrent/src/torrent_handle.cpp	/^	void torrent_handle::super_seeding(bool on) const$/;"	f	class:libtorrent::torrent_handle
superseed_piece	torrent/src/peer_connection.cpp	/^	void peer_connection::superseed_piece(piece_index_t const replace_piece$/;"	f	class:libtorrent::peer_connection
supplementary	include/packet.h	/^    u16_t  supplementary;       \/\/è¡¥ååè®®å¤´é¿åº¦  æ²¡æå°±æ¯ 0x0000$/;"	m	struct:yzy_packet
support_extensions	torrent/include/libtorrent/bt_peer_connection.hpp	/^		bool support_extensions() const { return m_supports_extensions; }$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
support_extensions	torrent/src/peer_connection_handle.cpp	/^bool bt_peer_connection_handle::support_extensions() const$/;"	f	class:libtorrent::bt_peer_connection_handle
support_merkle_torrents	torrent/include/libtorrent/settings_pack.hpp	/^			support_merkle_torrents,$/;"	e	enum:libtorrent::settings_pack::bool_types
support_share_mode	torrent/include/libtorrent/settings_pack.hpp	/^			support_share_mode,$/;"	e	enum:libtorrent::settings_pack::bool_types
supports_arm_crc32c	torrent/src/cpuid.cpp	/^	bool supports_arm_crc32c()$/;"	f	namespace:libtorrent::aux::__anon128
supports_arm_neon	torrent/src/cpuid.cpp	/^	bool supports_arm_neon()$/;"	f	namespace:libtorrent::aux::__anon128
supports_encryption	torrent/include/libtorrent/bt_peer_connection.hpp	/^		bool supports_encryption() const$/;"	f	class:libtorrent::bt_peer_connection
supports_encryption	torrent/src/peer_connection_handle.cpp	/^bool bt_peer_connection_handle::supports_encryption() const$/;"	f	class:libtorrent::bt_peer_connection_handle
supports_extensions	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t supports_extensions = 4_bit;$/;"	m	struct:libtorrent::peer_info
supports_extensions	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::supports_extensions;$/;"	m	class:libtorrent::peer_info	file:
supports_holepunch	torrent/include/libtorrent/bt_peer_connection.hpp	/^		bool supports_holepunch() const { return m_holepunch_id != 0; }$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
supports_holepunch	torrent/include/libtorrent/torrent_peer.hpp	/^		bool supports_holepunch:1;$/;"	m	struct:libtorrent::torrent_peer
supports_ipv6	torrent/src/broadcast_socket.cpp	/^	bool supports_ipv6()$/;"	f	namespace:libtorrent
supports_keepalive	torrent/include/libtorrent/torrent.hpp	/^		bool supports_keepalive = true;$/;"	m	struct:libtorrent::web_seed_t
supports_mmx	torrent/src/cpuid.cpp	/^	bool supports_mmx()$/;"	f	namespace:libtorrent::aux::__anon128
supports_specific_external	torrent/include/libtorrent/upnp.hpp	/^		bool supports_specific_external = true;$/;"	m	struct:libtorrent::final::rootdevice
supports_sse42	torrent/src/cpuid.cpp	/^	bool supports_sse42()$/;"	f	namespace:libtorrent::aux::__anon128
supports_utp	torrent/include/libtorrent/torrent_peer.hpp	/^		bool supports_utp:1;$/;"	m	struct:libtorrent::torrent_peer
swap	torrent/include/libtorrent/buffer.hpp	/^	void swap(buffer& b)$/;"	f	class:libtorrent::buffer
swap	torrent/include/libtorrent/copy_ptr.hpp	/^		void swap(copy_ptr<T>& p) { std::swap(*this, p); }$/;"	f	struct:libtorrent::copy_ptr
swap	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		void swap(heterogeneous_queue& rhs)$/;"	f	struct:libtorrent::heterogeneous_queue
swap	torrent/include/libtorrent/lazy_entry.hpp	/^		void swap(lazy_entry& e)$/;"	f	struct:libtorrent::lazy_entry
swap	torrent/include/libtorrent/tailqueue.hpp	/^		void swap(tailqueue<T>& rhs)$/;"	f	struct:libtorrent::tailqueue
swap	torrent/src/bdecode.cpp	/^	void bdecode_node::swap(bdecode_node& n)$/;"	f	class:libtorrent::bdecode_node
swap	torrent/src/entry.cpp	/^	void entry::swap(entry& e)$/;"	f	class:libtorrent::entry
swap	torrent/src/stack_allocator.cpp	/^	void stack_allocator::swap(stack_allocator& rhs)$/;"	f	class:libtorrent::aux::stack_allocator
swap	torrent/src/torrent_info.cpp	/^	void torrent_info::swap(torrent_info& ti)$/;"	f	class:libtorrent::torrent_info
switch_recv_crypto	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::switch_recv_crypto(std::shared_ptr<crypto_plugin> crypto)$/;"	f	class:libtorrent::bt_peer_connection
switch_recv_crypto	torrent/src/pe_crypto.cpp	/^	void encryption_handler::switch_recv_crypto(std::shared_ptr<crypto_plugin> crypto$/;"	f	class:libtorrent::encryption_handler
switch_recv_crypto	torrent/src/peer_connection_handle.cpp	/^void bt_peer_connection_handle::switch_recv_crypto(std::shared_ptr<crypto_plugin> crypto)$/;"	f	class:libtorrent::bt_peer_connection_handle
switch_send_crypto	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::switch_send_crypto(std::shared_ptr<crypto_plugin> crypto)$/;"	f	class:libtorrent::bt_peer_connection
switch_send_crypto	torrent/src/pe_crypto.cpp	/^	bool encryption_handler::switch_send_crypto(std::shared_ptr<crypto_plugin> crypto$/;"	f	class:libtorrent::encryption_handler
switch_send_crypto	torrent/src/peer_connection_handle.cpp	/^void bt_peer_connection_handle::switch_send_crypto(std::shared_ptr<crypto_plugin> crypto)$/;"	f	class:libtorrent::bt_peer_connection_handle
symbol	torrent/src/puff.cpp	/^    short *symbol;      \/* canonically ordered symbols *\/$/;"	m	struct:huffman	file:
symlink	torrent/include/libtorrent/operations.hpp	/^		symlink,$/;"	m	class:libtorrent::operation_t
symlink	torrent/src/file_storage.cpp	/^	std::string const& file_storage::symlink(file_index_t const index) const$/;"	f	class:libtorrent::std::file_storage
symlink	torrent/src/file_storage.cpp	/^	std::string const& file_storage::symlink(internal_file_entry const& fe) const$/;"	f	class:libtorrent::std::file_storage
symlink	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (symlink);$/;"	v
symlink	virt-p2v/include/gnulib/unistd.h	1993;"	d
symlink_attribute	torrent/include/libtorrent/file_storage.hpp	/^		bool symlink_attribute:1;$/;"	m	struct:libtorrent::file_entry
symlink_attribute	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t symlink_attribute:1;$/;"	m	struct:libtorrent::internal_file_entry
symlink_index	torrent/include/libtorrent/file_storage.hpp	/^		std::uint64_t symlink_index:15;$/;"	m	struct:libtorrent::internal_file_entry
symlink_path	torrent/include/libtorrent/file_storage.hpp	/^		std::string symlink_path;$/;"	m	struct:libtorrent::file_entry
symlinkat	virt-p2v/include/gnulib/unistd.h	2023;"	d
symlinks	torrent/include/libtorrent/create_torrent.hpp	/^		static constexpr create_flags_t symlinks = 3_bit;$/;"	m	struct:libtorrent::create_torrent
symlinks	torrent/src/create_torrent.cpp	/^	constexpr create_flags_t create_torrent::symlinks;$/;"	m	class:libtorrent::create_torrent	file:
syn	include/socket.h	/^    unsigned char syn;$/;"	m	struct:_req_head
syn	qt_pro/pipethread.cpp	/^    unsigned char syn;$/;"	m	struct:_req_head	file:
syn_resends	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int syn_resends() const { return m_sett.get_int(settings_pack::utp_syn_resends); }$/;"	f	struct:libtorrent::utp_socket_manager
sync_call	torrent/src/session_handle.cpp	/^	void session_handle::sync_call(Fun f, Args&&... a) const$/;"	f	class:libtorrent::session_handle
sync_call	torrent/src/torrent_handle.cpp	/^	void torrent_handle::sync_call(Fun f, Args&&... a) const$/;"	f	class:libtorrent::torrent_handle
sync_call_ret	torrent/src/session_handle.cpp	/^	Ret session_handle::sync_call_ret(Fun f, Args&&... a) const$/;"	f	class:libtorrent::session_handle
sync_call_ret	torrent/src/torrent_handle.cpp	/^	Ret torrent_handle::sync_call_ret(Ret def, Fun f, Args&&... a) const$/;"	f	class:libtorrent::torrent_handle
sync_hash_not_found	torrent/include/libtorrent/error_code.hpp	/^			sync_hash_not_found,$/;"	e	enum:libtorrent::errors::error_code_enum
sys_type	include/packet.h	/^    char sys_type;$/;"	m	struct:yzy_torrent
sys_type	test/test.c	/^    char sys_type;$/;"	m	struct:yzy_torrent	file:
sysconfdir	torrent/include/libtorrent/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
system	torrent/include/libtorrent/bdecode.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	torrent/include/libtorrent/error_code.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	torrent/include/libtorrent/gzip.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	torrent/include/libtorrent/i2p_stream.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	torrent/include/libtorrent/natpmp.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	torrent/include/libtorrent/socks5_stream.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
system	torrent/include/libtorrent/upnp.hpp	/^namespace boost { namespace system {$/;"	n	namespace:boost
t	torrent/include/libtorrent/session_handle.hpp	/^		session_handle(session_handle const& t) = default;$/;"	m	struct:libtorrent::session_handle
t	torrent/include/libtorrent/torrent_handle.hpp	/^		torrent_handle(torrent_handle const& t) = default;$/;"	m	struct:libtorrent::torrent_handle
t	torrent/src/peer_connection.cpp	/^		std::shared_ptr<torrent> t;$/;"	m	struct:libtorrent::check_postcondition	file:
t	torrent/src/socket_type.cpp	/^		std::shared_ptr<deadline_timer> t;$/;"	m	struct:libtorrent::aux::socket_closer	file:
t	torrent/src/torrent_info.cpp	/^			web_seed_entry::type_t t;$/;"	m	struct:libtorrent::__anon89::filter_web_seed_type	file:
table	src/StoreConfig.c	/^uint32_t table[256];$/;"	v
table_attach	virt-p2v/include/gui-gtk3-compat.h	66;"	d
table_attach	virt-p2v/include/gui-gtk3-compat.h	83;"	d
table_new	virt-p2v/include/gui-gtk3-compat.h	64;"	d
table_new	virt-p2v/include/gui-gtk3-compat.h	81;"	d
tag	include/StoreConfig.h	/^    char                tag[8]; \/\/ "yzyVOI"   $/;"	m	struct:_YZY_STORE_CONFIG
tag_stack	torrent/include/libtorrent/upnp.hpp	/^	std::vector<string_view> tag_stack;$/;"	m	struct:libtorrent::parse_state
tag_version	torrent/include/libtorrent/fingerprint.hpp	/^		int tag_version;$/;"	m	struct:libtorrent::fingerprint
tailqueue	torrent/include/libtorrent/tailqueue.hpp	/^		tailqueue(): m_first(nullptr), m_last(nullptr), m_size(0) {}$/;"	f	struct:libtorrent::tailqueue
tailqueue	torrent/include/libtorrent/tailqueue.hpp	/^	struct tailqueue$/;"	s	namespace:libtorrent
tailqueue_iterator	torrent/include/libtorrent/tailqueue.hpp	/^		explicit tailqueue_iterator(T* cur)$/;"	f	struct:libtorrent::tailqueue_iterator
tailqueue_iterator	torrent/include/libtorrent/tailqueue.hpp	/^	struct tailqueue_iterator$/;"	s	namespace:libtorrent
tailqueue_node	torrent/include/libtorrent/tailqueue.hpp	/^		tailqueue_node() : next(nullptr) {}$/;"	f	struct:libtorrent::tailqueue_node
tailqueue_node	torrent/include/libtorrent/tailqueue.hpp	/^	struct tailqueue_node$/;"	s	namespace:libtorrent
target	torrent/include/libtorrent/Makefile	/^target = x86_64-pc-linux-gnu$/;"	m
target	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	node_id const& target() const { return m_target; }$/;"	f	struct:libtorrent::dht::traversal_algorithm
target	torrent/src/udp_socket.cpp	/^	udp::endpoint target() const { return m_udp_proxy_addr; }$/;"	f	struct:libtorrent::socks5
targetExhausted	torrent/include/libtorrent/ConvertUTF.h	/^	targetExhausted,  \/* insuff. room in target for conversion *\/$/;"	e	enum:ConversionResult
target_addr	torrent/kademlia/rpc_manager.cpp	/^address observer::target_addr() const$/;"	f	class:libtorrent::dht::observer
target_alias	torrent/include/libtorrent/Makefile	/^target_alias = $/;"	m
target_cpu	torrent/include/libtorrent/Makefile	/^target_cpu = x86_64$/;"	m
target_delay	torrent/include/libtorrent/utp_socket_manager.hpp	/^		int target_delay() const { return m_sett.get_int(settings_pack::utp_target_delay) * 1000; }$/;"	f	struct:libtorrent::utp_socket_manager
target_dl_queue_length	torrent/include/libtorrent/peer_info.hpp	/^		int target_dl_queue_length;$/;"	m	struct:libtorrent::peer_info
target_ep	torrent/kademlia/rpc_manager.cpp	/^udp::endpoint observer::target_ep() const$/;"	f	class:libtorrent::dht::observer
target_exhausted	torrent/include/libtorrent/utf8.hpp	/^			target_exhausted,$/;"	e	enum:libtorrent::utf8_errors::error_code_enum
target_os	torrent/include/libtorrent/Makefile	/^target_os = linux-gnu$/;"	m
target_triplet	torrent/include/libtorrent/Makefile	/^target_triplet = x86_64-pc-linux-gnu$/;"	m
target_vendor	torrent/include/libtorrent/Makefile	/^target_vendor = pc$/;"	m
target_warning_label	virt-p2v/src/gui.c	/^  *vcpus_warning, *memory_warning, *target_warning_label,$/;"	v	file:
task_events_info_count	torrent/include/libtorrent/debug.hpp	/^const mach_msg_type_number_t task_events_info_count = TASK_EVENTS_INFO_COUNT;$/;"	v
task_loop	src/task.c	/^void task_loop()$/;"	f
task_queue	src/task.c	/^QUEUE task_queue;$/;"	v
task_uuid	include/packet.h	/^	char task_uuid[36];$/;"	m	struct:yzy_torrent
tcp	torrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
tcp	torrent/include/libtorrent/portmap.hpp	/^		none, tcp, udp$/;"	m	class:libtorrent::portmap_protocol
tcp	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr portmap_protocol tcp = portmap_protocol::tcp;$/;"	m	struct:libtorrent::session_handle
tcp_external_port	torrent/include/libtorrent/aux_/session_impl.hpp	/^		int tcp_external_port()$/;"	f	struct:libtorrent::aux::listen_socket_t
tcp_keepalive_idle	torrent/include/libtorrent/aux_/keepalive.hpp	/^		explicit tcp_keepalive_idle(int seconds): m_value(seconds) {}$/;"	f	struct:libtorrent::aux::tcp_keepalive_idle
tcp_keepalive_idle	torrent/include/libtorrent/aux_/keepalive.hpp	/^	struct tcp_keepalive_idle$/;"	s	namespace:libtorrent::aux
tcp_keepalive_interval	torrent/include/libtorrent/aux_/keepalive.hpp	/^		explicit tcp_keepalive_interval(int seconds): m_value(seconds) {}$/;"	f	struct:libtorrent::aux::tcp_keepalive_interval
tcp_keepalive_interval	torrent/include/libtorrent/aux_/keepalive.hpp	/^	struct tcp_keepalive_interval$/;"	s	namespace:libtorrent::aux
tcp_loop	src/client.c	/^static int tcp_loop(int sockfd)$/;"	f	file:
tcp_loop	test/test.c	/^static void tcp_loop(int listenfd)$/;"	f	file:
tcp_notsent_lowat	torrent/include/libtorrent/socket.hpp	/^		explicit tcp_notsent_lowat(int val) : m_value(val) {}$/;"	f	struct:libtorrent::tcp_notsent_lowat
tcp_notsent_lowat	torrent/include/libtorrent/socket.hpp	/^	struct tcp_notsent_lowat$/;"	s	namespace:libtorrent
tcp_peer_class_id	torrent/src/session_handle.cpp	/^	constexpr peer_class_t session_handle::tcp_peer_class_id;$/;"	m	class:libtorrent::session_handle	file:
tcp_port_mapping	torrent/include/libtorrent/aux_/session_impl.hpp	/^		aux::array<listen_port_mapping, 2, portmap_transport> tcp_port_mapping;$/;"	m	struct:libtorrent::aux::listen_socket_t
tcp_ssl	torrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
temp_storage	torrent/bak/custom_storage.cpp	/^	explicit temp_storage(lt::file_storage const& fs) : lt::storage_interface(fs) {}$/;"	f	struct:temp_storage
temp_storage	torrent/bak/custom_storage.cpp	/^struct temp_storage : lt::storage_interface$/;"	s	file:
temp_storage_constructor	torrent/bak/custom_storage.cpp	/^lt::storage_interface* temp_storage_constructor(lt::storage_params const& params, lt::file_pool&)$/;"	f
template_desc	include/packet.h	/^    unsigned int template_desc[128];$/;"	m	struct:template_info
template_desc	qt_pro/global.h	/^    unsigned int template_desc[128];$/;"	m	struct:template_info
template_info	include/packet.h	/^struct template_info{$/;"	s
template_info	qt_pro/global.h	/^struct template_info{$/;"	s
template_name	include/packet.h	/^    unsigned char template_name[36];$/;"	m	struct:template_info
template_name	qt_pro/global.h	/^    unsigned char template_name[36];$/;"	m	struct:template_info
terminal	include/config.h	/^    terminal_info terminal;$/;"	m	struct:config
terminal	qt_pro/external.h	/^    terminal_info terminal;$/;"	m	struct:config
terminal_info	include/config.h	/^struct terminal_info{$/;"	s
terminal_info	include/config.h	/^typedef struct terminal_info terminal_info;$/;"	t	typeref:struct:terminal_info
terminal_info	qt_pro/external.h	/^struct terminal_info{$/;"	s
terminal_info	qt_pro/external.h	/^typedef struct terminal_info terminal_info;$/;"	t	typeref:struct:terminal_info
terminal_size	torrent/bak/print.cpp	/^std::pair<int, int> terminal_size()$/;"	f
test_connection	virt-p2v/src/ssh.c	/^test_connection (struct config *config)$/;"	f
test_connection_clicked	virt-p2v/src/gui.c	/^test_connection_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
test_connection_error	virt-p2v/src/gui.c	/^test_connection_error (gpointer user_data)$/;"	f	file:
test_connection_ok	virt-p2v/src/gui.c	/^test_connection_ok (gpointer user_data)$/;"	f	file:
test_connection_thread	virt-p2v/src/gui.c	/^test_connection_thread (void *data)$/;"	f	file:
test_corruption	torrent/bak/connection_tester.cpp	/^bool test_corruption = false;$/;"	v
test_disk	virt-p2v/src/p2v.c	/^static const char *test_disk = NULL;$/;"	v	file:
test_disk	virt-p2v/src/p2v_transform.c	/^static const char *test_disk = NULL;$/;"	v	file:
test_mode	torrent/bak/connection_tester.cpp	/^test_mode_t test_mode = none;$/;"	v
test_mode_t	torrent/bak/connection_tester.cpp	/^enum test_mode_t{ none, upload_test, download_test, dual_test };$/;"	g	file:
test_nbd_servers	virt-p2v/src/nbd.c	/^test_nbd_servers (void)$/;"	f
test_socket_state	torrent/src/utp_stream.cpp	/^bool utp_socket_impl::test_socket_state()$/;"	f	class:libtorrent::utp_socket_impl
th	torrent/include/libtorrent/aux_/route.h	/^	void	*th;				\/* thread ptr *\/$/;"	m	struct:ctrace
thread	torrent/include/libtorrent/aux_/session_impl.hpp	/^				std::thread thread;$/;"	m	struct:libtorrent::aux::final::work_thread_t
thread_active	torrent/src/disk_io_thread_pool.cpp	/^	void disk_io_thread_pool::thread_active()$/;"	f	class:libtorrent::disk_io_thread_pool
thread_client	src/client.c	/^void *thread_client(void *param)$/;"	f
thread_event	src/event.c	/^void *thread_event(void *param)$/;"	f
thread_idle	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		void thread_idle() { ++m_num_idle_threads; }$/;"	f	struct:libtorrent::disk_io_thread_pool
thread_qt	src/window.c	/^void *thread_qt(void *param)$/;"	f
thread_server	test/test.c	/^void *thread_server(void *param)$/;"	f
thread_started	torrent/include/libtorrent/debug.hpp	/^		void thread_started()$/;"	f	struct:libtorrent::single_threaded
thread_task	src/task.c	/^void *thread_task(void *param)$/;"	f
threads	virt-p2v/include/p2v-config.h	/^  unsigned threads;$/;"	m	struct:cpu_config
throttle	torrent/include/libtorrent/bandwidth_limit.hpp	/^	int throttle() const$/;"	f	struct:libtorrent::bandwidth_channel
throttle	torrent/src/bandwidth_limit.cpp	/^	void bandwidth_channel::throttle(int const limit)$/;"	f	class:libtorrent::bandwidth_channel
throw_error	torrent/src/entry.cpp	/^	[[noreturn]] inline void throw_error()$/;"	f	namespace:libtorrent::__anon62
throw_ex	torrent/include/libtorrent/aux_/throw.hpp	/^	[[noreturn]] void throw_ex(Args&&...) {$/;"	f	namespace:libtorrent::aux
throw_exception	torrent/src/session_impl.cpp	/^	void throw_exception(std::exception const& e) { std::abort(); }$/;"	f	namespace:boost
throw_invalid_handle	torrent/src/torrent_handle.cpp	/^	[[noreturn]] void throw_invalid_handle()$/;"	f	namespace:libtorrent
ti	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::shared_ptr<torrent_info> ti;$/;"	m	struct:libtorrent::add_torrent_params
ti	torrent/include/libtorrent/resolve_links.hpp	/^			std::shared_ptr<const torrent_info> ti;$/;"	m	struct:libtorrent::resolve_links::link_t
tick	torrent/include/libtorrent/extensions.hpp	/^		virtual void tick() {}$/;"	f	struct:libtorrent::peer_plugin
tick	torrent/include/libtorrent/extensions.hpp	/^		virtual void tick() {}$/;"	f	struct:libtorrent::torrent_plugin
tick	torrent/include/libtorrent/storage.hpp	/^		virtual bool tick() { return false; }$/;"	f	struct:libtorrent::storage_interface
tick	torrent/kademlia/node.cpp	/^void node::tick()$/;"	f	class:libtorrent::dht::node
tick	torrent/kademlia/rpc_manager.cpp	/^time_duration rpc_manager::tick()$/;"	f	class:libtorrent::dht::rpc_manager
tick	torrent/src/storage.cpp	/^	bool default_storage::tick()$/;"	f	class:libtorrent::default_storage
tick	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::tick(time_point now)$/;"	f	class:libtorrent::utp_socket_manager
tick	torrent/src/utp_stream.cpp	/^void utp_socket_impl::tick(time_point const now)$/;"	f	class:libtorrent::utp_socket_impl
tick_feature	torrent/include/libtorrent/extensions.hpp	/^		static constexpr feature_flags_t tick_feature = 2_bit;$/;"	m	struct:libtorrent::plugin
tick_feature	torrent/src/session.cpp	/^	constexpr feature_flags_t plugin::tick_feature;$/;"	m	class:libtorrent::plugin	file:
tick_interval	torrent/include/libtorrent/settings_pack.hpp	/^			tick_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
tick_utp_impl	torrent/src/utp_stream.cpp	/^void tick_utp_impl(utp_socket_impl* s, time_point now)$/;"	f	namespace:libtorrent
tier	torrent/include/libtorrent/announce_entry.hpp	/^		std::uint8_t tier = 0;$/;"	m	struct:libtorrent::announce_entry
tier	torrent/src/torrent.cpp	/^			int tier = INT_MAX;$/;"	m	struct:libtorrent::__anon105::announce_state	file:
tier	torrent/src/torrent.cpp	/^			int tier = INT_MAX;$/;"	m	struct:libtorrent::__anon112::timer_state	file:
time_critical	torrent/include/libtorrent/peer_connection.hpp	/^		static constexpr request_flags_t time_critical = 0_bit;$/;"	m	class:libtorrent::peer_connection
time_critical	torrent/src/alert.cpp	/^	constexpr picker_flags_t picker_log_alert::time_critical;$/;"	m	class:libtorrent::picker_log_alert	file:
time_critical	torrent/src/peer_connection.cpp	/^	constexpr request_flags_t peer_connection::time_critical;$/;"	m	class:libtorrent::peer_connection	file:
time_critical_mode	torrent/include/libtorrent/piece_picker.hpp	/^		static constexpr picker_options_t time_critical_mode = 5_bit;$/;"	m	class:libtorrent::piece_picker
time_critical_mode	torrent/src/piece_picker.cpp	/^	constexpr picker_options_t piece_picker::time_critical_mode;$/;"	m	class:libtorrent::piece_picker	file:
time_critical_piece	torrent/include/libtorrent/torrent.hpp	/^	struct time_critical_piece$/;"	s	namespace:libtorrent
time_now	torrent/src/time.cpp	/^	time_point time_now() { return clock_type::now(); }$/;"	f	namespace:libtorrent::aux
time_now32	torrent/src/time.cpp	/^	time_point32 time_now32() { return time_point_cast<seconds32>(clock_type::now()); }$/;"	f	namespace:libtorrent::aux
time_of_last_unchoke	torrent/include/libtorrent/peer_connection.hpp	/^		time_point time_of_last_unchoke() const$/;"	f	class:libtorrent::peer_connection
time_of_last_unchoke	torrent/src/peer_connection_handle.cpp	/^time_point peer_connection_handle::time_of_last_unchoke() const$/;"	f	class:libtorrent::peer_connection_handle
time_since_complete	torrent/include/libtorrent/torrent.hpp	/^		int time_since_complete() const { return int(::time(nullptr) - m_last_seen_complete); }$/;"	f	class:libtorrent::torrent
time_since_download	torrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER time_since_download = 0;$/;"	m	struct:libtorrent::torrent_status
time_since_upload	torrent/include/libtorrent/torrent_status.hpp	/^		int TORRENT_DEPRECATED_MEMBER time_since_upload = 0;$/;"	m	struct:libtorrent::torrent_status
timed_out	torrent/include/libtorrent/error_code.hpp	/^			timed_out,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	void timed_out() { if (pinged() && timeout_count < 0xfe) ++timeout_count; }$/;"	f	struct:libtorrent::dht::node_entry
timed_out	torrent/include/libtorrent/peer_connection.hpp	/^		std::uint32_t timed_out:1;$/;"	m	struct:libtorrent::pending_block
timed_out	torrent/include/libtorrent/torrent.hpp	/^		int timed_out;$/;"	m	struct:libtorrent::time_critical_piece
timed_out_activity	torrent/include/libtorrent/close_reason.hpp	/^		timed_out_activity,$/;"	m	class:libtorrent::close_reason_t
timed_out_handshake	torrent/include/libtorrent/close_reason.hpp	/^		timed_out_handshake,$/;"	m	class:libtorrent::close_reason_t
timed_out_inactivity	torrent/include/libtorrent/error_code.hpp	/^			timed_out_inactivity,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out_interest	torrent/include/libtorrent/close_reason.hpp	/^		timed_out_interest,$/;"	m	class:libtorrent::close_reason_t
timed_out_no_handshake	torrent/include/libtorrent/error_code.hpp	/^			timed_out_no_handshake,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out_no_interest	torrent/include/libtorrent/error_code.hpp	/^			timed_out_no_interest,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out_no_request	torrent/include/libtorrent/error_code.hpp	/^			timed_out_no_request,$/;"	e	enum:libtorrent::errors::error_code_enum
timed_out_request	torrent/include/libtorrent/close_reason.hpp	/^		timed_out_request,$/;"	m	class:libtorrent::close_reason_t
timed_out_requests	torrent/include/libtorrent/peer_info.hpp	/^		int timed_out_requests;$/;"	m	struct:libtorrent::peer_info
timeout	torrent/include/libtorrent/close_reason.hpp	/^		timeout,$/;"	m	class:libtorrent::close_reason_t
timeout	torrent/include/libtorrent/i2p_stream.hpp	/^			timeout,$/;"	e	enum:libtorrent::i2p_error::i2p_error_code
timeout	torrent/include/libtorrent/session_status.hpp	/^		std::uint64_t timeout;$/;"	m	struct:libtorrent::utp_status
timeout	torrent/kademlia/rpc_manager.cpp	/^void observer::timeout()$/;"	f	class:libtorrent::dht::observer
timeout	torrent/src/peer_connection.cpp	/^	int peer_connection::timeout() const$/;"	f	class:libtorrent::peer_connection
timeout	torrent/src/web_connection_base.cpp	/^	int web_connection_base::timeout() const$/;"	f	class:libtorrent::web_connection_base
timeout	virt-p2v/include/miniexpect.h	/^  int timeout;$/;"	m	struct:mexp_h
timeout	virt-p2v/miniexpect/miniexpect.h	/^  int timeout;$/;"	m	struct:mexp_h
timeout_callback	torrent/src/tracker_manager.cpp	/^	void timeout_handler::timeout_callback(error_code const& error)$/;"	f	class:libtorrent::timeout_handler
timeout_count	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	std::uint8_t timeout_count = 0xff;$/;"	m	struct:libtorrent::dht::node_entry
timeout_handler	torrent/include/libtorrent/tracker_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT timeout_handler$/;"	s	namespace:libtorrent
timeout_handler	torrent/src/tracker_manager.cpp	/^	timeout_handler::timeout_handler(io_service& ios)$/;"	f	class:libtorrent::timeout_handler
timeout_peers	torrent/include/libtorrent/performance_counters.hpp	/^			timeout_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
timer	qt_pro/global.h	/^    QTimer *timer;$/;"	m	class:Global
timer_state	torrent/src/torrent.cpp	/^			explicit timer_state(aux::listen_socket_handle const& s)$/;"	f	struct:libtorrent::__anon112::timer_state
timer_state	torrent/src/torrent.cpp	/^		struct timer_state$/;"	s	namespace:libtorrent::__anon112	file:
times_in_row	torrent/include/libtorrent/alert_types.hpp	/^		int const times_in_row;$/;"	m	struct:libtorrent::final
timestamp	torrent/bak/client_test.cpp	/^char const* timestamp()$/;"	f
timestamp	torrent/bak/upnp_test.cpp	/^char const* timestamp()$/;"	f	namespace:__anon143
timestamp	torrent/include/libtorrent/debug.hpp	/^		time_point timestamp;$/;"	m	struct:libtorrent::wakeup_t
timestamp	torrent/src/alert.cpp	/^	time_point alert::timestamp() const { return m_timestamp; }$/;"	f	class:libtorrent::alert
timestamp_difference_microseconds	torrent/include/libtorrent/utp_stream.hpp	/^	be_uint32 timestamp_difference_microseconds;$/;"	m	struct:libtorrent::utp_header
timestamp_history	torrent/include/libtorrent/timestamp_history.hpp	/^struct TORRENT_EXTRA_EXPORT timestamp_history$/;"	s	namespace:libtorrent
timestamp_microseconds	torrent/include/libtorrent/utp_stream.hpp	/^	be_uint32 timestamp_microseconds;$/;"	m	struct:libtorrent::utp_header
tmp	torrent/include/libtorrent/bandwidth_limit.hpp	/^	int tmp;$/;"	m	struct:libtorrent::bandwidth_channel
tmp_buffer_size	torrent/src/udp_socket.cpp	/^std::size_t const tmp_buffer_size = 270;$/;"	m	class:libtorrent::std	file:
tmpfile	virt-p2v/include/gnulib/stdio.h	1660;"	d
to_address	torrent/src/enum_net.cpp	/^	address to_address(int const address_family, void const* in)$/;"	f	namespace:libtorrent::__anon102
to_file_open_mode	torrent/src/file_pool.cpp	/^	file_open_mode_t to_file_open_mode(open_mode_t const mode)$/;"	f	namespace:libtorrent::__anon54
to_hex	torrent/bak/client_test.cpp	/^std::string to_hex(lt::sha1_hash const& s)$/;"	f
to_hex	torrent/include/libtorrent/hex.hpp	/^	inline std::string to_hex(std::string const& s)$/;"	f	namespace:libtorrent
to_hex	torrent/include/libtorrent/hex.hpp	/^	inline void to_hex(char const* in, int len, char* out)$/;"	f	namespace:libtorrent
to_hex	torrent/src/hex.cpp	/^	std::string to_hex(span<char const> in)$/;"	f	namespace:libtorrent::aux
to_hex	torrent/src/hex.cpp	/^	void to_hex(char const* in, int const len, char* out)$/;"	f	namespace:libtorrent::aux
to_hex	torrent/src/hex.cpp	/^	void to_hex(span<char const> in, char* out)$/;"	f	namespace:libtorrent::aux
to_lower	torrent/src/string_util.cpp	/^	char to_lower(char c)$/;"	f	namespace:libtorrent
to_op_t	torrent/src/alert.cpp	/^	int to_op_t(operation_t op)$/;"	f	namespace:libtorrent::__anon98
to_req	torrent/src/torrent.cpp	/^	peer_request torrent::to_req(piece_block const& p) const$/;"	f	class:libtorrent::torrent
to_string	torrent/bak/print.cpp	/^std::string to_string(int v, int width)$/;"	f
to_string	torrent/include/libtorrent/aux_/portmap.hpp	/^	inline char const* to_string(portmap_action const act)$/;"	f	namespace:libtorrent::aux
to_string	torrent/include/libtorrent/aux_/portmap.hpp	/^	inline char const* to_string(portmap_protocol const p)$/;"	f	namespace:libtorrent::aux
to_string	torrent/include/libtorrent/bloom_filter.hpp	/^		std::string to_string() const$/;"	f	struct:libtorrent::bloom_filter
to_string	torrent/include/libtorrent/sha1_hash.hpp	/^		std::string to_string() const$/;"	f	class:libtorrent::digest32
to_string	torrent/include/libtorrent/units.hpp	/^	std::string to_string(strong_typedef<T, Tag> const t)$/;"	f	namespace:libtorrent::aux
to_string	torrent/src/entry.cpp	/^	std::string entry::to_string(bool const single_line) const$/;"	f	class:libtorrent::entry
to_string	torrent/src/fingerprint.cpp	/^	std::string fingerprint::to_string() const$/;"	f	class:libtorrent::fingerprint
to_string	torrent/src/string_util.cpp	/^		to_string(std::int64_t const n)$/;"	f	namespace:libtorrent
to_string	torrent/src/torrent_peer.cpp	/^	std::string torrent_peer::to_string() const$/;"	f	class:libtorrent::torrent_peer
to_string_impl	torrent/src/entry.cpp	/^	void to_string_impl(std::string& out, entry const& e, int const indent$/;"	f	namespace:libtorrent::__anon63
toggled	virt-p2v/src/gui.c	/^toggled (GtkCellRendererToggle *cell, gchar *path_str, gpointer data)$/;"	f	file:
token	include/client.h	/^    unsigned char *token;$/;"	m	struct:client
token	torrent/src/bdecode.cpp	/^		std::uint32_t token:31;$/;"	m	struct:libtorrent::__anon40::stack_frame	file:
tokenLength	include/packet.h	/^    u16_t  tokenLength;         \/\/tokené¿åº¦     æ²¡æå°±æ¯ 0x0000$/;"	m	struct:yzy_packet
token_size	include/client.h	/^    int token_size;$/;"	m	struct:client
token_source_span	torrent/src/bdecode.cpp	/^	int token_source_span(bdecode_token const& t)$/;"	f	namespace:libtorrent::__anon40
too_few_file_descriptors	torrent/include/libtorrent/alert_types.hpp	/^			too_few_file_descriptors,$/;"	e	enum:libtorrent::final::performance_warning_t
too_few_outgoing_ports	torrent/include/libtorrent/alert_types.hpp	/^			too_few_outgoing_ports,$/;"	e	enum:libtorrent::final::performance_warning_t
too_frequent_pex	torrent/include/libtorrent/error_code.hpp	/^			too_frequent_pex,$/;"	e	enum:libtorrent::errors::error_code_enum
too_high_disk_queue_limit	torrent/include/libtorrent/alert_types.hpp	/^			too_high_disk_queue_limit,$/;"	e	enum:libtorrent::final::performance_warning_t
too_many_connections	torrent/include/libtorrent/close_reason.hpp	/^		too_many_connections,$/;"	m	class:libtorrent::close_reason_t
too_many_connections	torrent/include/libtorrent/error_code.hpp	/^			too_many_connections,$/;"	e	enum:libtorrent::errors::error_code_enum
too_many_corrupt_pieces	torrent/include/libtorrent/error_code.hpp	/^			too_many_corrupt_pieces,$/;"	e	enum:libtorrent::errors::error_code_enum
too_many_files	torrent/include/libtorrent/close_reason.hpp	/^		too_many_files,$/;"	m	class:libtorrent::close_reason_t
too_many_length_or_distance_codes	torrent/include/libtorrent/gzip.hpp	/^			too_many_length_or_distance_codes,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
too_many_optimistic_unchoke_slots	torrent/include/libtorrent/alert_types.hpp	/^			too_many_optimistic_unchoke_slots,$/;"	e	enum:libtorrent::final::performance_warning_t
too_many_peers	torrent/include/libtorrent/performance_counters.hpp	/^			too_many_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
too_many_pieces_in_torrent	torrent/include/libtorrent/error_code.hpp	/^			too_many_pieces_in_torrent,$/;"	e	enum:libtorrent::errors::error_code_enum
too_many_requests_when_choked	torrent/include/libtorrent/error_code.hpp	/^			too_many_requests_when_choked,$/;"	e	enum:libtorrent::errors::error_code_enum
too_many_slots	torrent/include/libtorrent/error_code.hpp	/^			too_many_slots,$/;"	e	enum:libtorrent::errors::error_code_enum
top_build_prefix	torrent/include/libtorrent/Makefile	/^top_build_prefix = ..\/..\/$/;"	m
top_builddir	torrent/include/libtorrent/Makefile	/^top_builddir = ..\/..$/;"	m
top_srcdir	torrent/include/libtorrent/Makefile	/^top_srcdir = ..\/..$/;"	m
top_tags	torrent/include/libtorrent/upnp.hpp	/^	bool top_tags(string_view str1, string_view str2)$/;"	f	struct:libtorrent::parse_state
tor	torrent/include/libtorrent/peer_connection.hpp	/^		std::weak_ptr<torrent> tor;$/;"	m	struct:libtorrent::peer_connection_args
torrent	torrent/include/libtorrent/torrent.hpp	/^	class TORRENT_EXTRA_EXPORT torrent$/;"	c	namespace:libtorrent
torrent	torrent/src/torrent.cpp	/^	torrent::torrent($/;"	f	class:libtorrent::torrent
torrent_aborted	torrent/include/libtorrent/error_code.hpp	/^			torrent_aborted,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_added_alert	torrent/src/alert.cpp	/^	torrent_added_alert::torrent_added_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_added_alert
torrent_alert	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT torrent_alert : alert$/;"	s	namespace:libtorrent
torrent_alert	torrent/src/alert.cpp	/^	torrent_alert::torrent_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_alert
torrent_checked_alert	torrent/src/alert.cpp	/^	torrent_checked_alert::torrent_checked_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_checked_alert
torrent_checking_auto_managed	torrent/src/session.cpp	/^	constexpr torrent_list_index_t session_interface::torrent_checking_auto_managed;$/;"	m	class:libtorrent::aux::session_interface	file:
torrent_connect_boost	torrent/include/libtorrent/settings_pack.hpp	/^			torrent_connect_boost,$/;"	e	enum:libtorrent::settings_pack::int_types
torrent_delete_failed_alert	torrent/src/alert.cpp	/^	torrent_delete_failed_alert::torrent_delete_failed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_delete_failed_alert
torrent_deleted_alert	torrent/src/alert.cpp	/^	torrent_deleted_alert::torrent_deleted_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_deleted_alert
torrent_download_limit	torrent/bak/client_test.cpp	/^int torrent_download_limit = 0;$/;"	v
torrent_downloading_auto_managed	torrent/src/session.cpp	/^	constexpr torrent_list_index_t session_interface::torrent_downloading_auto_managed;$/;"	m	class:libtorrent::aux::session_interface	file:
torrent_entry	torrent/kademlia/dht_storage.cpp	/^	struct torrent_entry$/;"	s	namespace:libtorrent::dht::__anon153	file:
torrent_error_alert	torrent/src/alert.cpp	/^	torrent_error_alert::torrent_error_alert($/;"	f	class:libtorrent::torrent_error_alert
torrent_evicted_counter	torrent/include/libtorrent/performance_counters.hpp	/^			torrent_evicted_counter,$/;"	e	enum:libtorrent::counters::stats_counter_t
torrent_file	include/torrent.h	/^	char torrent_file[128];$/;"	m	struct:torrent_task
torrent_file	torrent/include/libtorrent/torrent.hpp	/^		torrent_info const& torrent_file() const$/;"	f	class:libtorrent::torrent
torrent_file	torrent/include/libtorrent/torrent_status.hpp	/^		std::weak_ptr<const torrent_info> torrent_file;$/;"	m	struct:libtorrent::torrent_status
torrent_file	torrent/src/torrent_handle.cpp	/^	std::shared_ptr<const torrent_info> torrent_handle::torrent_file() const$/;"	f	class:libtorrent::torrent_handle
torrent_file_parse_failed	torrent/include/libtorrent/error_code.hpp	/^			torrent_file_parse_failed,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_finished	torrent/include/libtorrent/error_code.hpp	/^			torrent_finished,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_finished_alert	torrent/src/alert.cpp	/^	torrent_finished_alert::torrent_finished_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_finished_alert
torrent_flags	torrent/include/libtorrent/torrent_flags.hpp	/^namespace torrent_flags {$/;"	n	namespace:libtorrent
torrent_handle	torrent/include/libtorrent/torrent_handle.hpp	/^		explicit torrent_handle(std::weak_ptr<torrent> const& t)$/;"	f	struct:libtorrent::torrent_handle
torrent_handle	torrent/include/libtorrent/torrent_handle.hpp	/^	struct TORRENT_EXPORT torrent_handle$/;"	s	namespace:libtorrent
torrent_hot_members	torrent/include/libtorrent/torrent.hpp	/^	struct TORRENT_EXTRA_EXPORT torrent_hot_members$/;"	s	namespace:libtorrent
torrent_hot_members	torrent/src/torrent.cpp	/^	torrent_hot_members::torrent_hot_members(aux::session_interface& ses$/;"	f	class:libtorrent::torrent_hot_members
torrent_info	torrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(bdecode_node const& torrent_file, error_code& ec, int)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(char const* buffer, int size)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(char const* buffer, int size, error_code& ec)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(char const* buffer, int size, error_code& ec, int)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(char const* buffer, int size, int)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/include/libtorrent/torrent_info.hpp	/^		torrent_info(std::string const& filename, error_code& ec, int)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/include/libtorrent/torrent_info.hpp	/^	class TORRENT_EXPORT torrent_info$/;"	c	namespace:libtorrent
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(bdecode_node const& torrent_file$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(bdecode_node const& torrent_file)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(entry const& torrent_file)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(lazy_entry const& torrent_file)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(lazy_entry const& torrent_file, error_code& ec)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(sha1_hash const& info_hash)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(span<char const> buffer$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(span<char const> buffer, from_span_t)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(std::string const& filename$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(std::string const& filename)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(std::string const& filename, error_code& ec)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(std::wstring const& filename$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(std::wstring const& filename)$/;"	f	class:libtorrent::torrent_info
torrent_info	torrent/src/torrent_info.cpp	/^	torrent_info::torrent_info(torrent_info const& t)$/;"	f	class:libtorrent::torrent_info
torrent_info_no_dict	torrent/include/libtorrent/error_code.hpp	/^			torrent_info_no_dict,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_invalid_hashes	torrent/include/libtorrent/error_code.hpp	/^			torrent_invalid_hashes,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_invalid_length	torrent/include/libtorrent/error_code.hpp	/^			torrent_invalid_length,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_invalid_name	torrent/include/libtorrent/error_code.hpp	/^			torrent_invalid_name,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_is_no_dict	torrent/include/libtorrent/error_code.hpp	/^			torrent_is_no_dict,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_log	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t torrent_log = 14_bit;$/;"	m	namespace:libtorrent::alert_category
torrent_log_alert	torrent/src/alert.cpp	/^	torrent_log_alert::torrent_log_alert(aux::stack_allocator& alloc, torrent_handle const& h$/;"	f	class:libtorrent::torrent_log_alert
torrent_log_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t torrent_log_notification = 14_bit;$/;"	m	class:libtorrent::alert
torrent_log_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::torrent_log_notification;$/;"	m	class:libtorrent::alert	file:
torrent_missing_info	torrent/include/libtorrent/error_code.hpp	/^			torrent_missing_info,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_missing_name	torrent/include/libtorrent/error_code.hpp	/^			torrent_missing_name,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_missing_piece_length	torrent/include/libtorrent/error_code.hpp	/^			torrent_missing_piece_length,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_missing_pieces	torrent/include/libtorrent/error_code.hpp	/^			torrent_missing_pieces,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_name	torrent/src/alert.cpp	/^	char const* torrent_alert::torrent_name() const$/;"	f	class:libtorrent::torrent_alert
torrent_need_cert_alert	torrent/src/alert.cpp	/^	torrent_need_cert_alert::torrent_need_cert_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_need_cert_alert
torrent_not_ready	torrent/include/libtorrent/error_code.hpp	/^			torrent_not_ready,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_paused	torrent/include/libtorrent/error_code.hpp	/^			torrent_paused,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_paused_alert	torrent/src/alert.cpp	/^	torrent_paused_alert::torrent_paused_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_paused_alert
torrent_peer	torrent/include/libtorrent/torrent_peer.hpp	/^	struct TORRENT_EXTRA_EXPORT torrent_peer$/;"	s	namespace:libtorrent
torrent_peer	torrent/src/torrent_peer.cpp	/^	torrent_peer::torrent_peer(std::uint16_t port_, bool conn$/;"	f	class:libtorrent::torrent_peer
torrent_peer_allocator_interface	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^	struct TORRENT_EXTRA_EXPORT torrent_peer_allocator_interface$/;"	s	namespace:libtorrent
torrent_plugin	torrent/include/libtorrent/extensions.hpp	/^	struct TORRENT_EXPORT torrent_plugin$/;"	s	namespace:libtorrent
torrent_port	test/test.c	/^int torrent_port;$/;"	v
torrent_removed	torrent/include/libtorrent/close_reason.hpp	/^		torrent_removed,$/;"	m	class:libtorrent::close_reason_t
torrent_removed	torrent/include/libtorrent/error_code.hpp	/^			torrent_removed,$/;"	e	enum:libtorrent::errors::error_code_enum
torrent_removed_alert	torrent/src/alert.cpp	/^	torrent_removed_alert::torrent_removed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_removed_alert
torrent_resumed_alert	torrent/src/alert.cpp	/^	torrent_resumed_alert::torrent_resumed_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::torrent_resumed_alert
torrent_seeding_auto_managed	torrent/src/session.cpp	/^	constexpr torrent_list_index_t session_interface::torrent_seeding_auto_managed;$/;"	m	class:libtorrent::aux::session_interface	file:
torrent_state	torrent/bak/torrent_view.cpp	/^std::string torrent_state(lt::torrent_status const& s)$/;"	f
torrent_state	torrent/include/libtorrent/peer_list.hpp	/^	struct torrent_state$/;"	s	namespace:libtorrent
torrent_state_updates	torrent/src/session.cpp	/^	constexpr torrent_list_index_t session_interface::torrent_state_updates;$/;"	m	class:libtorrent::aux::session_interface	file:
torrent_status	torrent/include/libtorrent/torrent_status.hpp	/^	struct TORRENT_EXPORT torrent_status$/;"	s	namespace:libtorrent
torrent_task	include/torrent.h	/^struct torrent_task{$/;"	s
torrent_update_alert	torrent/src/alert.cpp	/^	torrent_update_alert::torrent_update_alert(aux::stack_allocator& alloc, torrent_handle h$/;"	f	class:libtorrent::torrent_update_alert
torrent_upload_limit	torrent/bak/client_test.cpp	/^int torrent_upload_limit = 0;$/;"	v
torrent_view	torrent/bak/torrent_view.cpp	/^torrent_view::torrent_view()$/;"	f	class:torrent_view
torrent_view	torrent/bak/torrent_view.hpp	/^struct torrent_view$/;"	s
torrent_wait	torrent/src/session_call.cpp	/^void torrent_wait(bool& done, aux::session_impl& ses)$/;"	f	namespace:libtorrent::aux
torrent_want_peers_download	torrent/src/session.cpp	/^	constexpr torrent_list_index_t session_interface::torrent_want_peers_download;$/;"	m	class:libtorrent::aux::session_interface	file:
torrent_want_peers_finished	torrent/src/session.cpp	/^	constexpr torrent_list_index_t session_interface::torrent_want_peers_finished;$/;"	m	class:libtorrent::aux::session_interface	file:
torrent_want_scrape	torrent/src/session.cpp	/^	constexpr torrent_list_index_t session_interface::torrent_want_scrape;$/;"	m	class:libtorrent::aux::session_interface	file:
torrent_want_tick	torrent/src/session.cpp	/^	constexpr torrent_list_index_t session_interface::torrent_want_tick;$/;"	m	class:libtorrent::aux::session_interface	file:
torrents	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^		std::int32_t torrents = 0;$/;"	m	struct:libtorrent::dht::dht_storage_counters
torrents_all	torrent/bak/torrent_view.hpp	/^		torrents_all,$/;"	e	enum:torrent_view::__anon142
torrents_checking	torrent/bak/torrent_view.hpp	/^		torrents_checking,$/;"	e	enum:torrent_view::__anon142
torrents_downloading	torrent/bak/torrent_view.hpp	/^		torrents_downloading,$/;"	e	enum:torrent_view::__anon142
torrents_max	torrent/bak/torrent_view.hpp	/^		torrents_max$/;"	e	enum:torrent_view::__anon142
torrents_not_paused	torrent/bak/torrent_view.hpp	/^		torrents_not_paused,$/;"	e	enum:torrent_view::__anon142
torrents_queued	torrent/bak/torrent_view.hpp	/^		torrents_queued,$/;"	e	enum:torrent_view::__anon142
torrents_seeding	torrent/bak/torrent_view.hpp	/^		torrents_seeding,$/;"	e	enum:torrent_view::__anon142
torrents_stopped	torrent/bak/torrent_view.hpp	/^		torrents_stopped,$/;"	e	enum:torrent_view::__anon142
total	torrent/include/libtorrent/stat.hpp	/^		std::int64_t total() const { return m_total_counter; }$/;"	f	class:libtorrent::stat_channel
total	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total = 0;$/;"	m	struct:libtorrent::torrent_status
total_allocations	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		std::uint64_t total_allocations() const { return m_total_allocations; }$/;"	f	struct:libtorrent::final
total_bytes	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		std::uint64_t total_bytes() const { return m_total_bytes; }$/;"	f	struct:libtorrent::final
total_dht_download	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_dht_download;$/;"	m	struct:libtorrent::session_status
total_dht_upload	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_dht_upload;$/;"	m	struct:libtorrent::session_status
total_done	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_done = 0;$/;"	m	struct:libtorrent::torrent_status
total_download	torrent/include/libtorrent/peer_info.hpp	/^		std::int64_t total_download;$/;"	m	struct:libtorrent::peer_info
total_download	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_download;$/;"	m	struct:libtorrent::session_status
total_download	torrent/include/libtorrent/stat.hpp	/^		std::int64_t total_download() const$/;"	f	class:libtorrent::stat
total_download	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_download = 0;$/;"	m	struct:libtorrent::torrent_status
total_download	torrent/src/torrent_peer.cpp	/^	std::int64_t torrent_peer::total_download() const$/;"	f	class:libtorrent::torrent_peer
total_downloaded	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::int64_t total_downloaded = 0;$/;"	m	struct:libtorrent::add_torrent_params
total_failed_bytes	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_failed_bytes;$/;"	m	struct:libtorrent::session_status
total_failed_bytes	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_failed_bytes = 0;$/;"	m	struct:libtorrent::torrent_status
total_ip_overhead_download	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_ip_overhead_download;$/;"	m	struct:libtorrent::session_status
total_ip_overhead_upload	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_ip_overhead_upload;$/;"	m	struct:libtorrent::session_status
total_microseconds	torrent/include/libtorrent/time.hpp	/^	std::int64_t total_microseconds(T td)$/;"	f	namespace:libtorrent
total_milliseconds	torrent/include/libtorrent/time.hpp	/^	std::int64_t total_milliseconds(T td)$/;"	f	namespace:libtorrent
total_payload_download	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_payload_download;$/;"	m	struct:libtorrent::session_status
total_payload_download	torrent/include/libtorrent/stat.hpp	/^		std::int64_t total_payload_download() const$/;"	f	class:libtorrent::stat
total_payload_download	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_payload_download = 0;$/;"	m	struct:libtorrent::torrent_status
total_payload_upload	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_payload_upload;$/;"	m	struct:libtorrent::session_status
total_payload_upload	torrent/include/libtorrent/stat.hpp	/^		std::int64_t total_payload_upload() const$/;"	f	class:libtorrent::stat
total_payload_upload	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_payload_upload = 0;$/;"	m	struct:libtorrent::torrent_status
total_physical_ram	torrent/src/platform_util.cpp	/^	std::int64_t total_physical_ram()$/;"	f	namespace:libtorrent
total_protocol_download	torrent/include/libtorrent/stat.hpp	/^		std::int64_t total_protocol_download() const$/;"	f	class:libtorrent::stat
total_protocol_upload	torrent/include/libtorrent/stat.hpp	/^		std::int64_t total_protocol_upload() const$/;"	f	class:libtorrent::stat
total_read_back	torrent/include/libtorrent/disk_io_thread.hpp	/^		int total_read_back;$/;"	m	struct:libtorrent::cache_status
total_redundant_bytes	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_redundant_bytes;$/;"	m	struct:libtorrent::session_status
total_redundant_bytes	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_redundant_bytes = 0;$/;"	m	struct:libtorrent::torrent_status
total_seconds	torrent/include/libtorrent/time.hpp	/^	std::int64_t total_seconds(T td)$/;"	f	namespace:libtorrent
total_size	include/torrent.h	/^    unsigned long long total_size;		\/\/ä¸è½½æ»å¤§å°$/;"	m	struct:progress_info
total_size	qt_pro/global.h	/^    unsigned long long total_size;      \/\/ä¸è½½æ»å¤§å°$/;"	m	struct:progress_info
total_size	torrent/include/libtorrent/file_storage.hpp	/^		std::int64_t total_size() const { return m_total_size; }$/;"	f	class:libtorrent::file_storage
total_size	torrent/include/libtorrent/torrent_info.hpp	/^		std::int64_t total_size() const { return m_files.total_size(); }$/;"	f	class:libtorrent::torrent_info
total_size	virt-p2v/src/conversion.c	/^    unsigned long long total_size;      \/\/ä¸è½½æ»å¤§å°$/;"	m	struct:progress_info	file:
total_space	include/device.h	/^    unsigned int total_space;       \/\/ æ»å¤§å° kb$/;"	m	struct:disk_param
total_tracker_download	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_tracker_download;$/;"	m	struct:libtorrent::session_status
total_tracker_upload	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_tracker_upload;$/;"	m	struct:libtorrent::session_status
total_transfer	torrent/include/libtorrent/stat.hpp	/^		std::int64_t total_transfer(int channel) const$/;"	f	class:libtorrent::stat
total_upload	torrent/include/libtorrent/peer_info.hpp	/^		std::int64_t total_upload;$/;"	m	struct:libtorrent::peer_info
total_upload	torrent/include/libtorrent/session_status.hpp	/^		std::int64_t total_upload;$/;"	m	struct:libtorrent::session_status
total_upload	torrent/include/libtorrent/stat.hpp	/^		std::int64_t total_upload() const$/;"	f	class:libtorrent::stat
total_upload	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_upload = 0;$/;"	m	struct:libtorrent::torrent_status
total_upload	torrent/src/torrent_peer.cpp	/^	std::int64_t torrent_peer::total_upload() const$/;"	f	class:libtorrent::torrent_peer
total_uploaded	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::int64_t total_uploaded = 0;$/;"	m	struct:libtorrent::add_torrent_params
total_used_buffers	torrent/include/libtorrent/disk_io_thread.hpp	/^		mutable int total_used_buffers;$/;"	m	struct:libtorrent::cache_status
total_wanted	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_wanted = 0;$/;"	m	struct:libtorrent::torrent_status
total_wanted_done	torrent/include/libtorrent/torrent_status.hpp	/^		std::int64_t total_wanted_done = 0;$/;"	m	struct:libtorrent::torrent_status
touch_item	torrent/kademlia/dht_storage.cpp	/^	void touch_item(dht_immutable_item& f, address const& addr)$/;"	f	namespace:libtorrent::dht::__anon153
track_flag	test/test.c	/^int track_flag = 0;$/;"	v
track_ip	test/test.c	/^char *track_ip = NULL;$/;"	v
track_port	test/test.c	/^int track_port = 50020;$/;"	v
tracker	test/test.c	/^char tracker[128] = {0};$/;"	v
tracker	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t tracker = 4_bit;$/;"	m	namespace:libtorrent::alert_category
tracker	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^			tracker,$/;"	e	enum:libtorrent::dht::dht_logger::module_t
tracker	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_source_flags_t tracker = 0_bit;$/;"	m	struct:libtorrent::peer_info
tracker	torrent/src/peer_info.cpp	/^	constexpr peer_source_flags_t peer_info::tracker;$/;"	m	class:libtorrent::peer_info	file:
tracker_alert	torrent/include/libtorrent/alert_types.hpp	/^	struct TORRENT_EXPORT tracker_alert : torrent_alert$/;"	s	namespace:libtorrent
tracker_alert	torrent/src/alert.cpp	/^	tracker_alert::tracker_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::tracker_alert
tracker_announce_alert	torrent/src/alert.cpp	/^	tracker_announce_alert::tracker_announce_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::tracker_announce_alert
tracker_backoff	torrent/include/libtorrent/settings_pack.hpp	/^			tracker_backoff,$/;"	e	enum:libtorrent::settings_pack::int_types
tracker_completion_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			tracker_completion_timeout = int_type_base,$/;"	e	enum:libtorrent::settings_pack::int_types
tracker_connection	torrent/include/libtorrent/tracker_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT tracker_connection$/;"	s	namespace:libtorrent
tracker_connection	torrent/include/libtorrent/udp_socket.hpp	/^		static constexpr udp_send_flags_t tracker_connection = 1_bit;$/;"	m	class:libtorrent::udp_socket
tracker_connection	torrent/src/tracker_manager.cpp	/^	tracker_connection::tracker_connection($/;"	f	class:libtorrent::tracker_connection
tracker_connection	torrent/src/udp_socket.cpp	/^constexpr udp_send_flags_t udp_socket::tracker_connection;$/;"	m	class:libtorrent::udp_socket	file:
tracker_download_rate	torrent/include/libtorrent/session_status.hpp	/^		int tracker_download_rate;$/;"	m	struct:libtorrent::session_status
tracker_error_alert	torrent/src/alert.cpp	/^	tracker_error_alert::tracker_error_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::tracker_error_alert
tracker_failure	torrent/include/libtorrent/error_code.hpp	/^			tracker_failure,$/;"	e	enum:libtorrent::errors::error_code_enum
tracker_id	torrent/src/alert.cpp	/^	char const* trackerid_alert::tracker_id() const$/;"	f	class:libtorrent::trackerid_alert
tracker_key	torrent/src/torrent.cpp	/^	std::uint32_t torrent::tracker_key() const$/;"	f	class:libtorrent::torrent
tracker_logger	torrent/include/libtorrent/aux_/session_impl.hpp	/^		struct tracker_logger : request_callback$/;"	s	namespace:libtorrent::aux
tracker_logger	torrent/src/session_impl.cpp	/^		tracker_logger::tracker_logger(session_interface& ses): m_ses(ses) {}$/;"	f	class:libtorrent::aux::tracker_logger
tracker_login	torrent/src/torrent.cpp	/^	std::string torrent::tracker_login() const$/;"	f	class:libtorrent::torrent
tracker_manager	torrent/src/tracker_manager.cpp	/^	tracker_manager::tracker_manager(send_fun_t const& send_fun$/;"	f	class:libtorrent::tracker_manager
tracker_maximum_response_length	torrent/include/libtorrent/settings_pack.hpp	/^			tracker_maximum_response_length,$/;"	e	enum:libtorrent::settings_pack::int_types
tracker_node	torrent/include/libtorrent/kademlia/dht_tracker.hpp	/^		struct tracker_node$/;"	s	struct:libtorrent::dht::final
tracker_node	torrent/kademlia/dht_tracker.cpp	/^	dht_tracker::tracker_node::tracker_node(io_service& ios$/;"	f	class:libtorrent::dht::dht_tracker::tracker_node
tracker_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t tracker_notification = 4_bit;$/;"	m	class:libtorrent::alert
tracker_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::tracker_notification;$/;"	m	class:libtorrent::alert	file:
tracker_proxy	torrent/src/session_handle.cpp	/^	proxy_settings session_handle::tracker_proxy() const$/;"	f	class:libtorrent::session_handle
tracker_receive_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			tracker_receive_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
tracker_reply_alert	torrent/src/alert.cpp	/^	tracker_reply_alert::tracker_reply_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::tracker_reply_alert
tracker_req	torrent/include/libtorrent/tracker_manager.hpp	/^		tracker_request const& tracker_req() const { return m_req; }$/;"	f	struct:libtorrent::tracker_connection
tracker_request	torrent/include/libtorrent/tracker_manager.hpp	/^		tracker_request()$/;"	f	struct:libtorrent::tracker_request
tracker_request	torrent/include/libtorrent/tracker_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT tracker_request$/;"	s	namespace:libtorrent
tracker_request_error	torrent/src/session_impl.cpp	/^		void tracker_logger::tracker_request_error(tracker_request const&$/;"	f	class:libtorrent::aux::tracker_logger
tracker_request_error	torrent/src/torrent.cpp	/^	void torrent::tracker_request_error(tracker_request const& r$/;"	f	class:libtorrent::torrent
tracker_response	torrent/include/libtorrent/tracker_manager.hpp	/^		tracker_response()$/;"	f	struct:libtorrent::tracker_response
tracker_response	torrent/include/libtorrent/tracker_manager.hpp	/^	struct tracker_response$/;"	s	namespace:libtorrent
tracker_response	torrent/src/session_impl.cpp	/^		void tracker_logger::tracker_response(tracker_request const&$/;"	f	class:libtorrent::aux::tracker_logger
tracker_response	torrent/src/torrent.cpp	/^	void torrent::tracker_response($/;"	f	class:libtorrent::torrent
tracker_scrape_response	torrent/include/libtorrent/tracker_manager.hpp	/^		virtual void tracker_scrape_response(tracker_request const& \/*req*\/$/;"	f	struct:libtorrent::request_callback
tracker_scrape_response	torrent/src/torrent.cpp	/^	void torrent::tracker_scrape_response(tracker_request const& req$/;"	f	class:libtorrent::torrent
tracker_source	torrent/include/libtorrent/announce_entry.hpp	/^		enum tracker_source$/;"	g	struct:libtorrent::announce_entry
tracker_tiers	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<int>> tracker_tiers;$/;"	m	struct:libtorrent::add_torrent_params
tracker_upload_rate	torrent/include/libtorrent/session_status.hpp	/^		int tracker_upload_rate;$/;"	m	struct:libtorrent::session_status
tracker_url	torrent/src/alert.cpp	/^	char const* tracker_alert::tracker_url() const$/;"	f	class:libtorrent::tracker_alert
tracker_warning	torrent/src/session_impl.cpp	/^		void tracker_logger::tracker_warning(tracker_request const&$/;"	f	class:libtorrent::aux::tracker_logger
tracker_warning	torrent/src/torrent.cpp	/^	void torrent::tracker_warning(tracker_request const& req, std::string const& msg)$/;"	f	class:libtorrent::torrent
tracker_warning_alert	torrent/src/alert.cpp	/^	tracker_warning_alert::tracker_warning_alert(aux::stack_allocator& alloc$/;"	f	class:libtorrent::tracker_warning_alert
trackerid	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::string trackerid;$/;"	m	struct:libtorrent::add_torrent_params
trackerid	torrent/include/libtorrent/announce_entry.hpp	/^		std::string trackerid;$/;"	m	struct:libtorrent::announce_entry
trackerid	torrent/include/libtorrent/tracker_manager.hpp	/^		std::string trackerid;$/;"	m	struct:libtorrent::tracker_request
trackerid	torrent/include/libtorrent/tracker_manager.hpp	/^		std::string trackerid;$/;"	m	struct:libtorrent::tracker_response
trackerid_alert	torrent/src/alert.cpp	/^	trackerid_alert::trackerid_alert($/;"	f	class:libtorrent::trackerid_alert
trackers	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<std::string>> trackers;$/;"	m	struct:libtorrent::add_torrent_params
trackers	torrent/include/libtorrent/torrent.hpp	/^		std::vector<announce_entry> const& trackers() const$/;"	f	class:libtorrent::torrent::std
trackers	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<announce_entry> const& trackers() const { return m_urls; }$/;"	f	class:libtorrent::torrent_info::std
trackers	torrent/src/torrent_handle.cpp	/^	std::vector<announce_entry> torrent_handle::trackers() const$/;"	f	class:libtorrent::torrent_handle
traffic_class	torrent/include/libtorrent/socket.hpp	/^		explicit traffic_class(char val): m_value(val) {}$/;"	f	struct:libtorrent::traffic_class
traffic_class	torrent/include/libtorrent/socket.hpp	/^	struct traffic_class$/;"	s	namespace:libtorrent
trailingBytesForUTF8	torrent/src/ConvertUTF.cpp	/^const char trailingBytesForUTF8[256] = {$/;"	v
trancieve_ip_packet	torrent/include/libtorrent/stat.hpp	/^		void trancieve_ip_packet(int bytes_transferred, bool ipv6)$/;"	f	class:libtorrent::stat
trancieve_ip_packet	torrent/src/peer_connection.cpp	/^	void peer_connection::trancieve_ip_packet(int const bytes, bool const ipv6)$/;"	f	class:libtorrent::peer_connection
trancieve_ip_packet	torrent/src/session_impl.cpp	/^	void session_impl::trancieve_ip_packet(int bytes, bool ipv6)$/;"	f	class:libtorrent::aux::session_impl
trancieve_ip_packet	torrent/src/torrent.cpp	/^	void torrent::trancieve_ip_packet(int const bytes, bool const ipv6)$/;"	f	class:libtorrent::torrent
transaction_id	torrent/include/libtorrent/udp_tracker_connection.hpp	/^		std::uint32_t transaction_id() const { return m_transaction_id; }$/;"	f	class:libtorrent::udp_tracker_connection
transfer_rate	torrent/include/libtorrent/stat.hpp	/^		int transfer_rate(int channel) const$/;"	f	class:libtorrent::stat
transform	torrent/include/libtorrent/Makefile	/^transform = $(program_transform_name)$/;"	m
transport	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^	enum class transport : std::uint8_t { plaintext, ssl };$/;"	c	namespace:libtorrent::aux
transport_timeout_peers	torrent/include/libtorrent/performance_counters.hpp	/^			transport_timeout_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
traversal	torrent/include/libtorrent/kademlia/dht_observer.hpp	/^			traversal$/;"	e	enum:libtorrent::dht::dht_logger::module_t
traversal_algorithm	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^struct TORRENT_EXTRA_EXPORT traversal_algorithm$/;"	s	namespace:libtorrent::dht
traversal_algorithm	torrent/kademlia/traversal_algorithm.cpp	/^traversal_algorithm::traversal_algorithm(node& dht_node, node_id const& target)$/;"	f	class:libtorrent::dht::traversal_algorithm
traversal_observer	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^	traversal_observer($/;"	f	struct:libtorrent::dht::traversal_observer
traversal_observer	torrent/include/libtorrent/kademlia/traversal_algorithm.hpp	/^struct traversal_observer : observer$/;"	s	namespace:libtorrent::dht
traverse	torrent/kademlia/traversal_algorithm.cpp	/^void traversal_algorithm::traverse(node_id const& id, udp::endpoint const& addr)$/;"	f	class:libtorrent::dht::traversal_algorithm
trigger_auto_manage	torrent/src/session_impl.cpp	/^	void session_impl::trigger_auto_manage()$/;"	f	class:libtorrent::aux::session_impl
triggered_manually	torrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER triggered_manually:1;$/;"	m	struct:libtorrent::announce_entry
triggered_manually	torrent/include/libtorrent/announce_entry.hpp	/^		bool triggered_manually : 1;$/;"	m	struct:libtorrent::announce_endpoint
triggered_manually	torrent/include/libtorrent/tracker_manager.hpp	/^		bool triggered_manually;$/;"	m	struct:libtorrent::tracker_request
trim	src/tools.c	/^char *trim(char *output, const char *input)$/;"	f
trim	torrent/src/announce_entry.cpp	/^	void announce_entry::trim()$/;"	f	class:libtorrent::announce_entry
trim	torrent/src/escape_string.cpp	/^	string_view trim(string_view str)$/;"	f	namespace:libtorrent
trim_cache	torrent/include/libtorrent/disk_io_job.hpp	/^		, trim_cache$/;"	m	class:libtorrent::job_action_t
true	virt-p2v/include/gnulib/stdbool.in.h	/^typedef enum { _Bool_must_promote_to_int = -1, false = 0, true = 1 } _Bool;$/;"	e	enum:__anon162
true	virt-p2v/include/gnulib/stdbool.in.h	124;"	d
true	virt-p2v/include/gnulib/stdbool.in.h	127;"	d
true	virt-p2v/include/gnulib/stdbool.in.h	66;"	d
truncate	virt-p2v/include/gnulib/unistd.h	2053;"	d
trust_points	torrent/include/libtorrent/torrent_peer.hpp	/^		signed trust_points:4; \/\/ [-7, 8]$/;"	m	struct:libtorrent::torrent_peer
try_connect_more_peers	torrent/src/session_impl.cpp	/^	void session_impl::try_connect_more_peers()$/;"	f	class:libtorrent::aux::session_impl
try_connect_peer	torrent/src/torrent.cpp	/^	bool torrent::try_connect_peer()$/;"	f	class:libtorrent::torrent
try_evict_blocks	torrent/src/block_cache.cpp	/^int block_cache::try_evict_blocks(int num, cached_piece_entry* ignore)$/;"	f	class:libtorrent::block_cache
try_evict_one_volatile	torrent/src/block_cache.cpp	/^void block_cache::try_evict_one_volatile()$/;"	f	class:libtorrent::block_cache
try_flush_hashed	torrent/src/disk_io_thread.cpp	/^	int disk_io_thread::try_flush_hashed(cached_piece_entry* p, int const cont_block$/;"	f	class:disk_io_thread
try_flush_write_blocks	torrent/include/libtorrent/block_cache.hpp	/^			try_flush_write_blocks,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
try_flush_write_blocks2	torrent/include/libtorrent/block_cache.hpp	/^			try_flush_write_blocks2,$/;"	e	enum:libtorrent::piece_log_t::artificial_jobs
try_map_upnp	torrent/src/upnp.cpp	/^void upnp::try_map_upnp()$/;"	f	class:libtorrent::upnp
try_next_mapping	torrent/src/natpmp.cpp	/^void natpmp::try_next_mapping(port_mapping_t const i)$/;"	f	class:libtorrent::natpmp
try_push_back	torrent/include/libtorrent/packet_pool.hpp	/^		void try_push_back(packet_ptr &p)$/;"	f	struct:libtorrent::packet_slab
try_read	torrent/src/block_cache.cpp	/^int block_cache::try_read(disk_io_job* j, buffer_allocator_interface& allocator$/;"	f	class:libtorrent::block_cache
try_thread_exit	torrent/src/disk_io_thread_pool.cpp	/^	bool disk_io_thread_pool::try_thread_exit(std::thread::id id)$/;"	f	class:libtorrent::disk_io_thread_pool
ttl	torrent/include/libtorrent/bandwidth_queue_entry.hpp	/^	int ttl;$/;"	m	struct:libtorrent::bw_request
ttyname_r	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (ttyname_r);$/;"	v
ttyname_r	virt-p2v/include/gnulib/unistd.h	2083;"	d
type	cJSON/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
type	include/StoreConfig.h	/^    uint8_t     type;   $/;"	m	struct:_YZY_QCOW_ENTRY
type	include/cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
type	include/device.h	/^    PedDeviceType type;         \/\/SCSI IDE etc sa PedDeviceType$/;"	m	struct:_PedDevice
type	include/gpt.h	/^    uint8_t   type;$/;"	m	struct:__anon4
type	include/gpt.h	/^    uint8_t   type;$/;"	m	struct:__anon5
type	include/packet.h	/^    char type;$/;"	m	struct:yzy_torrent
type	include/torrent.h	/^	int type;$/;"	m	struct:progress_info
type	qt_pro/global.h	/^    int type;$/;"	m	struct:progress_info
type	test/test.c	/^    char type;$/;"	m	struct:yzy_torrent	file:
type	torrent/include/libtorrent/aux_/aligned_storage.hpp	/^	struct type$/;"	s	struct:libtorrent::aux::aligned_storage
type	torrent/include/libtorrent/aux_/aligned_union.hpp	/^	struct type$/;"	s	struct:libtorrent::aux::aligned_union
type	torrent/include/libtorrent/aux_/io.hpp	/^	template <class T> struct type {};$/;"	s	namespace:libtorrent::aux
type	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^		settings_pack::proxy_type_t type = settings_pack::none;$/;"	m	struct:libtorrent::aux::proxy_settings
type	torrent/include/libtorrent/extensions.hpp	/^		virtual string_view type() const { return {}; }$/;"	f	struct:libtorrent::peer_plugin
type	torrent/include/libtorrent/io.hpp	/^		template <class T> struct type {};$/;"	s	namespace:libtorrent::detail
type	torrent/include/libtorrent/kademlia/msg.hpp	/^	int type;$/;"	m	struct:libtorrent::dht::key_desc_t
type	torrent/include/libtorrent/lazy_entry.hpp	/^		entry_type_t type() const { return entry_type_t(m_type); }$/;"	f	struct:libtorrent::lazy_entry
type	torrent/include/libtorrent/netlink.hpp	/^		int type() const$/;"	f	class:libtorrent::netlink
type	torrent/include/libtorrent/session_stats.hpp	/^		metric_type_t type;$/;"	m	struct:libtorrent::stats_metric
type	torrent/include/libtorrent/torrent_info.hpp	/^		std::uint8_t type;$/;"	m	struct:libtorrent::web_seed_entry
type	torrent/src/entry.cpp	/^	entry::data_type entry::type() const$/;"	f	class:libtorrent::entry
type	torrent/src/peer_connection_handle.cpp	/^connection_type peer_connection_handle::type() const$/;"	f	class:libtorrent::peer_connection_handle
type	torrent/src/socket_type.cpp	/^	int socket_type::type() const { return m_type; }$/;"	f	class:libtorrent::aux::socket_type
type	virt-p2v/include/p2v-config.h	/^  char *type;$/;"	m	struct:output_config
type	virt-p2v/src/conversion.c	/^    int type;$/;"	m	struct:progress_info	file:
type_bases	torrent/include/libtorrent/settings_pack.hpp	/^		enum type_bases$/;"	g	struct:libtorrent::settings_pack
type_counter	torrent/include/libtorrent/session_stats.hpp	/^		static constexpr metric_type_t TORRENT_DEPRECATED_MEMBER type_counter = metric_type_t::counter;$/;"	m	struct:libtorrent::stats_metric
type_counter	torrent/src/session_stats.cpp	/^	constexpr metric_type_t stats_metric::type_counter;$/;"	m	class:libtorrent::stats_metric	file:
type_gauge	torrent/include/libtorrent/session_stats.hpp	/^		static constexpr metric_type_t TORRENT_DEPRECATED_MEMBER type_gauge = metric_type_t::gauge;$/;"	m	struct:libtorrent::stats_metric
type_gauge	torrent/src/session_stats.cpp	/^	constexpr metric_type_t stats_metric::type_gauge;$/;"	m	class:libtorrent::stats_metric	file:
type_guid	include/gpt.h	/^    uint8_t   type_guid[16];$/;"	m	struct:__anon7
type_mask	torrent/include/libtorrent/settings_pack.hpp	/^			type_mask =        0xc000,$/;"	e	enum:libtorrent::settings_pack::type_bases
type_name	torrent/src/socket_type.cpp	/^	char const* socket_type::type_name() const$/;"	f	class:libtorrent::aux::socket_type
type_of_service	torrent/include/libtorrent/socket.hpp	/^		explicit type_of_service(char val) : m_value(tos_t(val)) {}$/;"	f	struct:libtorrent::type_of_service
type_of_service	torrent/include/libtorrent/socket.hpp	/^	struct type_of_service$/;"	s	namespace:libtorrent
type_t	torrent/include/libtorrent/bdecode.hpp	/^	enum type_t$/;"	g	struct:bdecode_node
type_t	torrent/include/libtorrent/torrent_info.hpp	/^		enum type_t { url_seed, http_seed };$/;"	g	struct:libtorrent::web_seed_entry
type_ver	torrent/include/libtorrent/utp_stream.hpp	/^	std::uint8_t type_ver;$/;"	m	struct:libtorrent::utp_header
typed_bitfield	torrent/include/libtorrent/bitfield.hpp	/^	struct typed_bitfield : bitfield$/;"	s	namespace:libtorrent
u16_t	include/packet.h	/^typedef unsigned short u16_t;$/;"	t
u32_t	include/packet.h	/^typedef unsigned int   u32_t;$/;"	t
u64	torrent/ed25519/fixedint.h	/^typedef std::uint64_t u64;$/;"	t
u8_t	include/packet.h	/^typedef unsigned char  u8_t;$/;"	t
ucType	include/queue.h	/^  unsigned char ucType;$/;"	m	struct:__anon1
udevadm_settle	virt-p2v/src/p2v.c	/^udevadm_settle (void)$/;"	f	file:
udevadm_settle	virt-p2v/src/p2v_transform.c	/^udevadm_settle (void)$/;"	f	file:
udp	torrent/include/libtorrent/alert_types.hpp	/^		tcp, tcp_ssl, udp, i2p, socks5, utp_ssl$/;"	m	class:libtorrent::socket_type_t
udp	torrent/include/libtorrent/session_handle.hpp	/^		static constexpr portmap_protocol udp = portmap_protocol::udp;$/;"	m	struct:libtorrent::session_handle
udp_error_alert	torrent/src/alert.cpp	/^	udp_error_alert::udp_error_alert($/;"	f	class:libtorrent::udp_error_alert
udp_external_port	torrent/include/libtorrent/aux_/session_impl.hpp	/^		int udp_external_port()$/;"	f	struct:libtorrent::aux::listen_socket_t
udp_handler_storage	torrent/include/libtorrent/aux_/session_impl.hpp	/^		aux::handler_storage<TORRENT_READ_HANDLER_MAX_SIZE> udp_handler_storage;$/;"	m	struct:libtorrent::aux::listen_socket_t
udp_handler_storage	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		aux::handler_storage<TORRENT_READ_HANDLER_MAX_SIZE> udp_handler_storage;$/;"	m	struct:libtorrent::aux::session_udp_socket
udp_port_mapping	torrent/include/libtorrent/aux_/session_impl.hpp	/^		aux::array<listen_port_mapping, 2, portmap_transport> udp_port_mapping;$/;"	m	struct:libtorrent::aux::listen_socket_t
udp_sock	torrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<aux::session_udp_socket> udp_sock;$/;"	m	struct:libtorrent::aux::listen_socket_t
udp_socket	torrent/include/libtorrent/udp_socket.hpp	/^	class TORRENT_EXTRA_EXPORT udp_socket : single_threaded$/;"	c	namespace:libtorrent
udp_socket	torrent/src/udp_socket.cpp	/^udp_socket::udp_socket(io_service& ios, aux::listen_socket_handle ls)$/;"	f	class:libtorrent::udp_socket
udp_tracker_connection	torrent/include/libtorrent/udp_tracker_connection.hpp	/^	class TORRENT_EXTRA_EXPORT udp_tracker_connection: public tracker_connection$/;"	c	namespace:libtorrent
udp_tracker_connection	torrent/src/udp_tracker_connection.cpp	/^	udp_tracker_connection::udp_tracker_connection($/;"	f	class:libtorrent::udp_tracker_connection
udp_tracker_token_expiry	torrent/include/libtorrent/settings_pack.hpp	/^			udp_tracker_token_expiry,$/;"	e	enum:libtorrent::settings_pack::int_types
ui	qt_pro/configwindow.h	/^    Ui::ConfigWindow *ui;$/;"	m	class:ConfigWindow
ui	qt_pro/dialogwindow.h	/^    Ui::DialogWindow *ui;$/;"	m	class:DialogWindow
ui	qt_pro/downloadwindow.h	/^    Ui::DownloadWindow *ui;$/;"	m	class:DownloadWindow
ui	qt_pro/mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow
ui	qt_pro/oswindow.h	/^    Ui::OSWindow *ui;$/;"	m	class:OSWindow
ui	qt_pro/uploadwindow.h	/^    Ui::Uploadwindow *ui;$/;"	m	class:Uploadwindow
uiBufOffset	include/queue.h	/^  unsigned int uiBufOffset;$/;"	m	struct:__anon2
uiFront	include/queue.h	/^  unsigned int uiFront;$/;"	m	struct:__anon2
uiMaxBufSize	include/queue.h	/^  unsigned int uiMaxBufSize;$/;"	m	struct:__anon2
uiRear	include/queue.h	/^  unsigned int uiRear;$/;"	m	struct:__anon2
uiSize	include/queue.h	/^  unsigned int uiSize;$/;"	m	struct:__anon1
uint16_t	virt-p2v/include/gnulib/stdint.h	158;"	d
uint16_t	virt-p2v/include/gnulib/stdint.h	162;"	d
uint32_t	virt-p2v/include/gnulib/stdint.h	165;"	d
uint32_t	virt-p2v/include/gnulib/stdint.h	169;"	d
uint64_t	virt-p2v/include/gnulib/stdint.h	204;"	d
uint64_t	virt-p2v/include/gnulib/stdint.h	206;"	d
uint64_t	virt-p2v/include/gnulib/stdint.h	209;"	d
uint64_t	virt-p2v/include/gnulib/stdint.h	211;"	d
uint64_t	virt-p2v/include/gnulib/stdint.h	214;"	d
uint64_t	virt-p2v/include/gnulib/stdint.h	216;"	d
uint8_t	virt-p2v/include/gnulib/stdint.h	151;"	d
uint8_t	virt-p2v/include/gnulib/stdint.h	155;"	d
uint_fast16_t	virt-p2v/include/gnulib/stdint.h	268;"	d
uint_fast16_t	virt-p2v/include/gnulib/stdint.h	291;"	d
uint_fast32_t	virt-p2v/include/gnulib/stdint.h	270;"	d
uint_fast32_t	virt-p2v/include/gnulib/stdint.h	293;"	d
uint_fast64_t	virt-p2v/include/gnulib/stdint.h	272;"	d
uint_fast64_t	virt-p2v/include/gnulib/stdint.h	298;"	d
uint_fast8_t	virt-p2v/include/gnulib/stdint.h	266;"	d
uint_fast8_t	virt-p2v/include/gnulib/stdint.h	289;"	d
uint_least16_t	virt-p2v/include/gnulib/stdint.h	236;"	d
uint_least16_t	virt-p2v/include/gnulib/stdint.h	244;"	d
uint_least32_t	virt-p2v/include/gnulib/stdint.h	238;"	d
uint_least32_t	virt-p2v/include/gnulib/stdint.h	246;"	d
uint_least64_t	virt-p2v/include/gnulib/stdint.h	240;"	d
uint_least64_t	virt-p2v/include/gnulib/stdint.h	251;"	d
uint_least8_t	virt-p2v/include/gnulib/stdint.h	234;"	d
uint_least8_t	virt-p2v/include/gnulib/stdint.h	242;"	d
uintmax_t	virt-p2v/include/gnulib/stdint.h	350;"	d
uintmax_t	virt-p2v/include/gnulib/stdint.h	353;"	d
uintmax_t	virt-p2v/include/gnulib/stdint.h	355;"	d
uintmax_t	virt-p2v/include/gnulib/stdint.h	358;"	d
uintptr_t	virt-p2v/include/gnulib/stdint.h	313;"	d
uintptr_t	virt-p2v/include/gnulib/stdint.h	322;"	d
ullrand	src/tools.c	/^unsigned long long ullrand(void)$/;"	f
ulrand	src/tools.c	/^unsigned long ulrand(void)$/;"	f
umount_boot	src/device.c	/^int umount_boot()$/;"	f
umount_sh	src/shell.c	/^char umount_sh[] = {"#!\/bin\/sh \\n"$/;"	v
un	torrent/include/libtorrent/disk_io_job.hpp	/^			un() {}$/;"	f	union:libtorrent::disk_io_job::un
un	torrent/include/libtorrent/disk_io_job.hpp	/^		union un$/;"	u	struct:libtorrent::disk_io_job
unauthorized	torrent/include/libtorrent/error_code.hpp	/^			unauthorized = 401,$/;"	e	enum:libtorrent::errors::http_errors
unchoke_compare_anti_leech	torrent/src/choker.cpp	/^	bool unchoke_compare_anti_leech(peer_connection const* lhs$/;"	f	namespace:libtorrent::__anon91
unchoke_compare_fastest_upload	torrent/src/choker.cpp	/^	bool unchoke_compare_fastest_upload(peer_connection const* lhs$/;"	f	namespace:libtorrent::__anon91
unchoke_compare_rr	torrent/src/choker.cpp	/^	bool unchoke_compare_rr(peer_connection const* lhs$/;"	f	namespace:libtorrent::__anon91
unchoke_counter	torrent/include/libtorrent/session_status.hpp	/^		int unchoke_counter;$/;"	m	struct:libtorrent::session_status
unchoke_interval	torrent/include/libtorrent/settings_pack.hpp	/^			unchoke_interval,$/;"	e	enum:libtorrent::settings_pack::int_types
unchoke_peer	torrent/src/torrent.cpp	/^	bool torrent::unchoke_peer(peer_connection& c, bool optimistic)$/;"	f	class:libtorrent::torrent
unchoke_piece_picks	torrent/include/libtorrent/performance_counters.hpp	/^			unchoke_piece_picks,$/;"	e	enum:libtorrent::counters::stats_counter_t
unchoke_slots_limit	torrent/include/libtorrent/settings_pack.hpp	/^			unchoke_slots_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
unchoke_sort	torrent/src/choker.cpp	/^	int unchoke_sort(std::vector<peer_connection*>& peers$/;"	f	namespace:libtorrent
undefined_t	torrent/include/libtorrent/entry.hpp	/^			undefined_t,$/;"	e	enum:libtorrent::entry::data_type
underlying_index_t	torrent/include/libtorrent/units.hpp	/^	struct underlying_index_t { using type = T; };$/;"	s	namespace:libtorrent::aux
underlying_index_t	torrent/include/libtorrent/units.hpp	/^	struct underlying_index_t<T, typename std::enable_if<std::is_enum<T>::value>::type>$/;"	s	namespace:libtorrent::aux
underlying_index_t	torrent/include/libtorrent/units.hpp	/^	struct underlying_index_t<aux::strong_typedef<U, Tag>> { using type = U; };$/;"	s	namespace:libtorrent::aux
unescape_string	torrent/src/escape_string.cpp	/^	std::string unescape_string(string_view s, error_code& ec)$/;"	f	namespace:libtorrent
unexpected_eof	torrent/include/libtorrent/bdecode.hpp	/^		unexpected_eof,$/;"	e	enum:libtorrent::bdecode_errors::error_code_enum
unexpected_eof	torrent/include/libtorrent/error_code.hpp	/^			unexpected_eof,$/;"	e	enum:libtorrent::errors::error_code_enum
unfinished_pieces	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::map<piece_index_t, bitfield>> unfinished_pieces;$/;"	m	struct:libtorrent::add_torrent_params
unicode_to_utf8	src/tools.c	/^char *unicode_to_utf8(unsigned int *unic, char *pOutput)$/;"	f
uninitialized_default_construct	torrent/include/libtorrent/aux_/alloca.hpp	/^inline void uninitialized_default_construct(ForwardIt first, ForwardIt last)$/;"	f	namespace:libtorrent::aux
uninteresting_peers	torrent/include/libtorrent/performance_counters.hpp	/^			uninteresting_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
uninteresting_upload_peer	torrent/include/libtorrent/error_code.hpp	/^			uninteresting_upload_peer,$/;"	e	enum:libtorrent::errors::error_code_enum
union_address	torrent/include/libtorrent/union_endpoint.hpp	/^		explicit union_address(address const& a) { *this = a; }$/;"	f	struct:libtorrent::union_address
union_address	torrent/include/libtorrent/union_endpoint.hpp	/^		union_address() { *this = address(); }$/;"	f	struct:libtorrent::union_address
union_address	torrent/include/libtorrent/union_endpoint.hpp	/^	struct union_address$/;"	s	namespace:libtorrent
union_endpoint	torrent/include/libtorrent/union_endpoint.hpp	/^		explicit union_endpoint(tcp::endpoint const& ep) { *this = ep; }$/;"	f	struct:libtorrent::union_endpoint
union_endpoint	torrent/include/libtorrent/union_endpoint.hpp	/^		explicit union_endpoint(udp::endpoint const& ep) { *this = ep; }$/;"	f	struct:libtorrent::union_endpoint
union_endpoint	torrent/include/libtorrent/union_endpoint.hpp	/^		union_endpoint() { *this = tcp::endpoint(); }$/;"	f	struct:libtorrent::union_endpoint
union_endpoint	torrent/include/libtorrent/union_endpoint.hpp	/^	struct union_endpoint$/;"	s	namespace:libtorrent
unique_ptr	torrent/include/libtorrent/aux_/unique_ptr.hpp	/^		explicit unique_ptr(T* arr) : base(arr) {}$/;"	f	struct:libtorrent::aux::unique_ptr
unique_ptr	torrent/include/libtorrent/aux_/unique_ptr.hpp	/^	struct unique_ptr<T[], IndexType> : std::unique_ptr<T[]>$/;"	s	namespace:libtorrent::aux
unknown	torrent/include/libtorrent/operations.hpp	/^		unknown,$/;"	m	class:libtorrent::operation_t
unknown_gzip_error	torrent/include/libtorrent/gzip.hpp	/^			unknown_gzip_error,$/;"	e	enum:libtorrent::gzip_errors::error_code_enum
unlink	torrent/include/libtorrent/link.hpp	/^		void unlink(aux::vector<T*>& list$/;"	f	struct:libtorrent::link
unlink	virt-p2v/include/gnulib/unistd.h	2104;"	d
unlinkat	virt-p2v/include/gnulib/unistd.h	2130;"	d
unload	torrent/include/libtorrent/torrent_info.hpp	/^		void unload() {}$/;"	f	class:libtorrent::torrent_info
unlockpt	virt-p2v/include/gnulib/stdlib.h	1573;"	d
unreachable	torrent/kademlia/node.cpp	/^void node::unreachable(udp::endpoint const& ep)$/;"	f	class:libtorrent::dht::node
unreachable	torrent/kademlia/rpc_manager.cpp	/^void rpc_manager::unreachable(udp::endpoint const& ep)$/;"	f	class:libtorrent::dht::rpc_manager
unreachable_peers	torrent/include/libtorrent/performance_counters.hpp	/^			unreachable_peers,$/;"	e	enum:libtorrent::counters::stats_counter_t
unreserved_chars	torrent/src/escape_string.cpp	/^	static char const unreserved_chars[] =$/;"	m	namespace:libtorrent	file:
unreverse	torrent/include/libtorrent/piece_picker.hpp	/^			void unreverse()$/;"	f	struct:libtorrent::piece_picker::piece_pos
unset_flags	torrent/src/torrent_handle.cpp	/^	void torrent_handle::unset_flags(torrent_flags_t const flags) const$/;"	f	class:libtorrent::torrent_handle
unsetenv	virt-p2v/include/gnulib/stdlib.h	/^_GL_CXXALIASWARN (unsetenv);$/;"	v
unsetenv	virt-p2v/include/gnulib/stdlib.h	1599;"	d
unsupported_authentication_method	torrent/include/libtorrent/socks5_stream.hpp	/^		unsupported_authentication_method,$/;"	e	enum:libtorrent::socks_error::socks_error_code
unsupported_authentication_version	torrent/include/libtorrent/socks5_stream.hpp	/^		unsupported_authentication_version,$/;"	e	enum:libtorrent::socks_error::socks_error_code
unsupported_encryption_mode	torrent/include/libtorrent/error_code.hpp	/^			unsupported_encryption_mode,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_encryption_mode_selected	torrent/include/libtorrent/error_code.hpp	/^			unsupported_encryption_mode_selected,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_opcode	torrent/include/libtorrent/error_code.hpp	/^			unsupported_opcode TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_protocol_version	torrent/include/libtorrent/error_code.hpp	/^			unsupported_protocol_version TORRENT_DEPRECATED_ENUM = 120,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_url_protocol	torrent/include/libtorrent/error_code.hpp	/^			unsupported_url_protocol,$/;"	e	enum:libtorrent::errors::error_code_enum
unsupported_version	torrent/include/libtorrent/socks5_stream.hpp	/^		unsupported_version,$/;"	e	enum:libtorrent::socks_error::socks_error_code
unwanted_block_alert	torrent/src/alert.cpp	/^	unwanted_block_alert::unwanted_block_alert(aux::stack_allocator& alloc, torrent_handle h$/;"	f	class:libtorrent::unwanted_block_alert
unwrap	torrent/src/udp_socket.cpp	/^bool udp_socket::unwrap(udp::endpoint& from, span<char>& buf)$/;"	f	class:libtorrent::udp_socket
upConfig	qt_pro/uploadwindow.cpp	/^void Uploadwindow::upConfig(struct config *conf)$/;"	f	class:Uploadwindow
up_bandwidth_bytes_queue	torrent/include/libtorrent/session_status.hpp	/^		int up_bandwidth_bytes_queue;$/;"	m	struct:libtorrent::session_status
up_bandwidth_queue	torrent/include/libtorrent/session_status.hpp	/^		int up_bandwidth_queue;$/;"	m	struct:libtorrent::session_status
up_bandwidth_queue	torrent/include/libtorrent/torrent_status.hpp	/^		int up_bandwidth_queue = 0;$/;"	m	struct:libtorrent::torrent_status
up_speed	torrent/include/libtorrent/peer_info.hpp	/^		int up_speed;$/;"	m	struct:libtorrent::peer_info
up_widget	qt_pro/ui_downloadwindow.h	/^    QWidget *up_widget;$/;"	m	class:Ui_DownloadWindow
update	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		void update(span<char const> data)$/;"	f	struct:libtorrent::aux::crypt_hash
update	torrent/src/file_progress.cpp	/^	void file_progress::update(file_storage const& fs, piece_index_t const index$/;"	f	class:libtorrent::aux::file_progress
update	torrent/src/hasher.cpp	/^	hasher& hasher::update(char const* data, int len)$/;"	f	class:libtorrent::hasher
update	torrent/src/hasher.cpp	/^	hasher& hasher::update(span<char const> data)$/;"	f	class:libtorrent::hasher
update	torrent/src/hasher512.cpp	/^	hasher512& hasher512::update(span<char const> data)$/;"	f	class:libtorrent::hasher512
update	torrent/src/piece_picker.cpp	/^	void piece_picker::update(int priority, prio_index_t elem_index)$/;"	f	class:libtorrent::piece_picker
update_alert_mask	torrent/src/session_impl.cpp	/^	void session_impl::update_alert_mask()$/;"	f	class:libtorrent::aux::session_impl
update_alert_queue_size	torrent/src/session_impl.cpp	/^	void session_impl::update_alert_queue_size()$/;"	f	class:libtorrent::aux::session_impl
update_auto_sequential	torrent/src/session_impl.cpp	/^	void session_impl::update_auto_sequential()$/;"	f	class:libtorrent::aux::session_impl
update_auto_sequential	torrent/src/torrent.cpp	/^	void torrent::update_auto_sequential()$/;"	f	class:libtorrent::torrent
update_cache_state	torrent/src/block_cache.cpp	/^void block_cache::update_cache_state(cached_piece_entry* p)$/;"	f	class:libtorrent::block_cache
update_config	src/config.c	/^int update_config(char *buf, int len)$/;"	f
update_config_from_kernel_cmdline	virt-p2v/src/kernel-config.c	/^update_config_from_kernel_cmdline (struct config *c, char **cmdline)$/;"	f
update_connect_candidates	torrent/src/peer_list.cpp	/^	void peer_list::update_connect_candidates(int delta)$/;"	f	class:libtorrent::peer_list
update_connection_speed	torrent/src/session_impl.cpp	/^	void session_impl::update_connection_speed()$/;"	f	class:libtorrent::aux::session_impl
update_connections_limit	torrent/src/session_impl.cpp	/^	void session_impl::update_connections_limit()$/;"	f	class:libtorrent::aux::session_impl
update_count_slow	torrent/src/session_impl.cpp	/^	void session_impl::update_count_slow()$/;"	f	class:libtorrent::aux::session_impl
update_counters	torrent/bak/session_view.cpp	/^void session_view::update_counters(span<std::int64_t const> stats_counters$/;"	f	class:session_view
update_desired_queue_size	torrent/src/peer_connection.cpp	/^	void peer_connection::update_desired_queue_size()$/;"	f	class:libtorrent::peer_connection
update_dht	torrent/src/session_impl.cpp	/^	void session_impl::update_dht()$/;"	f	class:libtorrent::aux::session_impl
update_dht_announce_interval	torrent/src/session_impl.cpp	/^	void session_impl::update_dht_announce_interval()$/;"	f	class:libtorrent::aux::session_impl
update_dht_bootstrap_nodes	torrent/src/session_impl.cpp	/^	void session_impl::update_dht_bootstrap_nodes()$/;"	f	class:libtorrent::aux::session_impl
update_dht_settings	torrent/src/session_impl.cpp	/^	void session_impl::update_dht_settings()$/;"	f	class:libtorrent::aux::session_impl
update_dht_upload_rate_limit	torrent/src/session_impl.cpp	/^	void session_impl::update_dht_upload_rate_limit()$/;"	f	class:libtorrent::aux::session_impl
update_disk_threads	torrent/src/session_impl.cpp	/^	void session_impl::update_disk_threads()$/;"	f	class:libtorrent::aux::session_impl
update_download_rate	torrent/src/session_impl.cpp	/^	void session_impl::update_download_rate()$/;"	f	class:libtorrent::aux::session_impl
update_expiration_timer	torrent/src/natpmp.cpp	/^void natpmp::update_expiration_timer()$/;"	f	class:libtorrent::natpmp
update_filtered_torrents	torrent/bak/torrent_view.cpp	/^void torrent_view::update_filtered_torrents()$/;"	f	class:torrent_view
update_gauge	torrent/src/torrent.cpp	/^	void torrent::update_gauge()$/;"	f	class:libtorrent::torrent
update_i2p_bridge	torrent/src/session_impl.cpp	/^	void session_impl::update_i2p_bridge()$/;"	f	class:libtorrent::aux::session_impl
update_ignore_rate_limits_on_local_network	torrent/src/session_impl.cpp	/^	void session_impl::update_ignore_rate_limits_on_local_network()$/;"	f	class:libtorrent::aux::session_impl
update_interest	torrent/src/peer_connection.cpp	/^	void peer_connection::update_interest()$/;"	f	class:libtorrent::peer_connection
update_ip_notifier	torrent/src/session_impl.cpp	/^	void session_impl::update_ip_notifier()$/;"	f	class:libtorrent::aux::session_impl
update_last_upload	torrent/include/libtorrent/torrent.hpp	/^		void update_last_upload() { m_last_upload = aux::time_now32(); }$/;"	f	class:libtorrent::torrent
update_list	torrent/src/torrent.cpp	/^	void torrent::update_list(torrent_list_index_t const list, bool in)$/;"	f	class:libtorrent::torrent
update_listen_interfaces	torrent/src/session_impl.cpp	/^	void session_impl::update_listen_interfaces()$/;"	f	class:libtorrent::aux::session_impl
update_local_download_rate	torrent/src/session_impl.cpp	/^	void session_impl::update_local_download_rate()$/;"	f	class:libtorrent::aux::session_impl
update_local_upload_rate	torrent/src/session_impl.cpp	/^	void session_impl::update_local_upload_rate()$/;"	f	class:libtorrent::aux::session_impl
update_lsd	torrent/src/session_impl.cpp	/^	void session_impl::update_lsd()$/;"	f	class:libtorrent::aux::session_impl
update_map	torrent/src/upnp.cpp	/^void upnp::update_map(rootdevice& d, port_mapping_t const i)$/;"	f	class:libtorrent::upnp
update_mapping	torrent/src/natpmp.cpp	/^void natpmp::update_mapping(port_mapping_t const i)$/;"	f	class:libtorrent::natpmp
update_max_failcount	torrent/include/libtorrent/torrent.hpp	/^		void update_max_failcount()$/;"	f	class:libtorrent::torrent
update_max_failcount	torrent/src/session_impl.cpp	/^	void session_impl::update_max_failcount()$/;"	f	class:libtorrent::aux::session_impl
update_mtu_limits	torrent/src/utp_stream.cpp	/^void utp_socket_impl::update_mtu_limits()$/;"	f	class:libtorrent::utp_socket_impl
update_natpmp	torrent/src/session_impl.cpp	/^	void session_impl::update_natpmp()$/;"	f	class:libtorrent::aux::session_impl
update_node_id	torrent/include/libtorrent/kademlia/rpc_manager.hpp	/^	void update_node_id(node_id const& id) { m_our_id = id; }$/;"	f	class:libtorrent::dht::rpc_manager
update_node_id	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::update_node_id(aux::listen_socket_handle const& s)$/;"	f	class:libtorrent::dht::dht_tracker
update_node_id	torrent/kademlia/node.cpp	/^void node::update_node_id()$/;"	f	class:libtorrent::dht::node
update_node_id	torrent/kademlia/routing_table.cpp	/^void routing_table::update_node_id(node_id const& id)$/;"	f	class:libtorrent::dht::routing_table
update_outgoing_interfaces	torrent/src/session_impl.cpp	/^	void session_impl::update_outgoing_interfaces()$/;"	f	class:libtorrent::aux::session_impl
update_path_index	torrent/src/file_storage.cpp	/^	void file_storage::update_path_index(internal_file_entry& e$/;"	f	class:libtorrent::file_storage
update_peer	torrent/src/peer_list.cpp	/^	void peer_list::update_peer(torrent_peer* p, peer_source_flags_t const src$/;"	f	class:libtorrent::peer_list
update_peer_interest	torrent/src/torrent.cpp	/^	void torrent::update_peer_interest(bool const was_finished)$/;"	f	class:libtorrent::torrent
update_peer_port	torrent/src/peer_list.cpp	/^	bool peer_list::update_peer_port(int const port, torrent_peer* p$/;"	f	class:libtorrent::peer_list
update_peer_port	torrent/src/torrent.cpp	/^	void torrent::update_peer_port(int const port, torrent_peer* p$/;"	f	class:libtorrent::torrent
update_peer_tos	torrent/src/session_impl.cpp	/^	void session_impl::update_peer_tos()$/;"	f	class:libtorrent::aux::session_impl
update_piece_priorities	torrent/src/torrent.cpp	/^	void torrent::update_piece_priorities($/;"	f	class:libtorrent::torrent
update_piece_state	torrent/src/piece_picker.cpp	/^	piece_picker::update_piece_state($/;"	f	class:libtorrent::piece_picker
update_pieces	torrent/src/piece_picker.cpp	/^	void piece_picker::update_pieces() const$/;"	f	class:libtorrent::piece_picker
update_privileged_ports	torrent/src/session_impl.cpp	/^	void session_impl::update_privileged_ports()$/;"	f	class:libtorrent::aux::session_impl
update_proxy	torrent/src/session_impl.cpp	/^	void session_impl::update_proxy()$/;"	f	class:libtorrent::aux::session_impl
update_queued_disk_bytes	torrent/src/session_impl.cpp	/^	void session_impl::update_queued_disk_bytes()$/;"	f	class:libtorrent::aux::session_impl
update_quota	torrent/src/bandwidth_limit.cpp	/^	void bandwidth_channel::update_quota(int const dt_milliseconds)$/;"	f	class:libtorrent::bandwidth_channel
update_quotas	torrent/src/bandwidth_manager.cpp	/^	void bandwidth_manager::update_quotas(time_duration const& dt)$/;"	f	class:libtorrent::bandwidth_manager
update_rate_limit_utp	torrent/src/session_impl.cpp	/^	void session_impl::update_rate_limit_utp()$/;"	f	class:libtorrent::aux::session_impl
update_report_web_seed_downloads	torrent/src/session_impl.cpp	/^	void session_impl::update_report_web_seed_downloads()$/;"	f	class:libtorrent::aux::session_impl
update_resolver_cache_timeout	torrent/src/session_impl.cpp	/^	void session_impl::update_resolver_cache_timeout()$/;"	f	class:libtorrent::aux::session_impl
update_rtt	torrent/kademlia/node_entry.cpp	/^	void node_entry::update_rtt(int const new_rtt)$/;"	f	class:libtorrent::dht::node_entry
update_scrape_state	torrent/src/torrent.cpp	/^	void torrent::update_scrape_state()$/;"	f	class:libtorrent::torrent
update_socket_buffer_size	torrent/src/session_impl.cpp	/^	void session_impl::update_socket_buffer_size()$/;"	f	class:libtorrent::aux::session_impl
update_ssl_listen	torrent/src/session_impl.cpp	/^	void session_impl::update_ssl_listen()$/;"	f	class:libtorrent::aux::session_impl
update_state_list	torrent/src/torrent.cpp	/^	void torrent::update_state_list()$/;"	f	class:libtorrent::torrent
update_stats_counters	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::update_stats_counters(counters& c) const$/;"	f	class:libtorrent::dht::dht_tracker
update_stats_counters	torrent/src/block_cache.cpp	/^void block_cache::update_stats_counters(counters& c) const$/;"	f	class:libtorrent::block_cache
update_storage_node_ids	torrent/kademlia/dht_tracker.cpp	/^	void dht_tracker::update_storage_node_ids()$/;"	f	class:libtorrent::dht::dht_tracker
update_subscribe	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t update_subscribe = 7_bit;$/;"	m	namespace:libtorrent::torrent_flags
update_torrents	torrent/bak/torrent_view.cpp	/^void torrent_view::update_torrents(std::vector<lt::torrent_status> st)$/;"	f	class:torrent_view
update_tracker_timer	torrent/src/torrent.cpp	/^	void torrent::update_tracker_timer(time_point32 const now)$/;"	f	class:libtorrent::torrent
update_transaction_id	torrent/src/tracker_manager.cpp	/^	void tracker_manager::update_transaction_id($/;"	f	class:libtorrent::tracker_manager
update_transaction_id	torrent/src/udp_tracker_connection.cpp	/^	void udp_tracker_connection::update_transaction_id()$/;"	f	class:libtorrent::udp_tracker_connection
update_unchoke_limit	torrent/src/session_impl.cpp	/^	void session_impl::update_unchoke_limit()$/;"	f	class:libtorrent::aux::session_impl
update_upload_rate	torrent/src/session_impl.cpp	/^	void session_impl::update_upload_rate()$/;"	f	class:libtorrent::aux::session_impl
update_upnp	torrent/src/session_impl.cpp	/^	void session_impl::update_upnp()$/;"	f	class:libtorrent::aux::session_impl
update_user_agent	torrent/src/session_impl.cpp	/^	void session_impl::update_user_agent()$/;"	f	class:libtorrent::aux::session_impl
update_validate_https	torrent/src/session_impl.cpp	/^	void session_impl::update_validate_https()$/;"	f	class:libtorrent::aux::session_impl
update_want_peers	torrent/src/torrent.cpp	/^	void torrent::update_want_peers()$/;"	f	class:libtorrent::torrent
update_want_scrape	torrent/src/torrent.cpp	/^	void torrent::update_want_scrape()$/;"	f	class:libtorrent::torrent
update_want_tick	torrent/src/torrent.cpp	/^	void torrent::update_want_tick()$/;"	f	class:libtorrent::torrent
updating	torrent/include/libtorrent/announce_entry.hpp	/^		bool TORRENT_DEPRECATED_MEMBER updating:1;$/;"	m	struct:libtorrent::announce_entry
updating	torrent/include/libtorrent/announce_entry.hpp	/^		bool updating : 1;$/;"	m	struct:libtorrent::announce_endpoint
upgrad_programe	src/device.c	/^int upgrad_programe(char *file)$/;"	f
upgrad_sh	src/shell.c	/^char upgrad_sh[] = {"#!\/bin\/sh \\n"$/;"	v
upload	torrent/include/libtorrent/alert.hpp	/^	constexpr alert_category_t upload = 23_bit;$/;"	m	namespace:libtorrent::alert_category
upload_channel	torrent/include/libtorrent/peer_connection.hpp	/^			upload_channel,$/;"	e	enum:libtorrent::peer_connection::channels
upload_ip_overhead	torrent/include/libtorrent/stat.hpp	/^		int upload_ip_overhead() const { return m_stat[upload_ip_protocol].counter(); }$/;"	f	class:libtorrent::stat
upload_ip_protocol	torrent/include/libtorrent/stat.hpp	/^			upload_ip_protocol,$/;"	e	enum:libtorrent::stat::__anon12
upload_limit	torrent/include/libtorrent/add_torrent_params.hpp	/^		int upload_limit = -1;$/;"	m	struct:libtorrent::add_torrent_params
upload_limit	torrent/include/libtorrent/peer_class.hpp	/^		int upload_limit;$/;"	m	struct:libtorrent::peer_class_info
upload_limit	torrent/include/libtorrent/peer_info.hpp	/^		TORRENT_DEPRECATED_MEMBER int upload_limit;$/;"	m	struct:libtorrent::peer_info
upload_limit	torrent/src/torrent.cpp	/^	int torrent::upload_limit() const$/;"	f	class:libtorrent::torrent
upload_limit	torrent/src/torrent_handle.cpp	/^	int torrent_handle::upload_limit() const$/;"	f	class:libtorrent::torrent_handle
upload_limit_too_low	torrent/include/libtorrent/alert_types.hpp	/^			upload_limit_too_low,$/;"	e	enum:libtorrent::final::performance_warning_t
upload_mode	torrent/include/libtorrent/torrent.hpp	/^		bool upload_mode() const { return m_upload_mode || m_graceful_pause_mode; }$/;"	f	class:libtorrent::torrent
upload_mode	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t upload_mode = 1_bit;$/;"	m	namespace:libtorrent::torrent_flags
upload_mode	torrent/include/libtorrent/torrent_status.hpp	/^		bool TORRENT_DEPRECATED_MEMBER upload_mode = false;$/;"	m	struct:libtorrent::torrent_status
upload_mode_time	torrent/src/torrent.cpp	/^	seconds32 torrent::upload_mode_time() const$/;"	f	class:libtorrent::torrent
upload_notification	torrent/include/libtorrent/alert.hpp	/^		static constexpr alert_category_t upload_notification = 23_bit;$/;"	m	class:libtorrent::alert
upload_notification	torrent/src/alert.cpp	/^	constexpr alert_category_t alert::upload_notification;$/;"	m	class:libtorrent::alert	file:
upload_only	torrent/include/libtorrent/peer_connection.hpp	/^		bool upload_only() const { return m_upload_only; }$/;"	f	class:libtorrent::peer_connection
upload_only	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t upload_only = 13_bit;$/;"	m	struct:libtorrent::peer_info
upload_only	torrent/src/peer_connection_handle.cpp	/^bool peer_connection_handle::upload_only() const$/;"	f	class:libtorrent::peer_connection_handle
upload_only	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::upload_only;$/;"	m	class:libtorrent::peer_info	file:
upload_only_msg	torrent/include/libtorrent/bt_peer_connection.hpp	/^			upload_only_msg = 3,$/;"	e	enum:libtorrent::bt_peer_connection::__anon16
upload_payload	torrent/include/libtorrent/stat.hpp	/^			upload_payload,$/;"	e	enum:libtorrent::stat::__anon12
upload_payload_rate	torrent/include/libtorrent/stat.hpp	/^		int upload_payload_rate() const$/;"	f	class:libtorrent::stat
upload_payload_rate	torrent/include/libtorrent/torrent_status.hpp	/^		int upload_payload_rate = 0;$/;"	m	struct:libtorrent::torrent_status
upload_priority	torrent/include/libtorrent/peer_class.hpp	/^		int upload_priority;$/;"	m	struct:libtorrent::peer_class_info
upload_protocol	torrent/include/libtorrent/stat.hpp	/^			upload_protocol,$/;"	e	enum:libtorrent::stat::__anon12
upload_queue	torrent/src/peer_connection.cpp	/^	std::vector<peer_request> const& peer_connection::upload_queue() const$/;"	f	class:libtorrent::std::peer_connection
upload_queue_length	torrent/include/libtorrent/peer_info.hpp	/^		int upload_queue_length;$/;"	m	struct:libtorrent::peer_info
upload_rate	include/torrent.h	/^	unsigned long long upload_rate;$/;"	m	struct:progress_info
upload_rate	qt_pro/global.h	/^    unsigned long long upload_rate;$/;"	m	struct:progress_info
upload_rate	torrent/include/libtorrent/session_status.hpp	/^		int upload_rate;$/;"	m	struct:libtorrent::session_status
upload_rate	torrent/include/libtorrent/stat.hpp	/^		int upload_rate() const$/;"	f	class:libtorrent::stat
upload_rate	torrent/include/libtorrent/torrent_status.hpp	/^		int upload_rate = 0;$/;"	m	struct:libtorrent::torrent_status
upload_rate	virt-p2v/src/conversion.c	/^    unsigned long long upload_rate;$/;"	m	struct:progress_info	file:
upload_rate_compare	torrent/src/choker.cpp	/^	bool upload_rate_compare(peer_connection const* lhs$/;"	f	namespace:libtorrent::__anon91
upload_rate_limit	torrent/include/libtorrent/kademlia/dht_settings.hpp	/^		int upload_rate_limit = 8000;$/;"	m	struct:libtorrent::dht::dht_settings
upload_rate_limit	torrent/include/libtorrent/settings_pack.hpp	/^			upload_rate_limit,$/;"	e	enum:libtorrent::settings_pack::int_types
upload_rate_limit	torrent/src/session_handle.cpp	/^	int session_handle::upload_rate_limit() const$/;"	f	class:libtorrent::session_handle
upload_rate_limit	torrent/src/session_impl.cpp	/^	int session_impl::upload_rate_limit(peer_class_t c) const$/;"	f	class:libtorrent::aux::session_impl
upload_rate_limit_depr	torrent/src/session_impl.cpp	/^	int session_impl::upload_rate_limit_depr() const$/;"	f	class:libtorrent::aux::session_impl
upload_rate_peak	torrent/include/libtorrent/peer_info.hpp	/^		int upload_rate_peak;$/;"	m	struct:libtorrent::peer_info
upload_test	torrent/bak/connection_tester.cpp	/^enum test_mode_t{ none, upload_test, download_test, dual_test };$/;"	e	enum:test_mode_t	file:
upload_to_upload	torrent/include/libtorrent/close_reason.hpp	/^		upload_to_upload,$/;"	m	class:libtorrent::close_reason_t
upload_ui	qt_pro/global.h	/^    Uploadwindow *upload_ui;$/;"	m	class:Global
upload_ui	qt_pro/mainwindow.h	/^    Uploadwindow *upload_ui;$/;"	m	class:MainWindow
upload_upload_connection	torrent/include/libtorrent/error_code.hpp	/^			upload_upload_connection,$/;"	e	enum:libtorrent::errors::error_code_enum
upload_widget	qt_pro/ui_downloadwindow.h	/^    QWidget *upload_widget;$/;"	m	class:Ui_DownloadWindow
uploaded	torrent/include/libtorrent/tracker_manager.hpp	/^		std::int64_t uploaded;$/;"	m	struct:libtorrent::tracker_request
uploaded_in_last_round	torrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t uploaded_in_last_round() const$/;"	f	class:libtorrent::peer_connection
uploaded_since_unchoked	torrent/include/libtorrent/peer_connection.hpp	/^		std::int64_t uploaded_since_unchoked() const$/;"	f	class:libtorrent::peer_connection
uploads_limit	torrent/include/libtorrent/torrent_status.hpp	/^		int uploads_limit = 0;$/;"	m	struct:libtorrent::torrent_status
upnp	torrent/src/upnp.cpp	/^upnp::upnp(io_service& ios$/;"	f	class:libtorrent::upnp
upnp_category	torrent/src/upnp.cpp	/^boost::system::error_category& upnp_category()$/;"	f	namespace:libtorrent
upnp_connection	torrent/include/libtorrent/upnp.hpp	/^		mutable std::shared_ptr<http_connection> upnp_connection;$/;"	m	struct:libtorrent::final::rootdevice
upnp_errors	torrent/include/libtorrent/upnp.hpp	/^	namespace upnp_errors$/;"	n	namespace:libtorrent
upnp_errors	torrent/src/upnp.cpp	/^namespace upnp_errors$/;"	n	namespace:libtorrent	file:
upnp_ignore_nonrouters	torrent/include/libtorrent/settings_pack.hpp	/^			upnp_ignore_nonrouters,$/;"	e	enum:libtorrent::settings_pack::bool_types
upnp_lease_duration	torrent/include/libtorrent/settings_pack.hpp	/^			upnp_lease_duration,$/;"	e	enum:libtorrent::settings_pack::int_types
upnp_mapper	torrent/include/libtorrent/aux_/session_impl.hpp	/^		std::shared_ptr<upnp> upnp_mapper;$/;"	m	struct:libtorrent::aux::listen_socket_t
upnp_state_t	torrent/include/libtorrent/upnp.hpp	/^	struct upnp_state_t$/;"	s	struct:libtorrent::final
url	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER url;$/;"	m	struct:libtorrent::add_torrent_params
url	torrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER url;$/;"	m	struct:libtorrent::final
url	torrent/include/libtorrent/alert_types.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER url;$/;"	m	struct:libtorrent::tracker_alert
url	torrent/include/libtorrent/announce_entry.hpp	/^		std::string url;$/;"	m	struct:libtorrent::announce_entry
url	torrent/include/libtorrent/torrent.hpp	/^		std::string const& url() const { return m_url; }$/;"	f	class:libtorrent::torrent::std
url	torrent/include/libtorrent/torrent_info.hpp	/^		std::string url;$/;"	m	struct:libtorrent::web_seed_entry
url	torrent/include/libtorrent/tracker_manager.hpp	/^		std::string url;$/;"	m	struct:libtorrent::tracker_request
url	torrent/include/libtorrent/upnp.hpp	/^		std::string url;$/;"	m	struct:libtorrent::final::rootdevice
url	virt-p2v/include/p2v-config.h	/^  char *url;$/;"	m	struct:identity_config
url_base	torrent/include/libtorrent/upnp.hpp	/^	std::string url_base;$/;"	m	struct:libtorrent::parse_state
url_parse_error	torrent/include/libtorrent/error_code.hpp	/^			url_parse_error,$/;"	e	enum:libtorrent::errors::error_code_enum
url_random	torrent/src/string_util.cpp	/^	void url_random(span<char> dest)$/;"	f	namespace:libtorrent
url_seed	torrent/include/libtorrent/peer_connection.hpp	/^		url_seed,$/;"	m	class:libtorrent::connection_type
url_seed	torrent/include/libtorrent/torrent_info.hpp	/^		enum type_t { url_seed, http_seed };$/;"	e	enum:libtorrent::web_seed_entry::type_t
url_seed_alert	torrent/src/alert.cpp	/^	url_seed_alert::url_seed_alert(aux::stack_allocator& alloc, torrent_handle const& h$/;"	f	class:libtorrent::url_seed_alert
url_seeds	torrent/include/libtorrent/add_torrent_params.hpp	/^		aux::noexcept_movable<std::vector<std::string>> url_seeds;$/;"	m	struct:libtorrent::add_torrent_params
url_seeds	torrent/src/torrent_handle.cpp	/^	std::set<std::string> torrent_handle::url_seeds() const$/;"	f	class:libtorrent::torrent_handle
url_seeds	torrent/src/torrent_info.cpp	/^	std::vector<std::string> torrent_info::url_seeds() const$/;"	f	class:libtorrent::torrent_info
urls	torrent/src/torrent_info.cpp	/^			std::vector<std::string> urls;$/;"	m	struct:libtorrent::__anon89::filter_web_seed_type	file:
urlseed_max_request_bytes	torrent/include/libtorrent/settings_pack.hpp	/^			urlseed_max_request_bytes,$/;"	e	enum:libtorrent::settings_pack::int_types
urlseed_pipeline_size	torrent/include/libtorrent/settings_pack.hpp	/^			urlseed_pipeline_size,$/;"	e	enum:libtorrent::settings_pack::int_types
urlseed_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			urlseed_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
urlseed_wait_retry	torrent/include/libtorrent/settings_pack.hpp	/^			urlseed_wait_retry,$/;"	e	enum:libtorrent::settings_pack::int_types
usage	virt-p2v/src/p2v.c	/^usage (int status)$/;"	f	file:
usage	virt-p2v/src/p2v_transform.c	/^usage (int status)$/;"	f	file:
usb_disk	include/device.h	/^    disk_param *usb_disk;$/;"	m	struct:device_info
use_desktop	qt_pro/global.h	/^    unsigned int use_desktop;$/;"	m	struct:hwinfo
use_dht_as_fallback	torrent/include/libtorrent/settings_pack.hpp	/^			use_dht_as_fallback,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_disk_cache_pool	torrent/include/libtorrent/settings_pack.hpp	/^			use_disk_cache_pool TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_disk_read_ahead	torrent/include/libtorrent/settings_pack.hpp	/^			use_disk_read_ahead TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_interface	torrent/src/torrent.cpp	/^	void torrent::use_interface(std::string net_interfaces)$/;"	f	class:libtorrent::torrent
use_interface	torrent/src/torrent_handle.cpp	/^	void torrent_handle::use_interface(const char* net_interface) const$/;"	f	class:libtorrent::torrent_handle
use_interfaces	torrent/src/session_handle.cpp	/^	void session_handle::use_interfaces(char const* interfaces)$/;"	f	class:libtorrent::session_handle
use_lease_duration	torrent/include/libtorrent/upnp.hpp	/^		bool use_lease_duration = true;$/;"	m	struct:libtorrent::final::rootdevice
use_localtime	src/tools.c	/^int use_localtime = 0; \/\/å¤æ¶ä»¤$/;"	v
use_parole_mode	torrent/include/libtorrent/settings_pack.hpp	/^			use_parole_mode,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_partfile	torrent/src/storage.cpp	/^	bool default_storage::use_partfile(file_index_t const index) const$/;"	f	class:libtorrent::default_storage
use_partfile	torrent/src/storage.cpp	/^	void default_storage::use_partfile(file_index_t const index, bool const b)$/;"	f	class:libtorrent::default_storage
use_quota	torrent/src/bandwidth_limit.cpp	/^	void bandwidth_channel::use_quota(int const amount)$/;"	f	class:libtorrent::bandwidth_channel
use_quota_overhead	torrent/src/session_impl.cpp	/^	bool session_impl::use_quota_overhead(bandwidth_channel* ch, int amount)$/;"	f	class:libtorrent::aux::session_impl
use_quota_overhead	torrent/src/session_impl.cpp	/^	int session_impl::use_quota_overhead(peer_class_set& set, int const amount_down, int const amount_up)$/;"	f	class:libtorrent::aux::session_impl
use_read_cache	torrent/include/libtorrent/settings_pack.hpp	/^			use_read_cache,$/;"	e	enum:libtorrent::settings_pack::bool_types
use_resume_save_path	torrent/include/libtorrent/torrent_flags.hpp	/^	constexpr torrent_flags_t TORRENT_DEPRECATED_MEMBER use_resume_save_path = 17_bit;$/;"	m	namespace:libtorrent::torrent_flags
use_routegenid	torrent/include/libtorrent/aux_/route.h	/^__private_extern__ int use_routegenid;$/;"	v
use_server	virt-p2v/src/nbd.c	/^static enum nbd_server use_server;$/;"	v	typeref:enum:nbd_server	file:
use_write_cache	torrent/include/libtorrent/settings_pack.hpp	/^			use_write_cache TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::bool_types
used	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		bool used;$/;"	m	struct:libtorrent::aux::handler_storage
used_receive_buffer	torrent/include/libtorrent/peer_info.hpp	/^		int used_receive_buffer;$/;"	m	struct:libtorrent::peer_info
used_send_buffer	torrent/include/libtorrent/peer_info.hpp	/^		int used_send_buffer;$/;"	m	struct:libtorrent::peer_info
used_size	torrent/include/libtorrent/chained_buffer.hpp	/^			int used_size = 0; \/\/ this is the number of bytes to send\/receive$/;"	m	struct:libtorrent::chained_buffer
user	include/task.h	/^    char user[32];  $/;"	m	struct:p2v_task
user1	virt-p2v/include/miniexpect.h	/^  void *user1;$/;"	m	struct:mexp_h
user1	virt-p2v/miniexpect/miniexpect.h	/^  void *user1;$/;"	m	struct:mexp_h
user2	virt-p2v/include/miniexpect.h	/^  void *user2;$/;"	m	struct:mexp_h
user2	virt-p2v/miniexpect/miniexpect.h	/^  void *user2;$/;"	m	struct:mexp_h
user3	virt-p2v/include/miniexpect.h	/^  void *user3;$/;"	m	struct:mexp_h
user3	virt-p2v/miniexpect/miniexpect.h	/^  void *user3;$/;"	m	struct:mexp_h
user_agent	torrent/include/libtorrent/settings_pack.hpp	/^			user_agent = string_type_base,$/;"	e	enum:libtorrent::settings_pack::string_types
user_alert_id	torrent/include/libtorrent/alert_types.hpp	/^	constexpr int user_alert_id = 10000;$/;"	m	namespace:libtorrent
user_have_piece	torrent/include/libtorrent/torrent.hpp	/^		bool user_have_piece(piece_index_t index) const$/;"	f	class:libtorrent::torrent
userdata	torrent/include/libtorrent/add_torrent_params.hpp	/^		void* userdata = nullptr;$/;"	m	struct:libtorrent::add_torrent_params
username	torrent/include/libtorrent/aux_/proxy_settings.hpp	/^		std::string username;$/;"	m	struct:libtorrent::aux::proxy_settings
username	virt-p2v/include/p2v-config.h	/^  char *username;$/;"	m	struct:auth_config
username_changed_callback	virt-p2v/src/gui.c	/^username_changed_callback (GtkWidget *w, gpointer data)$/;"	f	file:
username_entry	virt-p2v/src/gui.c	/^  *username_entry, *password_entry, *identity_entry, *sudo_button,$/;"	v	file:
username_required	torrent/include/libtorrent/socks5_stream.hpp	/^		username_required,$/;"	e	enum:libtorrent::socks_error::socks_error_code
usleep	virt-p2v/include/gnulib/unistd.h	/^_GL_CXXALIASWARN (usleep);$/;"	v
usleep	virt-p2v/include/gnulib/unistd.h	2160;"	d
ustime	src/tools.c	/^long long ustime(void)$/;"	f
ut_metadata_peer_plugin	torrent/src/ut_metadata.cpp	/^		ut_metadata_peer_plugin(torrent& t, bt_peer_connection& pc$/;"	f	struct:libtorrent::__anon72::final
ut_metadata_plugin	torrent/src/ut_metadata.cpp	/^		explicit ut_metadata_plugin(torrent& t) : m_torrent(t)$/;"	f	struct:libtorrent::__anon72::final
ut_pex_peer_plugin	torrent/src/ut_pex.cpp	/^		ut_pex_peer_plugin(torrent& t, peer_connection& pc, ut_pex_plugin& tp)$/;"	f	struct:libtorrent::__anon35::final
ut_pex_peer_store	torrent/include/libtorrent/bt_peer_connection.hpp	/^	struct TORRENT_EXTRA_EXPORT ut_pex_peer_store$/;"	s	namespace:libtorrent
ut_pex_plugin	torrent/src/ut_pex.cpp	/^		explicit ut_pex_plugin(torrent& t)$/;"	f	struct:libtorrent::__anon35::final
utf8_category	torrent/src/utf8.cpp	/^	boost::system::error_category const& utf8_category()$/;"	f	class:libtorrent::boost::system
utf8_errors	torrent/include/libtorrent/utf8.hpp	/^	namespace utf8_errors$/;"	n	namespace:libtorrent
utf8_errors	torrent/src/utf8.cpp	/^	namespace utf8_errors$/;"	n	namespace:libtorrent	file:
utf8_wchar	torrent/src/utf8.cpp	/^	std::wstring utf8_wchar(string_view utf8, error_code& ec)$/;"	f	namespace:libtorrent
utf8_wchar	torrent/src/utf8.cpp	/^	std::wstring utf8_wchar(string_view wide)$/;"	f	namespace:libtorrent
utp_abort	torrent/src/utp_stream.cpp	/^void utp_abort(utp_socket_impl* s)$/;"	f	namespace:libtorrent
utp_close_reason	torrent/include/libtorrent/utp_stream.hpp	/^{ utp_no_extension = 0, utp_sack = 1, utp_close_reason = 3 };$/;"	e	enum:libtorrent::utp_extensions_t
utp_connect_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			utp_connect_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_cwnd_reduce_timer	torrent/include/libtorrent/settings_pack.hpp	/^			utp_cwnd_reduce_timer,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_delayed_ack	torrent/include/libtorrent/settings_pack.hpp	/^			utp_delayed_ack TORRENT_DEPRECATED_ENUM,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_extensions_t	torrent/include/libtorrent/utp_stream.hpp	/^enum utp_extensions_t$/;"	g	namespace:libtorrent
utp_fast_retransmit	torrent/include/libtorrent/performance_counters.hpp	/^			utp_fast_retransmit,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_fin_resends	torrent/include/libtorrent/settings_pack.hpp	/^			utp_fin_resends,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_gain_factor	torrent/include/libtorrent/settings_pack.hpp	/^			utp_gain_factor,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_header	torrent/include/libtorrent/utp_stream.hpp	/^struct utp_header$/;"	s	namespace:libtorrent
utp_incoming_packet	torrent/src/utp_stream.cpp	/^bool utp_incoming_packet(utp_socket_impl* s$/;"	f	namespace:libtorrent
utp_init_mtu	torrent/src/utp_stream.cpp	/^void utp_init_mtu(utp_socket_impl* s, int link_mtu, int utp_mtu)$/;"	f	namespace:libtorrent
utp_init_socket	torrent/src/utp_stream.cpp	/^void utp_init_socket(utp_socket_impl* s, std::weak_ptr<utp_socket_interface> sock)$/;"	f	namespace:libtorrent
utp_invalid_pkts_in	torrent/include/libtorrent/performance_counters.hpp	/^			utp_invalid_pkts_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_log	torrent/src/utp_stream.cpp	/^void utp_log(char const* fmt, ...)$/;"	f	namespace:libtorrent
utp_log_file	torrent/src/utp_stream.cpp	/^	FILE* utp_log_file;$/;"	m	struct:libtorrent::utp_logger	file:
utp_log_mutex	torrent/src/utp_stream.cpp	/^	std::mutex utp_log_mutex;$/;"	m	struct:libtorrent::utp_logger	file:
utp_logger	torrent/src/utp_stream.cpp	/^	utp_logger() : utp_log_file(nullptr) {}$/;"	f	struct:libtorrent::utp_logger
utp_logger	torrent/src/utp_stream.cpp	/^static struct utp_logger$/;"	s	namespace:libtorrent	file:
utp_loss_multiplier	torrent/include/libtorrent/settings_pack.hpp	/^			utp_loss_multiplier,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_match	torrent/src/utp_stream.cpp	/^bool utp_match(utp_socket_impl* s, udp::endpoint const& ep, std::uint16_t const id)$/;"	f	namespace:libtorrent
utp_min_timeout	torrent/include/libtorrent/settings_pack.hpp	/^			utp_min_timeout,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_no_extension	torrent/include/libtorrent/utp_stream.hpp	/^{ utp_no_extension = 0, utp_sack = 1, utp_close_reason = 3 };$/;"	e	enum:libtorrent::utp_extensions_t
utp_num_resends	torrent/include/libtorrent/settings_pack.hpp	/^			utp_num_resends,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_packet_loss	torrent/include/libtorrent/performance_counters.hpp	/^			utp_packet_loss,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_packet_resend	torrent/include/libtorrent/performance_counters.hpp	/^			utp_packet_resend,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_packets_in	torrent/include/libtorrent/performance_counters.hpp	/^			utp_packets_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_packets_out	torrent/include/libtorrent/performance_counters.hpp	/^			utp_packets_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_payload_pkts_in	torrent/include/libtorrent/performance_counters.hpp	/^			utp_payload_pkts_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_payload_pkts_out	torrent/include/libtorrent/performance_counters.hpp	/^			utp_payload_pkts_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_receive_id	torrent/src/utp_stream.cpp	/^std::uint16_t utp_receive_id(utp_socket_impl* s)$/;"	f	namespace:libtorrent
utp_redundant_pkts_in	torrent/include/libtorrent/performance_counters.hpp	/^			utp_redundant_pkts_in,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_remote_endpoint	torrent/src/utp_stream.cpp	/^udp::endpoint utp_remote_endpoint(utp_socket_impl* s)$/;"	f	namespace:libtorrent
utp_sack	torrent/include/libtorrent/utp_stream.hpp	/^{ utp_no_extension = 0, utp_sack = 1, utp_close_reason = 3 };$/;"	e	enum:libtorrent::utp_extensions_t
utp_samples_above_target	torrent/include/libtorrent/performance_counters.hpp	/^			utp_samples_above_target,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_samples_below_target	torrent/include/libtorrent/performance_counters.hpp	/^			utp_samples_below_target,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_send_ack	torrent/src/utp_stream.cpp	/^void utp_send_ack(utp_socket_impl* s)$/;"	f	namespace:libtorrent
utp_socket	torrent/include/libtorrent/peer_class_type_filter.hpp	/^			utp_socket,$/;"	m	struct:libtorrent::peer_class_type_filter	typeref:enum:libtorrent::peer_class_type_filter::
utp_socket	torrent/include/libtorrent/peer_info.hpp	/^		static constexpr peer_flags_t utp_socket = 17_bit;$/;"	m	struct:libtorrent::peer_info
utp_socket	torrent/src/peer_info.cpp	/^	constexpr peer_flags_t peer_info::utp_socket;$/;"	m	class:libtorrent::peer_info	file:
utp_socket_drained	torrent/src/utp_stream.cpp	/^void utp_socket_drained(utp_socket_impl* s)$/;"	f	namespace:libtorrent
utp_socket_impl	torrent/src/utp_stream.cpp	/^	utp_socket_impl(std::uint16_t recv_id, std::uint16_t send_id$/;"	f	struct:libtorrent::utp_socket_impl
utp_socket_impl	torrent/src/utp_stream.cpp	/^struct utp_socket_impl$/;"	s	namespace:libtorrent	file:
utp_socket_interface	torrent/include/libtorrent/utp_socket_manager.hpp	/^	struct TORRENT_EXTRA_EXPORT utp_socket_interface$/;"	s	namespace:libtorrent
utp_socket_manager	torrent/include/libtorrent/utp_socket_manager.hpp	/^	struct utp_socket_manager$/;"	s	namespace:libtorrent
utp_socket_manager	torrent/src/utp_socket_manager.cpp	/^	utp_socket_manager::utp_socket_manager($/;"	f	class:libtorrent::utp_socket_manager
utp_socket_state	torrent/src/utp_stream.cpp	/^int utp_socket_state(utp_socket_impl const* s)$/;"	f	namespace:libtorrent
utp_socket_state_t	torrent/include/libtorrent/utp_stream.hpp	/^enum utp_socket_state_t$/;"	g	namespace:libtorrent
utp_stats	torrent/include/libtorrent/session_status.hpp	/^		utp_status utp_stats;$/;"	m	struct:libtorrent::session_status
utp_status	torrent/include/libtorrent/session_status.hpp	/^	struct TORRENT_DEPRECATED_EXPORT utp_status$/;"	s	namespace:libtorrent
utp_stream	torrent/include/libtorrent/utp_stream.hpp	/^struct TORRENT_EXTRA_EXPORT utp_stream$/;"	s	namespace:libtorrent
utp_stream	torrent/src/utp_stream.cpp	/^utp_stream::utp_stream(io_service& io_service)$/;"	f	class:libtorrent::utp_stream
utp_syn_resends	torrent/include/libtorrent/settings_pack.hpp	/^			utp_syn_resends,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_target_delay	torrent/include/libtorrent/settings_pack.hpp	/^			utp_target_delay,$/;"	e	enum:libtorrent::settings_pack::int_types
utp_timeout	torrent/include/libtorrent/performance_counters.hpp	/^			utp_timeout,$/;"	e	enum:libtorrent::counters::stats_counter_t
utp_writable	torrent/src/utp_stream.cpp	/^void utp_writable(utp_socket_impl* s)$/;"	f	namespace:libtorrent
uuQcow	include/StoreConfig.h	/^    YZYGUID     uuQcow;         \/\/QCOW GUID   $/;"	m	struct:_YZY_QCOW_ENTRY
uuid	include/packet.h	/^    char uuid[36]; $/;"	m	struct:yzy_torrent
uuid	include/torrent.h	/^	char uuid[36];$/;"	m	struct:torrent_task
uuid	test/test.c	/^    char uuid[36]; $/;"	m	struct:yzy_torrent	file:
uuid	torrent/include/libtorrent/add_torrent_params.hpp	/^		std::string TORRENT_DEPRECATED_MEMBER uuid;$/;"	m	struct:libtorrent::add_torrent_params
uuid	torrent/include/libtorrent/torrent.hpp	/^		std::string const& uuid() const { return m_uuid; }$/;"	f	class:libtorrent::torrent::std
uuid2str	src/qcow2.c	/^int uuid2str(PYZYGUID GUID, char* uuid)$/;"	f
v2v_output	virt-p2v/src/gui.c	/^  *v2v_output_sw, *v2v_output, *log_label, *status_label,$/;"	v	file:
v2v_output_sw	virt-p2v/src/gui.c	/^  *v2v_output_sw, *v2v_output, *log_label, *status_label,$/;"	v	file:
v2v_output_tags	virt-p2v/src/gui.c	/^static GtkTextTag *v2v_output_tags[16];$/;"	v	file:
v2v_version	virt-p2v/src/ssh.c	/^char *v2v_version = NULL;$/;"	v
v4	torrent/include/libtorrent/kademlia/observer.hpp	/^		address_v4::bytes_type v4;$/;"	m	union:libtorrent::dht::observer::addr_t
v4	torrent/include/libtorrent/torrent_handle.hpp	/^			address_v4::bytes_type v4;$/;"	m	union:libtorrent::block_info::addr_t
v4	torrent/include/libtorrent/union_endpoint.hpp	/^			address_v4::bytes_type v4;$/;"	m	union:libtorrent::union_address::addr_t
v4	torrent/include/libtorrent/union_endpoint.hpp	/^		bool v4:1;$/;"	m	struct:libtorrent::union_address
v6	torrent/include/libtorrent/kademlia/observer.hpp	/^		address_v6::bytes_type v6;$/;"	m	union:libtorrent::dht::observer::addr_t
v6	torrent/include/libtorrent/torrent_handle.hpp	/^			address_v6::bytes_type v6;$/;"	m	union:libtorrent::block_info::addr_t
v6	torrent/include/libtorrent/union_endpoint.hpp	/^			address_v6::bytes_type v6;$/;"	m	union:libtorrent::union_address::addr_t
v6_protection_level	torrent/include/libtorrent/socket.hpp	/^		explicit v6_protection_level(int level): m_value(level) {}$/;"	f	struct:libtorrent::v6_protection_level
v6_protection_level	torrent/include/libtorrent/socket.hpp	/^	struct v6_protection_level$/;"	s	namespace:libtorrent
vYzyProtocolStatus	include/packet.h	/^typedef enum vYzyProtocolStatus {$/;"	g
vYzySrvCode	include/packet.h	/^typedef enum vYzySrvCode {$/;"	g
vYzySrvCode	include/packet.h	/^} vYzySrvCode;$/;"	t	typeref:enum:vYzySrvCode
val	torrent/include/libtorrent/lazy_entry.hpp	/^		lazy_entry val;$/;"	m	struct:libtorrent::lazy_dict_entry
valid_addr_family	torrent/src/enum_net.cpp	/^	bool valid_addr_family(int family)$/;"	f	namespace:libtorrent::__anon102
valid_metadata	torrent/include/libtorrent/torrent.hpp	/^		bool valid_metadata() const$/;"	f	class:libtorrent::torrent
valid_path_character	torrent/src/torrent_info.cpp	/^	bool valid_path_character(std::int32_t const c)$/;"	f	namespace:libtorrent::__anon86
validate_https_trackers	torrent/include/libtorrent/settings_pack.hpp	/^			validate_https_trackers,$/;"	e	enum:libtorrent::settings_pack::bool_types
value	qt_pro/QRoundProgressBar.h	/^    double value() const { return m_value; }$/;"	f	class:QRoundProgressBar
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 0; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 1; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 2; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 3; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 4; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 5; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 6; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 7; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 8; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/aux_/socket_type.hpp	/^	{ static constexpr int value = 9; };$/;"	m	struct:libtorrent::aux::socket_type_int_impl
value	torrent/include/libtorrent/bdecode.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	torrent/include/libtorrent/error_code.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	torrent/include/libtorrent/gzip.hpp	/^{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	torrent/include/libtorrent/gzip.hpp	/^{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_condition_enum
value	torrent/include/libtorrent/i2p_stream.hpp	/^{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	torrent/include/libtorrent/kademlia/item.hpp	/^	entry const& value() const { return m_value; }$/;"	f	class:libtorrent::dht::item
value	torrent/include/libtorrent/kademlia/types.hpp	/^		std::int64_t value;$/;"	m	struct:libtorrent::dht::sequence_number
value	torrent/include/libtorrent/natpmp.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	torrent/include/libtorrent/socks5_stream.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	torrent/include/libtorrent/span.hpp	/^		static const bool value = std::is_same<From, To>::value$/;"	m	struct:libtorrent::aux::compatible_type
value	torrent/include/libtorrent/upnp.hpp	/^	{ static const bool value = true; };$/;"	m	struct:boost::system::is_error_code_enum
value	torrent/kademlia/dht_storage.cpp	/^		std::unique_ptr<char[]> value;$/;"	m	struct:libtorrent::dht::__anon153::dht_immutable_item	file:
valueFormatChanged	qt_pro/QRoundProgressBar.cpp	/^void QRoundProgressBar::valueFormatChanged()$/;"	f	class:QRoundProgressBar
valueToText	qt_pro/QRoundProgressBar.cpp	/^QString QRoundProgressBar::valueToText(double value) const$/;"	f	class:QRoundProgressBar
value_index	torrent/include/libtorrent/session_stats.hpp	/^		int value_index;$/;"	m	struct:libtorrent::stats_metric
value_index	torrent/src/session_stats.cpp	/^		int value_index;$/;"	m	struct:libtorrent::__anon117::stats_metric_impl	file:
value_not_in_array	torrent/include/libtorrent/upnp.hpp	/^			value_not_in_array = 714,$/;"	e	enum:libtorrent::upnp_errors::error_code_enum
value_or	torrent/include/libtorrent/optional.hpp	/^	T value_or(boost::optional<T> opt, U def)$/;"	f	namespace:libtorrent
valuedouble	cJSON/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuedouble	include/cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	cJSON/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	include/cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuestring	cJSON/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
valuestring	include/cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
vbottom_space	qt_pro/ui_downloadwindow.h	/^    QSpacerItem *vbottom_space;$/;"	m	class:Ui_DownloadWindow
vbox_new	virt-p2v/include/gui-gtk3-compat.h	38;"	d
vbox_new	virt-p2v/include/gui-gtk3-compat.h	47;"	d
vcpus	virt-p2v/include/p2v-config.h	/^  int vcpus;$/;"	m	struct:config
vcpus_entry	virt-p2v/src/gui.c	/^  *guestname_entry, *vcpus_entry, *memory_entry,$/;"	v	file:
vcpus_or_memory_check_callback	virt-p2v/src/gui.c	/^vcpus_or_memory_check_callback (GtkWidget *w, gpointer data)$/;"	f	file:
vcpus_warning	virt-p2v/src/gui.c	/^  *vcpus_warning, *memory_warning, *target_warning_label,$/;"	v	file:
vdprintf	virt-p2v/include/gnulib/stdio.h	1740;"	d
vendor	virt-p2v/include/p2v-config.h	/^  char *vendor;$/;"	m	struct:cpu_config
verified	torrent/include/libtorrent/announce_entry.hpp	/^		bool verified:1;$/;"	m	struct:libtorrent::announce_entry
verified	torrent/include/libtorrent/kademlia/node_entry.hpp	/^	bool verified = false;$/;"	m	struct:libtorrent::dht::node_entry
verified	torrent/src/torrent.cpp	/^	void torrent::verified(piece_index_t const piece)$/;"	f	class:libtorrent::torrent
verified_piece	torrent/include/libtorrent/torrent.hpp	/^		bool verified_piece(piece_index_t piece) const$/;"	f	class:libtorrent::torrent
verified_pieces	torrent/include/libtorrent/add_torrent_params.hpp	/^		typed_bitfield<piece_index_t> verified_pieces;$/;"	m	struct:libtorrent::add_torrent_params
verified_pieces	torrent/include/libtorrent/torrent_status.hpp	/^		typed_bitfield<piece_index_t> verified_pieces;$/;"	m	struct:libtorrent::torrent_status
verify	virt-p2v/include/gnulib/verify.h	274;"	d
verify	virt-p2v/include/gnulib/verify.h	276;"	d
verify_bound_address	torrent/src/session_impl.cpp	/^	bool session_impl::verify_bound_address(address const& addr, bool utp$/;"	f	class:libtorrent::aux::session_impl
verify_downloads	torrent/bak/connection_tester.cpp	/^bool verify_downloads = false;$/;"	v
verify_encoding	torrent/src/torrent_info.cpp	/^	bool verify_encoding(std::string& target)$/;"	f	namespace:libtorrent
verify_expr	virt-p2v/include/gnulib/verify.h	264;"	d
verify_id	torrent/kademlia/node_id.cpp	/^bool verify_id(node_id const& nid, address const& source_ip)$/;"	f	namespace:libtorrent::dht
verify_incoming_interface	torrent/src/session_impl.cpp	/^	bool session_impl::verify_incoming_interface(address const& addr)$/;"	f	class:libtorrent::aux::session_impl
verify_message	torrent/include/libtorrent/kademlia/msg.hpp	/^bool verify_message(bdecode_node const& msg, key_desc_t const (&desc)[Size]$/;"	f	namespace:libtorrent::dht
verify_message_impl	torrent/kademlia/msg.cpp	/^bool verify_message_impl(bdecode_node const& message, span<key_desc_t const> desc$/;"	f	namespace:libtorrent::dht
verify_mutable_item	torrent/kademlia/item.cpp	/^bool verify_mutable_item($/;"	f	namespace:libtorrent::dht
verify_node_address	torrent/kademlia/routing_table.cpp	/^	bool verify_node_address(dht::settings const& settings$/;"	f	namespace:libtorrent::dht::__anon146
verify_peer_cert	torrent/src/torrent.cpp	/^	bool torrent::verify_peer_cert(bool const preverified, boost::asio::ssl::verify_context& ctx)$/;"	f	class:libtorrent::torrent
verify_pick	torrent/src/piece_picker.cpp	/^	void piece_picker::verify_pick(std::vector<piece_block> const& picked$/;"	f	class:libtorrent::piece_picker
verify_piece	torrent/bak/connection_tester.cpp	/^	bool verify_piece(piece_index_t const piece, int start, char const* ptr, int size)$/;"	f	struct:peer_conn
verify_piece	torrent/src/peer_connection.cpp	/^	bool peer_connection::verify_piece(peer_request const& p) const$/;"	f	class:libtorrent::peer_connection
verify_piece	torrent/src/torrent.cpp	/^	void torrent::verify_piece(piece_index_t const piece)$/;"	f	class:libtorrent::torrent
verify_priority	torrent/src/piece_picker.cpp	/^	void piece_picker::verify_priority(prio_index_t const range_start$/;"	f	class:libtorrent::piece_picker
verify_queue_position	torrent/src/session_impl.cpp	/^	bool session_impl::verify_queue_position(torrent const* t, queue_position_t const pos)$/;"	f	class:libtorrent::aux::session_impl
verify_resume_data	torrent/src/storage.cpp	/^	bool default_storage::verify_resume_data(add_torrent_params const& rd$/;"	f	class:libtorrent::default_storage
verify_resume_data	torrent/src/storage_utils.cpp	/^	bool verify_resume_data(add_torrent_params const& rd$/;"	f	namespace:libtorrent::aux
verify_secret_id	torrent/kademlia/node_id.cpp	/^bool verify_secret_id(node_id const& nid)$/;"	f	namespace:libtorrent::dht
verify_token	torrent/kademlia/node.cpp	/^bool node::verify_token(string_view token, sha1_hash const& info_hash$/;"	f	class:libtorrent::dht::node
verifying	torrent/include/libtorrent/torrent.hpp	/^		void verifying(piece_index_t const piece)$/;"	f	class:libtorrent::torrent
verifying_piece	torrent/include/libtorrent/torrent.hpp	/^		bool verifying_piece(piece_index_t const piece) const$/;"	f	class:libtorrent::torrent
version	include/qcow2.h	/^    uint32_t version;$/;"	m	struct:_QCowHeader
version	test/check.c	/^    uint32_t version;$/;"	m	struct:_QCowHeader	file:
version	torrent/include/libtorrent/add_torrent_params.hpp	/^		int version = LIBTORRENT_VERSION_NUM;$/;"	m	struct:libtorrent::add_torrent_params
version	torrent/src/version.cpp	/^char const* version()$/;"	f	namespace:libtorrent
version_chief	include/packet.h	/^    u16_t  version_chief;       \/\/ä¸»çæ¬å·       ä¾å¦  0x0001$/;"	m	struct:yzy_packet
version_natpmp	torrent/include/libtorrent/natpmp.hpp	/^		version_natpmp = 0,$/;"	e	enum:libtorrent::natpmp::protocol_version
version_pcp	torrent/include/libtorrent/natpmp.hpp	/^		version_pcp = 2,$/;"	e	enum:libtorrent::natpmp::protocol_version
version_re	virt-p2v/src/ssh.c	/^static pcre *version_re;$/;"	v	file:
version_sub	include/packet.h	/^    u16_t  version_sub;         \/\/æ¬¡è¦çæ¬å·     ä¾å¦  0x0001$/;"	m	struct:yzy_packet
version_to_char	torrent/src/fingerprint.cpp	/^	char version_to_char(int const v)$/;"	f	namespace:libtorrent::__anon39
version_to_string	torrent/src/natpmp.cpp	/^char const* natpmp::version_to_string(protocol_version version)$/;"	f	class:libtorrent::natpmp
verticalLayout	qt_pro/ui_downloadwindow.h	/^    QVBoxLayout *verticalLayout;$/;"	m	class:Ui_DownloadWindow
verticalLayout_2	qt_pro/ui_downloadwindow.h	/^    QVBoxLayout *verticalLayout_2;$/;"	m	class:Ui_DownloadWindow
vfprintf	virt-p2v/include/gnulib/stdio.h	1777;"	d
volatile_read	torrent/include/libtorrent/disk_interface.hpp	/^		static constexpr disk_job_flags_t volatile_read = 4_bit;$/;"	m	struct:libtorrent::disk_interface
volatile_read	torrent/src/disk_io_thread.cpp	/^constexpr disk_job_flags_t disk_interface::volatile_read;$/;"	m	class:disk_interface	file:
volatile_read_cache	torrent/include/libtorrent/disk_io_thread.hpp	/^		enum kind_t { read_cache = 0, write_cache = 1, volatile_read_cache = 2 };$/;"	e	enum:libtorrent::cached_piece_info::kind_t
volatile_read_cache	torrent/include/libtorrent/settings_pack.hpp	/^			volatile_read_cache,$/;"	e	enum:libtorrent::settings_pack::bool_types
volatile_read_lru	torrent/include/libtorrent/block_cache.hpp	/^			volatile_read_lru,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
voters	torrent/include/libtorrent/ip_voter.hpp	/^			bloom_filter<16> voters;$/;"	m	struct:libtorrent::ip_voter::external_ip_t
vprintf	virt-p2v/include/gnulib/stdio.h	1833;"	d
vsnprintf	virt-p2v/include/gnulib/stdio.h	1880;"	d
vsprintf	virt-p2v/include/gnulib/stdio.h	1909;"	d
wait	torrent/src/file.cpp	/^		int wait(HANDLE file, error_code& ec)$/;"	f	struct:libtorrent::overlapped_t
wait_for_alert	torrent/src/alert_manager.cpp	/^	alert* alert_manager::wait_for_alert(time_duration max_wait)$/;"	f	class:libtorrent::alert_manager
wait_for_alert	torrent/src/session_handle.cpp	/^	alert* session_handle::wait_for_alert(time_duration max_wait)$/;"	f	class:libtorrent::session_handle
wait_for_alert	torrent/src/session_impl.cpp	/^	alert* session_impl::wait_for_alert(time_duration max_wait)$/;"	f	class:libtorrent::aux::session_impl
wait_for_asio_handlers	torrent/src/session.cpp	/^	void wait_for_asio_handlers()$/;"	f	namespace:libtorrent::__anon65
wait_for_multiple_objects	torrent/src/file.cpp	/^	DWORD wait_for_multiple_objects(int num_handles, HANDLE* h)$/;"	f	namespace:__anon80
wait_for_nbd_server_to_start	virt-p2v/src/nbd.c	/^wait_for_nbd_server_to_start (const char *ipaddr, int port)$/;"	f
wait_for_prompt	virt-p2v/src/ssh.c	/^wait_for_prompt (mexp_h *h)$/;"	f	file:
wait_network_online	virt-p2v/src/utils.c	/^wait_network_online (const struct config *config)$/;"	f
waiting_readers	virt-p2v/include/gnulib/windows-rwlock.h	/^          glwthread_carray_waitqueue_t waiting_readers; \/* waiting readers *\/$/;"	m	struct:__anon164
waiting_writers	virt-p2v/include/gnulib/windows-rwlock.h	/^          glwthread_carray_waitqueue_t waiting_writers; \/* waiting writers *\/$/;"	m	struct:__anon164
wakeup_t	torrent/include/libtorrent/debug.hpp	/^	struct wakeup_t$/;"	s	namespace:libtorrent
want	torrent/src/piece_picker.cpp	/^	piece_count piece_picker::want() const$/;"	f	class:libtorrent::piece_picker
want_peers	torrent/src/torrent.cpp	/^	bool torrent::want_peers() const$/;"	f	class:libtorrent::torrent
want_peers_download	torrent/src/torrent.cpp	/^	bool torrent::want_peers_download() const$/;"	f	class:libtorrent::torrent
want_peers_finished	torrent/src/torrent.cpp	/^	bool torrent::want_peers_finished() const$/;"	f	class:libtorrent::torrent
want_tick	torrent/src/torrent.cpp	/^	bool torrent::want_tick() const$/;"	f	class:libtorrent::torrent
wanted_transfer	torrent/src/peer_connection.cpp	/^	int peer_connection::wanted_transfer(int const channel)$/;"	f	class:libtorrent::peer_connection
warning	torrent/include/libtorrent/alert.hpp	/^		enum TORRENT_DEPRECATED_ENUM severity_t { debug, info, warning, critical, fatal, none };$/;"	e	enum:libtorrent::alert::severity_t
warning_code	torrent/include/libtorrent/alert_types.hpp	/^		performance_warning_t const warning_code;$/;"	m	struct:libtorrent::final
warning_message	torrent/include/libtorrent/tracker_manager.hpp	/^		std::string warning_message;$/;"	m	struct:libtorrent::tracker_response
warning_message	torrent/src/alert.cpp	/^	char const* tracker_warning_alert::warning_message() const$/;"	f	class:libtorrent::tracker_warning_alert
was_expanded	torrent/include/libtorrent/aux_/session_impl.hpp	/^		static constexpr listen_socket_flags_t was_expanded = 2_bit;$/;"	m	struct:libtorrent::aux::listen_socket_t
was_expanded	torrent/src/session_impl.cpp	/^	constexpr listen_socket_flags_t listen_socket_t::was_expanded;$/;"	m	class:libtorrent::aux::listen_socket_t	file:
was_introduced_by	torrent/include/libtorrent/bt_peer_connection.hpp	/^		bool was_introduced_by(tcp::endpoint const& ep) const$/;"	f	class:libtorrent::bt_peer_connection::hp_message::hp_error
was_introduced_by	torrent/src/bt_peer_connection.cpp	/^	bool ut_pex_peer_store::was_introduced_by(tcp::endpoint const &ep)$/;"	f	class:libtorrent::ut_pex_peer_store
waste_piece_cancelled	torrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_cancelled,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_closing	torrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_closing,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_end_game	torrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_end_game,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_seed	torrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_seed,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_timed_out	torrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_timed_out,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_piece_unknown	torrent/include/libtorrent/performance_counters.hpp	/^			waste_piece_unknown,$/;"	e	enum:libtorrent::counters::stats_counter_t
waste_reason	torrent/include/libtorrent/torrent.hpp	/^	enum class waste_reason$/;"	c	namespace:libtorrent
watermark	torrent/include/libtorrent/receive_buffer.hpp	/^	int watermark() const { return aux::numeric_cast<int>(m_watermark.mean()); }$/;"	f	struct:libtorrent::receive_buffer
watermark_callback	torrent/src/disk_buffer_pool.cpp	/^	void watermark_callback(std::vector<std::weak_ptr<disk_observer>> const& cbs)$/;"	f	namespace:libtorrent::__anon129
wchar_utf8	torrent/src/utf8.cpp	/^	std::string wchar_utf8(wstring_view wide)$/;"	f	namespace:libtorrent
wchar_utf8	torrent/src/utf8.cpp	/^	std::string wchar_utf8(wstring_view wide, error_code& ec)$/;"	f	namespace:libtorrent
we_dont_have	torrent/src/piece_picker.cpp	/^	void piece_picker::we_dont_have(piece_index_t const index)$/;"	f	class:libtorrent::piece_picker
we_have	torrent/include/libtorrent/alert_types.hpp	/^		bool const we_have;$/;"	m	struct:libtorrent::final
we_have	torrent/src/piece_picker.cpp	/^	void piece_picker::we_have(piece_index_t const index)$/;"	f	class:libtorrent::piece_picker
we_have	torrent/src/torrent.cpp	/^	void torrent::we_have(piece_index_t const index)$/;"	f	class:libtorrent::torrent
we_have_all	torrent/src/piece_picker.cpp	/^	void piece_picker::we_have_all()$/;"	f	class:libtorrent::piece_picker
we_have_index	torrent/src/piece_picker.cpp	/^	constexpr prio_index_t piece_picker::piece_pos::we_have_index;$/;"	m	class:libtorrent::piece_picker::piece_pos	file:
web_connection_base	torrent/include/libtorrent/web_connection_base.hpp	/^	class TORRENT_EXTRA_EXPORT web_connection_base$/;"	c	namespace:libtorrent
web_connection_base	torrent/src/web_connection_base.cpp	/^	web_connection_base::web_connection_base($/;"	f	class:libtorrent::web_connection_base
web_peer_connection	torrent/include/libtorrent/web_peer_connection.hpp	/^	class TORRENT_EXTRA_EXPORT web_peer_connection$/;"	c	namespace:libtorrent
web_peer_connection	torrent/src/web_peer_connection.cpp	/^web_peer_connection::web_peer_connection(peer_connection_args const& pack$/;"	f	class:libtorrent::web_peer_connection
web_seed	torrent/include/libtorrent/peer_info.hpp	/^			web_seed = 1,$/;"	e	enum:libtorrent::peer_info::connection_type_t
web_seed	torrent/include/libtorrent/torrent_peer.hpp	/^		bool web_seed:1;$/;"	m	struct:libtorrent::torrent_peer
web_seed_entry	torrent/include/libtorrent/torrent_info.hpp	/^	struct TORRENT_EXPORT web_seed_entry$/;"	s	namespace:libtorrent
web_seed_entry	torrent/src/torrent_info.cpp	/^	web_seed_entry::web_seed_entry(std::string const& url_, type_t type_$/;"	f	class:libtorrent::web_seed_entry
web_seed_name_lookup_retry	torrent/include/libtorrent/settings_pack.hpp	/^			web_seed_name_lookup_retry,$/;"	e	enum:libtorrent::settings_pack::int_types
web_seed_proxy	torrent/src/session_handle.cpp	/^	proxy_settings session_handle::web_seed_proxy() const$/;"	f	class:libtorrent::session_handle
web_seed_t	torrent/include/libtorrent/torrent.hpp	/^	struct web_seed_t : web_seed_entry$/;"	s	namespace:libtorrent
web_seed_t	torrent/src/torrent.cpp	/^	web_seed_t::web_seed_t(std::string const& url_, web_seed_entry::type_t type_$/;"	f	class:libtorrent::web_seed_t
web_seed_t	torrent/src/torrent.cpp	/^	web_seed_t::web_seed_t(web_seed_entry const& wse)$/;"	f	class:libtorrent::web_seed_t
web_seeds	torrent/include/libtorrent/torrent_info.hpp	/^		std::vector<web_seed_entry> const& web_seeds() const { return m_web_seeds; }$/;"	f	class:libtorrent::torrent_info::std
web_seeds	torrent/src/torrent.cpp	/^	std::set<std::string> torrent::web_seeds(web_seed_entry::type_t const type) const$/;"	f	class:libtorrent::torrent
whole_pieces_threshold	torrent/include/libtorrent/settings_pack.hpp	/^			whole_pieces_threshold,$/;"	e	enum:libtorrent::settings_pack::int_types
widget_5	qt_pro/ui_downloadwindow.h	/^    QWidget *widget_5;$/;"	m	class:Ui_DownloadWindow
window_flag	qt_pro/global.h	/^    int window_flag;$/;"	m	class:Global
withheld	torrent/include/libtorrent/alert_types.hpp	/^		bool const withheld;$/;"	m	struct:libtorrent::final
wnd_size	torrent/include/libtorrent/utp_stream.hpp	/^	be_uint32 wnd_size;$/;"	m	struct:libtorrent::utp_header
work	torrent/include/libtorrent/aux_/session_impl.hpp	/^				std::unique_ptr<boost::asio::io_service::work> work;$/;"	m	struct:libtorrent::aux::final::work_thread_t
work_download	torrent/bak/connection_tester.cpp	/^	void work_download()$/;"	f	struct:peer_conn
work_thread_t	torrent/include/libtorrent/aux_/session_impl.hpp	/^				work_thread_t()$/;"	f	struct:libtorrent::aux::final::work_thread_t
work_thread_t	torrent/include/libtorrent/aux_/session_impl.hpp	/^			struct work_thread_t$/;"	s	struct:libtorrent::aux::final
wrap	torrent/include/libtorrent/aux_/torrent_impl.hpp	/^	void torrent::wrap(Fun f, Args&&... a)$/;"	f	class:libtorrent::torrent
wrap	torrent/src/peer_connection.cpp	/^	void peer_connection::wrap(Fun f, Args&&... a)$/;"	f	class:libtorrent::peer_connection
wrap	torrent/src/session_impl.cpp	/^	void session_impl::wrap(Fun f, Args&&... a)$/;"	f	class:libtorrent::aux::session_impl
wrap	torrent/src/udp_socket.cpp	/^void udp_socket::wrap(char const* hostname, int const port, span<char const> p$/;"	f	class:libtorrent::udp_socket
wrap	torrent/src/udp_socket.cpp	/^void udp_socket::wrap(udp::endpoint const& ep, span<char const> p$/;"	f	class:libtorrent::udp_socket
writable	torrent/src/utp_socket_manager.cpp	/^	void utp_socket_manager::writable()$/;"	f	class:libtorrent::utp_socket_manager
writable	torrent/src/utp_stream.cpp	/^void utp_socket_impl::writable()$/;"	f	class:libtorrent::utp_socket_impl
write	torrent/include/libtorrent/disk_io_job.hpp	/^		, write$/;"	m	class:libtorrent::job_action_t
write_address	torrent/include/libtorrent/socket_io.hpp	/^		void write_address(address const& a, OutIt&& out)$/;"	f	namespace:libtorrent::detail
write_allow_fast	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_allow_fast(piece_index_t const piece)$/;"	f	class:libtorrent::bt_peer_connection
write_bitfield	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_bitfield()$/;"	f	class:libtorrent::bt_peer_connection
write_blocked	torrent/include/libtorrent/aux_/session_udp_sockets.hpp	/^		bool write_blocked = false;$/;"	m	struct:libtorrent::aux::session_udp_socket
write_buf_proto	torrent/bak/connection_tester.cpp	/^	char write_buf_proto[100];$/;"	m	struct:peer_conn	file:
write_buffer	torrent/bak/connection_tester.cpp	/^	std::uint32_t write_buffer[17*1024\/4];$/;"	m	struct:peer_conn	file:
write_cache	torrent/include/libtorrent/disk_io_thread.hpp	/^		enum kind_t { read_cache = 0, write_cache = 1, volatile_read_cache = 2 };$/;"	e	enum:libtorrent::cached_piece_info::kind_t
write_cache_blocks	torrent/include/libtorrent/performance_counters.hpp	/^			write_cache_blocks,$/;"	e	enum:libtorrent::counters::stats_gauge_t
write_cache_line_size	torrent/include/libtorrent/settings_pack.hpp	/^			write_cache_line_size,$/;"	e	enum:libtorrent::settings_pack::int_types
write_cache_size	torrent/include/libtorrent/disk_io_thread.hpp	/^		int write_cache_size;$/;"	m	struct:libtorrent::cache_status
write_cancel	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_cancel(peer_request const& r)$/;"	f	class:libtorrent::bt_peer_connection
write_char	torrent/include/libtorrent/bencode.hpp	/^		void write_char(OutIt& out, char c)$/;"	f	namespace:libtorrent::detail
write_choke	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_choke()$/;"	f	class:libtorrent::bt_peer_connection
write_dht_port	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_dht_port()$/;"	f	class:libtorrent::bt_peer_connection
write_dht_port	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_dht_port(int const listen_port)$/;"	f	class:libtorrent::bt_peer_connection
write_dont_have	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_dont_have(piece_index_t const index)$/;"	f	class:libtorrent::bt_peer_connection
write_endpoint	torrent/include/libtorrent/socket_io.hpp	/^		void write_endpoint(Endpoint const& e, OutIt&& out)$/;"	f	namespace:libtorrent::detail
write_extensions	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_extensions()$/;"	f	class:libtorrent::bt_peer_connection
write_failed	torrent/src/piece_picker.cpp	/^	void piece_picker::write_failed(piece_block const block)$/;"	f	class:libtorrent::piece_picker
write_handshake	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_handshake()$/;"	f	class:libtorrent::bt_peer_connection
write_have	torrent/bak/connection_tester.cpp	/^	void write_have(piece_index_t const piece)$/;"	f	struct:peer_conn
write_have	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_have(piece_index_t const index)$/;"	f	class:libtorrent::bt_peer_connection
write_have_all	torrent/bak/connection_tester.cpp	/^	void write_have_all()$/;"	f	struct:peer_conn
write_have_all	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_have_all()$/;"	f	class:libtorrent::bt_peer_connection
write_have_none	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_have_none()$/;"	f	class:libtorrent::bt_peer_connection
write_holepunch_msg	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_holepunch_msg(hp_message const type$/;"	f	class:libtorrent::bt_peer_connection
write_impl	torrent/include/libtorrent/aux_/io.hpp	/^	write_impl(In data, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_impl	torrent/include/libtorrent/io.hpp	/^		write_impl(In data, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_impl	torrent/include/libtorrent/io.hpp	/^		write_impl(Val val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_int16	torrent/include/libtorrent/aux_/io.hpp	/^	void write_int16(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_int16	torrent/include/libtorrent/io.hpp	/^		void write_int16(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_int32	torrent/include/libtorrent/aux_/io.hpp	/^	void write_int32(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_int32	torrent/include/libtorrent/io.hpp	/^		void write_int32(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_int64	torrent/include/libtorrent/aux_/io.hpp	/^	void write_int64(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_int64	torrent/include/libtorrent/io.hpp	/^		void write_int64(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_int8	torrent/include/libtorrent/aux_/io.hpp	/^	void write_int8(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_int8	torrent/include/libtorrent/io.hpp	/^		void write_int8(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_integer	torrent/include/libtorrent/bencode.hpp	/^		int write_integer(OutIt& out, In data)$/;"	f	namespace:libtorrent::detail
write_interested	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_interested()$/;"	f	class:libtorrent::bt_peer_connection
write_jobs_in_use	torrent/include/libtorrent/disk_job_pool.hpp	/^		int write_jobs_in_use() const { return m_write_jobs; }$/;"	f	struct:libtorrent::disk_job_pool
write_keepalive	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_keepalive()$/;"	f	class:libtorrent::bt_peer_connection
write_lru	torrent/include/libtorrent/block_cache.hpp	/^			write_lru,$/;"	e	enum:libtorrent::cached_piece_entry::cache_state_t
write_lru_pieces	torrent/include/libtorrent/block_cache.hpp	/^		list_iterator<cached_piece_entry> write_lru_pieces() const$/;"	f	struct:libtorrent::block_cache
write_metadata_packet	torrent/src/ut_metadata.cpp	/^		void write_metadata_packet(int const type, int const piece)$/;"	f	struct:libtorrent::__anon72::final
write_nodes	torrent/src/alert.cpp	/^	nodes_slot write_nodes(aux::stack_allocator& alloc$/;"	f	namespace:libtorrent::__anon101
write_nodes_entries	torrent/kademlia/node.cpp	/^void node::write_nodes_entries(sha1_hash const& info_hash$/;"	f	class:libtorrent::dht::node
write_nodes_entry	torrent/kademlia/node.cpp	/^entry write_nodes_entry(std::vector<node_entry> const& nodes)$/;"	f	namespace:libtorrent::dht
write_not_interested	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_not_interested()$/;"	f	class:libtorrent::bt_peer_connection
write_only	torrent/include/libtorrent/disk_interface.hpp	/^		constexpr file_open_mode_t write_only = 0_bit;$/;"	m	namespace:libtorrent::file_open_mode
write_only	torrent/include/libtorrent/file.hpp	/^		constexpr open_mode_t write_only = 0_bit;$/;"	m	namespace:libtorrent::open_mode
write_payload	torrent/src/utp_stream.cpp	/^void utp_socket_impl::write_payload(std::uint8_t* ptr, int size)$/;"	f	class:libtorrent::utp_socket_impl
write_pe1_2_dhkey	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_pe1_2_dhkey()$/;"	f	class:libtorrent::bt_peer_connection
write_pe3_sync	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_pe3_sync()$/;"	f	class:libtorrent::bt_peer_connection
write_pe4_sync	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_pe4_sync(int const crypto_select)$/;"	f	class:libtorrent::bt_peer_connection
write_pe_vc_cryptofield	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_pe_vc_cryptofield($/;"	f	class:libtorrent::bt_peer_connection
write_piece	torrent/bak/connection_tester.cpp	/^	void write_piece(piece_index_t const piece, int start, int length)$/;"	f	struct:peer_conn
write_piece	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_piece(peer_request const& r, disk_buffer_holder buffer)$/;"	f	class:libtorrent::bt_peer_connection
write_profile_string	src/inirw.c	/^int write_profile_string(const char *section, const char *key, const char *value, const char *file)$/;"	f
write_qcow2	src/gpt.c	/^int write_qcow2(char *dst_path, char *src_path)$/;"	f
write_reject_request	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_reject_request(peer_request const& r)$/;"	f	class:libtorrent::bt_peer_connection
write_request	torrent/bak/connection_tester.cpp	/^	bool write_request()$/;"	f	struct:peer_conn
write_request	torrent/include/libtorrent/extensions.hpp	/^		virtual bool write_request(peer_request const&) { return false; }$/;"	f	struct:libtorrent::peer_plugin
write_request	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_request(peer_request const& r)$/;"	f	class:libtorrent::bt_peer_connection
write_request	torrent/src/http_seed_connection.cpp	/^	void http_seed_connection::write_request(peer_request const& r)$/;"	f	class:libtorrent::http_seed_connection
write_request	torrent/src/web_peer_connection.cpp	/^void web_peer_connection::write_request(peer_request const& r)$/;"	f	class:libtorrent::web_peer_connection
write_resume_data	torrent/src/torrent.cpp	/^	void torrent::write_resume_data(add_torrent_params& ret) const$/;"	f	class:libtorrent::torrent
write_resume_data	torrent/src/torrent_handle.cpp	/^	entry torrent_handle::write_resume_data() const$/;"	f	class:libtorrent::torrent_handle
write_resume_data	torrent/src/write_resume_data.cpp	/^	entry write_resume_data(add_torrent_params const& atp)$/;"	f	namespace:libtorrent
write_resume_data_buf	torrent/src/write_resume_data.cpp	/^	std::vector<char> write_resume_data_buf(add_torrent_params const& atp)$/;"	f	namespace:libtorrent
write_sack	torrent/src/utp_stream.cpp	/^void utp_socket_impl::write_sack(std::uint8_t* buf, int const size) const$/;"	f	class:libtorrent::utp_socket_impl
write_sector	include/gpt.h	/^    int (*write_sector)(void* hd, uint64_t lba, uint8_t* buffer);$/;"	m	struct:_DiskDriver
write_sector	src/gpt.c	/^int write_sector(int fd, char *buf, int count)$/;"	f
write_share_mode	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_share_mode()$/;"	f	class:libtorrent::bt_peer_connection
write_some	torrent/include/libtorrent/aux_/socket_type.hpp	/^		std::size_t write_some(Const_Buffers const& buffers, error_code& ec)$/;"	f	struct:libtorrent::aux::socket_type
write_some	torrent/include/libtorrent/proxy_base.hpp	/^	std::size_t write_some(Const_Buffers const& buffers)$/;"	f	class:libtorrent::proxy_base
write_some	torrent/include/libtorrent/proxy_base.hpp	/^	std::size_t write_some(Const_Buffers const& buffers, error_code& ec)$/;"	f	class:libtorrent::proxy_base
write_some	torrent/include/libtorrent/ssl_stream.hpp	/^	std::size_t write_some(Const_Buffers const& buffers, error_code& ec)$/;"	f	class:libtorrent::ssl_stream
write_some	torrent/include/libtorrent/utp_stream.hpp	/^	std::size_t write_some(Const_Buffers const& \/* buffers *\/, error_code& \/* ec *\/)$/;"	f	struct:libtorrent::utp_stream
write_some	torrent/include/libtorrent/utp_stream.hpp	/^	std::size_t write_some(Const_Buffers const& buffers)$/;"	f	struct:libtorrent::utp_stream
write_state	torrent/include/libtorrent/peer_info.hpp	/^		bandwidth_state_flags_t write_state;$/;"	m	struct:libtorrent::peer_info
write_string	torrent/include/libtorrent/aux_/io.hpp	/^	inline int write_string(std::string const& str, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_string	torrent/include/libtorrent/io.hpp	/^		inline int write_string(std::string const& str, char*& start)$/;"	f	namespace:libtorrent::detail
write_string	torrent/include/libtorrent/io.hpp	/^		int write_string(std::string const& val, OutIt& out)$/;"	f	namespace:libtorrent::detail
write_suggest	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_suggest(piece_index_t const piece)$/;"	f	class:libtorrent::bt_peer_connection
write_token_size	torrent/kademlia/node.cpp	/^constexpr int write_token_size = 4;$/;"	m	namespace:libtorrent::dht::__anon147	file:
write_uint16	torrent/include/libtorrent/aux_/io.hpp	/^	void write_uint16(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_uint16	torrent/include/libtorrent/io.hpp	/^		void write_uint16(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_uint32	torrent/include/libtorrent/aux_/io.hpp	/^	void write_uint32(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_uint32	torrent/include/libtorrent/io.hpp	/^		void write_uint32(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_uint64	torrent/include/libtorrent/aux_/io.hpp	/^	void write_uint64(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_uint64	torrent/include/libtorrent/io.hpp	/^		void write_uint64(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_uint8	torrent/include/libtorrent/aux_/io.hpp	/^	void write_uint8(T val, span<Byte>& view)$/;"	f	namespace:libtorrent::aux
write_uint8	torrent/include/libtorrent/io.hpp	/^		void write_uint8(T val, OutIt& start)$/;"	f	namespace:libtorrent::detail
write_unchoke	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_unchoke()$/;"	f	class:libtorrent::bt_peer_connection
write_upload_only	torrent/src/bt_peer_connection.cpp	/^	void bt_peer_connection::write_upload_only(bool const enabled)$/;"	f	class:libtorrent::bt_peer_connection
writebyte	torrent/bak/udp_tracker.cpp	/^	void writebyte(BYTE btValue)$/;"	f	class:CDataStream
writedata	torrent/bak/udp_tracker.cpp	/^	void writedata(BYTE * pData,DWORD dwLen)$/;"	f	class:CDataStream
writedword	torrent/bak/udp_tracker.cpp	/^	void writedword(DWORD dwValue)$/;"	f	class:CDataStream
writeint64	torrent/bak/udp_tracker.cpp	/^	void writeint64(__int64 iValue)$/;"	f	class:CDataStream
writes	torrent/include/libtorrent/disk_io_thread.hpp	/^		int writes;$/;"	m	struct:libtorrent::cache_status
writev	torrent/src/file.cpp	/^	std::int64_t file::writev(std::int64_t file_offset, span<iovec_t const> bufs$/;"	f	class:libtorrent::file
writev	torrent/src/part_file.cpp	/^	int part_file::writev(span<iovec_t const> bufs, piece_index_t const piece$/;"	f	class:libtorrent::part_file
writev	torrent/src/storage.cpp	/^	int default_storage::writev(span<iovec_t const> bufs$/;"	f	class:libtorrent::default_storage
writeword	torrent/bak/udp_tracker.cpp	/^	void writeword(WORD wValue)$/;"	f	class:CDataStream
writing	torrent/include/libtorrent/piece_picker.hpp	/^			std::uint16_t writing:15;$/;"	m	struct:libtorrent::piece_picker::downloading_piece
writing	torrent/include/libtorrent/torrent_handle.hpp	/^			writing,$/;"	e	enum:libtorrent::block_info::block_state_t
writing	torrent/include/libtorrent/torrent_handle.hpp	/^		int writing;$/;"	m	struct:libtorrent::partial_piece_info
x	torrent/include/libtorrent/pe_crypto.hpp	/^		int x;$/;"	m	struct:libtorrent::rc4
xalloc_oversized	virt-p2v/include/gnulib/xalloc-oversized.h	45;"	d
xalloc_oversized	virt-p2v/include/gnulib/xalloc-oversized.h	48;"	d
xalloc_oversized	virt-p2v/include/gnulib/xalloc-oversized.h	57;"	d
xml_attribute	torrent/include/libtorrent/xml_parse.hpp	/^		xml_attribute,$/;"	e	enum:libtorrent::__anon27
xml_comment	torrent/include/libtorrent/xml_parse.hpp	/^		xml_comment,$/;"	e	enum:libtorrent::__anon27
xml_declaration_tag	torrent/include/libtorrent/xml_parse.hpp	/^		xml_declaration_tag,$/;"	e	enum:libtorrent::__anon27
xml_empty_tag	torrent/include/libtorrent/xml_parse.hpp	/^		xml_empty_tag,$/;"	e	enum:libtorrent::__anon27
xml_end_tag	torrent/include/libtorrent/xml_parse.hpp	/^		xml_end_tag,$/;"	e	enum:libtorrent::__anon27
xml_error	virt-p2v/src/physical-xml.c	44;"	d	file:
xml_parse	torrent/src/xml_parse.cpp	/^	void xml_parse(string_view input$/;"	f	namespace:libtorrent
xml_parse_error	torrent/include/libtorrent/xml_parse.hpp	/^		xml_parse_error,$/;"	e	enum:libtorrent::__anon27
xml_start_tag	torrent/include/libtorrent/xml_parse.hpp	/^		xml_start_tag,$/;"	e	enum:libtorrent::__anon27
xml_string	torrent/include/libtorrent/xml_parse.hpp	/^		xml_string,$/;"	e	enum:libtorrent::__anon27
xml_tag_content	torrent/include/libtorrent/xml_parse.hpp	/^		xml_tag_content$/;"	e	enum:libtorrent::__anon27
xterm_button_clicked	virt-p2v/src/gui.c	/^xterm_button_clicked (GtkWidget *w, gpointer data)$/;"	f	file:
xy2d	torrent/ed25519/ge.h	/^  fe xy2d;$/;"	m	struct:__anon140
y	torrent/include/libtorrent/pe_crypto.hpp	/^		int y;$/;"	m	struct:libtorrent::rc4
yminusx	torrent/ed25519/ge.h	/^  fe yminusx;$/;"	m	struct:__anon140
yplusx	torrent/ed25519/ge.h	/^  fe yplusx;$/;"	m	struct:__anon140
yzy_CompareGuid	src/StoreConfig.c	/^int yzy_CompareGuid(PYZYGUID guid1, PYZYGUID guid2)$/;"	f
yzy_cmd	include/packet.h	/^typedef enum yzy_cmd$/;"	g
yzy_cmd	include/packet.h	/^}yzy_cmd;$/;"	t	typeref:enum:yzy_cmd
yzy_cmd	test/test.c	/^typedef enum yzy_cmd$/;"	g	file:
yzy_cmd	test/test.c	/^}yzy_cmd;$/;"	t	typeref:enum:yzy_cmd	file:
yzy_file_read	src/StoreConfig.c	/^static int yzy_file_read(void *hd, uint64_t offset_lba, uint8_t * buf, uint64_t buf_len)$/;"	f	file:
yzy_file_t	include/StoreConfig.h	12;"	d
yzy_file_write	src/StoreConfig.c	/^static int  yzy_file_write(void *hd, uint64_t offset_lba, uint8_t * buf, uint64_t buf_len)$/;"	f	file:
yzy_offsetof	src/StoreConfig.c	20;"	d	file:
yzy_packet	include/packet.h	/^struct yzy_packet{$/;"	s
yzy_packet	include/packet.h	/^typedef struct yzy_packet yzy_packet;$/;"	t	typeref:struct:yzy_packet
yzy_torrent	include/packet.h	/^struct yzy_torrent{$/;"	s
yzy_torrent	include/packet.h	/^typedef struct yzy_torrent yzy_torrent;$/;"	t	typeref:struct:yzy_torrent
yzy_torrent	test/test.c	/^struct yzy_torrent{$/;"	s	file:
zasprintf	src/linux.c	/^static char *zasprintf(const char *format, ...)$/;"	f	file:
zero	torrent/include/libtorrent/ip_filter.hpp	/^	Addr zero()$/;"	f	namespace:libtorrent::detail
zero	torrent/include/libtorrent/ip_filter.hpp	/^	inline std::uint16_t zero<std::uint16_t>() { return 0; }$/;"	f	namespace:libtorrent::detail
zero_or	torrent/src/torrent.cpp	/^		int zero_or(int const val, int const def_val)$/;"	f	namespace:libtorrent::__anon113
zero_storage	torrent/src/storage.cpp	/^			explicit zero_storage(file_storage const& fs) : storage_interface(fs) {}$/;"	f	struct:libtorrent::__anon68::final
zero_storage_constructor	torrent/src/storage.cpp	/^	storage_interface* zero_storage_constructor(storage_params const& params, file_pool&)$/;"	f	namespace:libtorrent
~CDataStream	torrent/bak/udp_tracker.cpp	/^	~CDataStream()$/;"	f	class:CDataStream
~CUDPTrackerClient	torrent/bak/udp_tracker.cpp	/^CUDPTrackerClient::~CUDPTrackerClient()$/;"	f	class:CUDPTrackerClient
~ConfigWindow	qt_pro/configwindow.cpp	/^ConfigWindow::~ConfigWindow()$/;"	f	class:ConfigWindow
~DialogWindow	qt_pro/dialogwindow.cpp	/^DialogWindow::~DialogWindow()$/;"	f	class:DialogWindow
~Global	qt_pro/global.cpp	/^Global::~Global()$/;"	f	class:Global
~GlobalApplication	qt_pro/globalapplication.cpp	/^GlobalApplication::~GlobalApplication()$/;"	f	class:GlobalApplication
~MainWindow	qt_pro/mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~OSWindow	qt_pro/oswindow.cpp	/^OSWindow::~OSWindow()$/;"	f	class:OSWindow
~Uploadwindow	qt_pro/uploadwindow.cpp	/^Uploadwindow::~Uploadwindow()$/;"	f	class:Uploadwindow
~alloca_destructor	torrent/include/libtorrent/aux_/alloca.hpp	/^	~alloca_destructor()$/;"	f	struct:libtorrent::aux::alloca_destructor
~bandwidth_socket	torrent/include/libtorrent/bandwidth_socket.hpp	/^		virtual ~bandwidth_socket() {}$/;"	f	struct:libtorrent::bandwidth_socket
~block_cache	torrent/src/block_cache.cpp	/^block_cache::~block_cache()$/;"	f	class:libtorrent::block_cache
~broadcast_socket	torrent/include/libtorrent/broadcast_socket.hpp	/^		~broadcast_socket() { close(); }$/;"	f	class:libtorrent::broadcast_socket
~btTracker	torrent/bak/tracker.cpp	/^btTracker::~btTracker()$/;"	f	class:btTracker
~buffer	torrent/include/libtorrent/buffer.hpp	/^	~buffer() { std::free(m_begin); }$/;"	f	class:libtorrent::buffer
~cached_piece_entry	torrent/src/block_cache.cpp	/^cached_piece_entry::~cached_piece_entry()$/;"	f	class:libtorrent::cached_piece_entry
~chained_buffer	torrent/src/chained_buffer.cpp	/^	chained_buffer::~chained_buffer()$/;"	f	class:libtorrent::chained_buffer
~check_postcondition	torrent/src/peer_connection.cpp	/^		~check_postcondition() { check(); }$/;"	f	struct:libtorrent::check_postcondition
~cork	torrent/include/libtorrent/peer_connection.hpp	/^		~cork()$/;"	f	struct:libtorrent::cork
~crypt_hash	torrent/include/libtorrent/aux_/win_crypto_provider.hpp	/^		~crypt_hash() { CryptDestroyHash(m_hash); }$/;"	f	struct:libtorrent::aux::crypt_hash
~crypto_plugin	torrent/include/libtorrent/extensions.hpp	/^		virtual ~crypto_plugin() {}$/;"	f	struct:libtorrent::crypto_plugin
~default_storage	torrent/src/storage.cpp	/^	default_storage::~default_storage()$/;"	f	class:libtorrent::default_storage
~dev_random	torrent/include/libtorrent/aux_/dev_random.hpp	/^		~dev_random() { close(m_fd); }$/;"	f	struct:libtorrent::aux::dev_random
~dht_storage_interface	torrent/include/libtorrent/kademlia/dht_storage.hpp	/^		virtual ~dht_storage_interface() {}$/;"	f	struct:libtorrent::dht::dht_storage_interface
~directory	torrent/src/file.cpp	/^	directory::~directory()$/;"	f	class:libtorrent::directory
~disk_aborter	torrent/src/create_torrent.cpp	/^		~disk_aborter() { m_dio.abort(true); }$/;"	f	struct:libtorrent::__anon135::disk_aborter
~disk_buffer_holder	torrent/src/disk_buffer_holder.cpp	/^	disk_buffer_holder::~disk_buffer_holder() { reset(); }$/;"	f	class:libtorrent::disk_buffer_holder
~disk_buffer_pool	torrent/src/disk_buffer_pool.cpp	/^	disk_buffer_pool::~disk_buffer_pool()$/;"	f	class:libtorrent::disk_buffer_pool
~disk_interface	torrent/include/libtorrent/disk_interface.hpp	/^		~disk_interface() {}$/;"	f	struct:libtorrent::disk_interface
~disk_io_thread	torrent/src/disk_io_thread.cpp	/^	disk_io_thread::~disk_io_thread()$/;"	f	class:disk_io_thread
~disk_io_thread_pool	torrent/src/disk_io_thread_pool.cpp	/^	disk_io_thread_pool::~disk_io_thread_pool()$/;"	f	class:libtorrent::disk_io_thread_pool
~disk_job_fence	torrent/include/libtorrent/aux_/disk_job_fence.hpp	/^		~disk_job_fence()$/;"	f	struct:libtorrent::aux::disk_job_fence
~disk_job_pool	torrent/src/disk_job_pool.cpp	/^	disk_job_pool::~disk_job_pool()$/;"	f	class:libtorrent::disk_job_pool
~disk_observer	torrent/include/libtorrent/disk_observer.hpp	/^		~disk_observer() {}$/;"	f	struct:libtorrent::disk_observer
~entry	torrent/src/entry.cpp	/^	entry::~entry() { destruct(); }$/;"	f	class:libtorrent::entry
~error_handler_interface	torrent/include/libtorrent/aux_/allocating_handler.hpp	/^		~error_handler_interface() {}$/;"	f	struct:libtorrent::aux::error_handler_interface
~file	torrent/src/file.cpp	/^	file::~file()$/;"	f	class:libtorrent::file
~hasher	torrent/src/hasher.cpp	/^	hasher::~hasher()$/;"	f	class:libtorrent::hasher
~hasher512	torrent/src/hasher512.cpp	/^	hasher512::~hasher512()$/;"	f	class:libtorrent::hasher512
~heterogeneous_queue	torrent/include/libtorrent/heterogeneous_queue.hpp	/^		~heterogeneous_queue() { clear(); }$/;"	f	struct:libtorrent::heterogeneous_queue
~i2p_stream	torrent/src/i2p_stream.cpp	/^	i2p_stream::~i2p_stream()$/;"	f	class:libtorrent::i2p_stream
~increment_guard	torrent/include/libtorrent/debug.hpp	/^		~increment_guard() { --m_cnt; TORRENT_ASSERT(m_cnt >= 0); }$/;"	f	struct:libtorrent::increment_guard
~internal_file_entry	torrent/src/file_storage.cpp	/^	internal_file_entry::~internal_file_entry()$/;"	f	class:libtorrent::internal_file_entry
~invariant_checker_impl	torrent/include/libtorrent/invariant_check.hpp	/^		~invariant_checker_impl()$/;"	f	struct:libtorrent::invariant_checker_impl
~ip_change_notifier	torrent/include/libtorrent/aux_/ip_notifier.hpp	/^		virtual ~ip_change_notifier() {}$/;"	f	struct:libtorrent::aux::ip_change_notifier
~lazy_entry	torrent/include/libtorrent/lazy_entry.hpp	/^		~lazy_entry()$/;"	f	struct:libtorrent::lazy_entry
~lsd_callback	torrent/include/libtorrent/aux_/lsd.hpp	/^		~lsd_callback() {}$/;"	f	struct:libtorrent::aux::lsd_callback
~observer	torrent/kademlia/rpc_manager.cpp	/^observer::~observer()$/;"	f	class:libtorrent::dht::observer
~openssl_cleanup	torrent/src/session_impl.cpp	/^		~openssl_cleanup() { CRYPTO_cleanup_all_ex_data(); }$/;"	f	struct:__anon45::openssl_cleanup
~overlapped_t	torrent/src/file.cpp	/^		~overlapped_t()$/;"	f	struct:libtorrent::overlapped_t
~part_file	torrent/src/part_file.cpp	/^	part_file::~part_file()$/;"	f	class:libtorrent::part_file
~peer_connection	torrent/src/peer_connection.cpp	/^	peer_connection::~peer_connection()$/;"	f	class:libtorrent::peer_connection
~peer_connection_interface	torrent/include/libtorrent/peer_connection_interface.hpp	/^		~peer_connection_interface() {}$/;"	f	struct:libtorrent::peer_connection_interface
~peer_list	torrent/src/peer_list.cpp	/^	peer_list::~peer_list()$/;"	f	class:libtorrent::peer_list
~peer_plugin	torrent/include/libtorrent/extensions.hpp	/^		virtual ~peer_plugin() {}$/;"	f	struct:libtorrent::peer_plugin
~piece_refcount	torrent/src/torrent.cpp	/^		~piece_refcount()$/;"	f	struct:libtorrent::piece_refcount
~piece_refcount_holder	torrent/src/disk_io_thread.cpp	/^		~piece_refcount_holder()$/;"	f	struct:libtorrent::__anon122::piece_refcount_holder
~plugin	torrent/include/libtorrent/extensions.hpp	/^		virtual ~plugin() {}$/;"	f	struct:libtorrent::plugin
~pool_thread_interface	torrent/include/libtorrent/disk_io_thread_pool.hpp	/^		virtual ~pool_thread_interface() {}$/;"	f	struct:libtorrent::pool_thread_interface
~portmap_callback	torrent/include/libtorrent/aux_/portmap.hpp	/^		~portmap_callback() {}$/;"	f	struct:libtorrent::aux::portmap_callback
~request_callback	torrent/include/libtorrent/tracker_manager.hpp	/^		virtual ~request_callback() {}$/;"	f	struct:libtorrent::request_callback
~resolver_interface	torrent/include/libtorrent/resolver_interface.hpp	/^	~resolver_interface() {}$/;"	f	struct:libtorrent::resolver_interface
~rootdevice	torrent/src/upnp.cpp	/^upnp::rootdevice::~rootdevice()$/;"	f	class:libtorrent::upnp::rootdevice
~rpc_manager	torrent/kademlia/rpc_manager.cpp	/^rpc_manager::~rpc_manager()$/;"	f	class:libtorrent::dht::rpc_manager
~scope_end_impl	torrent/include/libtorrent/aux_/scope_end.hpp	/^		~scope_end_impl() { if (m_armed) m_fun(); }$/;"	f	struct:libtorrent::aux::scope_end_impl
~scoped_unlocker_impl	torrent/src/disk_io_thread.cpp	/^		~scoped_unlocker_impl() { if (m_lock) m_lock->lock(); }$/;"	f	struct:libtorrent::__anon122::scoped_unlocker_impl
~session	torrent/src/session.cpp	/^	session::~session()$/;"	f	class:libtorrent::session
~session_impl	torrent/src/session_impl.cpp	/^	session_impl::~session_impl()$/;"	f	class:libtorrent::aux::session_impl
~session_interface	torrent/include/libtorrent/aux_/session_interface.hpp	/^		virtual ~session_interface() {}$/;"	f	struct:libtorrent::aux::session_interface
~session_logger	torrent/include/libtorrent/aux_/session_interface.hpp	/^		~session_logger() {}$/;"	f	struct:libtorrent::aux::session_logger
~session_proxy	torrent/src/session.cpp	/^	session_proxy::~session_proxy()$/;"	f	class:libtorrent::session_proxy
~set_dont_frag	torrent/src/udp_socket.cpp	/^	~set_dont_frag()$/;"	f	struct:libtorrent::set_dont_frag
~single_threaded	torrent/include/libtorrent/debug.hpp	/^		~single_threaded() { m_id = std::thread::id(); }$/;"	f	struct:libtorrent::single_threaded
~socket_type	torrent/src/socket_type.cpp	/^	socket_type::~socket_type()$/;"	f	class:libtorrent::aux::socket_type
~storage_holder	torrent/include/libtorrent/disk_interface.hpp	/^		~storage_holder()$/;"	f	struct:libtorrent::storage_holder
~storage_interface	torrent/include/libtorrent/storage.hpp	/^		virtual ~storage_interface() {}$/;"	f	struct:libtorrent::storage_interface
~string_ptr	torrent/include/libtorrent/aux_/string_ptr.hpp	/^		~string_ptr()$/;"	f	struct:libtorrent::aux::string_ptr
~timeout_handler	torrent/src/tracker_manager.cpp	/^	timeout_handler::~timeout_handler()$/;"	f	class:libtorrent::timeout_handler
~torrent	torrent/src/torrent.cpp	/^	torrent::~torrent()$/;"	f	class:libtorrent::torrent
~torrent_peer	torrent/include/libtorrent/torrent_peer.hpp	/^		~torrent_peer() { TORRENT_ASSERT(in_use); in_use = false; }$/;"	f	struct:libtorrent::torrent_peer
~torrent_peer_allocator	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		~torrent_peer_allocator() {$/;"	f	struct:libtorrent::final
~torrent_peer_allocator_interface	torrent/include/libtorrent/torrent_peer_allocator.hpp	/^		~torrent_peer_allocator_interface() {}$/;"	f	struct:libtorrent::torrent_peer_allocator_interface
~torrent_plugin	torrent/include/libtorrent/extensions.hpp	/^		virtual ~torrent_plugin() {}$/;"	f	struct:libtorrent::torrent_plugin
~tracker_manager	torrent/src/tracker_manager.cpp	/^	tracker_manager::~tracker_manager()$/;"	f	class:libtorrent::tracker_manager
~traversal_algorithm	torrent/kademlia/traversal_algorithm.cpp	/^traversal_algorithm::~traversal_algorithm()$/;"	f	class:libtorrent::dht::traversal_algorithm
~ut_pex_peer_store	torrent/include/libtorrent/bt_peer_connection.hpp	/^		virtual ~ut_pex_peer_store() {}$/;"	f	struct:libtorrent::ut_pex_peer_store
~utp_logger	torrent/src/utp_stream.cpp	/^	~utp_logger()$/;"	f	struct:libtorrent::utp_logger
~utp_socket_impl	torrent/src/utp_stream.cpp	/^utp_socket_impl::~utp_socket_impl()$/;"	f	class:libtorrent::utp_socket_impl
~utp_socket_manager	torrent/src/utp_socket_manager.cpp	/^	utp_socket_manager::~utp_socket_manager()$/;"	f	class:libtorrent::utp_socket_manager
~utp_stream	torrent/src/utp_stream.cpp	/^utp_stream::~utp_stream()$/;"	f	class:libtorrent::utp_stream
~work_thread_t	torrent/include/libtorrent/aux_/session_impl.hpp	/^				~work_thread_t()$/;"	f	struct:libtorrent::aux::final::work_thread_t
